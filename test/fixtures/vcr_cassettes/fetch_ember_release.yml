---
http_interactions:
- request:
    method: get
    uri: http://builds.emberjs.com/release/ember.js
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - ! '*/*'
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      X-Amz-Id-2:
      - xwjYbWRmOtTgjyQUSWaXuVUW391l4Ou0apXwACFiXdwZajrXjXJL8783ThRTzXZg
      X-Amz-Request-Id:
      - 5D5C9D2D3C4F6DA7
      Date:
      - Thu, 31 Oct 2013 20:27:29 GMT
      Last-Modified:
      - Fri, 25 Oct 2013 20:17:10 GMT
      Etag:
      - ! '"361d9070cb86013a50a0f48f472f82ce"'
      Content-Type:
      - text/javascript
      Content-Length:
      - '1040400'
      Server:
      - AmazonS3
    body:
      encoding: UTF-8
      string: ! " // Version: 1.1.2\n\n(function() {\n/*global __fail__*/\n\n/**\nEmber
        Debug\n\n@module ember\n@submodule ember-debug\n*/\n\n/**\n@class Ember\n*/\n\nif
        ('undefined' === typeof Ember) {\n  Ember = {};\n\n  if ('undefined' !== typeof
        window) {\n    window.Em = window.Ember = Em = Ember;\n  }\n}\n\nEmber.ENV
        = 'undefined' === typeof ENV ? {} : ENV;\n\nif (!('MANDATORY_SETTER' in Ember.ENV))
        {\n  Ember.ENV.MANDATORY_SETTER = true; // default to true for debug dist\n}\n\n/**\n
        \ Define an assertion that will throw an exception if the condition is not\n
        \ met. Ember build tools will remove any calls to `Ember.assert()` when\n
        \ doing a production build. Example:\n\n  ```javascript\n  // Test for truthiness\n
        \ Ember.assert('Must pass a valid object', obj);\n  // Fail unconditionally\n
        \ Ember.assert('This code path should never be run')\n  ```\n\n  @method assert\n
        \ @param {String} desc A description of the assertion. This will become\n
        \   the text of the Error thrown if the assertion fails.\n  @param {Boolean}
        test Must be truthy for the assertion to pass. If\n    falsy, an exception
        will be thrown.\n*/\nEmber.assert = function(desc, test) {\n  if (!test) {\n
        \   Ember.Logger.assert(test, desc);\n  }\n\n  if (Ember.testing && !test)
        {\n    // when testing, ensure test failures when assertions fail\n    throw
        new Ember.Error(\"Assertion Failed: \" + desc);\n  }\n};\n\n\n/**\n  Display
        a warning with the provided message. Ember build tools will\n  remove any
        calls to `Ember.warn()` when doing a production build.\n\n  @method warn\n
        \ @param {String} message A warning to display.\n  @param {Boolean} test An
        optional boolean. If falsy, the warning\n    will be displayed.\n*/\nEmber.warn
        = function(message, test) {\n  if (!test) {\n    Ember.Logger.warn(\"WARNING:
        \"+message);\n    if ('trace' in Ember.Logger) Ember.Logger.trace();\n  }\n};\n\n/**\n
        \ Display a debug notice. Ember build tools will remove any calls to\n  `Ember.debug()`
        when doing a production build.\n\n  ```javascript\n  Ember.debug(\"I'm a debug
        notice!\");\n  ```\n\n  @method debug\n  @param {String} message A debug message
        to display.\n*/\nEmber.debug = function(message) {\n  Ember.Logger.debug(\"DEBUG:
        \"+message);\n};\n\n/**\n  Display a deprecation warning with the provided
        message and a stack trace\n  (Chrome and Firefox only). Ember build tools
        will remove any calls to\n  `Ember.deprecate()` when doing a production build.\n\n
        \ @method deprecate\n  @param {String} message A description of the deprecation.\n
        \ @param {Boolean} test An optional boolean. If falsy, the deprecation\n    will
        be displayed.\n*/\nEmber.deprecate = function(message, test) {\n  if (Ember.TESTING_DEPRECATION)
        { return; }\n\n  if (arguments.length === 1) { test = false; }\n  if (test)
        { return; }\n\n  if (Ember.ENV.RAISE_ON_DEPRECATION) { throw new Ember.Error(message);
        }\n\n  var error;\n\n  // When using new Error, we can't do the arguments
        check for Chrome. Alternatives are welcome\n  try { __fail__.fail(); } catch
        (e) { error = e; }\n\n  if (Ember.LOG_STACKTRACE_ON_DEPRECATION && error.stack)
        {\n    var stack, stackStr = '';\n    if (error['arguments']) {\n      //
        Chrome\n      stack = error.stack.replace(/^\\s+at\\s+/gm, '').\n                          replace(/^([^\\(]+?)([\\n$])/gm,
        '{anonymous}($1)$2').\n                          replace(/^Object.<anonymous>\\s*\\(([^\\)]+)\\)/gm,
        '{anonymous}($1)').split('\\n');\n      stack.shift();\n    } else {\n      //
        Firefox\n      stack = error.stack.replace(/(?:\\n@:0)?\\s+$/m, '').\n                          replace(/^\\(/gm,
        '{anonymous}(').split('\\n');\n    }\n\n    stackStr = \"\\n    \" + stack.slice(2).join(\"\\n
        \   \");\n    message = message + stackStr;\n  }\n\n  Ember.Logger.warn(\"DEPRECATION:
        \"+message);\n};\n\n\n\n/**\n  Alias an old, deprecated method with its new
        counterpart.\n\n  Display a deprecation warning with the provided message
        and a stack trace\n  (Chrome and Firefox only) when the assigned method is
        called.\n\n  Ember build tools will not remove calls to `Ember.deprecateFunc()`,
        though\n  no warnings will be shown in production.\n\n  ```javascript\n  Ember.oldMethod
        = Ember.deprecateFunc(\"Please use the new, updated method\", Ember.newMethod);\n
        \ ```\n\n  @method deprecateFunc\n  @param {String} message A description
        of the deprecation.\n  @param {Function} func The new function called to replace
        its deprecated counterpart.\n  @return {Function} a new function that wrapped
        the original function with a deprecation warning\n*/\nEmber.deprecateFunc
        = function(message, func) {\n  return function() {\n    Ember.deprecate(message);\n
        \   return func.apply(this, arguments);\n  };\n};\n\n\n// Inform the developer
        about the Ember Inspector if not installed.\nif (!Ember.testing) {\n  if (typeof
        window !== 'undefined' && window.chrome && window.addEventListener) {\n    window.addEventListener(\"load\",
        function() {\n      if (document.body && document.body.dataset && !document.body.dataset.emberExtension)
        {\n        Ember.debug('For more advanced debugging, install the Ember Inspector
        from https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi');\n
        \     }\n    }, false);\n  }\n}\n\n})();\n\n // Version: 1.1.2\n\n(function()
        {\nvar define, requireModule;\n\n(function() {\n  var registry = {}, seen
        = {};\n\n  define = function(name, deps, callback) {\n    registry[name] =
        { deps: deps, callback: callback };\n  };\n\n  requireModule = function(name)
        {\n    if (seen[name]) { return seen[name]; }\n    seen[name] = {};\n\n    var
        mod, deps, callback, reified, exports;\n\n    mod = registry[name];\n\n    if
        (!mod) {\n      throw new Error(\"Module '\" + name + \"' not found.\");\n
        \   }\n\n    deps = mod.deps;\n    callback = mod.callback;\n    reified =
        [];\n\n    for (var i=0, l=deps.length; i<l; i++) {\n      if (deps[i] ===
        'exports') {\n        reified.push(exports = {});\n      } else {\n        reified.push(requireModule(deps[i]));\n
        \     }\n    }\n\n    var value = callback.apply(this, reified);\n    return
        seen[name] = exports || value;\n  };\n})();\n(function() {\n/*globals Em:true
        ENV */\n\n/**\n@module ember\n@submodule ember-metal\n*/\n\n/**\n  All Ember
        methods and functions are defined inside of this namespace. You\n  generally
        should not add new properties to this namespace as it may be\n  overwritten
        by future versions of Ember.\n\n  You can also use the shorthand `Em` instead
        of `Ember`.\n\n  Ember-Runtime is a framework that provides core functions
        for Ember including\n  cross-platform functions, support for property observing
        and objects. Its\n  focus is on small size and performance. You can use this
        in place of or\n  along-side other cross-platform libraries such as jQuery.\n\n
        \ The core Runtime framework is based on the jQuery API with a number of\n
        \ performance optimizations.\n\n  @class Ember\n  @static\n  @version 1.1.2\n*/\n\nif
        ('undefined' === typeof Ember) {\n  // Create core object. Make it act like
        an instance of Ember.Namespace so that\n  // objects assigned to it are given
        a sane string representation.\n  Ember = {};\n}\n\n// Default imports, exports
        and lookup to the global object;\nvar imports = Ember.imports = Ember.imports
        || this;\nvar exports = Ember.exports = Ember.exports || this;\nvar lookup
        \ = Ember.lookup  = Ember.lookup  || this;\n\n// aliases needed to keep minifiers
        from removing the global context\nexports.Em = exports.Ember = Em = Ember;\n\n//
        Make sure these are set whether Ember was already defined or not\n\nEmber.isNamespace
        = true;\n\nEmber.toString = function() { return \"Ember\"; };\n\n\n/**\n  @property
        VERSION\n  @type String\n  @default '1.1.2'\n  @final\n*/\nEmber.VERSION =
        '1.1.2';\n\n/**\n  Standard environmental variables. You can define these
        in a global `ENV`\n  variable before loading Ember to control various configuration\n
        \ settings.\n\n  @property ENV\n  @type Hash\n*/\n\nif ('undefined' === typeof
        ENV) {\n  exports.ENV = {};\n}\n\n// We disable the RANGE API by default for
        performance reasons\nif ('undefined' === typeof ENV.DISABLE_RANGE_API) {\n
        \ ENV.DISABLE_RANGE_API = true;\n}\n\n\nEmber.ENV = Ember.ENV || ENV;\n\nEmber.config
        = Ember.config || {};\n\n/**\n  Hash of enabled Canary features. Add to before
        creating your application.\n\n  @property FEATURES\n  @type Hash\n*/\n\nEmber.FEATURES
        = {};\n\n/**\n  Test that a feature is enabled. Parsed by Ember's build tools
        to leave\n  experimental features out of beta/stable builds.\n\n  @method
        isEnabled\n  @param {string} feature\n*/\n\nEmber.FEATURES.isEnabled = function(feature)
        {\n  return Ember.FEATURES[feature];\n};\n\n// ..........................................................\n//
        BOOTSTRAP\n//\n\n/**\n  Determines whether Ember should enhances some built-in
        object prototypes to\n  provide a more friendly API. If enabled, a few methods
        will be added to\n  `Function`, `String`, and `Array`. `Object.prototype`
        will not be enhanced,\n  which is the one that causes most trouble for people.\n\n
        \ In general we recommend leaving this option set to true since it rarely\n
        \ conflicts with other code. If you need to turn it off however, you can\n
        \ define an `ENV.EXTEND_PROTOTYPES` config to disable it.\n\n  @property EXTEND_PROTOTYPES\n
        \ @type Boolean\n  @default true\n*/\nEmber.EXTEND_PROTOTYPES = Ember.ENV.EXTEND_PROTOTYPES;\n\nif
        (typeof Ember.EXTEND_PROTOTYPES === 'undefined') {\n  Ember.EXTEND_PROTOTYPES
        = true;\n}\n\n/**\n  Determines whether Ember logs a full stack trace during
        deprecation warnings\n\n  @property LOG_STACKTRACE_ON_DEPRECATION\n  @type
        Boolean\n  @default true\n*/\nEmber.LOG_STACKTRACE_ON_DEPRECATION = (Ember.ENV.LOG_STACKTRACE_ON_DEPRECATION
        !== false);\n\n/**\n  Determines whether Ember should add ECMAScript 5 shims
        to older browsers.\n\n  @property SHIM_ES5\n  @type Boolean\n  @default Ember.EXTEND_PROTOTYPES\n*/\nEmber.SHIM_ES5
        = (Ember.ENV.SHIM_ES5 === false) ? false : Ember.EXTEND_PROTOTYPES;\n\n/**\n
        \ Determines whether Ember logs info about version of used libraries\n\n  @property
        LOG_VERSION\n  @type Boolean\n  @default true\n*/\nEmber.LOG_VERSION = (Ember.ENV.LOG_VERSION
        === false) ? false : true;\n\n/**\n  Empty function. Useful for some operations.
        Always returns `this`.\n\n  @method K\n  @private\n  @return {Object}\n*/\nEmber.K
        = function() { return this; };\n\n\n// Stub out the methods defined by the
        ember-debug package in case it's not loaded\n\nif ('undefined' === typeof
        Ember.assert) { Ember.assert = Ember.K; }\nif ('undefined' === typeof Ember.warn)
        { Ember.warn = Ember.K; }\nif ('undefined' === typeof Ember.debug) { Ember.debug
        = Ember.K; }\nif ('undefined' === typeof Ember.deprecate) { Ember.deprecate
        = Ember.K; }\nif ('undefined' === typeof Ember.deprecateFunc) {\n  Ember.deprecateFunc
        = function(_, func) { return func; };\n}\n\n/**\n  Previously we used `Ember.$.uuid`,
        however `$.uuid` has been removed from\n  jQuery master. We'll just bootstrap
        our own uuid now.\n\n  @property uuid\n  @type Number\n  @private\n*/\nEmber.uuid
        = 0;\n\n// ..........................................................\n//
        LOGGER\n//\n\nfunction consoleMethod(name) {\n  var consoleObj;\n  if (imports.console)
        {\n    consoleObj = imports.console;\n  } else if (typeof console !== 'undefined')
        {\n    consoleObj = console;\n  }\n\n  var method = typeof consoleObj ===
        'object' ? consoleObj[name] : null;\n\n  if (method) {\n    // Older IE doesn't
        support apply, but Chrome needs it\n    if (method.apply) {\n      return
        function() {\n        method.apply(consoleObj, arguments);\n      };\n    }
        else {\n      return function() {\n        var message = Array.prototype.join.call(arguments,
        ', ');\n        method(message);\n      };\n    }\n  }\n}\n\nfunction assertPolyfill(test,
        message) {\n  if (!test) {\n    try {\n      // attempt to preserve the stack\n
        \     throw new Error(\"assertion failed: \" + message);\n    } catch(error)
        {\n      setTimeout(function() {\n        throw error;\n      }, 0);\n    }\n
        \ }\n}\n\n/**\n  Inside Ember-Metal, simply uses the methods from `imports.console`.\n
        \ Override this to provide more robust logging functionality.\n\n  @class
        Logger\n  @namespace Ember\n*/\nEmber.Logger = {\n  /**\n   Logs the arguments
        to the console.\n   You can pass as many arguments as you want and they will
        be joined together with a space.\n\n    ```javascript\n    var foo = 1;\n
        \   Ember.Logger.log('log value of foo:', foo); // \"log value of foo: 1\"
        will be printed to the console\n    ```\n\n   @method log\n   @for Ember.Logger\n
        \  @param {*} arguments\n  */\n  log:   consoleMethod('log')   || Ember.K,\n
        \ /**\n   Prints the arguments to the console with a warning icon.\n   You
        can pass as many arguments as you want and they will be joined together with
        a space.\n\n    ```javascript\n    Ember.Logger.warn('Something happened!');
        // \"Something happened!\" will be printed to the console with a warning icon.\n
        \   ```\n\n   @method warn\n   @for Ember.Logger\n   @param {*} arguments\n
        \ */\n  warn:  consoleMethod('warn')  || Ember.K,\n  /**\n   Prints the arguments
        to the console with an error icon, red text and a stack race.\n   You can
        pass as many arguments as you want and they will be joined together with a
        space.\n\n    ```javascript\n    Ember.Logger.error('Danger! Danger!'); //
        \"Danger! Danger!\" will be printed to the console in red text.\n    ```\n\n
        \  @method error\n   @for Ember.Logger\n   @param {*} arguments\n  */\n  error:
        consoleMethod('error') || Ember.K,\n  /**\n   Logs the arguments to the console.\n
        \  You can pass as many arguments as you want and they will be joined together
        with a space.\n\n    ```javascript\n    var foo = 1;\n    Ember.Logger.info('log
        value of foo:', foo); // \"log value of foo: 1\" will be printed to the console\n
        \   ```\n\n   @method info\n   @for Ember.Logger\n   @param {*} arguments\n
        \ */\n  info:  consoleMethod('info')  || Ember.K,\n  /**\n   Logs the arguments
        to the console in blue text.\n   You can pass as many arguments as you want
        and they will be joined together with a space.\n\n    ```javascript\n    var
        foo = 1;\n    Ember.Logger.debug('log value of foo:', foo); // \"log value
        of foo: 1\" will be printed to the console\n    ```\n\n   @method debug\n
        \  @for Ember.Logger\n   @param {*} arguments\n  */\n  debug: consoleMethod('debug')
        || consoleMethod('info') || Ember.K,\n  /**\n\n   If the value passed into
        Ember.Logger.assert is not truthy it will throw an error with a stack trace.\n\n
        \   ```javascript\n    Ember.Logger.assert(true); // undefined\n    Ember.Logger.assert(true
        === false); // Throws an Assertion failed error.\n    ```\n\n   @method assert\n
        \  @for Ember.Logger\n   @param {Boolean} bool Value to test\n  */\n  assert:
        consoleMethod('assert') || assertPolyfill\n};\n\n\n// ..........................................................\n//
        ERROR HANDLING\n//\n\n/**\n  A function may be assigned to `Ember.onerror`
        to be called when Ember\n  internals encounter an error. This is useful for
        specialized error handling\n  and reporting code.\n\n  ```javascript\n  Ember.onerror
        = function(error) {\n    Em.$.ajax('/report-error', 'POST', {\n      stack:
        error.stack,\n      otherInformation: 'whatever app state you want to provide'\n
        \   });\n  };\n  ```\n\n  @event onerror\n  @for Ember\n  @param {Exception}
        error the error object\n*/\nEmber.onerror = null;\n\n/**\n  @private\n\n  Wrap
        code block in a try/catch if `Ember.onerror` is set.\n\n  @method handleErrors\n
        \ @for Ember\n  @param {Function} func\n  @param [context]\n*/\nEmber.handleErrors
        = function(func, context) {\n  // Unfortunately in some browsers we lose the
        backtrace if we rethrow the existing error,\n  // so in the event that we
        don't have an `onerror` handler we don't wrap in a try/catch\n  if ('function'
        === typeof Ember.onerror) {\n    try {\n      return func.call(context ||
        this);\n    } catch (error) {\n      Ember.onerror(error);\n    }\n  } else
        {\n    return func.call(context || this);\n  }\n};\n\n/**\n  Merge the contents
        of two objects together into the first object.\n\n  ```javascript\n  Ember.merge({first:
        'Tom'}, {last: 'Dale'}); // {first: 'Tom', last: 'Dale'}\n  var a = {first:
        'Yehuda'}, b = {last: 'Katz'};\n  Ember.merge(a, b); // a == {first: 'Yehuda',
        last: 'Katz'}, b == {last: 'Katz'}\n  ```\n\n  @method merge\n  @for Ember\n
        \ @param {Object} original The object to merge into\n  @param {Object} updates
        The object to copy properties from\n  @return {Object}\n*/\nEmber.merge =
        function(original, updates) {\n  for (var prop in updates) {\n    if (!updates.hasOwnProperty(prop))
        { continue; }\n    original[prop] = updates[prop];\n  }\n  return original;\n};\n\n/**\n
        \ Returns true if the passed value is null or undefined. This avoids errors\n
        \ from JSLint complaining about use of ==, which can be technically\n  confusing.\n\n
        \ ```javascript\n  Ember.isNone();              // true\n  Ember.isNone(null);
        \         // true\n  Ember.isNone(undefined);     // true\n  Ember.isNone('');
        \           // false\n  Ember.isNone([]);            // false\n  Ember.isNone(function()
        {});  // false\n  ```\n\n  @method isNone\n  @for Ember\n  @param {Object}
        obj Value to test\n  @return {Boolean}\n*/\nEmber.isNone = function(obj) {\n
        \ return obj === null || obj === undefined;\n};\nEmber.none = Ember.deprecateFunc(\"Ember.none
        is deprecated. Please use Ember.isNone instead.\", Ember.isNone);\n\n/**\n
        \ Verifies that a value is `null` or an empty string, empty array,\n  or empty
        function.\n\n  Constrains the rules on `Ember.isNone` by returning false for
        empty\n  string and empty arrays.\n\n  ```javascript\n  Ember.isEmpty();                //
        true\n  Ember.isEmpty(null);            // true\n  Ember.isEmpty(undefined);
        \      // true\n  Ember.isEmpty('');              // true\n  Ember.isEmpty([]);
        \             // true\n  Ember.isEmpty('Adam Hawkins');  // false\n  Ember.isEmpty([0,1,2]);
        \        // false\n  ```\n\n  @method isEmpty\n  @for Ember\n  @param {Object}
        obj Value to test\n  @return {Boolean}\n*/\nEmber.isEmpty = function(obj)
        {\n  return Ember.isNone(obj) || (obj.length === 0 && typeof obj !== 'function')
        || (typeof obj === 'object' && Ember.get(obj, 'length') === 0);\n};\nEmber.empty
        = Ember.deprecateFunc(\"Ember.empty is deprecated. Please use Ember.isEmpty
        instead.\", Ember.isEmpty) ;\n\n\n})();\n\n\n\n(function() {\n/*globals Node
        */\n/**\n@module ember-metal\n*/\n\n/**\n  Platform specific methods and feature
        detectors needed by the framework.\n\n  @class platform\n  @namespace Ember\n
        \ @static\n*/\nvar platform = Ember.platform = {};\n\n\n/**\n  Identical to
        `Object.create()`. Implements if not available natively.\n\n  @method create\n
        \ @for Ember\n*/\nEmber.create = Object.create;\n\n// IE8 has Object.create
        but it couldn't treat property descripters.\nif (Ember.create) {\n  if (Ember.create({a:
        1}, {a: {value: 2}}).a !== 2) {\n    Ember.create = null;\n  }\n}\n\n// STUB_OBJECT_CREATE
        allows us to override other libraries that stub\n// Object.create different
        than we would prefer\nif (!Ember.create || Ember.ENV.STUB_OBJECT_CREATE) {\n
        \ var K = function() {};\n\n  Ember.create = function(obj, props) {\n    K.prototype
        = obj;\n    obj = new K();\n    if (props) {\n      K.prototype = obj;\n      for
        (var prop in props) {\n        K.prototype[prop] = props[prop].value;\n      }\n
        \     obj = new K();\n    }\n    K.prototype = null;\n\n    return obj;\n
        \ };\n\n  Ember.create.isSimulated = true;\n}\n\nvar defineProperty = Object.defineProperty;\nvar
        canRedefineProperties, canDefinePropertyOnDOM;\n\n// Catch IE8 where Object.defineProperty
        exists but only works on DOM elements\nif (defineProperty) {\n  try {\n    defineProperty({},
        'a',{get:function() {}});\n  } catch (e) {\n    defineProperty = null;\n  }\n}\n\nif
        (defineProperty) {\n  // Detects a bug in Android <3.2 where you cannot redefine
        a property using\n  // Object.defineProperty once accessors have already been
        set.\n  canRedefineProperties = (function() {\n    var obj = {};\n\n    defineProperty(obj,
        'a', {\n      configurable: true,\n      enumerable: true,\n      get: function()
        { },\n      set: function() { }\n    });\n\n    defineProperty(obj, 'a', {\n
        \     configurable: true,\n      enumerable: true,\n      writable: true,\n
        \     value: true\n    });\n\n    return obj.a === true;\n  })();\n\n  //
        This is for Safari 5.0, which supports Object.defineProperty, but not\n  //
        on DOM nodes.\n  canDefinePropertyOnDOM = (function() {\n    try {\n      defineProperty(document.createElement('div'),
        'definePropertyOnDOM', {});\n      return true;\n    } catch(e) { }\n\n    return
        false;\n  })();\n\n  if (!canRedefineProperties) {\n    defineProperty = null;\n
        \ } else if (!canDefinePropertyOnDOM) {\n    defineProperty = function(obj,
        keyName, desc) {\n      var isNode;\n\n      if (typeof Node === \"object\")
        {\n        isNode = obj instanceof Node;\n      } else {\n        isNode =
        typeof obj === \"object\" && typeof obj.nodeType === \"number\" && typeof
        obj.nodeName === \"string\";\n      }\n\n      if (isNode) {\n        // TODO:
        Should we have a warning here?\n        return (obj[keyName] = desc.value);\n
        \     } else {\n        return Object.defineProperty(obj, keyName, desc);\n
        \     }\n    };\n  }\n}\n\n/**\n@class platform\n@namespace Ember\n*/\n\n/**\n
        \ Identical to `Object.defineProperty()`. Implements as much functionality\n
        \ as possible if not available natively.\n\n  @method defineProperty\n  @param
        {Object} obj The object to modify\n  @param {String} keyName property name
        to modify\n  @param {Object} desc descriptor hash\n  @return {void}\n*/\nplatform.defineProperty
        = defineProperty;\n\n/**\n  Set to true if the platform supports native getters
        and setters.\n\n  @property hasPropertyAccessors\n  @final\n*/\nplatform.hasPropertyAccessors
        = true;\n\nif (!platform.defineProperty) {\n  platform.hasPropertyAccessors
        = false;\n\n  platform.defineProperty = function(obj, keyName, desc) {\n    if
        (!desc.get) { obj[keyName] = desc.value; }\n  };\n\n  platform.defineProperty.isSimulated
        = true;\n}\n\nif (Ember.ENV.MANDATORY_SETTER && !platform.hasPropertyAccessors)
        {\n  Ember.ENV.MANDATORY_SETTER = false;\n}\n\n})();\n\n\n\n(function() {\n/*jshint
        newcap:false*/\n/**\n@module ember-metal\n*/\n\n// NOTE: There is a bug in
        jshint that doesn't recognize `Object()` without `new`\n// as being ok unless
        both `newcap:false` and not `use strict`.\n// https://github.com/jshint/jshint/issues/392\n\n//
        Testing this is not ideal, but we want to use native functions\n// if available,
        but not to use versions created by libraries like Prototype\nvar isNativeFunc
        = function(func) {\n  // This should probably work in all browsers likely
        to have ES5 array methods\n  return func && Function.prototype.toString.call(func).indexOf('[native
        code]') > -1;\n};\n\n// From: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/map\nvar
        arrayMap = isNativeFunc(Array.prototype.map) ? Array.prototype.map : function(fun
        /*, thisp */) {\n  //\"use strict\";\n\n  if (this === void 0 || this ===
        null) {\n    throw new TypeError();\n  }\n\n  var t = Object(this);\n  var
        len = t.length >>> 0;\n  if (typeof fun !== \"function\") {\n    throw new
        TypeError();\n  }\n\n  var res = new Array(len);\n  var thisp = arguments[1];\n
        \ for (var i = 0; i < len; i++) {\n    if (i in t) {\n      res[i] = fun.call(thisp,
        t[i], i, t);\n    }\n  }\n\n  return res;\n};\n\n// From: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/foreach\nvar
        arrayForEach = isNativeFunc(Array.prototype.forEach) ? Array.prototype.forEach
        : function(fun /*, thisp */) {\n  //\"use strict\";\n\n  if (this === void
        0 || this === null) {\n    throw new TypeError();\n  }\n\n  var t = Object(this);\n
        \ var len = t.length >>> 0;\n  if (typeof fun !== \"function\") {\n    throw
        new TypeError();\n  }\n\n  var thisp = arguments[1];\n  for (var i = 0; i
        < len; i++) {\n    if (i in t) {\n      fun.call(thisp, t[i], i, t);\n    }\n
        \ }\n};\n\nvar arrayIndexOf = isNativeFunc(Array.prototype.indexOf) ? Array.prototype.indexOf
        : function (obj, fromIndex) {\n  if (fromIndex === null || fromIndex === undefined)
        { fromIndex = 0; }\n  else if (fromIndex < 0) { fromIndex = Math.max(0, this.length
        + fromIndex); }\n  for (var i = fromIndex, j = this.length; i < j; i++) {\n
        \   if (this[i] === obj) { return i; }\n  }\n  return -1;\n};\n\n/**\n  Array
        polyfills to support ES5 features in older browsers.\n\n  @namespace Ember\n
        \ @property ArrayPolyfills\n*/\nEmber.ArrayPolyfills = {\n  map: arrayMap,\n
        \ forEach: arrayForEach,\n  indexOf: arrayIndexOf\n};\n\nif (Ember.SHIM_ES5)
        {\n  if (!Array.prototype.map) {\n    Array.prototype.map = arrayMap;\n  }\n\n
        \ if (!Array.prototype.forEach) {\n    Array.prototype.forEach = arrayForEach;\n
        \ }\n\n  if (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = arrayIndexOf;\n
        \ }\n}\n\n})();\n\n\n\n(function() {\n/**\n@module ember-metal\n*/\n\n\nvar
        o_defineProperty = Ember.platform.defineProperty,\n    o_create = Ember.create,\n
        \   // Used for guid generation...\n    GUID_KEY = '__ember'+ (+ new Date()),\n
        \   uuid         = 0,\n    numberCache  = [],\n    stringCache  = {};\n\nvar
        MANDATORY_SETTER = Ember.ENV.MANDATORY_SETTER;\n\n/**\n  @private\n\n  A unique
        key used to assign guids and other private metadata to objects.\n  If you
        inspect an object in your browser debugger you will often see these.\n  They
        can be safely ignored.\n\n  On browsers that support it, these properties
        are added with enumeration\n  disabled so they won't show up when you iterate
        over your properties.\n\n  @property GUID_KEY\n  @for Ember\n  @type String\n
        \ @final\n*/\nEmber.GUID_KEY = GUID_KEY;\n\nvar GUID_DESC = {\n  writable:
        \   false,\n  configurable: false,\n  enumerable:  false,\n  value: null\n};\n\n/**\n
        \ @private\n\n  Generates a new guid, optionally saving the guid to the object
        that you\n  pass in. You will rarely need to use this method. Instead you
        should\n  call `Ember.guidFor(obj)`, which return an existing guid if available.\n\n
        \ @method generateGuid\n  @for Ember\n  @param {Object} [obj] Object the guid
        will be used for. If passed in, the guid will\n    be saved on the object
        and reused whenever you pass the same object\n    again.\n\n    If no object
        is passed, just generate a new guid.\n  @param {String} [prefix] Prefix to
        place in front of the guid. Useful when you want to\n    separate the guid
        into separate namespaces.\n  @return {String} the guid\n*/\nEmber.generateGuid
        = function generateGuid(obj, prefix) {\n  if (!prefix) prefix = 'ember';\n
        \ var ret = (prefix + (uuid++));\n  if (obj) {\n    GUID_DESC.value = ret;\n
        \   o_defineProperty(obj, GUID_KEY, GUID_DESC);\n  }\n  return ret ;\n};\n\n/**\n
        \ @private\n\n  Returns a unique id for the object. If the object does not
        yet have a guid,\n  one will be assigned to it. You can call this on any object,\n
        \ `Ember.Object`-based or not, but be aware that it will add a `_guid`\n  property.\n\n
        \ You can also use this method on DOM Element objects.\n\n  @method guidFor\n
        \ @for Ember\n  @param {Object} obj any object, string, number, Element, or
        primitive\n  @return {String} the unique guid for this instance.\n*/\nEmber.guidFor
        = function guidFor(obj) {\n\n  // special cases where we don't want to add
        a key to object\n  if (obj === undefined) return \"(undefined)\";\n  if (obj
        === null) return \"(null)\";\n\n  var ret;\n  var type = typeof obj;\n\n  //
        Don't allow prototype changes to String etc. to change the guidFor\n  switch(type)
        {\n    case 'number':\n      ret = numberCache[obj];\n      if (!ret) ret
        = numberCache[obj] = 'nu'+obj;\n      return ret;\n\n    case 'string':\n
        \     ret = stringCache[obj];\n      if (!ret) ret = stringCache[obj] = 'st'+(uuid++);\n
        \     return ret;\n\n    case 'boolean':\n      return obj ? '(true)' : '(false)';\n\n
        \   default:\n      if (obj[GUID_KEY]) return obj[GUID_KEY];\n      if (obj
        === Object) return '(Object)';\n      if (obj === Array)  return '(Array)';\n
        \     ret = 'ember'+(uuid++);\n      GUID_DESC.value = ret;\n      o_defineProperty(obj,
        GUID_KEY, GUID_DESC);\n      return ret;\n  }\n};\n\n// ..........................................................\n//
        META\n//\n\nvar META_DESC = {\n  writable:    true,\n  configurable: false,\n
        \ enumerable:  false,\n  value: null\n};\n\nvar META_KEY = Ember.GUID_KEY+'_meta';\n\n/**\n
        \ The key used to store meta information on object for property observing.\n\n
        \ @property META_KEY\n  @for Ember\n  @private\n  @final\n  @type String\n*/\nEmber.META_KEY
        = META_KEY;\n\n// Placeholder for non-writable metas.\nvar EMPTY_META = {\n
        \ descs: {},\n  watching: {}\n};\n\nif (MANDATORY_SETTER) { EMPTY_META.values
        = {}; }\n\nEmber.EMPTY_META = EMPTY_META;\n\nif (Object.freeze) Object.freeze(EMPTY_META);\n\nvar
        isDefinePropertySimulated = Ember.platform.defineProperty.isSimulated;\n\nfunction
        Meta(obj) {\n  this.descs = {};\n  this.watching = {};\n  this.cache = {};\n
        \ this.source = obj;\n}\n\nif (isDefinePropertySimulated) {\n  // on platforms
        that don't support enumerable false\n  // make meta fail jQuery.isPlainObject()
        to hide from\n  // jQuery.extend() by having a property that fails\n  // hasOwnProperty
        check.\n  Meta.prototype.__preventPlainObject__ = true;\n\n  // Without non-enumerable
        properties, meta objects will be output in JSON\n  // unless explicitly suppressed\n
        \ Meta.prototype.toJSON = function () { };\n}\n\n/**\n  Retrieves the meta
        hash for an object. If `writable` is true ensures the\n  hash is writable
        for this object as well.\n\n  The meta object contains information about computed
        property descriptors as\n  well as any watched properties and other information.
        You generally will\n  not access this information directly but instead work
        with higher level\n  methods that manipulate this hash indirectly.\n\n  @method
        meta\n  @for Ember\n  @private\n\n  @param {Object} obj The object to retrieve
        meta for\n  @param {Boolean} [writable=true] Pass `false` if you do not intend
        to modify\n    the meta hash, allowing the method to avoid making an unnecessary
        copy.\n  @return {Object} the meta hash for an object\n*/\nEmber.meta = function
        meta(obj, writable) {\n\n  var ret = obj[META_KEY];\n  if (writable===false)
        return ret || EMPTY_META;\n\n  if (!ret) {\n    if (!isDefinePropertySimulated)
        o_defineProperty(obj, META_KEY, META_DESC);\n\n    ret = new Meta(obj);\n\n
        \   if (MANDATORY_SETTER) { ret.values = {}; }\n\n    obj[META_KEY] = ret;\n\n
        \   // make sure we don't accidentally try to create constructor like desc\n
        \   ret.descs.constructor = null;\n\n  } else if (ret.source !== obj) {\n
        \   if (!isDefinePropertySimulated) o_defineProperty(obj, META_KEY, META_DESC);\n\n
        \   ret = o_create(ret);\n    ret.descs    = o_create(ret.descs);\n    ret.watching
        = o_create(ret.watching);\n    ret.cache    = {};\n    ret.source   = obj;\n\n
        \   if (MANDATORY_SETTER) { ret.values = o_create(ret.values); }\n\n    obj[META_KEY]
        = ret;\n  }\n  return ret;\n};\n\nEmber.getMeta = function getMeta(obj, property)
        {\n  var meta = Ember.meta(obj, false);\n  return meta[property];\n};\n\nEmber.setMeta
        = function setMeta(obj, property, value) {\n  var meta = Ember.meta(obj, true);\n
        \ meta[property] = value;\n  return value;\n};\n\n/**\n  @deprecated\n  @private\n\n
        \ In order to store defaults for a class, a prototype may need to create\n
        \ a default meta object, which will be inherited by any objects instantiated\n
        \ from the class's constructor.\n\n  However, the properties of that meta
        object are only shallow-cloned,\n  so if a property is a hash (like the event
        system's `listeners` hash),\n  it will by default be shared across all instances
        of that class.\n\n  This method allows extensions to deeply clone a series
        of nested hashes or\n  other complex objects. For instance, the event system
        might pass\n  `['listeners', 'foo:change', 'ember157']` to `prepareMetaPath`,
        which will\n  walk down the keys provided.\n\n  For each key, if the key does
        not exist, it is created. If it already\n  exists and it was inherited from
        its constructor, the constructor's\n  key is cloned.\n\n  You can also pass
        false for `writable`, which will simply return\n  undefined if `prepareMetaPath`
        discovers any part of the path that\n  shared or undefined.\n\n  @method metaPath\n
        \ @for Ember\n  @param {Object} obj The object whose meta we are examining\n
        \ @param {Array} path An array of keys to walk down\n  @param {Boolean} writable
        whether or not to create a new meta\n    (or meta property) if one does not
        already exist or if it's\n    shared with its constructor\n*/\nEmber.metaPath
        = function metaPath(obj, path, writable) {\n  Ember.deprecate(\"Ember.metaPath
        is deprecated and will be removed from future releases.\");\n  var meta =
        Ember.meta(obj, writable), keyName, value;\n\n  for (var i=0, l=path.length;
        i<l; i++) {\n    keyName = path[i];\n    value = meta[keyName];\n\n    if
        (!value) {\n      if (!writable) { return undefined; }\n      value = meta[keyName]
        = { __ember_source__: obj };\n    } else if (value.__ember_source__ !== obj)
        {\n      if (!writable) { return undefined; }\n      value = meta[keyName]
        = o_create(value);\n      value.__ember_source__ = obj;\n    }\n\n    meta
        = value;\n  }\n\n  return value;\n};\n\n/**\n  @private\n\n  Wraps the passed
        function so that `this._super` will point to the superFunc\n  when the function
        is invoked. This is the primitive we use to implement\n  calls to super.\n\n
        \ @method wrap\n  @for Ember\n  @param {Function} func The function to call\n
        \ @param {Function} superFunc The super function.\n  @return {Function} wrapped
        function.\n*/\nEmber.wrap = function(func, superFunc) {\n  function K() {}\n\n
        \ function superWrapper() {\n    var ret, sup = this._super;\n    this._super
        = superFunc || K;\n    ret = func.apply(this, arguments);\n    this._super
        = sup;\n    return ret;\n  }\n\n  superWrapper.wrappedFunction = func;\n  superWrapper.__ember_observes__
        = func.__ember_observes__;\n  superWrapper.__ember_observesBefore__ = func.__ember_observesBefore__;\n
        \ superWrapper.__ember_listens__ = func.__ember_listens__;\n\n  return superWrapper;\n};\n\n/**\n
        \ Returns true if the passed object is an array or Array-like.\n\n  Ember
        Array Protocol:\n\n    - the object has an objectAt property\n    - the object
        is a native Array\n    - the object is an Object, and has a length property\n\n
        \ Unlike `Ember.typeOf` this method returns true even if the passed object
        is\n  not formally array but appears to be array-like (i.e. implements `Ember.Array`)\n\n
        \ ```javascript\n  Ember.isArray();                                            //
        false\n  Ember.isArray([]);                                          // true\n
        \ Ember.isArray( Ember.ArrayProxy.create({ content: [] }) );  // true\n  ```\n\n
        \ @method isArray\n  @for Ember\n  @param {Object} obj The object to test\n
        \ @return {Boolean} true if the passed object is an array or Array-like\n*/\nEmber.isArray
        = function(obj) {\n  if (!obj || obj.setInterval) { return false; }\n  if
        (Array.isArray && Array.isArray(obj)) { return true; }\n  if (Ember.Array
        && Ember.Array.detect(obj)) { return true; }\n  if ((obj.length !== undefined)
        && 'object'===typeof obj) { return true; }\n  return false;\n};\n\n/**\n  Forces
        the passed object to be part of an array. If the object is already\n  an array
        or array-like, returns the object. Otherwise adds the object to\n  an array.
        If obj is `null` or `undefined`, returns an empty array.\n\n  ```javascript\n
        \ Ember.makeArray();                           // []\n  Ember.makeArray(null);
        \                      // []\n  Ember.makeArray(undefined);                  //
        []\n  Ember.makeArray('lindsay');                  // ['lindsay']\n  Ember.makeArray([1,2,42]);
        \                  // [1,2,42]\n\n  var controller = Ember.ArrayProxy.create({
        content: [] });\n  Ember.makeArray(controller) === controller;  // true\n
        \ ```\n\n  @method makeArray\n  @for Ember\n  @param {Object} obj the object\n
        \ @return {Array}\n*/\nEmber.makeArray = function(obj) {\n  if (obj === null
        || obj === undefined) { return []; }\n  return Ember.isArray(obj) ? obj :
        [obj];\n};\n\nfunction canInvoke(obj, methodName) {\n  return !!(obj && typeof
        obj[methodName] === 'function');\n}\n\n/**\n  Checks to see if the `methodName`
        exists on the `obj`.\n\n  ```javascript\n  var foo = {bar: Ember.K, baz: null};\n
        \ Ember.canInvoke(foo, 'bar'); // true\n  Ember.canInvoke(foo, 'baz'); //
        false\n  Ember.canInvoke(foo, 'bat'); // false\n  ```\n\n  @method canInvoke\n
        \ @for Ember\n  @param {Object} obj The object to check for the method\n  @param
        {String} methodName The method name to check for\n  @return {Boolean}\n*/\nEmber.canInvoke
        = canInvoke;\n\n/**\n  Checks to see if the `methodName` exists on the `obj`,\n
        \ and if it does, invokes it with the arguments passed.\n\n  ```javascript\n
        \ var d = new Date('03/15/2013');\n  Ember.tryInvoke(d, 'getTime'); // 1363320000000\n
        \ Ember.tryInvoke(d, 'setFullYear', [2014]); // 1394856000000\n  Ember.tryInvoke(d,
        'noSuchMethod', [2014]); // undefined\n  ```\n\n  @method tryInvoke\n  @for
        Ember\n  @param {Object} obj The object to check for the method\n  @param
        {String} methodName The method name to check for\n  @param {Array} [args]
        The arguments to pass to the method\n  @return {*} the return value of the
        invoked method or undefined if it cannot be invoked\n*/\nEmber.tryInvoke =
        function(obj, methodName, args) {\n  if (canInvoke(obj, methodName)) {\n    return
        obj[methodName].apply(obj, args || []);\n  }\n};\n\n// https://github.com/emberjs/ember.js/pull/1617\nvar
        needsFinallyFix = (function() {\n  var count = 0;\n  try{\n    try { }\n    finally
        {\n      count++;\n      throw new Error('needsFinallyFixTest');\n    }\n
        \ } catch (e) {}\n\n  return count !== 1;\n})();\n\n/**\n  Provides try {
        } finally { } functionality, while working\n  around Safari's double finally
        bug.\n\n  ```javascript\n  var tryable = function() {\n    someResource.lock();\n
        \   runCallback(); // May throw error.\n  };\n  var finalizer = function()
        {\n    someResource.unlock();\n  };\n  Ember.tryFinally(tryable, finalizer);\n
        \ ```\n\n  @method tryFinally\n  @for Ember\n  @param {Function} tryable The
        function to run the try callback\n  @param {Function} finalizer The function
        to run the finally callback\n  @param {Object} [binding] The optional calling
        object. Defaults to 'this'\n  @return {*} The return value is the that of
        the finalizer,\n  unless that value is undefined, in which case it is the
        return value\n  of the tryable\n*/\n\nif (needsFinallyFix) {\n  Ember.tryFinally
        = function(tryable, finalizer, binding) {\n    var result, finalResult, finalError;\n\n
        \   binding = binding || this;\n\n    try {\n      result = tryable.call(binding);\n
        \   } finally {\n      try {\n        finalResult = finalizer.call(binding);\n
        \     } catch (e) {\n        finalError = e;\n      }\n    }\n\n    if (finalError)
        { throw finalError; }\n\n    return (finalResult === undefined) ? result :
        finalResult;\n  };\n} else {\n  Ember.tryFinally = function(tryable, finalizer,
        binding) {\n    var result, finalResult;\n\n    binding = binding || this;\n\n
        \   try {\n      result = tryable.call(binding);\n    } finally {\n      finalResult
        = finalizer.call(binding);\n    }\n\n    return (finalResult === undefined)
        ? result : finalResult;\n  };\n}\n\n/**\n  Provides try { } catch finally
        { } functionality, while working\n  around Safari's double finally bug.\n\n
        \ ```javascript\n  var tryable = function() {\n    for (i=0, l=listeners.length;
        i<l; i++) {\n      listener = listeners[i];\n      beforeValues[i] = listener.before(name,
        time(), payload);\n    }\n\n    return callback.call(binding);\n  };\n\n  var
        catchable = function(e) {\n    payload = payload || {};\n    payload.exception
        = e;\n  };\n\n  var finalizer = function() {\n    for (i=0, l=listeners.length;
        i<l; i++) {\n      listener = listeners[i];\n      listener.after(name, time(),
        payload, beforeValues[i]);\n    }\n  };\n  Ember.tryCatchFinally(tryable,
        catchable, finalizer);\n  ```\n\n  @method tryCatchFinally\n  @for Ember\n
        \ @param {Function} tryable The function to run the try callback\n  @param
        {Function} catchable The function to run the catchable callback\n  @param
        {Function} finalizer The function to run the finally callback\n  @param {Object}
        [binding] The optional calling object. Defaults to 'this'\n  @return {*} The
        return value is the that of the finalizer,\n  unless that value is undefined,
        in which case it is the return value\n  of the tryable.\n*/\nif (needsFinallyFix)
        {\n  Ember.tryCatchFinally = function(tryable, catchable, finalizer, binding)
        {\n    var result, finalResult, finalError;\n\n    binding = binding || this;\n\n
        \   try {\n      result = tryable.call(binding);\n    } catch(error) {\n      result
        = catchable.call(binding, error);\n    } finally {\n      try {\n        finalResult
        = finalizer.call(binding);\n      } catch (e) {\n        finalError = e;\n
        \     }\n    }\n\n    if (finalError) { throw finalError; }\n\n    return
        (finalResult === undefined) ? result : finalResult;\n  };\n} else {\n  Ember.tryCatchFinally
        = function(tryable, catchable, finalizer, binding) {\n    var result, finalResult;\n\n
        \   binding = binding || this;\n\n    try {\n      result = tryable.call(binding);\n
        \   } catch(error) {\n      result = catchable.call(binding, error);\n    }
        finally {\n      finalResult = finalizer.call(binding);\n    }\n\n    return
        (finalResult === undefined) ? result : finalResult;\n  };\n}\n\n// ........................................\n//
        TYPING & ARRAY MESSAGING\n//\n\nvar TYPE_MAP = {};\nvar t = \"Boolean Number
        String Function Array Date RegExp Object\".split(\" \");\nEmber.ArrayPolyfills.forEach.call(t,
        function(name) {\n  TYPE_MAP[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n});\n\nvar
        toString = Object.prototype.toString;\n\n/**\n  Returns a consistent type
        for the passed item.\n\n  Use this instead of the built-in `typeof` to get
        the type of an item.\n  It will return the same result across all browsers
        and includes a bit\n  more detail. Here is what will be returned:\n\n      |
        Return Value  | Meaning                                              |\n      |---------------|------------------------------------------------------|\n
        \     | 'string'      | String primitive                                     |\n
        \     | 'number'      | Number primitive                                     |\n
        \     | 'boolean'     | Boolean primitive                                    |\n
        \     | 'null'        | Null value                                           |\n
        \     | 'undefined'   | Undefined value                                      |\n
        \     | 'function'    | A function                                           |\n
        \     | 'array'       | An instance of Array                                 |\n
        \     | 'class'       | An Ember class (created using Ember.Object.extend())
        |\n      | 'instance'    | An Ember object instance                             |\n
        \     | 'error'       | An instance of the Error object                      |\n
        \     | 'object'      | A JavaScript object not inheriting from Ember.Object
        |\n\n  Examples:\n\n  ```javascript\n  Ember.typeOf();                       //
        'undefined'\n  Ember.typeOf(null);                   // 'null'\n  Ember.typeOf(undefined);
        \             // 'undefined'\n  Ember.typeOf('michael');              // 'string'\n
        \ Ember.typeOf(101);                    // 'number'\n  Ember.typeOf(true);
        \                  // 'boolean'\n  Ember.typeOf(Ember.makeArray);        //
        'function'\n  Ember.typeOf([1,2,90]);               // 'array'\n  Ember.typeOf(Ember.Object.extend());
        \ // 'class'\n  Ember.typeOf(Ember.Object.create());  // 'instance'\n  Ember.typeOf(new
        Error('teamocil'));  // 'error'\n\n  // \"normal\" JavaScript object\n  Ember.typeOf({a:
        'b'});              // 'object'\n  ```\n\n  @method typeOf\n  @for Ember\n
        \ @param {Object} item the item to check\n  @return {String} the type\n*/\nEmber.typeOf
        = function(item) {\n  var ret;\n\n  ret = (item === null || item === undefined)
        ? String(item) : TYPE_MAP[toString.call(item)] || 'object';\n\n  if (ret ===
        'function') {\n    if (Ember.Object && Ember.Object.detect(item)) ret = 'class';\n
        \ } else if (ret === 'object') {\n    if (item instanceof Error) ret = 'error';\n
        \   else if (Ember.Object && item instanceof Ember.Object) ret = 'instance';\n
        \   else ret = 'object';\n  }\n\n  return ret;\n};\n\n})();\n\n\n\n(function()
        {\n// Ember.tryCatchFinally\n\n/**\n  The purpose of the Ember Instrumentation
        module is\n  to provide efficient, general-purpose instrumentation\n  for
        Ember.\n\n  Subscribe to a listener by using `Ember.subscribe`:\n\n  ```javascript\n
        \ Ember.subscribe(\"render\", {\n    before: function(name, timestamp, payload)
        {\n\n    },\n\n    after: function(name, timestamp, payload) {\n\n    }\n
        \ });\n  ```\n\n  If you return a value from the `before` callback, that same\n
        \ value will be passed as a fourth parameter to the `after`\n  callback.\n\n
        \ Instrument a block of code by using `Ember.instrument`:\n\n  ```javascript\n
        \ Ember.instrument(\"render.handlebars\", payload, function() {\n    // rendering
        logic\n  }, binding);\n  ```\n\n  Event names passed to `Ember.instrument`
        are namespaced\n  by periods, from more general to more specific. Subscribers\n
        \ can listen for events by whatever level of granularity they\n  are interested
        in.\n\n  In the above example, the event is `render.handlebars`,\n  and the
        subscriber listened for all events beginning with\n  `render`. It would receive
        callbacks for events named\n  `render`, `render.handlebars`, `render.container`,
        or\n  even `render.handlebars.layout`.\n\n  @class Instrumentation\n  @namespace
        Ember\n  @static\n*/\nEmber.Instrumentation = {};\n\nvar subscribers = [],
        cache = {};\n\nvar populateListeners = function(name) {\n  var listeners =
        [], subscriber;\n\n  for (var i=0, l=subscribers.length; i<l; i++) {\n    subscriber
        = subscribers[i];\n    if (subscriber.regex.test(name)) {\n      listeners.push(subscriber.object);\n
        \   }\n  }\n\n  cache[name] = listeners;\n  return listeners;\n};\n\nvar time
        = (function() {\n  var perf = 'undefined' !== typeof window ? window.performance
        || {} : {};\n  var fn = perf.now || perf.mozNow || perf.webkitNow || perf.msNow
        || perf.oNow;\n  // fn.bind will be available in all the browsers that support
        the advanced window.performance... ;-)\n  return fn ? fn.bind(perf) : function()
        { return +new Date(); };\n})();\n\n/**\n  Notifies event's subscribers, calls
        `before` and `after` hooks.\n\n  @method instrument\n  @namespace Ember.Instrumentation\n\n
        \ @param {String} [name] Namespaced event name.\n  @param {Object} payload\n
        \ @param {Function} callback Function that you're instrumenting.\n  @param
        {Object} binding Context that instrument function is called with.\n*/\nEmber.Instrumentation.instrument
        = function(name, payload, callback, binding) {\n  var listeners = cache[name],
        timeName, ret;\n\n  if (Ember.STRUCTURED_PROFILE) {\n    timeName = name +
        \": \" + payload.object;\n    console.time(timeName);\n  }\n\n  if (!listeners)
        {\n    listeners = populateListeners(name);\n  }\n\n  if (listeners.length
        === 0) {\n    ret = callback.call(binding);\n    if (Ember.STRUCTURED_PROFILE)
        { console.timeEnd(timeName); }\n    return ret;\n  }\n\n  var beforeValues
        = [], listener, i, l;\n\n  function tryable() {\n    for (i=0, l=listeners.length;
        i<l; i++) {\n      listener = listeners[i];\n      beforeValues[i] = listener.before(name,
        time(), payload);\n    }\n\n    return callback.call(binding);\n  }\n\n  function
        catchable(e) {\n    payload = payload || {};\n    payload.exception = e;\n
        \ }\n\n  function finalizer() {\n    for (i=0, l=listeners.length; i<l; i++)
        {\n      listener = listeners[i];\n      listener.after(name, time(), payload,
        beforeValues[i]);\n    }\n\n    if (Ember.STRUCTURED_PROFILE) {\n      console.timeEnd(timeName);\n
        \   }\n  }\n\n  return Ember.tryCatchFinally(tryable, catchable, finalizer);\n};\n\n/**\n
        \ Subscribes to a particular event or instrumented block of code.\n\n  @method
        subscribe\n  @namespace Ember.Instrumentation\n\n  @param {String} [pattern]
        Namespaced event name.\n  @param {Object} [object] Before and After hooks.\n*/\nEmber.Instrumentation.subscribe
        = function(pattern, object) {\n  var paths = pattern.split(\".\"), path, regex
        = [];\n\n  for (var i=0, l=paths.length; i<l; i++) {\n    path = paths[i];\n
        \   if (path === \"*\") {\n      regex.push(\"[^\\\\.]*\");\n    } else {\n
        \     regex.push(path);\n    }\n  }\n\n  regex = regex.join(\"\\\\.\");\n
        \ regex = regex + \"(\\\\..*)?\";\n\n  var subscriber = {\n    pattern: pattern,\n
        \   regex: new RegExp(\"^\" + regex + \"$\"),\n    object: object\n  };\n\n
        \ subscribers.push(subscriber);\n  cache = {};\n\n  return subscriber;\n};\n\n/**\n
        \ Unsubscribes from a particular event or instrumented block of code.\n\n
        \ @method unsubscribe\n  @namespace Ember.Instrumentation\n\n  @param {Object}
        [subscriber]\n*/\nEmber.Instrumentation.unsubscribe = function(subscriber)
        {\n  var index;\n\n  for (var i=0, l=subscribers.length; i<l; i++) {\n    if
        (subscribers[i] === subscriber) {\n      index = i;\n    }\n  }\n\n  subscribers.splice(index,
        1);\n  cache = {};\n};\n\n/**\n  Resets `Ember.Instrumentation` by flushing
        list of subscribers.\n\n  @method reset\n  @namespace Ember.Instrumentation\n*/\nEmber.Instrumentation.reset
        = function() {\n  subscribers = [];\n  cache = {};\n};\n\nEmber.instrument
        = Ember.Instrumentation.instrument;\nEmber.subscribe = Ember.Instrumentation.subscribe;\n})();\n\n\n\n(function()
        {\nvar map, forEach, indexOf, splice;\nmap     = Array.prototype.map     ||
        Ember.ArrayPolyfills.map;\nforEach = Array.prototype.forEach || Ember.ArrayPolyfills.forEach;\nindexOf
        = Array.prototype.indexOf || Ember.ArrayPolyfills.indexOf;\nsplice = Array.prototype.splice;\n\nvar
        utils = Ember.EnumerableUtils = {\n  map: function(obj, callback, thisArg)
        {\n    return obj.map ? obj.map.call(obj, callback, thisArg) : map.call(obj,
        callback, thisArg);\n  },\n\n  forEach: function(obj, callback, thisArg) {\n
        \   return obj.forEach ? obj.forEach.call(obj, callback, thisArg) : forEach.call(obj,
        callback, thisArg);\n  },\n\n  indexOf: function(obj, element, index) {\n
        \   return obj.indexOf ? obj.indexOf.call(obj, element, index) : indexOf.call(obj,
        element, index);\n  },\n\n  indexesOf: function(obj, elements) {\n    return
        elements === undefined ? [] : utils.map(elements, function(item) {\n      return
        utils.indexOf(obj, item);\n    });\n  },\n\n  addObject: function(array, item)
        {\n    var index = utils.indexOf(array, item);\n    if (index === -1) { array.push(item);
        }\n  },\n\n  removeObject: function(array, item) {\n    var index = utils.indexOf(array,
        item);\n    if (index !== -1) { array.splice(index, 1); }\n  },\n\n  _replace:
        function(array, idx, amt, objects) {\n    var args = [].concat(objects), chunk,
        ret = [],\n        // https://code.google.com/p/chromium/issues/detail?id=56588\n
        \       size = 60000, start = idx, ends = amt, count;\n\n    while (args.length)
        {\n      count = ends > size ? size : ends;\n      if (count <= 0) { count
        = 0; }\n\n      chunk = args.splice(0, size);\n      chunk = [start, count].concat(chunk);\n\n
        \     start += size;\n      ends -= count;\n\n      ret = ret.concat(splice.apply(array,
        chunk));\n    }\n    return ret;\n  },\n\n  replace: function(array, idx,
        amt, objects) {\n    if (array.replace) {\n      return array.replace(idx,
        amt, objects);\n    } else {\n      return utils._replace(array, idx, amt,
        objects);\n    }\n  },\n\n  intersection: function(array1, array2) {\n    var
        intersection = [];\n\n    utils.forEach(array1, function(element) {\n      if
        (utils.indexOf(array2, element) >= 0) {\n        intersection.push(element);\n
        \     }\n    });\n\n    return intersection;\n  }\n};\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember-metal\n*/\n\nvar META_KEY = Ember.META_KEY, get;\n\nvar
        MANDATORY_SETTER = Ember.ENV.MANDATORY_SETTER;\n\nvar IS_GLOBAL_PATH = /^([A-Z$]|([0-9][A-Z$])).*[\\.\\*]/;\nvar
        HAS_THIS  = /^this[\\.\\*]/;\nvar FIRST_KEY = /^([^\\.\\*]+)/;\n\n// ..........................................................\n//
        GET AND SET\n//\n// If we are on a platform that supports accessors we can
        use those.\n// Otherwise simulate accessors by looking up the property directly
        on the\n// object.\n\n/**\n  Gets the value of a property on an object. If
        the property is computed,\n  the function will be invoked. If the property
        is not defined but the\n  object implements the `unknownProperty` method then
        that will be invoked.\n\n  If you plan to run on IE8 and older browsers then
        you should use this\n  method anytime you want to retrieve a property on an
        object that you don't\n  know for sure is private. (Properties beginning with
        an underscore '_'\n  are considered private.)\n\n  On all newer browsers,
        you only need to use this method to retrieve\n  properties if the property
        might not be defined on the object and you want\n  to respect the `unknownProperty`
        handler. Otherwise you can ignore this\n  method.\n\n  Note that if the object
        itself is `undefined`, this method will throw\n  an error.\n\n  @method get\n
        \ @for Ember\n  @param {Object} obj The object to retrieve from.\n  @param
        {String} keyName The property key to retrieve\n  @return {Object} the property
        value or `null`.\n*/\nget = function get(obj, keyName) {\n  // Helpers that
        operate with 'this' within an #each\n  if (keyName === '') {\n    return obj;\n
        \ }\n\n  if (!keyName && 'string'===typeof obj) {\n    keyName = obj;\n    obj
        = null;\n  }\n\n  Ember.assert(\"Cannot call get with \"+ keyName +\" key.\",
        !!keyName);\n  Ember.assert(\"Cannot call get with '\"+ keyName +\"' on an
        undefined object.\", obj !== undefined);\n\n  if (obj === null || keyName.indexOf('.')
        !== -1) {\n    return getPath(obj, keyName);\n  }\n\n  var meta = obj[META_KEY],
        desc = meta && meta.descs[keyName], ret;\n  if (desc) {\n    return desc.get(obj,
        keyName);\n  } else {\n    if (MANDATORY_SETTER && meta && meta.watching[keyName]
        > 0) {\n      ret = meta.values[keyName];\n    } else {\n      ret = obj[keyName];\n
        \   }\n\n    if (ret === undefined &&\n        'object' === typeof obj &&
        !(keyName in obj) && 'function' === typeof obj.unknownProperty) {\n      return
        obj.unknownProperty(keyName);\n    }\n\n    return ret;\n  }\n};\n\n// Currently
        used only by Ember Data tests\nif (Ember.config.overrideAccessors) {\n  Ember.get
        = get;\n  Ember.config.overrideAccessors();\n  get = Ember.get;\n}\n\n/**\n
        \ @private\n\n  Normalizes a target/path pair to reflect that actual target/path
        that should\n  be observed, etc. This takes into account passing in global
        property\n  paths (i.e. a path beginning with a captial letter not defined
        on the\n  target) and * separators.\n\n  @method normalizeTuple\n  @for Ember\n
        \ @param {Object} target The current target. May be `null`.\n  @param {String}
        path A path on the target or a global property path.\n  @return {Array} a
        temporary array with the normalized target/path pair.\n*/\nvar normalizeTuple
        = Ember.normalizeTuple = function(target, path) {\n  var hasThis  = HAS_THIS.test(path),\n
        \     isGlobal = !hasThis && IS_GLOBAL_PATH.test(path),\n      key;\n\n  if
        (!target || isGlobal) target = Ember.lookup;\n  if (hasThis) path = path.slice(5);\n\n
        \ if (target === Ember.lookup) {\n    key = path.match(FIRST_KEY)[0];\n    target
        = get(target, key);\n    path   = path.slice(key.length+1);\n  }\n\n  // must
        return some kind of path to be valid else other things will break.\n  if (!path
        || path.length===0) throw new Error('Invalid Path');\n\n  return [ target,
        path ];\n};\n\nvar getPath = Ember._getPath = function(root, path) {\n  var
        hasThis, parts, tuple, idx, len;\n\n  // If there is no root and path is a
        key name, return that\n  // property from the global object.\n  // E.g. get('Ember')
        -> Ember\n  if (root === null && path.indexOf('.') === -1) { return get(Ember.lookup,
        path); }\n\n  // detect complicated paths and normalize them\n  hasThis  =
        HAS_THIS.test(path);\n\n  if (!root || hasThis) {\n    tuple = normalizeTuple(root,
        path);\n    root = tuple[0];\n    path = tuple[1];\n    tuple.length = 0;\n
        \ }\n\n  parts = path.split(\".\");\n  len = parts.length;\n  for (idx = 0;
        root != null && idx < len; idx++) {\n    root = get(root, parts[idx], true);\n
        \   if (root && root.isDestroyed) { return undefined; }\n  }\n  return root;\n};\n\nEmber.getWithDefault
        = function(root, key, defaultValue) {\n  var value = get(root, key);\n\n  if
        (value === undefined) { return defaultValue; }\n  return value;\n};\n\n\nEmber.get
        = get;\nEmber.getPath = Ember.deprecateFunc('getPath is deprecated since get
        now supports paths', Ember.get);\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember-metal\n*/\n\nvar o_create = Ember.create,\n    metaFor = Ember.meta,\n
        \   META_KEY = Ember.META_KEY,\n    a_slice = [].slice,\n    /* listener flags
        */\n    ONCE = 1, SUSPENDED = 2;\n\n/*\n  The event system uses a series of
        nested hashes to store listeners on an\n  object. When a listener is registered,
        or when an event arrives, these\n  hashes are consulted to determine which
        target and action pair to invoke.\n\n  The hashes are stored in the object's
        meta hash, and look like this:\n\n      // Object's meta hash\n      {\n        listeners:
        {       // variable name: `listenerSet`\n          \"foo:changed\": [ // variable
        name: `actions`\n            target, method, flags\n          ]\n        }\n
        \     }\n\n*/\n\nfunction indexOf(array, target, method) {\n  var index =
        -1;\n  for (var i = 0, l = array.length; i < l; i += 3) {\n    if (target
        === array[i] && method === array[i+1]) { index = i; break; }\n  }\n  return
        index;\n}\n\nfunction actionsFor(obj, eventName) {\n  var meta = metaFor(obj,
        true),\n      actions;\n\n  if (!meta.listeners) { meta.listeners = {}; }\n\n
        \ if (!meta.hasOwnProperty('listeners')) {\n    // setup inherited copy of
        the listeners object\n    meta.listeners = o_create(meta.listeners);\n  }\n\n
        \ actions = meta.listeners[eventName];\n\n  // if there are actions, but the
        eventName doesn't exist in our listeners, then copy them from the prototype\n
        \ if (actions && !meta.listeners.hasOwnProperty(eventName)) {\n    actions
        = meta.listeners[eventName] = meta.listeners[eventName].slice();\n  } else
        if (!actions) {\n    actions = meta.listeners[eventName] = [];\n  }\n\n  return
        actions;\n}\n\nfunction actionsUnion(obj, eventName, otherActions) {\n  var
        meta = obj[META_KEY],\n      actions = meta && meta.listeners && meta.listeners[eventName];\n\n
        \ if (!actions) { return; }\n  for (var i = actions.length - 3; i >= 0; i
        -= 3) {\n    var target = actions[i],\n        method = actions[i+1],\n        flags
        = actions[i+2],\n        actionIndex = indexOf(otherActions, target, method);\n\n
        \   if (actionIndex === -1) {\n      otherActions.push(target, method, flags);\n
        \   }\n  }\n}\n\nfunction actionsDiff(obj, eventName, otherActions) {\n  var
        meta = obj[META_KEY],\n      actions = meta && meta.listeners && meta.listeners[eventName],\n
        \     diffActions = [];\n\n  if (!actions) { return; }\n  for (var i = actions.length
        - 3; i >= 0; i -= 3) {\n    var target = actions[i],\n        method = actions[i+1],\n
        \       flags = actions[i+2],\n        actionIndex = indexOf(otherActions,
        target, method);\n\n    if (actionIndex !== -1) { continue; }\n\n    otherActions.push(target,
        method, flags);\n    diffActions.push(target, method, flags);\n  }\n\n  return
        diffActions;\n}\n\n/**\n  Add an event listener\n\n  @method addListener\n
        \ @for Ember\n  @param obj\n  @param {String} eventName\n  @param {Object|Function}
        targetOrMethod A target object or a function\n  @param {Function|String} method
        A function or the name of a function to be called on `target`\n  @param {Boolean}
        once A flag whether a function should only be called once\n*/\nfunction addListener(obj,
        eventName, target, method, once) {\n  Ember.assert(\"You must pass at least
        an object and event name to Ember.addListener\", !!obj && !!eventName);\n\n
        \ if (!method && 'function' === typeof target) {\n    method = target;\n    target
        = null;\n  }\n\n  var actions = actionsFor(obj, eventName),\n      actionIndex
        = indexOf(actions, target, method),\n      flags = 0;\n\n  if (once) flags
        |= ONCE;\n\n  if (actionIndex !== -1) { return; }\n\n  actions.push(target,
        method, flags);\n\n  if ('function' === typeof obj.didAddListener) {\n    obj.didAddListener(eventName,
        target, method);\n  }\n}\n\n/**\n  Remove an event listener\n\n  Arguments
        should match those passed to `Ember.addListener`.\n\n  @method removeListener\n
        \ @for Ember\n  @param obj\n  @param {String} eventName\n  @param {Object|Function}
        targetOrMethod A target object or a function\n  @param {Function|String} method
        A function or the name of a function to be called on `target`\n*/\nfunction
        removeListener(obj, eventName, target, method) {\n  Ember.assert(\"You must
        pass at least an object and event name to Ember.removeListener\", !!obj &&
        !!eventName);\n\n  if (!method && 'function' === typeof target) {\n    method
        = target;\n    target = null;\n  }\n\n  function _removeListener(target, method)
        {\n    var actions = actionsFor(obj, eventName),\n        actionIndex = indexOf(actions,
        target, method);\n\n    // action doesn't exist, give up silently\n    if
        (actionIndex === -1) { return; }\n\n    actions.splice(actionIndex, 3);\n\n
        \   if ('function' === typeof obj.didRemoveListener) {\n      obj.didRemoveListener(eventName,
        target, method);\n    }\n  }\n\n  if (method) {\n    _removeListener(target,
        method);\n  } else {\n    var meta = obj[META_KEY],\n        actions = meta
        && meta.listeners && meta.listeners[eventName];\n\n    if (!actions) { return;
        }\n    for (var i = actions.length - 3; i >= 0; i -= 3) {\n      _removeListener(actions[i],
        actions[i+1]);\n    }\n  }\n}\n\n/**\n  @private\n\n  Suspend listener during
        callback.\n\n  This should only be used by the target of the event listener\n
        \ when it is taking an action that would cause the event, e.g.\n  an object
        might suspend its property change listener while it is\n  setting that property.\n\n
        \ @method suspendListener\n  @for Ember\n  @param obj\n  @param {String} eventName\n
        \ @param {Object|Function} targetOrMethod A target object or a function\n
        \ @param {Function|String} method A function or the name of a function to
        be called on `target`\n  @param {Function} callback\n*/\nfunction suspendListener(obj,
        eventName, target, method, callback) {\n  if (!method && 'function' === typeof
        target) {\n    method = target;\n    target = null;\n  }\n\n  var actions
        = actionsFor(obj, eventName),\n      actionIndex = indexOf(actions, target,
        method);\n\n  if (actionIndex !== -1) {\n    actions[actionIndex+2] |= SUSPENDED;
        // mark the action as suspended\n  }\n\n  function tryable()   { return callback.call(target);
        }\n  function finalizer() { if (actionIndex !== -1) { actions[actionIndex+2]
        &= ~SUSPENDED; } }\n\n  return Ember.tryFinally(tryable, finalizer);\n}\n\n/**\n
        \ @private\n\n  Suspends multiple listeners during a callback.\n\n  \n  @method
        suspendListeners\n  @for Ember\n  @param obj\n  @param {Array} eventName Array
        of event names\n  @param {Object|Function} targetOrMethod A target object
        or a function\n  @param {Function|String} method A function or the name of
        a function to be called on `target`\n  @param {Function} callback\n*/\nfunction
        suspendListeners(obj, eventNames, target, method, callback) {\n  if (!method
        && 'function' === typeof target) {\n    method = target;\n    target = null;\n
        \ }\n\n  var suspendedActions = [],\n      actionsList = [],\n      eventName,
        actions, i, l;\n\n  for (i=0, l=eventNames.length; i<l; i++) {\n    eventName
        = eventNames[i];\n    actions = actionsFor(obj, eventName);\n    var actionIndex
        = indexOf(actions, target, method);\n\n    if (actionIndex !== -1) {\n      actions[actionIndex+2]
        |= SUSPENDED;\n      suspendedActions.push(actionIndex);\n      actionsList.push(actions);\n
        \   }\n  }\n\n  function tryable() { return callback.call(target); }\n\n  function
        finalizer() {\n    for (var i = 0, l = suspendedActions.length; i < l; i++)
        {\n      var actionIndex = suspendedActions[i];\n      actionsList[i][actionIndex+2]
        &= ~SUSPENDED;\n    }\n  }\n\n  return Ember.tryFinally(tryable, finalizer);\n}\n\n/**\n
        \ @private\n\n  Return a list of currently watched events\n\n  @method watchedEvents\n
        \ @for Ember\n  @param obj\n*/\nfunction watchedEvents(obj) {\n  var listeners
        = obj[META_KEY].listeners, ret = [];\n\n  if (listeners) {\n    for(var eventName
        in listeners) {\n      if (listeners[eventName]) { ret.push(eventName); }\n
        \   }\n  }\n  return ret;\n}\n\n/**\n  Send an event. The execution of suspended
        listeners\n  is skipped, and once listeners are removed. A listener without\n
        \ a target is executed on the passed object. If an array of actions\n  is
        not passed, the actions stored on the passed object are invoked.\n  \n  @method
        sendEvent\n  @for Ember\n  @param obj\n  @param {String} eventName\n  @param
        {Array} params Optional parameters for each listener.\n  @param {Array} actions
        Optional array of actions (listeners).\n  @return true\n*/\nfunction sendEvent(obj,
        eventName, params, actions) {\n  // first give object a chance to handle it\n
        \ if (obj !== Ember && 'function' === typeof obj.sendEvent) {\n    obj.sendEvent(eventName,
        params);\n  }\n\n  if (!actions) {\n    var meta = obj[META_KEY];\n    actions
        = meta && meta.listeners && meta.listeners[eventName];\n  }\n\n  if (!actions)
        { return; }\n\n  for (var i = actions.length - 3; i >= 0; i -= 3) { // looping
        in reverse for once listeners\n    var target = actions[i], method = actions[i+1],
        flags = actions[i+2];\n    if (!method) { continue; }\n    if (flags & SUSPENDED)
        { continue; }\n    if (flags & ONCE) { removeListener(obj, eventName, target,
        method); }\n    if (!target) { target = obj; }\n    if ('string' === typeof
        method) { method = target[method]; }\n    if (params) {\n      method.apply(target,
        params);\n    } else {\n      method.call(target);\n    }\n  }\n  return true;\n}\n\n/**\n
        \ @private\n  @method hasListeners\n  @for Ember\n  @param obj\n  @param {String}
        eventName\n*/\nfunction hasListeners(obj, eventName) {\n  var meta = obj[META_KEY],\n
        \     actions = meta && meta.listeners && meta.listeners[eventName];\n\n  return
        !!(actions && actions.length);\n}\n\n/**\n  @private\n  @method listenersFor\n
        \ @for Ember\n  @param obj\n  @param {String} eventName\n*/\nfunction listenersFor(obj,
        eventName) {\n  var ret = [];\n  var meta = obj[META_KEY],\n      actions
        = meta && meta.listeners && meta.listeners[eventName];\n\n  if (!actions)
        { return ret; }\n\n  for (var i = 0, l = actions.length; i < l; i += 3) {\n
        \   var target = actions[i],\n        method = actions[i+1];\n    ret.push([target,
        method]);\n  }\n\n  return ret;\n}\n\n/**\n  Define a property as a function
        that should be executed when\n  a specified event or events are triggered.\n\n
        \     var Job = Ember.Object.extend({\n        logCompleted: Ember.on('completed',
        function(){\n          console.log('Job completed!');\n        })\n      });\n
        \     var job = Job.create();\n      Ember.sendEvent(job, 'completed'); //
        Logs \"Job completed!\"\n\n  @method on\n  @for Ember\n  @param {String} eventNames*\n
        \ @param {Function} func\n  @return func\n*/\nEmber.on = function(){\n  var
        func = a_slice.call(arguments, -1)[0],\n      events = a_slice.call(arguments,
        0, -1);\n  func.__ember_listens__ = events;\n  return func;\n};\n\nEmber.addListener
        = addListener;\nEmber.removeListener = removeListener;\nEmber._suspendListener
        = suspendListener;\nEmber._suspendListeners = suspendListeners;\nEmber.sendEvent
        = sendEvent;\nEmber.hasListeners = hasListeners;\nEmber.watchedEvents = watchedEvents;\nEmber.listenersFor
        = listenersFor;\nEmber.listenersDiff = actionsDiff;\nEmber.listenersUnion
        = actionsUnion;\n\n})();\n\n\n\n(function() {\nvar guidFor = Ember.guidFor,\n
        \   sendEvent = Ember.sendEvent;\n\n/*\n  this.observerSet = {\n    [senderGuid]:
        { // variable name: `keySet`\n      [keyName]: listIndex\n    }\n  },\n  this.observers
        = [\n    {\n      sender: obj,\n      keyName: keyName,\n      eventName:
        eventName,\n      listeners: [\n        [target, method, flags]\n      ]\n
        \   },\n    ...\n  ]\n*/\nvar ObserverSet = Ember._ObserverSet = function()
        {\n  this.clear();\n};\n\nObserverSet.prototype.add = function(sender, keyName,
        eventName) {\n  var observerSet = this.observerSet,\n      observers = this.observers,\n
        \     senderGuid = guidFor(sender),\n      keySet = observerSet[senderGuid],\n
        \     index;\n\n  if (!keySet) {\n    observerSet[senderGuid] = keySet = {};\n
        \ }\n  index = keySet[keyName];\n  if (index === undefined) {\n    index =
        observers.push({\n      sender: sender,\n      keyName: keyName,\n      eventName:
        eventName,\n      listeners: []\n    }) - 1;\n    keySet[keyName] = index;\n
        \ }\n  return observers[index].listeners;\n};\n\nObserverSet.prototype.flush
        = function() {\n  var observers = this.observers, i, len, observer, sender;\n
        \ this.clear();\n  for (i=0, len=observers.length; i < len; ++i) {\n    observer
        = observers[i];\n    sender = observer.sender;\n    if (sender.isDestroying
        || sender.isDestroyed) { continue; }\n    sendEvent(sender, observer.eventName,
        [sender, observer.keyName], observer.listeners);\n  }\n};\n\nObserverSet.prototype.clear
        = function() {\n  this.observerSet = {};\n  this.observers = [];\n};\n})();\n\n\n\n(function()
        {\nvar metaFor = Ember.meta,\n    guidFor = Ember.guidFor,\n    tryFinally
        = Ember.tryFinally,\n    sendEvent = Ember.sendEvent,\n    listenersUnion
        = Ember.listenersUnion,\n    listenersDiff = Ember.listenersDiff,\n    ObserverSet
        = Ember._ObserverSet,\n    beforeObserverSet = new ObserverSet(),\n    observerSet
        = new ObserverSet(),\n    deferred = 0;\n\n// ..........................................................\n//
        PROPERTY CHANGES\n//\n\n/**\n  This function is called just before an object
        property is about to change.\n  It will notify any before observers and prepare
        caches among other things.\n\n  Normally you will not need to call this method
        directly but if for some\n  reason you can't directly watch a property you
        can invoke this method\n  manually along with `Ember.propertyDidChange()`
        which you should call just\n  after the property value changes.\n\n  @method
        propertyWillChange\n  @for Ember\n  @param {Object} obj The object with the
        property that will change\n  @param {String} keyName The property key (or
        path) that will change.\n  @return {void}\n*/\nfunction propertyWillChange(obj,
        keyName) {\n  var m = metaFor(obj, false),\n      watching = m.watching[keyName]
        > 0 || keyName === 'length',\n      proto = m.proto,\n      desc = m.descs[keyName];\n\n
        \ if (!watching) { return; }\n  if (proto === obj) { return; }\n  if (desc
        && desc.willChange) { desc.willChange(obj, keyName); }\n  dependentKeysWillChange(obj,
        keyName, m);\n  chainsWillChange(obj, keyName, m);\n  notifyBeforeObservers(obj,
        keyName);\n}\nEmber.propertyWillChange = propertyWillChange;\n\n/**\n  This
        function is called just after an object property has changed.\n  It will notify
        any observers and clear caches among other things.\n\n  Normally you will
        not need to call this method directly but if for some\n  reason you can't
        directly watch a property you can invoke this method\n  manually along with
        `Ember.propertyWillChange()` which you should call just\n  before the property
        value changes.\n\n  @method propertyDidChange\n  @for Ember\n  @param {Object}
        obj The object with the property that will change\n  @param {String} keyName
        The property key (or path) that will change.\n  @return {void}\n*/\nfunction
        propertyDidChange(obj, keyName) {\n  var m = metaFor(obj, false),\n      watching
        = m.watching[keyName] > 0 || keyName === 'length',\n      proto = m.proto,\n
        \     desc = m.descs[keyName];\n\n  if (proto === obj) { return; }\n\n  //
        shouldn't this mean that we're watching this key?\n  if (desc && desc.didChange)
        { desc.didChange(obj, keyName); }\n  if (!watching && keyName !== 'length')
        { return; }\n\n  dependentKeysDidChange(obj, keyName, m);\n  chainsDidChange(obj,
        keyName, m, false);\n  notifyObservers(obj, keyName);\n}\nEmber.propertyDidChange
        = propertyDidChange;\n\nvar WILL_SEEN, DID_SEEN;\n\n// called whenever a property
        is about to change to clear the cache of any dependent keys (and notify those
        properties of changes, etc...)\nfunction dependentKeysWillChange(obj, depKey,
        meta) {\n  if (obj.isDestroying) { return; }\n\n  var seen = WILL_SEEN, top
        = !seen;\n  if (top) { seen = WILL_SEEN = {}; }\n  iterDeps(propertyWillChange,
        obj, depKey, seen, meta);\n  if (top) { WILL_SEEN = null; }\n}\n\n// called
        whenever a property has just changed to update dependent keys\nfunction dependentKeysDidChange(obj,
        depKey, meta) {\n  if (obj.isDestroying) { return; }\n\n  var seen = DID_SEEN,
        top = !seen;\n  if (top) { seen = DID_SEEN = {}; }\n  iterDeps(propertyDidChange,
        obj, depKey, seen, meta);\n  if (top) { DID_SEEN = null; }\n}\n\nfunction
        iterDeps(method, obj, depKey, seen, meta) {\n  var guid = guidFor(obj);\n
        \ if (!seen[guid]) seen[guid] = {};\n  if (seen[guid][depKey]) return;\n  seen[guid][depKey]
        = true;\n\n  var deps = meta.deps;\n  deps = deps && deps[depKey];\n  if (deps)
        {\n    for(var key in deps) {\n      var desc = meta.descs[key];\n      if
        (desc && desc._suspended === obj) continue;\n      method(obj, key);\n    }\n
        \ }\n}\n\nfunction chainsWillChange(obj, keyName, m) {\n  if (!(m.hasOwnProperty('chainWatchers')
        &&\n        m.chainWatchers[keyName])) {\n    return;\n  }\n\n  var nodes
        = m.chainWatchers[keyName],\n      events = [],\n      i, l;\n\n  for(i =
        0, l = nodes.length; i < l; i++) {\n    nodes[i].willChange(events);\n  }\n\n
        \ for (i = 0, l = events.length; i < l; i += 2) {\n    propertyWillChange(events[i],
        events[i+1]);\n  }\n}\n\nfunction chainsDidChange(obj, keyName, m, suppressEvents)
        {\n  if (!(m.hasOwnProperty('chainWatchers') &&\n        m.chainWatchers[keyName]))
        {\n    return;\n  }\n\n  var nodes = m.chainWatchers[keyName],\n      events
        = suppressEvents ? null : [],\n      i, l;\n\n  for(i = 0, l = nodes.length;
        i < l; i++) {\n    nodes[i].didChange(events);\n  }\n\n  if (suppressEvents)
        {\n    return;\n  }\n\n  for (i = 0, l = events.length; i < l; i += 2) {\n
        \   propertyDidChange(events[i], events[i+1]);\n  }\n}\n\nEmber.overrideChains
        = function(obj, keyName, m) {\n  chainsDidChange(obj, keyName, m, true);\n};\n\n/**\n
        \ @method beginPropertyChanges\n  @chainable\n*/\nfunction beginPropertyChanges()
        {\n  deferred++;\n}\n\nEmber.beginPropertyChanges = beginPropertyChanges;\n\n/**\n
        \ @method endPropertyChanges\n*/\nfunction endPropertyChanges() {\n  deferred--;\n
        \ if (deferred<=0) {\n    beforeObserverSet.clear();\n    observerSet.flush();\n
        \ }\n}\n\nEmber.endPropertyChanges = endPropertyChanges;\n\n/**\n  Make a
        series of property changes together in an\n  exception-safe way.\n\n  ```javascript\n
        \ Ember.changeProperties(function() {\n    obj1.set('foo', mayBlowUpWhenSet);\n
        \   obj2.set('bar', baz);\n  });\n  ```\n\n  @method changeProperties\n  @param
        {Function} callback\n  @param [binding]\n*/\nEmber.changeProperties = function(cb,
        binding) {\n  beginPropertyChanges();\n  tryFinally(cb, endPropertyChanges,
        binding);\n};\n\nfunction notifyBeforeObservers(obj, keyName) {\n  if (obj.isDestroying)
        { return; }\n\n  var eventName = keyName + ':before', listeners, diff;\n  if
        (deferred) {\n    listeners = beforeObserverSet.add(obj, keyName, eventName);\n
        \   diff = listenersDiff(obj, eventName, listeners);\n    sendEvent(obj, eventName,
        [obj, keyName], diff);\n  } else {\n    sendEvent(obj, eventName, [obj, keyName]);\n
        \ }\n}\n\nfunction notifyObservers(obj, keyName) {\n  if (obj.isDestroying)
        { return; }\n\n  var eventName = keyName + ':change', listeners;\n  if (deferred)
        {\n    listeners = observerSet.add(obj, keyName, eventName);\n    listenersUnion(obj,
        eventName, listeners);\n  } else {\n    sendEvent(obj, eventName, [obj, keyName]);\n
        \ }\n}\n\n})();\n\n\n\n(function() {\n// META_KEY\n// _getPath\n// propertyWillChange,
        propertyDidChange\n\nvar META_KEY = Ember.META_KEY,\n    MANDATORY_SETTER
        = Ember.ENV.MANDATORY_SETTER,\n    IS_GLOBAL = /^([A-Z$]|([0-9][A-Z$]))/,\n
        \   getPath = Ember._getPath;\n\n/**\n  Sets the value of a property on an
        object, respecting computed properties\n  and notifying observers and other
        listeners of the change. If the\n  property is not defined but the object
        implements the `setUnknownProperty`\n  method then that will be invoked as
        well.\n\n  If you plan to run on IE8 and older browsers then you should use
        this\n  method anytime you want to set a property on an object that you don't\n
        \ know for sure is private. (Properties beginning with an underscore '_'\n
        \ are considered private.)\n\n  On all newer browsers, you only need to use
        this method to set\n  properties if the property might not be defined on the
        object and you want\n  to respect the `setUnknownProperty` handler. Otherwise
        you can ignore this\n  method.\n\n  @method set\n  @for Ember\n  @param {Object}
        obj The object to modify.\n  @param {String} keyName The property key to set\n
        \ @param {Object} value The value to set\n  @return {Object} the passed value.\n*/\nvar
        set = function set(obj, keyName, value, tolerant) {\n  if (typeof obj ===
        'string') {\n    Ember.assert(\"Path '\" + obj + \"' must be global if no
        obj is given.\", IS_GLOBAL.test(obj));\n    value = keyName;\n    keyName
        = obj;\n    obj = null;\n  }\n\n  Ember.assert(\"Cannot call set with \"+
        keyName +\" key.\", !!keyName);\n\n  if (!obj || keyName.indexOf('.') !==
        -1) {\n    return setPath(obj, keyName, value, tolerant);\n  }\n\n  Ember.assert(\"You
        need to provide an object and key to `set`.\", !!obj && keyName !== undefined);\n
        \ Ember.assert('calling set on destroyed object', !obj.isDestroyed);\n\n  var
        meta = obj[META_KEY], desc = meta && meta.descs[keyName],\n      isUnknown,
        currentValue;\n  if (desc) {\n    desc.set(obj, keyName, value);\n  } else
        {\n    isUnknown = 'object' === typeof obj && !(keyName in obj);\n\n    //
        setUnknownProperty is called if `obj` is an object,\n    // the property does
        not already exist, and the\n    // `setUnknownProperty` method exists on the
        object\n    if (isUnknown && 'function' === typeof obj.setUnknownProperty)
        {\n      obj.setUnknownProperty(keyName, value);\n    } else if (meta && meta.watching[keyName]
        > 0) {\n      if (MANDATORY_SETTER) {\n        currentValue = meta.values[keyName];\n
        \     } else {\n        currentValue = obj[keyName];\n      }\n      // only
        trigger a change if the value has changed\n      if (value !== currentValue)
        {\n        Ember.propertyWillChange(obj, keyName);\n        if (MANDATORY_SETTER)
        {\n          if (currentValue === undefined && !(keyName in obj)) {\n            Ember.defineProperty(obj,
        keyName, null, value); // setup mandatory setter\n          } else {\n            meta.values[keyName]
        = value;\n          }\n        } else {\n          obj[keyName] = value;\n
        \       }\n        Ember.propertyDidChange(obj, keyName);\n      }\n    }
        else {\n      obj[keyName] = value;\n    }\n  }\n  return value;\n};\n\n//
        Currently used only by Ember Data tests\nif (Ember.config.overrideAccessors)
        {\n  Ember.set = set;\n  Ember.config.overrideAccessors();\n  set = Ember.set;\n}\n\nfunction
        setPath(root, path, value, tolerant) {\n  var keyName;\n\n  // get the last
        part of the path\n  keyName = path.slice(path.lastIndexOf('.') + 1);\n\n  //
        get the first part of the part\n  path    = path.slice(0, path.length-(keyName.length+1));\n\n
        \ // unless the path is this, look up the first part to\n  // get the root\n
        \ if (path !== 'this') {\n    root = getPath(root, path);\n  }\n\n  if (!keyName
        || keyName.length === 0) {\n    throw new Error('You passed an empty path');\n
        \ }\n\n  if (!root) {\n    if (tolerant) { return; }\n    else { throw new
        Error('Object in path '+path+' could not be found or was destroyed.'); }\n
        \ }\n\n  return set(root, keyName, value);\n}\n\nEmber.set = set;\nEmber.setPath
        = Ember.deprecateFunc('setPath is deprecated since set now supports paths',
        Ember.set);\n\n/**\n  Error-tolerant form of `Ember.set`. Will not blow up
        if any part of the\n  chain is `undefined`, `null`, or destroyed.\n\n  This
        is primarily used when syncing bindings, which may try to update after\n  an
        object has been destroyed.\n\n  @method trySet\n  @for Ember\n  @param {Object}
        obj The object to modify.\n  @param {String} path The property path to set\n
        \ @param {Object} value The value to set\n*/\nEmber.trySet = function(root,
        path, value) {\n  return set(root, path, value, true);\n};\nEmber.trySetPath
        = Ember.deprecateFunc('trySetPath has been renamed to trySet', Ember.trySet);\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember-metal\n*/\n\n/*\n  JavaScript (before ES6) does not
        have a Map implementation. Objects,\n  which are often used as dictionaries,
        may only have Strings as keys.\n\n  Because Ember has a way to get a unique
        identifier for every object\n  via `Ember.guidFor`, we can implement a performant
        Map with arbitrary\n  keys. Because it is commonly used in low-level bookkeeping,
        Map is\n  implemented as a pure JavaScript object for performance.\n\n  This
        implementation follows the current iteration of the ES6 proposal for\n  maps
        (http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets),\n  with
        two exceptions. First, because we need our implementation to be pleasant\n
        \ on older browsers, we do not use the `delete` name (using `remove` instead).\n
        \ Second, as we do not have the luxury of in-VM iteration, we implement a\n
        \ forEach method for iteration.\n\n  Map is mocked out to look like an Ember
        object, so you can do\n  `Ember.Map.create()` for symmetry with other Ember
        classes.\n*/\nvar set = Ember.set,\n    guidFor = Ember.guidFor,\n    indexOf
        = Ember.ArrayPolyfills.indexOf;\n\nvar copy = function(obj) {\n  var output
        = {};\n\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) { output[prop]
        = obj[prop]; }\n  }\n\n  return output;\n};\n\nvar copyMap = function(original,
        newObject) {\n  var keys = original.keys.copy(),\n      values = copy(original.values);\n\n
        \ newObject.keys = keys;\n  newObject.values = values;\n  newObject.length
        = original.length;\n\n  return newObject;\n};\n\n/**\n  This class is used
        internally by Ember and Ember Data.\n  Please do not use it at this time.
        We plan to clean it up\n  and add many tests soon.\n\n  @class OrderedSet\n
        \ @namespace Ember\n  @constructor\n  @private\n*/\nvar OrderedSet = Ember.OrderedSet
        = function() {\n  this.clear();\n};\n\n/**\n  @method create\n  @static\n
        \ @return {Ember.OrderedSet}\n*/\nOrderedSet.create = function() {\n  return
        new OrderedSet();\n};\n\n\nOrderedSet.prototype = {\n  /**\n    @method clear\n
        \ */\n  clear: function() {\n    this.presenceSet = {};\n    this.list = [];\n
        \ },\n\n  /**\n    @method add\n    @param obj\n  */\n  add: function(obj)
        {\n    var guid = guidFor(obj),\n        presenceSet = this.presenceSet,\n
        \       list = this.list;\n\n    if (guid in presenceSet) { return; }\n\n
        \   presenceSet[guid] = true;\n    list.push(obj);\n  },\n\n  /**\n    @method
        remove\n    @param obj\n  */\n  remove: function(obj) {\n    var guid = guidFor(obj),\n
        \       presenceSet = this.presenceSet,\n        list = this.list;\n\n    delete
        presenceSet[guid];\n\n    var index = indexOf.call(list, obj);\n    if (index
        > -1) {\n      list.splice(index, 1);\n    }\n  },\n\n  /**\n    @method isEmpty\n
        \   @return {Boolean}\n  */\n  isEmpty: function() {\n    return this.list.length
        === 0;\n  },\n\n  /**\n    @method has\n    @param obj\n    @return {Boolean}\n
        \ */\n  has: function(obj) {\n    var guid = guidFor(obj),\n        presenceSet
        = this.presenceSet;\n\n    return guid in presenceSet;\n  },\n\n  /**\n    @method
        forEach\n    @param {Function} fn\n    @param self\n  */\n  forEach: function(fn,
        self) {\n    // allow mutation during iteration\n    var list = this.toArray();\n\n
        \   for (var i = 0, j = list.length; i < j; i++) {\n      fn.call(self, list[i]);\n
        \   }\n  },\n\n  /**\n    @method toArray\n    @return {Array}\n  */\n  toArray:
        function() {\n    return this.list.slice();\n  },\n\n  /**\n    @method copy\n
        \   @return {Ember.OrderedSet}\n  */\n  copy: function() {\n    var set =
        new OrderedSet();\n\n    set.presenceSet = copy(this.presenceSet);\n    set.list
        = this.toArray();\n\n    return set;\n  }\n};\n\n/**\n  A Map stores values
        indexed by keys. Unlike JavaScript's\n  default Objects, the keys of a Map
        can be any JavaScript\n  object.\n\n  Internally, a Map has two data structures:\n\n
        \ 1. `keys`: an OrderedSet of all of the existing keys\n  2. `values`: a JavaScript
        Object indexed by the `Ember.guidFor(key)`\n\n  When a key/value pair is added
        for the first time, we\n  add the key to the `keys` OrderedSet, and create
        or\n  replace an entry in `values`. When an entry is deleted,\n  we delete
        its entry in `keys` and `values`.\n\n  @class Map\n  @namespace Ember\n  @private\n
        \ @constructor\n*/\nvar Map = Ember.Map = function() {\n  this.keys = Ember.OrderedSet.create();\n
        \ this.values = {};\n};\n\n/**\n  @method create\n  @static\n*/\nMap.create
        = function() {\n  return new Map();\n};\n\nMap.prototype = {\n  /**\n    This
        property will change as the number of objects in the map changes.\n   \n    @property
        length\n    @type number\n    @default 0\n  */\n  length: 0,\n    \n    \n
        \ /**\n    Retrieve the value associated with a given key.\n\n    @method
        get\n    @param {*} key\n    @return {*} the value associated with the key,
        or `undefined`\n  */\n  get: function(key) {\n    var values = this.values,\n
        \       guid = guidFor(key);\n\n    return values[guid];\n  },\n\n  /**\n
        \   Adds a value to the map. If a value for the given key has already been\n
        \   provided, the new value will replace the old value.\n\n    @method set\n
        \   @param {*} key\n    @param {*} value\n  */\n  set: function(key, value)
        {\n    var keys = this.keys,\n        values = this.values,\n        guid
        = guidFor(key);\n\n    keys.add(key);\n    values[guid] = value;\n    set(this,
        'length', keys.list.length);\n  },\n\n  /**\n    Removes a value from the
        map for an associated key.\n\n    @method remove\n    @param {*} key\n    @return
        {Boolean} true if an item was removed, false otherwise\n  */\n  remove: function(key)
        {\n    // don't use ES6 \"delete\" because it will be annoying\n    // to
        use in browsers that are not ES6 friendly;\n    var keys = this.keys,\n        values
        = this.values,\n        guid = guidFor(key);\n\n    if (values.hasOwnProperty(guid))
        {\n      keys.remove(key);\n      delete values[guid];\n      set(this, 'length',
        keys.list.length);\n      return true;\n    } else {\n      return false;\n
        \   }\n  },\n\n  /**\n    Check whether a key is present.\n\n    @method has\n
        \   @param {*} key\n    @return {Boolean} true if the item was present, false
        otherwise\n  */\n  has: function(key) {\n    var values = this.values,\n        guid
        = guidFor(key);\n\n    return values.hasOwnProperty(guid);\n  },\n\n  /**\n
        \   Iterate over all the keys and values. Calls the function once\n    for
        each key, passing in the key and value, in that order.\n\n    The keys are
        guaranteed to be iterated over in insertion order.\n\n    @method forEach\n
        \   @param {Function} callback\n    @param {*} self if passed, the `this`
        value inside the\n      callback. By default, `this` is the map.\n  */\n  forEach:
        function(callback, self) {\n    var keys = this.keys,\n        values = this.values;\n\n
        \   keys.forEach(function(key) {\n      var guid = guidFor(key);\n      callback.call(self,
        key, values[guid]);\n    });\n  },\n\n  /**\n    @method copy\n    @return
        {Ember.Map}\n  */\n  copy: function() {\n    return copyMap(this, new Map());\n
        \ }\n};\n\n/**\n  @class MapWithDefault\n  @namespace Ember\n  @extends Ember.Map\n
        \ @private\n  @constructor\n  @param [options]\n    @param {*} [options.defaultValue]\n*/\nvar
        MapWithDefault = Ember.MapWithDefault = function(options) {\n  Map.call(this);\n
        \ this.defaultValue = options.defaultValue;\n};\n\n/**\n  @method create\n
        \ @static\n  @param [options]\n    @param {*} [options.defaultValue]\n  @return
        {Ember.MapWithDefault|Ember.Map} If options are passed, returns\n    `Ember.MapWithDefault`
        otherwise returns `Ember.Map`\n*/\nMapWithDefault.create = function(options)
        {\n  if (options) {\n    return new MapWithDefault(options);\n  } else {\n
        \   return new Map();\n  }\n};\n\nMapWithDefault.prototype = Ember.create(Map.prototype);\n\n/**\n
        \ Retrieve the value associated with a given key.\n\n  @method get\n  @param
        {*} key\n  @return {*} the value associated with the key, or the default value\n*/\nMapWithDefault.prototype.get
        = function(key) {\n  var hasValue = this.has(key);\n\n  if (hasValue) {\n
        \   return Map.prototype.get.call(this, key);\n  } else {\n    var defaultValue
        = this.defaultValue(key);\n    this.set(key, defaultValue);\n    return defaultValue;\n
        \ }\n};\n\n/**\n  @method copy\n  @return {Ember.MapWithDefault}\n*/\nMapWithDefault.prototype.copy
        = function() {\n  return copyMap(this, new MapWithDefault({\n    defaultValue:
        this.defaultValue\n  }));\n};\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember-metal\n*/\n\nvar META_KEY = Ember.META_KEY,\n    metaFor = Ember.meta,\n
        \   objectDefineProperty = Ember.platform.defineProperty;\n\nvar MANDATORY_SETTER
        = Ember.ENV.MANDATORY_SETTER;\n\n// ..........................................................\n//
        DESCRIPTOR\n//\n\n/**\n  Objects of this type can implement an interface to
        respond to requests to\n  get and set. The default implementation handles
        simple properties.\n\n  You generally won't need to create or subclass this
        directly.\n\n  @class Descriptor\n  @namespace Ember\n  @private\n  @constructor\n*/\nEmber.Descriptor
        = function() {};\n\n// ..........................................................\n//
        DEFINING PROPERTIES API\n//\n\nvar MANDATORY_SETTER_FUNCTION = Ember.MANDATORY_SETTER_FUNCTION
        = function(value) {\n  Ember.assert(\"You must use Ember.set() to access this
        property (of \" + this + \")\", false);\n};\n\nvar DEFAULT_GETTER_FUNCTION
        = Ember.DEFAULT_GETTER_FUNCTION = function(name) {\n  return function() {\n
        \   var meta = this[META_KEY];\n    return meta && meta.values[name];\n  };\n};\n\n/**\n
        \ @private\n\n  NOTE: This is a low-level method used by other parts of the
        API. You almost\n  never want to call this method directly. Instead you should
        use\n  `Ember.mixin()` to define new properties.\n\n  Defines a property on
        an object. This method works much like the ES5\n  `Object.defineProperty()`
        method except that it can also accept computed\n  properties and other special
        descriptors.\n\n  Normally this method takes only three parameters. However
        if you pass an\n  instance of `Ember.Descriptor` as the third param then you
        can pass an\n  optional value as the fourth parameter. This is often more
        efficient than\n  creating new descriptor hashes for each property.\n\n  ##
        Examples\n\n  ```javascript\n  // ES5 compatible mode\n  Ember.defineProperty(contact,
        'firstName', {\n    writable: true,\n    configurable: false,\n    enumerable:
        true,\n    value: 'Charles'\n  });\n\n  // define a simple property\n  Ember.defineProperty(contact,
        'lastName', undefined, 'Jolley');\n\n  // define a computed property\n  Ember.defineProperty(contact,
        'fullName', Ember.computed(function() {\n    return this.firstName+' '+this.lastName;\n
        \ }).property('firstName', 'lastName'));\n  ```\n\n  @method defineProperty\n
        \ @for Ember\n  @param {Object} obj the object to define this property on.
        This may be a prototype.\n  @param {String} keyName the name of the property\n
        \ @param {Ember.Descriptor} [desc] an instance of `Ember.Descriptor` (typically
        a\n    computed property) or an ES5 descriptor.\n    You must provide this
        or `data` but not both.\n  @param {*} [data] something other than a descriptor,
        that will\n    become the explicit value of this property.\n*/\nEmber.defineProperty
        = function(obj, keyName, desc, data, meta) {\n  var descs, existingDesc, watching,
        value;\n\n  if (!meta) meta = metaFor(obj);\n  descs = meta.descs;\n  existingDesc
        = meta.descs[keyName];\n  watching = meta.watching[keyName] > 0;\n\n  if (existingDesc
        instanceof Ember.Descriptor) {\n    existingDesc.teardown(obj, keyName);\n
        \ }\n\n  if (desc instanceof Ember.Descriptor) {\n    value = desc;\n\n    descs[keyName]
        = desc;\n    if (MANDATORY_SETTER && watching) {\n      objectDefineProperty(obj,
        keyName, {\n        configurable: true,\n        enumerable: true,\n        writable:
        true,\n        value: undefined // make enumerable\n      });\n    } else
        {\n      obj[keyName] = undefined; // make enumerable\n    }\n  } else {\n
        \   descs[keyName] = undefined; // shadow descriptor in proto\n    if (desc
        == null) {\n      value = data;\n\n      if (MANDATORY_SETTER && watching)
        {\n        meta.values[keyName] = data;\n        objectDefineProperty(obj,
        keyName, {\n          configurable: true,\n          enumerable: true,\n          set:
        MANDATORY_SETTER_FUNCTION,\n          get: DEFAULT_GETTER_FUNCTION(keyName)\n
        \       });\n      } else {\n        obj[keyName] = data;\n      }\n    }
        else {\n      value = desc;\n\n      // compatibility with ES5\n      objectDefineProperty(obj,
        keyName, desc);\n    }\n  }\n\n  // if key is being watched, override chains
        that\n  // were initialized with the prototype\n  if (watching) { Ember.overrideChains(obj,
        keyName, meta); }\n\n  // The `value` passed to the `didDefineProperty` hook
        is\n  // either the descriptor or data, whichever was passed.\n  if (obj.didDefineProperty)
        { obj.didDefineProperty(obj, keyName, value); }\n\n  return this;\n};\n\n\n})();\n\n\n\n(function()
        {\nvar get = Ember.get;\n\n/**\n  To get multiple properties at once, call
        `Ember.getProperties`\n  with an object followed by a list of strings or an
        array:\n\n  ```javascript\n  Ember.getProperties(record, 'firstName', 'lastName',
        'zipCode');  // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n
        \ ```\n\n  is equivalent to:\n\n  ```javascript\n  Ember.getProperties(record,
        ['firstName', 'lastName', 'zipCode']);  // { firstName: 'John', lastName:
        'Doe', zipCode: '10011' }\n  ```\n\n  @method getProperties\n  @param obj\n
        \ @param {String...|Array} list of keys to get\n  @return {Hash}\n*/\nEmber.getProperties
        = function(obj) {\n  var ret = {},\n      propertyNames = arguments,\n      i
        = 1;\n\n  if (arguments.length === 2 && Ember.typeOf(arguments[1]) === 'array')
        {\n    i = 0;\n    propertyNames = arguments[1];\n  }\n  for(var len = propertyNames.length;
        i < len; i++) {\n    ret[propertyNames[i]] = get(obj, propertyNames[i]);\n
        \ }\n  return ret;\n};\n\n})();\n\n\n\n(function() {\nvar changeProperties
        = Ember.changeProperties,\n    set = Ember.set;\n\n/**\n  Set a list of properties
        on an object. These properties are set inside\n  a single `beginPropertyChanges`
        and `endPropertyChanges` batch, so\n  observers will be buffered.\n\n  ```javascript\n
        \ anObject.setProperties({\n    firstName: \"Stanley\",\n    lastName: \"Stuart\",\n
        \   age: \"21\"\n  })\n  ```\n\n  @method setProperties\n  @param self\n  @param
        {Object} hash\n  @return self\n*/\nEmber.setProperties = function(self, hash)
        {\n  changeProperties(function() {\n    for(var prop in hash) {\n      if
        (hash.hasOwnProperty(prop)) { set(self, prop, hash[prop]); }\n    }\n  });\n
        \ return self;\n};\n\n})();\n\n\n\n(function() {\nvar metaFor = Ember.meta,
        // utils.js\n    typeOf = Ember.typeOf, // utils.js\n    MANDATORY_SETTER
        = Ember.ENV.MANDATORY_SETTER,\n    o_defineProperty = Ember.platform.defineProperty;\n\nEmber.watchKey
        = function(obj, keyName) {\n  // can't watch length on Array - it is special...\n
        \ if (keyName === 'length' && typeOf(obj) === 'array') { return; }\n\n  var
        m = metaFor(obj), watching = m.watching;\n\n  // activate watching first time\n
        \ if (!watching[keyName]) {\n    watching[keyName] = 1;\n\n    if ('function'
        === typeof obj.willWatchProperty) {\n      obj.willWatchProperty(keyName);\n
        \   }\n\n    if (MANDATORY_SETTER && keyName in obj) {\n      m.values[keyName]
        = obj[keyName];\n      o_defineProperty(obj, keyName, {\n        configurable:
        true,\n        enumerable: true,\n        set: Ember.MANDATORY_SETTER_FUNCTION,\n
        \       get: Ember.DEFAULT_GETTER_FUNCTION(keyName)\n      });\n    }\n  }
        else {\n    watching[keyName] = (watching[keyName] || 0) + 1;\n  }\n};\n\n\nEmber.unwatchKey
        = function(obj, keyName) {\n  var m = metaFor(obj), watching = m.watching;\n\n
        \ if (watching[keyName] === 1) {\n    watching[keyName] = 0;\n\n    if ('function'
        === typeof obj.didUnwatchProperty) {\n      obj.didUnwatchProperty(keyName);\n
        \   }\n\n    if (MANDATORY_SETTER && keyName in obj) {\n      o_defineProperty(obj,
        keyName, {\n        configurable: true,\n        enumerable: true,\n        writable:
        true,\n        value: m.values[keyName]\n      });\n      delete m.values[keyName];\n
        \   }\n  } else if (watching[keyName] > 1) {\n    watching[keyName]--;\n  }\n};\n\n})();\n\n\n\n(function()
        {\nvar metaFor = Ember.meta, // utils.js\n    get = Ember.get, // property_get.js\n
        \   normalizeTuple = Ember.normalizeTuple, // property_get.js\n    forEach
        = Ember.ArrayPolyfills.forEach, // array.js\n    warn = Ember.warn,\n    watchKey
        = Ember.watchKey,\n    unwatchKey = Ember.unwatchKey,\n    FIRST_KEY = /^([^\\.\\*]+)/;\n\nfunction
        firstKey(path) {\n  return path.match(FIRST_KEY)[0];\n}\n\nvar pendingQueue
        = [];\n\n// attempts to add the pendingQueue chains again. If some of them
        end up\n// back in the queue and reschedule is true, schedules a timeout to
        try\n// again.\nEmber.flushPendingChains = function() {\n  if (pendingQueue.length
        === 0) { return; } // nothing to do\n\n  var queue = pendingQueue;\n  pendingQueue
        = [];\n\n  forEach.call(queue, function(q) { q[0].add(q[1]); });\n\n  warn('Watching
        an undefined global, Ember expects watched globals to be setup by the time
        the run loop is flushed, check for typos', pendingQueue.length === 0);\n};\n\n\nfunction
        addChainWatcher(obj, keyName, node) {\n  if (!obj || ('object' !== typeof
        obj)) { return; } // nothing to do\n\n  var m = metaFor(obj), nodes = m.chainWatchers;\n\n
        \ if (!m.hasOwnProperty('chainWatchers')) {\n    nodes = m.chainWatchers =
        {};\n  }\n\n  if (!nodes[keyName]) { nodes[keyName] = []; }\n  nodes[keyName].push(node);\n
        \ watchKey(obj, keyName);\n}\n\nvar removeChainWatcher = Ember.removeChainWatcher
        = function(obj, keyName, node) {\n  if (!obj || 'object' !== typeof obj) {
        return; } // nothing to do\n\n  var m = metaFor(obj, false);\n  if (!m.hasOwnProperty('chainWatchers'))
        { return; } // nothing to do\n\n  var nodes = m.chainWatchers;\n\n  if (nodes[keyName])
        {\n    nodes = nodes[keyName];\n    for (var i = 0, l = nodes.length; i <
        l; i++) {\n      if (nodes[i] === node) { nodes.splice(i, 1); }\n    }\n  }\n
        \ unwatchKey(obj, keyName);\n};\n\n// A ChainNode watches a single key on
        an object. If you provide a starting\n// value for the key then the node won't
        actually watch it. For a root node\n// pass null for parent and key and object
        for value.\nvar ChainNode = Ember._ChainNode = function(parent, key, value)
        {\n  this._parent = parent;\n  this._key    = key;\n\n  // _watching is true
        when calling get(this._parent, this._key) will\n  // return the value of this
        node.\n  //\n  // It is false for the root of a chain (because we have no
        parent)\n  // and for global paths (because the parent node is the object
        with\n  // the observer on it)\n  this._watching = value===undefined;\n\n
        \ this._value  = value;\n  this._paths = {};\n  if (this._watching) {\n    this._object
        = parent.value();\n    if (this._object) { addChainWatcher(this._object, this._key,
        this); }\n  }\n\n  // Special-case: the EachProxy relies on immediate evaluation
        to\n  // establish its observers.\n  //\n  // TODO: Replace this with an efficient
        callback that the EachProxy\n  // can implement.\n  if (this._parent && this._parent._key
        === '@each') {\n    this.value();\n  }\n};\n\nvar ChainNodePrototype = ChainNode.prototype;\n\nfunction
        lazyGet(obj, key) {\n  if (!obj) return undefined;\n\n  var meta = metaFor(obj,
        false);\n  // check if object meant only to be a prototype\n  if (meta.proto
        === obj) return undefined;\n\n  if (key === \"@each\") return get(obj, key);\n\n
        \ // if a CP only return cached value\n  var desc = meta.descs[key];\n  if
        (desc && desc._cacheable) {\n    if (key in meta.cache) {\n      return meta.cache[key];\n
        \   } else {\n      return undefined;\n    }\n  }\n\n  return get(obj, key);\n}\n\nChainNodePrototype.value
        = function() {\n  if (this._value === undefined && this._watching) {\n    var
        obj = this._parent.value();\n    this._value = lazyGet(obj, this._key);\n
        \ }\n  return this._value;\n};\n\nChainNodePrototype.destroy = function()
        {\n  if (this._watching) {\n    var obj = this._object;\n    if (obj) { removeChainWatcher(obj,
        this._key, this); }\n    this._watching = false; // so future calls do nothing\n
        \ }\n};\n\n// copies a top level object only\nChainNodePrototype.copy = function(obj)
        {\n  var ret = new ChainNode(null, null, obj),\n      paths = this._paths,
        path;\n  for (path in paths) {\n    if (paths[path] <= 0) { continue; } //
        this check will also catch non-number vals.\n    ret.add(path);\n  }\n  return
        ret;\n};\n\n// called on the root node of a chain to setup watchers on the
        specified\n// path.\nChainNodePrototype.add = function(path) {\n  var obj,
        tuple, key, src, paths;\n\n  paths = this._paths;\n  paths[path] = (paths[path]
        || 0) + 1;\n\n  obj = this.value();\n  tuple = normalizeTuple(obj, path);\n\n
        \ // the path was a local path\n  if (tuple[0] && tuple[0] === obj) {\n    path
        = tuple[1];\n    key  = firstKey(path);\n    path = path.slice(key.length+1);\n\n
        \ // global path, but object does not exist yet.\n  // put into a queue and
        try to connect later.\n  } else if (!tuple[0]) {\n    pendingQueue.push([this,
        path]);\n    tuple.length = 0;\n    return;\n\n  // global path, and object
        already exists\n  } else {\n    src  = tuple[0];\n    key  = path.slice(0,
        0-(tuple[1].length+1));\n    path = tuple[1];\n  }\n\n  tuple.length = 0;\n
        \ this.chain(key, path, src);\n};\n\n// called on the root node of a chain
        to teardown watcher on the specified\n// path\nChainNodePrototype.remove =
        function(path) {\n  var obj, tuple, key, src, paths;\n\n  paths = this._paths;\n
        \ if (paths[path] > 0) { paths[path]--; }\n\n  obj = this.value();\n  tuple
        = normalizeTuple(obj, path);\n  if (tuple[0] === obj) {\n    path = tuple[1];\n
        \   key  = firstKey(path);\n    path = path.slice(key.length+1);\n  } else
        {\n    src  = tuple[0];\n    key  = path.slice(0, 0-(tuple[1].length+1));\n
        \   path = tuple[1];\n  }\n\n  tuple.length = 0;\n  this.unchain(key, path);\n};\n\nChainNodePrototype.count
        = 0;\n\nChainNodePrototype.chain = function(key, path, src) {\n  var chains
        = this._chains, node;\n  if (!chains) { chains = this._chains = {}; }\n\n
        \ node = chains[key];\n  if (!node) { node = chains[key] = new ChainNode(this,
        key, src); }\n  node.count++; // count chains...\n\n  // chain rest of path
        if there is one\n  if (path && path.length>0) {\n    key = firstKey(path);\n
        \   path = path.slice(key.length+1);\n    node.chain(key, path); // NOTE:
        no src means it will observe changes...\n  }\n};\n\nChainNodePrototype.unchain
        = function(key, path) {\n  var chains = this._chains, node = chains[key];\n\n
        \ // unchain rest of path first...\n  if (path && path.length>1) {\n    key
        \ = firstKey(path);\n    path = path.slice(key.length+1);\n    node.unchain(key,
        path);\n  }\n\n  // delete node if needed.\n  node.count--;\n  if (node.count<=0)
        {\n    delete chains[node._key];\n    node.destroy();\n  }\n\n};\n\nChainNodePrototype.willChange
        = function(events) {\n  var chains = this._chains;\n  if (chains) {\n    for(var
        key in chains) {\n      if (!chains.hasOwnProperty(key)) { continue; }\n      chains[key].willChange(events);\n
        \   }\n  }\n\n  if (this._parent) { this._parent.chainWillChange(this, this._key,
        1, events); }\n};\n\nChainNodePrototype.chainWillChange = function(chain,
        path, depth, events) {\n  if (this._key) { path = this._key + '.' + path;
        }\n\n  if (this._parent) {\n    this._parent.chainWillChange(this, path, depth+1,
        events);\n  } else {\n    if (depth > 1) {\n      events.push(this.value(),
        path);\n    }\n    path = 'this.' + path;\n    if (this._paths[path] > 0)
        {\n      events.push(this.value(), path);\n    }\n  }\n};\n\nChainNodePrototype.chainDidChange
        = function(chain, path, depth, events) {\n  if (this._key) { path = this._key
        + '.' + path; }\n  if (this._parent) {\n    this._parent.chainDidChange(this,
        path, depth+1, events);\n  } else {\n    if (depth > 1) {\n      events.push(this.value(),
        path);\n    }\n    path = 'this.' + path;\n    if (this._paths[path] > 0)
        {\n      events.push(this.value(), path);\n    }\n  }\n};\n\nChainNodePrototype.didChange
        = function(events) {\n  // invalidate my own value first.\n  if (this._watching)
        {\n    var obj = this._parent.value();\n    if (obj !== this._object) {\n
        \     removeChainWatcher(this._object, this._key, this);\n      this._object
        = obj;\n      addChainWatcher(obj, this._key, this);\n    }\n    this._value
        \ = undefined;\n\n    // Special-case: the EachProxy relies on immediate evaluation
        to\n    // establish its observers.\n    if (this._parent && this._parent._key
        === '@each')\n      this.value();\n  }\n\n  // then notify chains...\n  var
        chains = this._chains;\n  if (chains) {\n    for(var key in chains) {\n      if
        (!chains.hasOwnProperty(key)) { continue; }\n      chains[key].didChange(events);\n
        \   }\n  }\n\n  // if no events are passed in then we only care about the
        above wiring update\n  if (events === null) { return; }\n\n  // and finally
        tell parent about my path changing...\n  if (this._parent) { this._parent.chainDidChange(this,
        this._key, 1, events); }\n};\n\nEmber.finishChains = function(obj) {\n  var
        m = metaFor(obj, false), chains = m.chains;\n  if (chains) {\n    if (chains.value()
        !== obj) {\n      m.chains = chains = chains.copy(obj);\n    }\n    chains.didChange(null);\n
        \ }\n};\n\n})();\n\n\n\n(function() {\nvar metaFor = Ember.meta, // utils.js\n
        \   typeOf = Ember.typeOf, // utils.js\n    ChainNode = Ember._ChainNode;
        // chains.js\n\n// get the chains for the current object. If the current object
        has\n// chains inherited from the proto they will be cloned and reconfigured
        for\n// the current object.\nfunction chainsFor(obj) {\n  var m = metaFor(obj),
        ret = m.chains;\n  if (!ret) {\n    ret = m.chains = new ChainNode(null, null,
        obj);\n  } else if (ret.value() !== obj) {\n    ret = m.chains = ret.copy(obj);\n
        \ }\n  return ret;\n}\n\nEmber.watchPath = function(obj, keyPath) {\n  //
        can't watch length on Array - it is special...\n  if (keyPath === 'length'
        && typeOf(obj) === 'array') { return; }\n\n  var m = metaFor(obj), watching
        = m.watching;\n\n  if (!watching[keyPath]) { // activate watching first time\n
        \   watching[keyPath] = 1;\n    chainsFor(obj).add(keyPath);\n  } else {\n
        \   watching[keyPath] = (watching[keyPath] || 0) + 1;\n  }\n};\n\nEmber.unwatchPath
        = function(obj, keyPath) {\n  var m = metaFor(obj), watching = m.watching;\n\n
        \ if (watching[keyPath] === 1) {\n    watching[keyPath] = 0;\n    chainsFor(obj).remove(keyPath);\n
        \ } else if (watching[keyPath] > 1) {\n    watching[keyPath]--;\n  }\n};\n})();\n\n\n\n(function()
        {\n/**\n@module ember-metal\n*/\n\nvar metaFor = Ember.meta, // utils.js\n
        \   GUID_KEY = Ember.GUID_KEY, // utils.js\n    META_KEY = Ember.META_KEY,
        // utils.js\n    removeChainWatcher = Ember.removeChainWatcher,\n    watchKey
        = Ember.watchKey, // watch_key.js\n    unwatchKey = Ember.unwatchKey,\n    watchPath
        = Ember.watchPath, // watch_path.js\n    unwatchPath = Ember.unwatchPath,\n
        \   typeOf = Ember.typeOf, // utils.js\n    generateGuid = Ember.generateGuid,\n
        \   IS_PATH = /[\\.\\*]/;\n\n// returns true if the passed path is just a
        keyName\nfunction isKeyName(path) {\n  return path==='*' || !IS_PATH.test(path);\n}\n\n/**\n
        \ @private\n\n  Starts watching a property on an object. Whenever the property
        changes,\n  invokes `Ember.propertyWillChange` and `Ember.propertyDidChange`.
        This is the\n  primitive used by observers and dependent keys; usually you
        will never call\n  this method directly but instead use higher level methods
        like\n  `Ember.addObserver()`\n\n  @method watch\n  @for Ember\n  @param obj\n
        \ @param {String} keyName\n*/\nEmber.watch = function(obj, keyPath) {\n  //
        can't watch length on Array - it is special...\n  if (keyPath === 'length'
        && typeOf(obj) === 'array') { return; }\n\n  if (isKeyName(keyPath)) {\n    watchKey(obj,
        keyPath);\n  } else {\n    watchPath(obj, keyPath);\n  }\n};\n\nEmber.isWatching
        = function isWatching(obj, key) {\n  var meta = obj[META_KEY];\n  return (meta
        && meta.watching[key]) > 0;\n};\n\nEmber.watch.flushPending = Ember.flushPendingChains;\n\nEmber.unwatch
        = function(obj, keyPath) {\n  // can't watch length on Array - it is special...\n
        \ if (keyPath === 'length' && typeOf(obj) === 'array') { return; }\n\n  if
        (isKeyName(keyPath)) {\n    unwatchKey(obj, keyPath);\n  } else {\n    unwatchPath(obj,
        keyPath);\n  }\n};\n\n/**\n  @private\n\n  Call on an object when you first
        beget it from another object. This will\n  setup any chained watchers on the
        object instance as needed. This method is\n  safe to call multiple times.\n\n
        \ @method rewatch\n  @for Ember\n  @param obj\n*/\nEmber.rewatch = function(obj)
        {\n  var m = metaFor(obj, false), chains = m.chains;\n\n  // make sure the
        object has its own guid.\n  if (GUID_KEY in obj && !obj.hasOwnProperty(GUID_KEY))
        {\n    generateGuid(obj, 'ember');\n  }\n\n  // make sure any chained watchers
        update.\n  if (chains && chains.value() !== obj) {\n    m.chains = chains.copy(obj);\n
        \ }\n};\n\nvar NODE_STACK = [];\n\n/**\n  Tears down the meta on an object
        so that it can be garbage collected.\n  Multiple calls will have no effect.\n\n
        \ @method destroy\n  @for Ember\n  @param {Object} obj  the object to destroy\n
        \ @return {void}\n*/\nEmber.destroy = function (obj) {\n  var meta = obj[META_KEY],
        node, nodes, key, nodeObject;\n  if (meta) {\n    obj[META_KEY] = null;\n
        \   // remove chainWatchers to remove circular references that would prevent
        GC\n    node = meta.chains;\n    if (node) {\n      NODE_STACK.push(node);\n
        \     // process tree\n      while (NODE_STACK.length > 0) {\n        node
        = NODE_STACK.pop();\n        // push children\n        nodes = node._chains;\n
        \       if (nodes) {\n          for (key in nodes) {\n            if (nodes.hasOwnProperty(key))
        {\n              NODE_STACK.push(nodes[key]);\n            }\n          }\n
        \       }\n        // remove chainWatcher in node object\n        if (node._watching)
        {\n          nodeObject = node._object;\n          if (nodeObject) {\n            removeChainWatcher(nodeObject,
        node._key, node);\n          }\n        }\n      }\n    }\n  }\n};\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember-metal\n*/\n\nEmber.warn(\"The CP_DEFAULT_CACHEABLE flag
        has been removed and computed properties are always cached by default. Use
        `volatile` if you don't want caching.\", Ember.ENV.CP_DEFAULT_CACHEABLE !==
        false);\n\n\nvar get = Ember.get,\n    set = Ember.set,\n    metaFor = Ember.meta,\n
        \   a_slice = [].slice,\n    o_create = Ember.create,\n    META_KEY = Ember.META_KEY,\n
        \   watch = Ember.watch,\n    unwatch = Ember.unwatch;\n\n// ..........................................................\n//
        DEPENDENT KEYS\n//\n\n// data structure:\n//  meta.deps = {\n//   'depKey':
        {\n//     'keyName': count,\n//   }\n//  }\n\n/*\n  This function returns
        a map of unique dependencies for a\n  given object and key.\n*/\nfunction
        keysForDep(depsMeta, depKey) {\n  var keys = depsMeta[depKey];\n  if (!keys)
        {\n    // if there are no dependencies yet for a the given key\n    // create
        a new empty list of dependencies for the key\n    keys = depsMeta[depKey]
        = {};\n  } else if (!depsMeta.hasOwnProperty(depKey)) {\n    // otherwise
        if the dependency list is inherited from\n    // a superclass, clone the hash\n
        \   keys = depsMeta[depKey] = o_create(keys);\n  }\n  return keys;\n}\n\nfunction
        metaForDeps(meta) {\n  return keysForDep(meta, 'deps');\n}\n\nfunction addDependentKeys(desc,
        obj, keyName, meta) {\n  // the descriptor has a list of dependent keys, so\n
        \ // add all of its dependent keys.\n  var depKeys = desc._dependentKeys,
        depsMeta, idx, len, depKey, keys;\n  if (!depKeys) return;\n\n  depsMeta =
        metaForDeps(meta);\n\n  for(idx = 0, len = depKeys.length; idx < len; idx++)
        {\n    depKey = depKeys[idx];\n    // Lookup keys meta for depKey\n    keys
        = keysForDep(depsMeta, depKey);\n    // Increment the number of times depKey
        depends on keyName.\n    keys[keyName] = (keys[keyName] || 0) + 1;\n    //
        Watch the depKey\n    watch(obj, depKey);\n  }\n}\n\nfunction removeDependentKeys(desc,
        obj, keyName, meta) {\n  // the descriptor has a list of dependent keys, so\n
        \ // add all of its dependent keys.\n  var depKeys = desc._dependentKeys,
        depsMeta, idx, len, depKey, keys;\n  if (!depKeys) return;\n\n  depsMeta =
        metaForDeps(meta);\n\n  for(idx = 0, len = depKeys.length; idx < len; idx++)
        {\n    depKey = depKeys[idx];\n    // Lookup keys meta for depKey\n    keys
        = keysForDep(depsMeta, depKey);\n    // Increment the number of times depKey
        depends on keyName.\n    keys[keyName] = (keys[keyName] || 0) - 1;\n    //
        Watch the depKey\n    unwatch(obj, depKey);\n  }\n}\n\n// ..........................................................\n//
        COMPUTED PROPERTY\n//\n\n/**\n  A computed property transforms an objects
        function into a property.\n\n  By default the function backing the computed
        property will only be called\n  once and the result will be cached. You can
        specify various properties\n  that your computed property is dependent on.
        This will force the cached\n  result to be recomputed if the dependencies
        are modified.\n\n  In the following example we declare a computed property
        (by calling\n  `.property()` on the fullName function) and setup the properties\n
        \ dependencies (depending on firstName and lastName). The fullName function\n
        \ will be called once (regardless of how many times it is accessed) as long\n
        \ as it's dependencies have not been changed. Once firstName or lastName are
        updated\n  any future calls (or anything bound) to fullName will incorporate
        the new\n  values.\n\n  ```javascript\n  Person = Ember.Object.extend({\n
        \   // these will be supplied by `create`\n    firstName: null,\n    lastName:
        null,\n\n    fullName: function() {\n      var firstName = this.get('firstName');\n
        \     var lastName = this.get('lastName');\n\n     return firstName + ' '
        + lastName;\n    }.property('firstName', 'lastName')\n  });\n\n  var tom =
        Person.create({\n    firstName: \"Tom\",\n    lastName: \"Dale\"\n  });\n\n
        \ tom.get('fullName') // \"Tom Dale\"\n  ```\n\n  You can also define what
        Ember should do when setting a computed property.\n  If you try to set a computed
        property, it will be invoked with the key and\n  value you want to set it
        to. You can also accept the previous value as the\n  third parameter.\n\n
        \ ```javascript\n\n Person = Ember.Object.extend({\n    // these will be supplied
        by `create`\n    firstName: null,\n    lastName: null,\n\n    fullName: function(key,
        value, oldValue) {\n      // getter\n      if (arguments.length === 1) {\n
        \       var firstName = this.get('firstName');\n        var lastName = this.get('lastName');\n\n
        \       return firstName + ' ' + lastName;\n\n      // setter\n      } else
        {\n        var name = value.split(\" \");\n\n        this.set('firstName',
        name[0]);\n        this.set('lastName', name[1]);\n\n        return value;\n
        \     }\n    }.property('firstName', 'lastName')\n  });\n\n  var person =
        Person.create();\n  person.set('fullName', \"Peter Wagenet\");\n  person.get('firstName')
        // Peter\n  person.get('lastName') // Wagenet\n  ```\n\n  @class ComputedProperty\n
        \ @namespace Ember\n  @extends Ember.Descriptor\n  @constructor\n*/\nfunction
        ComputedProperty(func, opts) {\n  this.func = func;\n\n  this._cacheable =
        (opts && opts.cacheable !== undefined) ? opts.cacheable : true;\n  this._dependentKeys
        = opts && opts.dependentKeys;\n  this._readOnly = opts && (opts.readOnly !==
        undefined || !!opts.readOnly);\n}\n\nEmber.ComputedProperty = ComputedProperty;\nComputedProperty.prototype
        = new Ember.Descriptor();\n\nvar ComputedPropertyPrototype = ComputedProperty.prototype;\n\n/**\n
        \ Properties are cacheable by default. Computed property will automatically\n
        \ cache the return value of your function until one of the dependent keys
        changes.\n\n  Call `volatile()` to set it into non-cached mode. When in this
        mode\n  the computed property will not automatically cache the return value.\n\n
        \ However, if a property is properly observable, there is no reason to disable\n
        \ caching.\n\n  @method cacheable\n  @param {Boolean} aFlag optional set to
        `false` to disable caching\n  @return {Ember.ComputedProperty} this\n  @chainable\n*/\nComputedPropertyPrototype.cacheable
        = function(aFlag) {\n  this._cacheable = aFlag !== false;\n  return this;\n};\n\n/**\n
        \ Call on a computed property to set it into non-cached mode. When in this\n
        \ mode the computed property will not automatically cache the return value.\n\n
        \ ```javascript\n  MyApp.outsideService = Ember.Object.create({\n    value:
        function() {\n      return OutsideService.getValue();\n    }.property().volatile()\n
        \ });\n  ```\n\n  @method volatile\n  @return {Ember.ComputedProperty} this\n
        \ @chainable\n*/\nComputedPropertyPrototype.volatile = function() {\n  return
        this.cacheable(false);\n};\n\n/**\n  Call on a computed property to set it
        into read-only mode. When in this\n  mode the computed property will throw
        an error when set.\n\n  ```javascript\n  MyApp.person = Ember.Object.create({\n
        \   guid: function() {\n      return 'guid-guid-guid';\n    }.property().readOnly()\n
        \ });\n\n  MyApp.person.set('guid', 'new-guid'); // will throw an exception\n
        \ ```\n\n  @method readOnly\n  @return {Ember.ComputedProperty} this\n  @chainable\n*/\nComputedPropertyPrototype.readOnly
        = function(readOnly) {\n  this._readOnly = readOnly === undefined || !!readOnly;\n
        \ return this;\n};\n\n/**\n  Sets the dependent keys on this computed property.
        Pass any number of\n  arguments containing key paths that this computed property
        depends on.\n\n  ```javascript\n  MyApp.president = Ember.Object.create({\n
        \   fullName: Ember.computed(function() {\n      return this.get('firstName')
        + ' ' + this.get('lastName');\n\n      // Tell Ember that this computed property
        depends on firstName\n      // and lastName\n    }).property('firstName',
        'lastName')\n  });\n  ```\n\n  @method property\n  @param {String} path* zero
        or more property paths\n  @return {Ember.ComputedProperty} this\n  @chainable\n*/\nComputedPropertyPrototype.property
        = function() {\n  var args = [];\n  for (var i = 0, l = arguments.length;
        i < l; i++) {\n    args.push(arguments[i]);\n  }\n  this._dependentKeys =
        args;\n  return this;\n};\n\n/**\n  In some cases, you may want to annotate
        computed properties with additional\n  metadata about how they function or
        what values they operate on. For example,\n  computed property functions may
        close over variables that are then no longer\n  available for introspection.\n\n
        \ You can pass a hash of these values to a computed property like this:\n\n
        \ ```\n  person: function() {\n    var personId = this.get('personId');\n
        \   return App.Person.create({ id: personId });\n  }.property().meta({ type:
        App.Person })\n  ```\n\n  The hash that you pass to the `meta()` function
        will be saved on the\n  computed property descriptor under the `_meta` key.
        Ember runtime\n  exposes a public API for retrieving these values from classes,\n
        \ via the `metaForProperty()` function.\n\n  @method meta\n  @param {Hash}
        meta\n  @chainable\n*/\n\nComputedPropertyPrototype.meta = function(meta)
        {\n  if (arguments.length === 0) {\n    return this._meta || {};\n  } else
        {\n    this._meta = meta;\n    return this;\n  }\n};\n\n/* impl descriptor
        API */\nComputedPropertyPrototype.didChange = function(obj, keyName) {\n  //
        _suspended is set via a CP.set to ensure we don't clear\n  // the cached value
        set by the setter\n  if (this._cacheable && this._suspended !== obj) {\n    var
        meta = metaFor(obj);\n    if (keyName in meta.cache) {\n      delete meta.cache[keyName];\n
        \     removeDependentKeys(this, obj, keyName, meta);\n    }\n  }\n};\n\nfunction
        finishChains(chainNodes)\n{\n  for (var i=0, l=chainNodes.length; i<l; i++)
        {\n    chainNodes[i].didChange(null);\n  }\n}\n\n/**\n  Access the value of
        the function backing the computed property.\n  If this property has already
        been cached, return the cached result.\n  Otherwise, call the function passing
        the property name as an argument.\n\n  ```javascript\n  Person = Ember.Object.extend({\n
        \   fullName: function(keyName) {\n      // the keyName parameter is 'fullName'
        in this case.\n\n      return this.get('firstName') + ' ' + this.get('lastName');\n
        \   }.property('firstName', 'lastName')\n  });\n\n\n  var tom = Person.create({\n
        \   firstName: \"Tom\",\n    lastName: \"Dale\"\n  });\n\n  tom.get('fullName')
        // \"Tom Dale\"\n  ```\n\n  @method get\n  @param {String} keyName The key
        being accessed.\n  @return {Object} The return value of the function backing
        the CP.\n*/\nComputedPropertyPrototype.get = function(obj, keyName) {\n  var
        ret, cache, meta, chainNodes;\n  if (this._cacheable) {\n    meta = metaFor(obj);\n
        \   cache = meta.cache;\n    if (keyName in cache) { return cache[keyName];
        }\n    ret = cache[keyName] = this.func.call(obj, keyName);\n    chainNodes
        = meta.chainWatchers && meta.chainWatchers[keyName];\n    if (chainNodes)
        { finishChains(chainNodes); }\n    addDependentKeys(this, obj, keyName, meta);\n
        \ } else {\n    ret = this.func.call(obj, keyName);\n  }\n  return ret;\n};\n\n/**\n
        \ Set the value of a computed property. If the function that backs your\n
        \ computed property does not accept arguments then the default action for\n
        \ setting would be to define the property on the current object, and set\n
        \ the value of the property to the value being set.\n\n  Generally speaking
        if you intend for your computed property to be set\n  your backing function
        should accept either two or three arguments.\n\n  @method set\n  @param {String}
        keyName The key being accessed.\n  @param {Object} newValue The new value
        being assigned.\n  @param {String} oldValue The old value being replaced.\n
        \ @return {Object} The return value of the function backing the CP.\n*/\nComputedPropertyPrototype.set
        = function(obj, keyName, value) {\n  var cacheable = this._cacheable,\n      func
        = this.func,\n      meta = metaFor(obj, cacheable),\n      watched = meta.watching[keyName],\n
        \     oldSuspended = this._suspended,\n      hadCachedValue = false,\n      cache
        = meta.cache,\n      funcArgLength, cachedValue, ret;\n\n  if (this._readOnly)
        {\n    throw new Error('Cannot Set: ' + keyName + ' on: ' + obj.toString()
        );\n  }\n\n  this._suspended = obj;\n\n  try {\n\n    if (cacheable && cache.hasOwnProperty(keyName))
        {\n      cachedValue = cache[keyName];\n      hadCachedValue = true;\n    }\n\n
        \   // Check if the CP has been wrapped. If if has, use the\n    // length
        from the wrapped function.\n    funcArgLength = (func.wrappedFunction ? func.wrappedFunction.length
        : func.length);\n\n    // For backwards-compatibility with computed properties\n
        \   // that check for arguments.length === 2 to determine if\n    // they
        are being get or set, only pass the old cached\n    // value if the computed
        property opts into a third\n    // argument.\n    if (funcArgLength === 3)
        {\n      ret = func.call(obj, keyName, value, cachedValue);\n    } else if
        (funcArgLength === 2) {\n      ret = func.call(obj, keyName, value);\n    }
        else {\n      Ember.defineProperty(obj, keyName, null, cachedValue);\n      Ember.set(obj,
        keyName, value);\n      return;\n    }\n\n    if (hadCachedValue && cachedValue
        === ret) { return; }\n\n    if (watched) { Ember.propertyWillChange(obj, keyName);
        }\n\n    if (hadCachedValue) {\n      delete cache[keyName];\n    }\n\n    if
        (cacheable) {\n      if (!hadCachedValue) {\n        addDependentKeys(this,
        obj, keyName, meta);\n      }\n      cache[keyName] = ret;\n    }\n\n    if
        (watched) { Ember.propertyDidChange(obj, keyName); }\n  } finally {\n    this._suspended
        = oldSuspended;\n  }\n  return ret;\n};\n\n/* called before property is overridden
        */\nComputedPropertyPrototype.teardown = function(obj, keyName) {\n  var meta
        = metaFor(obj);\n\n  if (keyName in meta.cache) {\n    removeDependentKeys(this,
        obj, keyName, meta);\n  }\n\n  if (this._cacheable) { delete meta.cache[keyName];
        }\n\n  return null; // no value to restore\n};\n\n\n/**\n  This helper returns
        a new property descriptor that wraps the passed\n  computed property function.
        You can use this helper to define properties\n  with mixins or via `Ember.defineProperty()`.\n\n
        \ The function you pass will be used to both get and set property values.\n
        \ The function should accept two parameters, key and value. If value is not\n
        \ undefined you should set the value first. In either case return the\n  current
        value of the property.\n  @method computed\n  @for Ember\n  @param {Function}
        func The computed property function.\n  @return {Ember.ComputedProperty} property
        descriptor instance\n*/\nEmber.computed = function(func) {\n  var args;\n\n
        \ if (arguments.length > 1) {\n    args = a_slice.call(arguments, 0, -1);\n
        \   func = a_slice.call(arguments, -1)[0];\n  }\n\n  if (typeof func !== \"function\")
        {\n    throw new Error(\"Computed Property declared without a property function\");\n
        \ }\n\n  var cp = new ComputedProperty(func);\n\n  if (args) {\n    cp.property.apply(cp,
        args);\n  }\n\n  return cp;\n};\n\n/**\n  Returns the cached value for a property,
        if one exists.\n  This can be useful for peeking at the value of a computed\n
        \ property that is generated lazily, without accidentally causing\n  it to
        be created.\n\n  @method cacheFor\n  @for Ember\n  @param {Object} obj the
        object whose property you want to check\n  @param {String} key the name of
        the property whose cached value you want\n    to return\n  @return {*} the
        cached value\n*/\nEmber.cacheFor = function cacheFor(obj, key) {\n  var cache
        = metaFor(obj, false).cache;\n\n  if (cache && key in cache) {\n    return
        cache[key];\n  }\n};\n\nfunction getProperties(self, propertyNames) {\n  var
        ret = {};\n  for(var i = 0; i < propertyNames.length; i++) {\n    ret[propertyNames[i]]
        = get(self, propertyNames[i]);\n  }\n  return ret;\n}\n\nfunction registerComputed(name,
        macro) {\n  Ember.computed[name] = function(dependentKey) {\n    var args
        = a_slice.call(arguments);\n    return Ember.computed(dependentKey, function()
        {\n      return macro.apply(this, args);\n    });\n  };\n}\n\nfunction registerComputedWithProperties(name,
        macro) {\n  Ember.computed[name] = function() {\n    var properties = a_slice.call(arguments);\n\n
        \   var computed = Ember.computed(function() {\n      return macro.apply(this,
        [getProperties(this, properties)]);\n    });\n\n    return computed.property.apply(computed,
        properties);\n  };\n}\n\n/**\n  A computed property that returns true if the
        value of the dependent\n  property is null, an empty string, empty array,
        or empty function.\n\n  Note: When using `Ember.computed.empty` to watch an
        array make sure to\n  use the `array.[]` syntax so the computed can subscribe
        to transitions\n  from empty to non-empty states.\n\n  Example\n\n  ```javascript\n
        \ var ToDoList = Ember.Object.extend({\n    done: Ember.computed.empty('todos.[]')
        // detect array changes\n  });\n  var todoList = ToDoList.create({todos: ['Unit
        Test', 'Documentation', 'Release']});\n  todoList.get('done'); // false\n
        \ todoList.get('todos').clear(); // []\n  todoList.get('done'); // true\n
        \ ```\n\n  @method computed.empty\n  @for Ember\n  @param {String} dependentKey\n
        \ @return {Ember.ComputedProperty} computed property which negate\n  the original
        value for property\n*/\nregisterComputed('empty', function(dependentKey) {\n
        \ return Ember.isEmpty(get(this, dependentKey));\n});\n\n/**\n  A computed
        property that returns true if the value of the dependent\n  property is NOT
        null, an empty string, empty array, or empty function.\n\n  Example\n\n  ```javascript\n
        \ var Hampster = Ember.Object.extend({\n    hasStuff: Ember.computed.notEmpty('backpack')\n
        \ });\n  var hampster = Hampster.create({backpack: ['Food', 'Sleeping Bag',
        'Tent']});\n  hampster.get('hasStuff'); // true\n  hampster.get('backpack').clear();
        // []\n  hampster.get('hasStuff'); // false\n  ```\n\n  @method computed.notEmpty\n
        \ @for Ember\n  @param {String} dependentKey\n  @return {Ember.ComputedProperty}
        computed property which returns true if\n  original value for property is
        not empty.\n*/\nregisterComputed('notEmpty', function(dependentKey) {\n  return
        !Ember.isEmpty(get(this, dependentKey));\n});\n\n/**\n  A computed property
        that returns true if the value of the dependent\n  property is null or undefined.
        This avoids errors from JSLint complaining\n  about use of ==, which can be
        technically confusing.\n\n  Example\n\n  ```javascript\n  var Hampster = Ember.Object.extend({\n
        \   isHungry: Ember.computed.none('food')\n  });\n  var hampster = Hampster.create();\n
        \ hampster.get('isHungry'); // true\n  hampster.set('food', 'Banana');\n  hampster.get('isHungry');
        // false\n  hampster.set('food', null);\n  hampster.get('isHungry'); // true\n
        \ ```\n\n  @method computed.none\n  @for Ember\n  @param {String} dependentKey\n
        \ @return {Ember.ComputedProperty} computed property which\n  returns true
        if original value for property is null or undefined.\n*/\nregisterComputed('none',
        function(dependentKey) {\n  return Ember.isNone(get(this, dependentKey));\n});\n\n/**\n
        \ A computed property that returns the inverse boolean value\n  of the original
        value for the dependent property.\n\n  Example\n\n  ```javascript\n  var User
        = Ember.Object.extend({\n    isAnonymous: Ember.computed.not('loggedIn')\n
        \ });\n  var user = User.create({loggedIn: false});\n  user.get('isAnonymous');
        // true\n  user.set('loggedIn', true);\n  user.get('isAnonymous'); // false\n
        \ ```\n\n  @method computed.not\n  @for Ember\n  @param {String} dependentKey\n
        \ @return {Ember.ComputedProperty} computed property which returns\n  inverse
        of the original value for property\n*/\nregisterComputed('not', function(dependentKey)
        {\n  return !get(this, dependentKey);\n});\n\n/**\n  A computed property that
        converts the provided dependent property\n  into a boolean value.\n\n  ```javascript\n
        \ var Hampster = Ember.Object.extend({\n    hasBananas: Ember.computed.bool('numBananas')\n
        \ });\n  var hampster = Hampster.create();\n  hampster.get('hasBananas');
        // false\n  hampster.set('numBananas', 0);\n  hampster.get('hasBananas');
        // false\n  hampster.set('numBananas', 1);\n  hampster.get('hasBananas');
        // true\n  hampster.set('numBananas', null);\n  hampster.get('hasBananas');
        // false\n  ```\n\n  @method computed.bool\n  @for Ember\n  @param {String}
        dependentKey\n  @return {Ember.ComputedProperty} computed property which converts\n
        \ to boolean the original value for property\n*/\nregisterComputed('bool',
        function(dependentKey) {\n  return !!get(this, dependentKey);\n});\n\n/**\n
        \ A computed property which matches the original value for the\n  dependent
        property against a given RegExp, returning `true`\n  if they values matches
        the RegExp and `false` if it does not.\n\n  Example\n\n  ```javascript\n  var
        User = Ember.Object.extend({\n    hasValidEmail: Ember.computed.match('email',
        /^.+@.+\\..+$/)\n  });\n  var user = User.create({loggedIn: false});\n  user.get('hasValidEmail');
        // false\n  user.set('email', '');\n  user.get('hasValidEmail'); // false\n
        \ user.set('email', 'ember_hampster@example.com');\n  user.get('hasValidEmail');
        // true\n  ```\n\n  @method computed.match\n  @for Ember\n  @param {String}
        dependentKey\n  @param {RegExp} regexp\n  @return {Ember.ComputedProperty}
        computed property which match\n  the original value for property against a
        given RegExp\n*/\nregisterComputed('match', function(dependentKey, regexp)
        {\n  var value = get(this, dependentKey);\n  return typeof value === 'string'
        ? !!value.match(regexp) : false;\n});\n\n/**\n  A computed property that returns
        true if the provided dependent property\n  is equal to the given value.\n\n
        \ Example\n\n  ```javascript\n  var Hampster = Ember.Object.extend({\n    napTime:
        Ember.computed.equal('state', 'sleepy')\n  });\n  var hampster = Hampster.create();\n
        \ hampster.get('napTime'); // false\n  hampster.set('state', 'sleepy');\n
        \ hampster.get('napTime'); // true\n  hampster.set('state', 'hungry');\n  hampster.get('napTime');
        // false\n  ```\n\n  @method computed.equal\n  @for Ember\n  @param {String}
        dependentKey\n  @param {String|Number|Object} value\n  @return {Ember.ComputedProperty}
        computed property which returns true if\n  the original value for property
        is equal to the given value.\n*/\nregisterComputed('equal', function(dependentKey,
        value) {\n  return get(this, dependentKey) === value;\n});\n\n/**\n  A computed
        property that returns true if the provied dependent property\n  is greater
        than the provided value.\n\n  Example\n\n  ```javascript\n  var Hampster =
        Ember.Object.extend({\n    hasTooManyBananas: Ember.computed.gt('numBananas',
        10)\n  });\n  var hampster = Hampster.create();\n  hampster.get('hasTooManyBananas');
        // false\n  hampster.set('numBananas', 3);\n  hampster.get('hasTooManyBananas');
        // false\n  hampster.set('numBananas', 11);\n  hampster.get('hasTooManyBananas');
        // true\n  ```\n\n  @method computed.gt\n  @for Ember\n  @param {String} dependentKey\n
        \ @param {Number} value\n  @return {Ember.ComputedProperty} computed property
        which returns true if\n  the original value for property is greater then given
        value.\n*/\nregisterComputed('gt', function(dependentKey, value) {\n  return
        get(this, dependentKey) > value;\n});\n\n/**\n  A computed property that returns
        true if the provided dependent property\n  is greater than or equal to the
        provided value.\n\n  Example\n\n  ```javascript\n  var Hampster = Ember.Object.extend({\n
        \   hasTooManyBananas: Ember.computed.gte('numBananas', 10)\n  });\n  var
        hampster = Hampster.create();\n  hampster.get('hasTooManyBananas'); // false\n
        \ hampster.set('numBananas', 3);\n  hampster.get('hasTooManyBananas'); //
        false\n  hampster.set('numBananas', 10);\n  hampster.get('hasTooManyBananas');
        // true\n  ```\n\n  @method computed.gte\n  @for Ember\n  @param {String}
        dependentKey\n  @param {Number} value\n  @return {Ember.ComputedProperty}
        computed property which returns true if\n  the original value for property
        is greater or equal then given value.\n*/\nregisterComputed('gte', function(dependentKey,
        value) {\n  return get(this, dependentKey) >= value;\n});\n\n/**\n  A computed
        property that returns true if the provided dependent property\n  is less than
        the provided value.\n\n  Example\n\n  ```javascript\n  var Hampster = Ember.Object.extend({\n
        \   needsMoreBananas: Ember.computed.lt('numBananas', 3)\n  });\n  var hampster
        = Hampster.create();\n  hampster.get('needsMoreBananas'); // true\n  hampster.set('numBananas',
        3);\n  hampster.get('needsMoreBananas'); // false\n  hampster.set('numBananas',
        2);\n  hampster.get('needsMoreBananas'); // true\n  ```\n\n  @method computed.lt\n
        \ @for Ember\n  @param {String} dependentKey\n  @param {Number} value\n  @return
        {Ember.ComputedProperty} computed property which returns true if\n  the original
        value for property is less then given value.\n*/\nregisterComputed('lt', function(dependentKey,
        value) {\n  return get(this, dependentKey) < value;\n});\n\n/**\n  A computed
        property that returns true if the provided dependent property\n  is less than
        or equal to the provided value.\n\n  Example\n\n  ```javascript\n  var Hampster
        = Ember.Object.extend({\n    needsMoreBananas: Ember.computed.lte('numBananas',
        3)\n  });\n  var hampster = Hampster.create();\n  hampster.get('needsMoreBananas');
        // true\n  hampster.set('numBananas', 5);\n  hampster.get('needsMoreBananas');
        // false\n  hampster.set('numBananas', 3);\n  hampster.get('needsMoreBananas');
        // true\n  ```\n\n  @method computed.lte\n  @for Ember\n  @param {String}
        dependentKey\n  @param {Number} value\n  @return {Ember.ComputedProperty}
        computed property which returns true if\n  the original value for property
        is less or equal then given value.\n*/\nregisterComputed('lte', function(dependentKey,
        value) {\n  return get(this, dependentKey) <= value;\n});\n\n/**\n  A computed
        property that performs a logical `and` on the\n  original values for the provided
        dependent properties.\n\n\n  Example\n\n  ```javascript\n  var Hampster =
        Ember.Object.extend({\n    readyForCamp: Ember.computed.and('hasTent', 'hasBackpack')\n
        \ });\n  var hampster = Hampster.create();\n  hampster.get('readyForCamp');
        // false\n  hampster.set('hasTent', true);\n  hampster.get('readyForCamp');
        // false\n  hampster.set('hasBackpack', true);\n  hampster.get('readyForCamp');
        // true\n  ```\n\n  @method computed.and\n  @for Ember\n  @param {String}
        dependentKey, [dependentKey...]\n  @return {Ember.ComputedProperty} computed
        property which performs\n  a logical `and` on the values of all the original
        values for properties.\n*/\nregisterComputedWithProperties('and', function(properties)
        {\n  for (var key in properties) {\n    if (properties.hasOwnProperty(key)
        && !properties[key]) {\n      return false;\n    }\n  }\n  return true;\n});\n\n/**\n
        \ A computed property which performs a logical `or` on the\n  original values
        for the provided dependent properties.\n\n  Example\n\n  ```javascript\n  var
        Hampster = Ember.Object.extend({\n    readyForRain: Ember.computed.or('hasJacket',
        'hasUmbrella')\n  });\n  var hampster = Hampster.create();\n  hampster.get('readyForRain');
        // false\n  hampster.set('hasJacket', true);\n  hampster.get('readyForRain');
        // true\n  ```\n\n  @method computed.or\n  @for Ember\n  @param {String} dependentKey,
        [dependentKey...]\n  @return {Ember.ComputedProperty} computed property which
        performs\n  a logical `or` on the values of all the original values for properties.\n*/\nregisterComputedWithProperties('or',
        function(properties) {\n  for (var key in properties) {\n    if (properties.hasOwnProperty(key)
        && properties[key]) {\n      return true;\n    }\n  }\n  return false;\n});\n\n/**\n
        \ A computed property that returns the first truthy value\n  from a list of
        dependent properties.\n\n  Example\n\n  ```javascript\n  var Hampster = Ember.Object.extend({\n
        \   hasClothes: Ember.computed.any('hat', 'shirt')\n  });\n  var hampster
        = Hampster.create();\n  hampster.get('hasClothes'); // null\n  hampster.set('shirt',
        'Hawaiian Shirt');\n  hampster.get('hasClothes'); // 'Hawaiian Shirt'\n  ```\n\n
        \ @method computed.any\n  @for Ember\n  @param {String} dependentKey, [dependentKey...]\n
        \ @return {Ember.ComputedProperty} computed property which returns\n  the
        first truthy value of given list of properties.\n*/\nregisterComputedWithProperties('any',
        function(properties) {\n  for (var key in properties) {\n    if (properties.hasOwnProperty(key)
        && properties[key]) {\n      return properties[key];\n    }\n  }\n  return
        null;\n});\n\n/**\n  A computed property that returns the array of values\n
        \ for the provided dependent properties.\n\n  Example\n\n  ```javascript\n
        \ var Hampster = Ember.Object.extend({\n    clothes: Ember.computed.map('hat',
        'shirt')\n  });\n  var hampster = Hampster.create();\n  hampster.get('clothes');
        // [null, null]\n  hampster.set('hat', 'Camp Hat');\n  hampster.set('shirt',
        'Camp Shirt');\n  hampster.get('clothes'); // ['Camp Hat', 'Camp Shirt']\n
        \ ```\n\n  @method computed.map\n  @for Ember\n  @param {String} dependentKey,
        [dependentKey...]\n  @return {Ember.ComputedProperty} computed property which
        maps\n  values of all passed properties in to an array.\n*/\nregisterComputedWithProperties('collect',
        function(properties) {\n  var res = [];\n  for (var key in properties) {\n
        \   if (properties.hasOwnProperty(key)) {\n      if (Ember.isNone(properties[key]))
        {\n        res.push(null);\n      } else {\n        res.push(properties[key]);\n
        \     }\n    }\n  }\n  return res;\n});\n\n/**\n  Creates a new property that
        is an alias for another property\n  on an object. Calls to `get` or `set`
        this property behave as\n  though they were called on the original property.\n\n
        \ ```javascript\n  Person = Ember.Object.extend({\n    name: 'Alex Matchneer',\n
        \   nomen: Ember.computed.alias('name')\n  });\n\n  alex = Person.create();\n
        \ alex.get('nomen'); // 'Alex Matchneer'\n  alex.get('name');  // 'Alex Matchneer'\n\n
        \ alex.set('nomen', '@machty');\n  alex.get('name');  // '@machty'\n  ```\n
        \ @method computed.alias\n  @for Ember\n  @param {String} dependentKey\n  @return
        {Ember.ComputedProperty} computed property which creates an\n  alias to the
        original value for property.\n*/\nEmber.computed.alias = function(dependentKey)
        {\n  return Ember.computed(dependentKey, function(key, value) {\n    if (arguments.length
        > 1) {\n      set(this, dependentKey, value);\n      return value;\n    }
        else {\n      return get(this, dependentKey);\n    }\n  });\n};\n\n/**\n  Where
        `computed.alias` aliases `get` and `set`, and allows for bidirectional\n  data
        flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n  not
        mutate the upstream property, rather causes the current property to\n  become
        the value set. This causes the downstream property to permentantly\n  diverge
        from the upstream property.\n\n  Example\n\n  ```javascript\n  User = Ember.Object.extend({\n
        \   firstName: null,\n    lastName: null,\n    nickName: Ember.computed.oneWay('firstName')\n
        \ });\n\n  user = User.create({\n    firstName: 'Teddy',\n    lastName:  'Zeenny'\n
        \ });\n\n  user.get('nickName');\n  # 'Teddy'\n\n  user.set('nickName', 'TeddyBear');\n
        \ # 'TeddyBear'\n\n  user.get('firstName');\n  # 'Teddy'\n  ```\n\n  @method
        computed.oneWay\n  @for Ember\n  @param {String} dependentKey\n  @return {Ember.ComputedProperty}
        computed property which creates a\n  one way computed property to the original
        value for property.\n*/\nEmber.computed.oneWay = function(dependentKey) {\n
        \ return Ember.computed(dependentKey, function() {\n    return get(this, dependentKey);\n
        \ });\n};\n\n\n/**\n  A computed property that acts like a standard getter
        and setter,\n  but returns the value at the provided `defaultPath` if the\n
        \ property itself has not been set to a value\n\n  Example\n\n  ```javascript\n
        \ var Hampster = Ember.Object.extend({\n    wishList: Ember.computed.defaultTo('favoriteFood')\n
        \ });\n  var hampster = Hampster.create({favoriteFood: 'Banana'});\n  hampster.get('wishList');
        // 'Banana'\n  hampster.set('wishList', 'More Unit Tests');\n  hampster.get('wishList');
        // 'More Unit Tests'\n  hampster.get('favoriteFood'); // 'Banana'\n  ```\n\n
        \ @method computed.defaultTo\n  @for Ember\n  @param {String} defaultPath\n
        \ @return {Ember.ComputedProperty} computed property which acts like\n  a
        standard getter and setter, but defaults to the value from `defaultPath`.\n*/\nEmber.computed.defaultTo
        = function(defaultPath) {\n  return Ember.computed(function(key, newValue,
        cachedValue) {\n    if (arguments.length === 1) {\n      return cachedValue
        != null ? cachedValue : get(this, defaultPath);\n    }\n    return newValue
        != null ? newValue : get(this, defaultPath);\n  });\n};\n\n\n\n})();\n\n\n\n(function()
        {\n// Ember.tryFinally\n/**\n@module ember-metal\n*/\n\nvar AFTER_OBSERVERS
        = ':change';\nvar BEFORE_OBSERVERS = ':before';\n\nfunction changeEvent(keyName)
        {\n  return keyName+AFTER_OBSERVERS;\n}\n\nfunction beforeEvent(keyName) {\n
        \ return keyName+BEFORE_OBSERVERS;\n}\n\n/**\n  @method addObserver\n  @param
        obj\n  @param {String} path\n  @param {Object|Function} targetOrMethod\n  @param
        {Function|String} [method]\n*/\nEmber.addObserver = function(obj, path, target,
        method) {\n  Ember.addListener(obj, changeEvent(path), target, method);\n
        \ Ember.watch(obj, path);\n  return this;\n};\n\nEmber.observersFor = function(obj,
        path) {\n  return Ember.listenersFor(obj, changeEvent(path));\n};\n\n/**\n
        \ @method removeObserver\n  @param obj\n  @param {String} path\n  @param {Object|Function}
        targetOrMethod\n  @param {Function|String} [method]\n*/\nEmber.removeObserver
        = function(obj, path, target, method) {\n  Ember.unwatch(obj, path);\n  Ember.removeListener(obj,
        changeEvent(path), target, method);\n  return this;\n};\n\n/**\n  @method
        addBeforeObserver\n  @param obj\n  @param {String} path\n  @param {Object|Function}
        targetOrMethod\n  @param {Function|String} [method]\n*/\nEmber.addBeforeObserver
        = function(obj, path, target, method) {\n  Ember.addListener(obj, beforeEvent(path),
        target, method);\n  Ember.watch(obj, path);\n  return this;\n};\n\n// Suspend
        observer during callback.\n//\n// This should only be used by the target of
        the observer\n// while it is setting the observed path.\nEmber._suspendBeforeObserver
        = function(obj, path, target, method, callback) {\n  return Ember._suspendListener(obj,
        beforeEvent(path), target, method, callback);\n};\n\nEmber._suspendObserver
        = function(obj, path, target, method, callback) {\n  return Ember._suspendListener(obj,
        changeEvent(path), target, method, callback);\n};\n\nvar map = Ember.ArrayPolyfills.map;\n\nEmber._suspendBeforeObservers
        = function(obj, paths, target, method, callback) {\n  var events = map.call(paths,
        beforeEvent);\n  return Ember._suspendListeners(obj, events, target, method,
        callback);\n};\n\nEmber._suspendObservers = function(obj, paths, target, method,
        callback) {\n  var events = map.call(paths, changeEvent);\n  return Ember._suspendListeners(obj,
        events, target, method, callback);\n};\n\nEmber.beforeObserversFor = function(obj,
        path) {\n  return Ember.listenersFor(obj, beforeEvent(path));\n};\n\n/**\n
        \ @method removeBeforeObserver\n  @param obj\n  @param {String} path\n  @param
        {Object|Function} targetOrMethod\n  @param {Function|String} [method]\n*/\nEmber.removeBeforeObserver
        = function(obj, path, target, method) {\n  Ember.unwatch(obj, path);\n  Ember.removeListener(obj,
        beforeEvent(path), target, method);\n  return this;\n};\n})();\n\n\n\n(function()
        {\ndefine(\"backburner/queue\",\n  [\"exports\"],\n  function(__exports__)
        {\n    \"use strict\";\n    function Queue(daq, name, options) {\n      this.daq
        = daq;\n      this.name = name;\n      this.options = options;\n      this._queue
        = [];\n    }\n\n    Queue.prototype = {\n      daq: null,\n      name: null,\n
        \     options: null,\n      _queue: null,\n\n      push: function(target,
        method, args, stack) {\n        var queue = this._queue;\n        queue.push(target,
        method, args, stack);\n        return {queue: this, target: target, method:
        method};\n      },\n\n      pushUnique: function(target, method, args, stack)
        {\n        var queue = this._queue, currentTarget, currentMethod, i, l;\n\n
        \       for (i = 0, l = queue.length; i < l; i += 4) {\n          currentTarget
        = queue[i];\n          currentMethod = queue[i+1];\n\n          if (currentTarget
        === target && currentMethod === method) {\n            queue[i+2] = args;
        // replace args\n            queue[i+3] = stack; // replace stack\n            return
        {queue: this, target: target, method: method}; // TODO: test this code path\n
        \         }\n        }\n\n        this._queue.push(target, method, args, stack);\n
        \       return {queue: this, target: target, method: method};\n      },\n\n
        \     // TODO: remove me, only being used for Ember.run.sync\n      flush:
        function() {\n        var queue = this._queue,\n            options = this.options,\n
        \           before = options && options.before,\n            after = options
        && options.after,\n            target, method, args, stack, i, l = queue.length;\n\n
        \       if (l && before) { before(); }\n        for (i = 0; i < l; i += 4)
        {\n          target = queue[i];\n          method = queue[i+1];\n          args
        \  = queue[i+2];\n          stack  = queue[i+3]; // Debugging assistance\n\n
        \         // TODO: error handling\n          if (args && args.length > 0)
        {\n            method.apply(target, args);\n          } else {\n            method.call(target);\n
        \         }\n        }\n        if (l && after) { after(); }\n\n        //
        check if new items have been added\n        if (queue.length > l) {\n          this._queue
        = queue.slice(l);\n          this.flush();\n        } else {\n          this._queue.length
        = 0;\n        }\n      },\n\n      cancel: function(actionToCancel) {\n        var
        queue = this._queue, currentTarget, currentMethod, i, l;\n\n        for (i
        = 0, l = queue.length; i < l; i += 4) {\n          currentTarget = queue[i];\n
        \         currentMethod = queue[i+1];\n\n          if (currentTarget === actionToCancel.target
        && currentMethod === actionToCancel.method) {\n            queue.splice(i,
        4);\n            return true;\n          }\n        }\n\n        // if not
        found in current queue\n        // could be in the queue that is being flushed\n
        \       queue = this._queueBeingFlushed;\n        if (!queue) {\n          return;\n
        \       }\n        for (i = 0, l = queue.length; i < l; i += 4) {\n          currentTarget
        = queue[i];\n          currentMethod = queue[i+1];\n\n          if (currentTarget
        === actionToCancel.target && currentMethod === actionToCancel.method) {\n
        \           // don't mess with array during flush\n            // just nullify
        the method\n            queue[i+1] = null;\n            return true;\n          }\n
        \       }\n      }\n    };\n\n\n    __exports__.Queue = Queue;\n  });\n\ndefine(\"backburner/deferred_action_queues\",\n
        \ [\"backburner/queue\",\"exports\"],\n  function(__dependency1__, __exports__)
        {\n    \"use strict\";\n    var Queue = __dependency1__.Queue;\n\n    function
        DeferredActionQueues(queueNames, options) {\n      var queues = this.queues
        = {};\n      this.queueNames = queueNames = queueNames || [];\n\n      var
        queueName;\n      for (var i = 0, l = queueNames.length; i < l; i++) {\n        queueName
        = queueNames[i];\n        queues[queueName] = new Queue(this, queueName, options[queueName]);\n
        \     }\n    }\n\n    DeferredActionQueues.prototype = {\n      queueNames:
        null,\n      queues: null,\n\n      schedule: function(queueName, target,
        method, args, onceFlag, stack) {\n        var queues = this.queues,\n            queue
        = queues[queueName];\n\n        if (!queue) { throw new Error(\"You attempted
        to schedule an action in a queue (\" + queueName + \") that doesn't exist\");
        }\n\n        if (onceFlag) {\n          return queue.pushUnique(target, method,
        args, stack);\n        } else {\n          return queue.push(target, method,
        args, stack);\n        }\n      },\n\n      flush: function() {\n        var
        queues = this.queues,\n            queueNames = this.queueNames,\n            queueName,
        queue, queueItems, priorQueueNameIndex,\n            queueNameIndex = 0, numberOfQueues
        = queueNames.length;\n\n        outerloop:\n        while (queueNameIndex
        < numberOfQueues) {\n          queueName = queueNames[queueNameIndex];\n          queue
        = queues[queueName];\n          queueItems = queue._queueBeingFlushed = queue._queue.slice();\n
        \         queue._queue = [];\n\n          var options = queue.options,\n              before
        = options && options.before,\n              after = options && options.after,\n
        \             target, method, args, stack,\n              queueIndex = 0,
        numberOfQueueItems = queueItems.length;\n\n          if (numberOfQueueItems
        && before) { before(); }\n          while (queueIndex < numberOfQueueItems)
        {\n            target = queueItems[queueIndex];\n            method = queueItems[queueIndex+1];\n
        \           args   = queueItems[queueIndex+2];\n            stack  = queueItems[queueIndex+3];
        // Debugging assistance\n\n            if (typeof method === 'string') { method
        = target[method]; }\n\n            // method could have been nullified / canceled
        during flush\n            if (method) {\n              // TODO: error handling\n
        \             if (args && args.length > 0) {\n                method.apply(target,
        args);\n              } else {\n                method.call(target);\n              }\n
        \           }\n\n            queueIndex += 4;\n          }\n          queue._queueBeingFlushed
        = null;\n          if (numberOfQueueItems && after) { after(); }\n\n          if
        ((priorQueueNameIndex = indexOfPriorQueueWithActions(this, queueNameIndex))
        !== -1) {\n            queueNameIndex = priorQueueNameIndex;\n            continue
        outerloop;\n          }\n\n          queueNameIndex++;\n        }\n      }\n
        \   };\n\n    function indexOfPriorQueueWithActions(daq, currentQueueIndex)
        {\n      var queueName, queue;\n\n      for (var i = 0, l = currentQueueIndex;
        i <= l; i++) {\n        queueName = daq.queueNames[i];\n        queue = daq.queues[queueName];\n
        \       if (queue._queue.length) { return i; }\n      }\n\n      return -1;\n
        \   }\n\n\n    __exports__.DeferredActionQueues = DeferredActionQueues;\n
        \ });\n\ndefine(\"backburner\",\n  [\"backburner/deferred_action_queues\",\"exports\"],\n
        \ function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DeferredActionQueues
        = __dependency1__.DeferredActionQueues;\n\n    var slice = [].slice,\n        pop
        = [].pop,\n        throttlers = [],\n        debouncees = [],\n        timers
        = [],\n        autorun, laterTimer, laterTimerExpiresAt,\n        global =
        this,\n        NUMBER = /\\d+/;\n\n    function isCoercableNumber(number)
        {\n      return typeof number === 'number' || NUMBER.test(number);\n    }\n\n
        \   function Backburner(queueNames, options) {\n      this.queueNames = queueNames;\n
        \     this.options = options || {};\n      if (!this.options.defaultQueue)
        {\n        this.options.defaultQueue = queueNames[0];\n      }\n      this.instanceStack
        = [];\n    }\n\n    Backburner.prototype = {\n      queueNames: null,\n      options:
        null,\n      currentInstance: null,\n      instanceStack: null,\n\n      begin:
        function() {\n        var onBegin = this.options && this.options.onBegin,\n
        \           previousInstance = this.currentInstance;\n\n        if (previousInstance)
        {\n          this.instanceStack.push(previousInstance);\n        }\n\n        this.currentInstance
        = new DeferredActionQueues(this.queueNames, this.options);\n        if (onBegin)
        {\n          onBegin(this.currentInstance, previousInstance);\n        }\n
        \     },\n\n      end: function() {\n        var onEnd = this.options && this.options.onEnd,\n
        \           currentInstance = this.currentInstance,\n            nextInstance
        = null;\n\n        try {\n          currentInstance.flush();\n        } finally
        {\n          this.currentInstance = null;\n\n          if (this.instanceStack.length)
        {\n            nextInstance = this.instanceStack.pop();\n            this.currentInstance
        = nextInstance;\n          }\n\n          if (onEnd) {\n            onEnd(currentInstance,
        nextInstance);\n          }\n        }\n      },\n\n      run: function(target,
        method /*, args */) {\n        var ret;\n        this.begin();\n\n        if
        (!method) {\n          method = target;\n          target = null;\n        }\n\n
        \       if (typeof method === 'string') {\n          method = target[method];\n
        \       }\n\n        // Prevent Safari double-finally.\n        var finallyAlreadyCalled
        = false;\n        try {\n          if (arguments.length > 2) {\n            ret
        = method.apply(target, slice.call(arguments, 2));\n          } else {\n            ret
        = method.call(target);\n          }\n        } finally {\n          if (!finallyAlreadyCalled)
        {\n            finallyAlreadyCalled = true;\n            this.end();\n          }\n
        \       }\n        return ret;\n      },\n\n      defer: function(queueName,
        target, method /* , args */) {\n        if (!method) {\n          method =
        target;\n          target = null;\n        }\n\n        if (typeof method
        === 'string') {\n          method = target[method];\n        }\n\n        var
        stack = this.DEBUG ? new Error().stack : undefined,\n            args = arguments.length
        > 3 ? slice.call(arguments, 3) : undefined;\n        if (!this.currentInstance)
        { createAutorun(this); }\n        return this.currentInstance.schedule(queueName,
        target, method, args, false, stack);\n      },\n\n      deferOnce: function(queueName,
        target, method /* , args */) {\n        if (!method) {\n          method =
        target;\n          target = null;\n        }\n\n        if (typeof method
        === 'string') {\n          method = target[method];\n        }\n\n        var
        stack = this.DEBUG ? new Error().stack : undefined,\n            args = arguments.length
        > 3 ? slice.call(arguments, 3) : undefined;\n        if (!this.currentInstance)
        { createAutorun(this); }\n        return this.currentInstance.schedule(queueName,
        target, method, args, true, stack);\n      },\n\n      setTimeout: function()
        {\n        var args = slice.call(arguments);\n        var length = args.length;\n
        \       var method, wait, target;\n        var self = this;\n        var methodOrTarget,
        methodOrWait, methodOrArgs;\n\n        if (length === 0) {\n          return;\n
        \       } else if (length === 1) {\n          method = args.shift();\n          wait
        = 0;\n        } else if (length === 2) {\n          methodOrTarget = args[0];\n
        \         methodOrWait = args[1];\n\n          if (typeof methodOrWait ===
        'function' || typeof  methodOrTarget[methodOrWait] === 'function') {\n            target
        = args.shift();\n            method = args.shift();\n            wait = 0;\n
        \         } else if (isCoercableNumber(methodOrWait)) {\n            method
        = args.shift();\n            wait = args.shift();\n          } else {\n            method
        = args.shift();\n            wait =  0;\n          }\n        } else {\n          var
        last = args[args.length - 1];\n\n          if (isCoercableNumber(last)) {\n
        \           wait = args.pop();\n          }\n\n          methodOrTarget =
        args[0];\n          methodOrArgs = args[1];\n\n          if (typeof methodOrArgs
        === 'function' || (typeof methodOrArgs === 'string' &&\n                                                     methodOrTarget
        !== null &&\n                                                     methodOrArgs
        in methodOrTarget)) {\n            target = args.shift();\n            method
        = args.shift();\n          } else {\n            method = args.shift();\n
        \         }\n        }\n\n        var executeAt = (+new Date()) + parseInt(wait,
        10);\n\n        if (typeof method === 'string') {\n          method = target[method];\n
        \       }\n\n        function fn() {\n          method.apply(target, args);\n
        \       }\n\n        // find position to insert - TODO: binary search\n        var
        i, l;\n        for (i = 0, l = timers.length; i < l; i += 2) {\n          if
        (executeAt < timers[i]) { break; }\n        }\n\n        timers.splice(i,
        0, executeAt, fn);\n\n        if (laterTimer && laterTimerExpiresAt < executeAt)
        { return fn; }\n\n        if (laterTimer) {\n          clearTimeout(laterTimer);\n
        \         laterTimer = null;\n        }\n        laterTimer = global.setTimeout(function()
        {\n          executeTimers(self);\n          laterTimer = null;\n          laterTimerExpiresAt
        = null;\n        }, wait);\n        laterTimerExpiresAt = executeAt;\n\n        return
        fn;\n      },\n\n      throttle: function(target, method /* , args, wait */)
        {\n        var self = this,\n            args = arguments,\n            wait
        = pop.call(args),\n            throttler;\n\n        for (var i = 0, l = throttlers.length;
        i < l; i++) {\n          throttler = throttlers[i];\n          if (throttler[0]
        === target && throttler[1] === method) { return; } // do nothing\n        }\n\n
        \       var timer = global.setTimeout(function() {\n          self.run.apply(self,
        args);\n\n          // remove throttler\n          var index = -1;\n          for
        (var i = 0, l = throttlers.length; i < l; i++) {\n            throttler =
        throttlers[i];\n            if (throttler[0] === target && throttler[1] ===
        method) {\n              index = i;\n              break;\n            }\n
        \         }\n\n          if (index > -1) { throttlers.splice(index, 1); }\n
        \       }, wait);\n\n        throttlers.push([target, method, timer]);\n      },\n\n
        \     debounce: function(target, method /* , args, wait, [immediate] */) {\n
        \       var self = this,\n            args = arguments,\n            immediate
        = pop.call(args),\n            wait,\n            index,\n            debouncee;\n\n
        \       if (typeof immediate === \"number\") {\n          wait = immediate;\n
        \         immediate = false;\n        } else {\n          wait = pop.call(args);\n
        \       }\n\n        // Remove debouncee\n        index = findDebouncee(target,
        method);\n\n        if (index !== -1) {\n          debouncee = debouncees[index];\n
        \         debouncees.splice(index, 1);\n          clearTimeout(debouncee[2]);\n
        \       }\n\n        var timer = global.setTimeout(function() {\n          if
        (!immediate) {\n            self.run.apply(self, args);\n          }\n          index
        = findDebouncee(target, method);\n          if (index) {\n            debouncees.splice(index,
        1);\n          }\n        }, wait);\n\n        if (immediate && index ===
        -1) {\n          self.run.apply(self, args);\n        }\n\n        debouncees.push([target,
        method, timer]);\n      },\n\n      cancelTimers: function() {\n        var
        i, len;\n\n        for (i = 0, len = throttlers.length; i < len; i++) {\n
        \         clearTimeout(throttlers[i][2]);\n        }\n        throttlers =
        [];\n\n        for (i = 0, len = debouncees.length; i < len; i++) {\n          clearTimeout(debouncees[i][2]);\n
        \       }\n        debouncees = [];\n\n        if (laterTimer) {\n          clearTimeout(laterTimer);\n
        \         laterTimer = null;\n        }\n        timers = [];\n\n        if
        (autorun) {\n          clearTimeout(autorun);\n          autorun = null;\n
        \       }\n      },\n\n      hasTimers: function() {\n        return !!timers.length
        || autorun;\n      },\n\n      cancel: function(timer) {\n        if (timer
        && typeof timer === 'object' && timer.queue && timer.method) { // we're cancelling
        a deferOnce\n          return timer.queue.cancel(timer);\n        } else if
        (typeof timer === 'function') { // we're cancelling a setTimeout\n          for
        (var i = 0, l = timers.length; i < l; i += 2) {\n            if (timers[i
        + 1] === timer) {\n              timers.splice(i, 2); // remove the two elements\n
        \             return true;\n            }\n          }\n        } else {\n
        \         return; // timer was null or not a timer\n        }\n      }\n    };\n\n
        \   Backburner.prototype.schedule = Backburner.prototype.defer;\n    Backburner.prototype.scheduleOnce
        = Backburner.prototype.deferOnce;\n    Backburner.prototype.later = Backburner.prototype.setTimeout;\n\n
        \   function createAutorun(backburner) {\n      backburner.begin();\n      autorun
        = global.setTimeout(function() {\n        autorun = null;\n        backburner.end();\n
        \     });\n    }\n\n    function executeTimers(self) {\n      var now = +new
        Date(),\n          time, fns, i, l;\n\n      self.run(function() {\n        //
        TODO: binary search\n        for (i = 0, l = timers.length; i < l; i += 2)
        {\n          time = timers[i];\n          if (time > now) { break; }\n        }\n\n
        \       fns = timers.splice(0, i);\n\n        for (i = 1, l = fns.length;
        i < l; i += 2) {\n          self.schedule(self.options.defaultQueue, null,
        fns[i]);\n        }\n      });\n\n      if (timers.length) {\n        laterTimer
        = global.setTimeout(function() {\n          executeTimers(self);\n          laterTimer
        = null;\n          laterTimerExpiresAt = null;\n        }, timers[0] - now);\n
        \       laterTimerExpiresAt = timers[0];\n      }\n    }\n\n    function findDebouncee(target,
        method) {\n      var debouncee,\n          index = -1;\n\n      for (var i
        = 0, l = debouncees.length; i < l; i++) {\n        debouncee = debouncees[i];\n
        \       if (debouncee[0] === target && debouncee[1] === method) {\n          index
        = i;\n          break;\n        }\n      }\n\n      return index;\n    }\n\n\n
        \   __exports__.Backburner = Backburner;\n  });\n\n})();\n\n\n\n(function()
        {\nvar onBegin = function(current) {\n  Ember.run.currentRunLoop = current;\n};\n\nvar
        onEnd = function(current, next) {\n  Ember.run.currentRunLoop = next;\n};\n\nvar
        Backburner = requireModule('backburner').Backburner,\n    backburner = new
        Backburner(['sync', 'actions', 'destroy'], {\n      sync: {\n        before:
        Ember.beginPropertyChanges,\n        after: Ember.endPropertyChanges\n      },\n
        \     defaultQueue: 'actions',\n      onBegin: onBegin,\n      onEnd: onEnd\n
        \   }),\n    slice = [].slice;\n\n// ..........................................................\n//
        Ember.run - this is ideally the only public API the dev sees\n//\n\n/**\n
        \ Runs the passed target and method inside of a RunLoop, ensuring any\n  deferred
        actions including bindings and views updates are flushed at the\n  end.\n\n
        \ Normally you should not need to invoke this method yourself. However if\n
        \ you are implementing raw event handlers when interfacing with other\n  libraries
        or plugins, you should probably wrap all of your code inside this\n  call.\n\n
        \ ```javascript\n  Ember.run(function() {\n    // code to be execute within
        a RunLoop\n  });\n  ```\n\n  @class run\n  @namespace Ember\n  @static\n  @constructor\n
        \ @param {Object} [target] target of method to call\n  @param {Function|String}
        method Method to invoke.\n    May be a function or a string. If you pass a
        string\n    then it will be looked up on the passed target.\n  @param {Object}
        [args*] Any additional arguments you wish to pass to the method.\n  @return
        {Object} return value from invoking the passed function.\n*/\nEmber.run =
        function(target, method) {\n  var ret;\n\n  if (Ember.onerror) {\n    try
        {\n      ret = backburner.run.apply(backburner, arguments);\n    } catch (e)
        {\n      Ember.onerror(e);\n    }\n  } else {\n    ret = backburner.run.apply(backburner,
        arguments);\n  }\n\n  return ret;\n};\n\n/**\n\n  If no run-loop is present,
        it creates a new one. If a run loop is\n  present it will queue itself to
        run on the existing run-loops action\n  queue.\n\n  Please note: This is not
        for normal usage, and should be used sparingly.\n\n  If invoked when not within
        a run loop:\n\n  ```javascript\n  Ember.run.join(function() {\n    // creates
        a new run-loop\n  });\n  ```\n\n  Alternatively, if called within an existing
        run loop:\n\n  ```javascript\n  Ember.run(function() {\n    // creates a new
        run-loop\n    Ember.run.join(function() {\n      // joins with the existing
        run-loop, and queues for invocation on\n      // the existing run-loops action
        queue.\n    });\n  });\n  ```\n\n  @method join\n  @namespace Ember\n  @param
        {Object} [target] target of method to call\n  @param {Function|String} method
        Method to invoke.\n    May be a function or a string. If you pass a string\n
        \   then it will be looked up on the passed target.\n  @param {Object} [args*]
        Any additional arguments you wish to pass to the method.\n  @return {Object}
        return value from invoking the passed function. Please note,\n  when called
        within an existing loop, no return value is possible.\n*/\nEmber.run.join
        = function(target, method) {\n  if (!Ember.run.currentRunLoop) {\n    return
        Ember.run.apply(Ember.run, arguments);\n  }\n\n  var args = slice.call(arguments);\n
        \ args.unshift('actions');\n  Ember.run.schedule.apply(Ember.run, args);\n};\n\nEmber.run.backburner
        = backburner;\n\nvar run = Ember.run;\n\nEmber.run.currentRunLoop = null;\n\nEmber.run.queues
        = backburner.queueNames;\n\n/**\n  Begins a new RunLoop. Any deferred actions
        invoked after the begin will\n  be buffered until you invoke a matching call
        to `Ember.run.end()`. This is\n  a lower-level way to use a RunLoop instead
        of using `Ember.run()`.\n\n  ```javascript\n  Ember.run.begin();\n  // code
        to be execute within a RunLoop\n  Ember.run.end();\n  ```\n\n  @method begin\n
        \ @return {void}\n*/\nEmber.run.begin = function() {\n  backburner.begin();\n};\n\n/**\n
        \ Ends a RunLoop. This must be called sometime after you call\n  `Ember.run.begin()`
        to flush any deferred actions. This is a lower-level way\n  to use a RunLoop
        instead of using `Ember.run()`.\n\n  ```javascript\n  Ember.run.begin();\n
        \ // code to be execute within a RunLoop\n  Ember.run.end();\n  ```\n\n  @method
        end\n  @return {void}\n*/\nEmber.run.end = function() {\n  backburner.end();\n};\n\n/**\n
        \ Array of named queues. This array determines the order in which queues\n
        \ are flushed at the end of the RunLoop. You can define your own queues by\n
        \ simply adding the queue name to this array. Normally you should not need\n
        \ to inspect or modify this property.\n\n  @property queues\n  @type Array\n
        \ @default ['sync', 'actions', 'destroy']\n*/\n\n/**\n  Adds the passed target/method
        and any optional arguments to the named\n  queue to be executed at the end
        of the RunLoop. If you have not already\n  started a RunLoop when calling
        this method one will be started for you\n  automatically.\n\n  At the end
        of a RunLoop, any methods scheduled in this way will be invoked.\n  Methods
        will be invoked in an order matching the named queues defined in\n  the `Ember.run.queues`
        property.\n\n  ```javascript\n  Ember.run.schedule('sync', this, function()
        {\n    // this will be executed in the first RunLoop queue, when bindings
        are synced\n    console.log(\"scheduled on sync queue\");\n  });\n\n  Ember.run.schedule('actions',
        this, function() {\n    // this will be executed in the 'actions' queue, after
        bindings have synced.\n    console.log(\"scheduled on actions queue\");\n
        \ });\n\n  // Note the functions will be run in order based on the run queues
        order. Output would be:\n  //   scheduled on sync queue\n  //   scheduled
        on actions queue\n  ```\n\n  @method schedule\n  @param {String} queue The
        name of the queue to schedule against.\n    Default queues are 'sync' and
        'actions'\n  @param {Object} [target] target object to use as the context
        when invoking a method.\n  @param {String|Function} method The method to invoke.
        If you pass a string it\n    will be resolved on the target object at the
        time the scheduled item is\n    invoked allowing you to change the target
        function.\n  @param {Object} [arguments*] Optional arguments to be passed
        to the queued method.\n  @return {void}\n*/\nEmber.run.schedule = function(queue,
        target, method) {\n  checkAutoRun();\n  backburner.schedule.apply(backburner,
        arguments);\n};\n\n// Used by global test teardown\nEmber.run.hasScheduledTimers
        = function() {\n  return backburner.hasTimers();\n};\n\n// Used by global
        test teardown\nEmber.run.cancelTimers = function () {\n  backburner.cancelTimers();\n};\n\n/**\n
        \ Immediately flushes any events scheduled in the 'sync' queue. Bindings\n
        \ use this queue so this method is a useful way to immediately force all\n
        \ bindings in the application to sync.\n\n  You should call this method anytime
        you need any changed state to propagate\n  throughout the app immediately
        without repainting the UI (which happens\n  in the later 'render' queue added
        by the `ember-views` package).\n\n  ```javascript\n  Ember.run.sync();\n  ```\n\n
        \ @method sync\n  @return {void}\n*/\nEmber.run.sync = function() {\n  if
        (backburner.currentInstance) {\n    backburner.currentInstance.queues.sync.flush();\n
        \ }\n};\n\n/**\n  Invokes the passed target/method and optional arguments
        after a specified\n  period if time. The last parameter of this method must
        always be a number\n  of milliseconds.\n\n  You should use this method whenever
        you need to run some action after a\n  period of time instead of using `setTimeout()`.
        This method will ensure that\n  items that expire during the same script execution
        cycle all execute\n  together, which is often more efficient than using a
        real setTimeout.\n\n  ```javascript\n  Ember.run.later(myContext, function()
        {\n    // code here will execute within a RunLoop in about 500ms with this
        == myContext\n  }, 500);\n  ```\n\n  @method later\n  @param {Object} [target]
        target of method to invoke\n  @param {Function|String} method The method to
        invoke.\n    If you pass a string it will be resolved on the\n    target at
        the time the method is invoked.\n  @param {Object} [args*] Optional arguments
        to pass to the timeout.\n  @param {Number} wait Number of milliseconds to
        wait.\n  @return {String} a string you can use to cancel the timer in\n    `Ember.run.cancel`
        later.\n*/\nEmber.run.later = function(target, method) {\n  return backburner.later.apply(backburner,
        arguments);\n};\n\n/**\n  Schedule a function to run one time during the current
        RunLoop. This is equivalent\n  to calling `scheduleOnce` with the \"actions\"
        queue.\n\n  @method once\n  @param {Object} [target] The target of the method
        to invoke.\n  @param {Function|String} method The method to invoke.\n    If
        you pass a string it will be resolved on the\n    target at the time the method
        is invoked.\n  @param {Object} [args*] Optional arguments to pass to the timeout.\n
        \ @return {Object} timer\n*/\nEmber.run.once = function(target, method) {\n
        \ checkAutoRun();\n  var args = slice.call(arguments);\n  args.unshift('actions');\n
        \ return backburner.scheduleOnce.apply(backburner, args);\n};\n\n/**\n  Schedules
        a function to run one time in a given queue of the current RunLoop.\n  Calling
        this method with the same queue/target/method combination will have\n  no
        effect (past the initial call).\n\n  Note that although you can pass optional
        arguments these will not be\n  considered when looking for duplicates. New
        arguments will replace previous\n  calls.\n\n  ```javascript\n  Ember.run(function()
        {\n    var sayHi = function() { console.log('hi'); }\n    Ember.run.scheduleOnce('afterRender',
        myContext, sayHi);\n    Ember.run.scheduleOnce('afterRender', myContext, sayHi);\n
        \   // sayHi will only be executed once, in the afterRender queue of the RunLoop\n
        \ });\n  ```\n\n  Also note that passing an anonymous function to `Ember.run.scheduleOnce`
        will\n  not prevent additional calls with an identical anonymous function
        from\n  scheduling the items multiple times, e.g.:\n\n  ```javascript\n  function
        scheduleIt() {\n    Ember.run.scheduleOnce('actions', myContext, function()
        { console.log(\"Closure\"); });\n  }\n  scheduleIt();\n  scheduleIt();\n  //
        \"Closure\" will print twice, even though we're using `Ember.run.scheduleOnce`,\n
        \ // because the function we pass to it is anonymous and won't match the\n
        \ // previously scheduled operation.\n  ```\n\n  Available queues, and their
        order, can be found at `Ember.run.queues`\n\n  @method scheduleOnce\n  @param
        {String} [queue] The name of the queue to schedule against. Default queues
        are 'sync' and 'actions'.\n  @param {Object} [target] The target of the method
        to invoke.\n  @param {Function|String} method The method to invoke.\n    If
        you pass a string it will be resolved on the\n    target at the time the method
        is invoked.\n  @param {Object} [args*] Optional arguments to pass to the timeout.\n
        \ @return {Object} timer\n*/\nEmber.run.scheduleOnce = function(queue, target,
        method) {\n  checkAutoRun();\n  return backburner.scheduleOnce.apply(backburner,
        arguments);\n};\n\n/**\n  Schedules an item to run from within a separate
        run loop, after\n  control has been returned to the system. This is equivalent
        to calling\n  `Ember.run.later` with a wait time of 1ms.\n\n  ```javascript\n
        \ Ember.run.next(myContext, function() {\n    // code to be executed in the
        next run loop, which will be scheduled after the current one\n  });\n  ```\n\n
        \ Multiple operations scheduled with `Ember.run.next` will coalesce\n  into
        the same later run loop, along with any other operations\n  scheduled by `Ember.run.later`
        that expire right around the same\n  time that `Ember.run.next` operations
        will fire.\n\n  Note that there are often alternatives to using `Ember.run.next`.\n
        \ For instance, if you'd like to schedule an operation to happen\n  after
        all DOM element operations have completed within the current\n  run loop,
        you can make use of the `afterRender` run loop queue (added\n  by the `ember-views`
        package, along with the preceding `render` queue\n  where all the DOM element
        operations happen). Example:\n\n  ```javascript\n  App.MyCollectionView =
        Ember.CollectionView.extend({\n    didInsertElement: function() {\n      Ember.run.scheduleOnce('afterRender',
        this, 'processChildElements');\n    },\n    processChildElements: function()
        {\n      // ... do something with collectionView's child view\n      // elements
        after they've finished rendering, which\n      // can't be done within the
        CollectionView's\n      // `didInsertElement` hook because that gets run\n
        \     // before the child elements have been added to the DOM.\n    }\n  });\n
        \ ```\n\n  One benefit of the above approach compared to using `Ember.run.next`
        is\n  that you will be able to perform DOM/CSS operations before unprocessed\n
        \ elements are rendered to the screen, which may prevent flickering or\n  other
        artifacts caused by delaying processing until after rendering.\n\n  The other
        major benefit to the above approach is that `Ember.run.next`\n  introduces
        an element of non-determinism, which can make things much\n  harder to test,
        due to its reliance on `setTimeout`; it's much harder\n  to guarantee the
        order of scheduled operations when they are scheduled\n  outside of the current
        run loop, i.e. with `Ember.run.next`.\n\n  @method next\n  @param {Object}
        [target] target of method to invoke\n  @param {Function|String} method The
        method to invoke.\n    If you pass a string it will be resolved on the\n    target
        at the time the method is invoked.\n  @param {Object} [args*] Optional arguments
        to pass to the timeout.\n  @return {Object} timer\n*/\nEmber.run.next = function()
        {\n  var args = slice.call(arguments);\n  args.push(1);\n  return backburner.later.apply(backburner,
        args);\n};\n\n/**\n  Cancels a scheduled item. Must be a value returned by
        `Ember.run.later()`,\n  `Ember.run.once()`, or `Ember.run.next()`.\n\n  ```javascript\n
        \ var runNext = Ember.run.next(myContext, function() {\n    // will not be
        executed\n  });\n  Ember.run.cancel(runNext);\n\n  var runLater = Ember.run.later(myContext,
        function() {\n    // will not be executed\n  }, 500);\n  Ember.run.cancel(runLater);\n\n
        \ var runOnce = Ember.run.once(myContext, function() {\n    // will not be
        executed\n  });\n  Ember.run.cancel(runOnce);\n  ```\n\n  @method cancel\n
        \ @param {Object} timer Timer object to cancel\n  @return {void}\n*/\nEmber.run.cancel
        = function(timer) {\n  return backburner.cancel(timer);\n};\n\n/**\n  Delay
        calling the target method until the debounce period has elapsed\n  with no
        additional debounce calls. If `debounce` is called again before\n  the specified
        time has elapsed, the timer is reset and the entire period\n  must pass again
        before the target method is called.\n\n  This method should be used when an
        event may be called multiple times\n  but the action should only be called
        once when the event is done firing.\n  A common example is for scroll events
        where you only want updates to\n  happen once scrolling has ceased.\n\n  ```javascript\n
        \   var myFunc = function() { console.log(this.name + ' ran.'); };\n    var
        myContext = {name: 'debounce'};\n\n    Ember.run.debounce(myContext, myFunc,
        150);\n\n    // less than 150ms passes\n\n    Ember.run.debounce(myContext,
        myFunc, 150);\n\n    // 150ms passes\n    // myFunc is invoked with context
        myContext\n    // console logs 'debounce ran.' one time.\n  ```\n\n  @method
        debounce\n  @param {Object} [target] target of method to invoke\n  @param
        {Function|String} method The method to invoke.\n    May be a function or a
        string. If you pass a string\n    then it will be looked up on the passed
        target.\n  @param {Object} [args*] Optional arguments to pass to the timeout.\n
        \ @param {Number} wait Number of milliseconds to wait.\n  @param {Boolean}
        immediate Trigger the function on the leading instead of the trailing edge
        of the wait interval.\n  @return {void}\n*/\nEmber.run.debounce = function()
        {\n  return backburner.debounce.apply(backburner, arguments);\n};\n\n/**\n
        \ Ensure that the target method is never called more frequently than\n  the
        specified spacing period.\n\n  ```javascript\n    var myFunc = function()
        { console.log(this.name + ' ran.'); };\n    var myContext = {name: 'throttle'};\n\n
        \   Ember.run.throttle(myContext, myFunc, 150);\n\n    // 50ms passes\n    Ember.run.throttle(myContext,
        myFunc, 150);\n\n    // 50ms passes\n    Ember.run.throttle(myContext, myFunc,
        150);\n\n    // 50ms passes\n    Ember.run.throttle(myContext, myFunc, 150);\n\n
        \   // 150ms passes\n    // myFunc is invoked with context myContext\n    //
        console logs 'throttle ran.' twice, 150ms apart.\n  ```\n\n  @method throttle\n
        \ @param {Object} [target] target of method to invoke\n  @param {Function|String}
        method The method to invoke.\n    May be a function or a string. If you pass
        a string\n    then it will be looked up on the passed target.\n  @param {Object}
        [args*] Optional arguments to pass to the timeout.\n  @param {Number} spacing
        Number of milliseconds to space out requests.\n  @return {void}\n*/\nEmber.run.throttle
        = function() {\n  return backburner.throttle.apply(backburner, arguments);\n};\n\n//
        Make sure it's not an autorun during testing\nfunction checkAutoRun() {\n
        \ if (!Ember.run.currentRunLoop) {\n    Ember.assert(\"You have turned on
        testing mode, which disabled the run-loop's autorun. You will need to wrap
        any code with asynchronous side-effects in an Ember.run\", !Ember.testing);\n
        \ }\n}\n\n})();\n\n\n\n(function() {\n// Ember.Logger\n// get\n// set\n//
        guidFor, meta\n// addObserver, removeObserver\n// Ember.run.schedule\n/**\n@module
        ember-metal\n*/\n\n// ..........................................................\n//
        CONSTANTS\n//\n\n/**\n  Debug parameter you can turn on. This will log all
        bindings that fire to\n  the console. This should be disabled in production
        code. Note that you\n  can also enable this from the console or temporarily.\n\n
        \ @property LOG_BINDINGS\n  @for Ember\n  @type Boolean\n  @default false\n*/\nEmber.LOG_BINDINGS
        = false || !!Ember.ENV.LOG_BINDINGS;\n\nvar get     = Ember.get,\n    set
        \    = Ember.set,\n    guidFor = Ember.guidFor,\n    IS_GLOBAL = /^([A-Z$]|([0-9][A-Z$]))/;\n\n/**\n
        \ Returns true if the provided path is global (e.g., `MyApp.fooController.bar`)\n
        \ instead of local (`foo.bar.baz`).\n\n  @method isGlobalPath\n  @for Ember\n
        \ @private\n  @param {String} path\n  @return Boolean\n*/\nvar isGlobalPath
        = Ember.isGlobalPath = function(path) {\n  return IS_GLOBAL.test(path);\n};\n\nfunction
        getWithGlobals(obj, path) {\n  return get(isGlobalPath(path) ? Ember.lookup
        : obj, path);\n}\n\n// ..........................................................\n//
        BINDING\n//\n\nvar Binding = function(toPath, fromPath) {\n  this._direction
        = 'fwd';\n  this._from = fromPath;\n  this._to   = toPath;\n  this._directionMap
        = Ember.Map.create();\n};\n\n/**\n@class Binding\n@namespace Ember\n*/\n\nBinding.prototype
        = {\n  /**\n    This copies the Binding so it can be connected to another
        object.\n\n    @method copy\n    @return {Ember.Binding} `this`\n  */\n  copy:
        function () {\n    var copy = new Binding(this._to, this._from);\n    if (this._oneWay)
        { copy._oneWay = true; }\n    return copy;\n  },\n\n  // ..........................................................\n
        \ // CONFIG\n  //\n\n  /**\n    This will set `from` property path to the
        specified value. It will not\n    attempt to resolve this property path to
        an actual object until you\n    connect the binding.\n\n    The binding will
        search for the property path starting at the root object\n    you pass when
        you `connect()` the binding. It follows the same rules as\n    `get()` - see
        that method for more information.\n\n    @method from\n    @param {String}
        path the property path to connect to\n    @return {Ember.Binding} `this`\n
        \ */\n  from: function(path) {\n    this._from = path;\n    return this;\n
        \ },\n\n  /**\n    This will set the `to` property path to the specified value.
        It will not\n    attempt to resolve this property path to an actual object
        until you\n    connect the binding.\n\n    The binding will search for the
        property path starting at the root object\n    you pass when you `connect()`
        the binding. It follows the same rules as\n    `get()` - see that method for
        more information.\n\n    @method to\n    @param {String|Tuple} path A property
        path or tuple\n    @return {Ember.Binding} `this`\n  */\n  to: function(path)
        {\n    this._to = path;\n    return this;\n  },\n\n  /**\n    Configures the
        binding as one way. A one-way binding will relay changes\n    on the `from`
        side to the `to` side, but not the other way around. This\n    means that
        if you change the `to` side directly, the `from` side may have\n    a different
        value.\n\n    @method oneWay\n    @return {Ember.Binding} `this`\n  */\n  oneWay:
        function() {\n    this._oneWay = true;\n    return this;\n  },\n\n  /**\n
        \   @method toString\n    @return {String} string representation of binding\n
        \ */\n  toString: function() {\n    var oneWay = this._oneWay ? '[oneWay]'
        : '';\n    return \"Ember.Binding<\" + guidFor(this) + \">(\" + this._from
        + \" -> \" + this._to + \")\" + oneWay;\n  },\n\n  // ..........................................................\n
        \ // CONNECT AND SYNC\n  //\n\n  /**\n    Attempts to connect this binding
        instance so that it can receive and relay\n    changes. This method will raise
        an exception if you have not set the\n    from/to properties yet.\n\n    @method
        connect\n    @param {Object} obj The root object for this binding.\n    @return
        {Ember.Binding} `this`\n  */\n  connect: function(obj) {\n    Ember.assert('Must
        pass a valid object to Ember.Binding.connect()', !!obj);\n\n    var fromPath
        = this._from, toPath = this._to;\n    Ember.trySet(obj, toPath, getWithGlobals(obj,
        fromPath));\n\n    // add an observer on the object to be notified when the
        binding should be updated\n    Ember.addObserver(obj, fromPath, this, this.fromDidChange);\n\n
        \   // if the binding is a two-way binding, also set up an observer on the
        target\n    if (!this._oneWay) { Ember.addObserver(obj, toPath, this, this.toDidChange);
        }\n\n    this._readyToSync = true;\n\n    return this;\n  },\n\n  /**\n    Disconnects
        the binding instance. Changes will no longer be relayed. You\n    will not
        usually need to call this method.\n\n    @method disconnect\n    @param {Object}
        obj The root object you passed when connecting the binding.\n    @return {Ember.Binding}
        `this`\n  */\n  disconnect: function(obj) {\n    Ember.assert('Must pass a
        valid object to Ember.Binding.disconnect()', !!obj);\n\n    var twoWay = !this._oneWay;\n\n
        \   // remove an observer on the object so we're no longer notified of\n    //
        changes that should update bindings.\n    Ember.removeObserver(obj, this._from,
        this, this.fromDidChange);\n\n    // if the binding is two-way, remove the
        observer from the target as well\n    if (twoWay) { Ember.removeObserver(obj,
        this._to, this, this.toDidChange); }\n\n    this._readyToSync = false; //
        disable scheduled syncs...\n    return this;\n  },\n\n  // ..........................................................\n
        \ // PRIVATE\n  //\n\n  /* called when the from side changes */\n  fromDidChange:
        function(target) {\n    this._scheduleSync(target, 'fwd');\n  },\n\n  /* called
        when the to side changes */\n  toDidChange: function(target) {\n    this._scheduleSync(target,
        'back');\n  },\n\n  _scheduleSync: function(obj, dir) {\n    var directionMap
        = this._directionMap;\n    var existingDir = directionMap.get(obj);\n\n    //
        if we haven't scheduled the binding yet, schedule it\n    if (!existingDir)
        {\n      Ember.run.schedule('sync', this, this._sync, obj);\n      directionMap.set(obj,
        dir);\n    }\n\n    // If both a 'back' and 'fwd' sync have been scheduled
        on the same object,\n    // default to a 'fwd' sync so that it remains deterministic.\n
        \   if (existingDir === 'back' && dir === 'fwd') {\n      directionMap.set(obj,
        'fwd');\n    }\n  },\n\n  _sync: function(obj) {\n    var log = Ember.LOG_BINDINGS;\n\n
        \   // don't synchronize destroyed objects or disconnected bindings\n    if
        (obj.isDestroyed || !this._readyToSync) { return; }\n\n    // get the direction
        of the binding for the object we are\n    // synchronizing from\n    var directionMap
        = this._directionMap;\n    var direction = directionMap.get(obj);\n\n    var
        fromPath = this._from, toPath = this._to;\n\n    directionMap.remove(obj);\n\n
        \   // if we're synchronizing from the remote object...\n    if (direction
        === 'fwd') {\n      var fromValue = getWithGlobals(obj, this._from);\n      if
        (log) {\n        Ember.Logger.log(' ', this.toString(), '->', fromValue, obj);\n
        \     }\n      if (this._oneWay) {\n        Ember.trySet(obj, toPath, fromValue);\n
        \     } else {\n        Ember._suspendObserver(obj, toPath, this, this.toDidChange,
        function () {\n          Ember.trySet(obj, toPath, fromValue);\n        });\n
        \     }\n    // if we're synchronizing *to* the remote object\n    } else
        if (direction === 'back') {\n      var toValue = get(obj, this._to);\n      if
        (log) {\n        Ember.Logger.log(' ', this.toString(), '<-', toValue, obj);\n
        \     }\n      Ember._suspendObserver(obj, fromPath, this, this.fromDidChange,
        function () {\n        Ember.trySet(Ember.isGlobalPath(fromPath) ? Ember.lookup
        : obj, fromPath, toValue);\n      });\n    }\n  }\n\n};\n\nfunction mixinProperties(to,
        from) {\n  for (var key in from) {\n    if (from.hasOwnProperty(key)) {\n
        \     to[key] = from[key];\n    }\n  }\n}\n\nmixinProperties(Binding, {\n\n
        \ /*\n    See `Ember.Binding.from`.\n\n    @method from\n    @static\n  */\n
        \ from: function() {\n    var C = this, binding = new C();\n    return binding.from.apply(binding,
        arguments);\n  },\n\n  /*\n    See `Ember.Binding.to`.\n\n    @method to\n
        \   @static\n  */\n  to: function() {\n    var C = this, binding = new C();\n
        \   return binding.to.apply(binding, arguments);\n  },\n\n  /**\n    Creates
        a new Binding instance and makes it apply in a single direction.\n    A one-way
        binding will relay changes on the `from` side object (supplied\n    as the
        `from` argument) the `to` side, but not the other way around.\n    This means
        that if you change the \"to\" side directly, the \"from\" side may have\n
        \   a different value.\n\n    See `Binding.oneWay`.\n\n    @method oneWay\n
        \   @param {String} from from path.\n    @param {Boolean} [flag] (Optional)
        passing nothing here will make the\n      binding `oneWay`. You can instead
        pass `false` to disable `oneWay`, making the\n      binding two way again.\n
        \   @return {Ember.Binding} `this`\n  */\n  oneWay: function(from, flag) {\n
        \   var C = this, binding = new C(null, from);\n    return binding.oneWay(flag);\n
        \ }\n\n});\n\n/**\n  An `Ember.Binding` connects the properties of two objects
        so that whenever\n  the value of one property changes, the other property
        will be changed also.\n\n  ## Automatic Creation of Bindings with `/^*Binding/`-named
        Properties\n\n  You do not usually create Binding objects directly but instead
        describe\n  bindings in your class or object definition using automatic binding\n
        \ detection.\n\n  Properties ending in a `Binding` suffix will be converted
        to `Ember.Binding`\n  instances. The value of this property should be a string
        representing a path\n  to another object or a custom binding instanced created
        using Binding helpers\n  (see \"One Way Bindings\"):\n\n  ```\n  valueBinding:
        \"MyApp.someController.title\"\n  ```\n\n  This will create a binding from
        `MyApp.someController.title` to the `value`\n  property of your object instance
        automatically. Now the two values will be\n  kept in sync.\n\n  ## One Way
        Bindings\n\n  One especially useful binding customization you can use is the
        `oneWay()`\n  helper. This helper tells Ember that you are only interested
        in\n  receiving changes on the object you are binding from. For example, if
        you\n  are binding to a preference and you want to be notified if the preference\n
        \ has changed, but your object will not be changing the preference itself,
        you\n  could do:\n\n  ```\n  bigTitlesBinding: Ember.Binding.oneWay(\"MyApp.preferencesController.bigTitles\")\n
        \ ```\n\n  This way if the value of `MyApp.preferencesController.bigTitles`
        changes the\n  `bigTitles` property of your object will change also. However,
        if you\n  change the value of your `bigTitles` property, it will not update
        the\n  `preferencesController`.\n\n  One way bindings are almost twice as
        fast to setup and twice as fast to\n  execute because the binding only has
        to worry about changes to one side.\n\n  You should consider using one way
        bindings anytime you have an object that\n  may be created frequently and
        you do not intend to change a property; only\n  to monitor it for changes
        (such as in the example above).\n\n  ## Adding Bindings Manually\n\n  All
        of the examples above show you how to configure a custom binding, but the\n
        \ result of these customizations will be a binding template, not a fully active\n
        \ Binding instance. The binding will actually become active only when you\n
        \ instantiate the object the binding belongs to. It is useful however, to\n
        \ understand what actually happens when the binding is activated.\n\n  For
        a binding to function it must have at least a `from` property and a `to`\n
        \ property. The `from` property path points to the object/key that you want
        to\n  bind from while the `to` path points to the object/key you want to bind
        to.\n\n  When you define a custom binding, you are usually describing the
        property\n  you want to bind from (such as `MyApp.someController.value` in
        the examples\n  above). When your object is created, it will automatically
        assign the value\n  you want to bind `to` based on the name of your binding
        key. In the\n  examples above, during init, Ember objects will effectively
        call\n  something like this on your binding:\n\n  ```javascript\n  binding
        = Ember.Binding.from(this.valueBinding).to(\"value\");\n  ```\n\n  This creates
        a new binding instance based on the template you provide, and\n  sets the
        to path to the `value` property of the new object. Now that the\n  binding
        is fully configured with a `from` and a `to`, it simply needs to be\n  connected
        to become active. This is done through the `connect()` method:\n\n  ```javascript\n
        \ binding.connect(this);\n  ```\n\n  Note that when you connect a binding
        you pass the object you want it to be\n  connected to. This object will be
        used as the root for both the from and\n  to side of the binding when inspecting
        relative paths. This allows the\n  binding to be automatically inherited by
        subclassed objects as well.\n\n  Now that the binding is connected, it will
        observe both the from and to side\n  and relay changes.\n\n  If you ever needed
        to do so (you almost never will, but it is useful to\n  understand this anyway),
        you could manually create an active binding by\n  using the `Ember.bind()`
        helper method. (This is the same method used by\n  to setup your bindings
        on objects):\n\n  ```javascript\n  Ember.bind(MyApp.anotherObject, \"value\",
        \"MyApp.someController.value\");\n  ```\n\n  Both of these code fragments
        have the same effect as doing the most friendly\n  form of binding creation
        like so:\n\n  ```javascript\n  MyApp.anotherObject = Ember.Object.create({\n
        \   valueBinding: \"MyApp.someController.value\",\n\n    // OTHER CODE FOR
        THIS OBJECT...\n  });\n  ```\n\n  Ember's built in binding creation method
        makes it easy to automatically\n  create bindings for you. You should always
        use the highest-level APIs\n  available, even if you understand how it works
        underneath.\n\n  @class Binding\n  @namespace Ember\n  @since Ember 0.9\n*/\nEmber.Binding
        = Binding;\n\n\n/**\n  Global helper method to create a new binding. Just
        pass the root object\n  along with a `to` and `from` path to create and connect
        the binding.\n\n  @method bind\n  @for Ember\n  @param {Object} obj The root
        object of the transform.\n  @param {String} to The path to the 'to' side of
        the binding.\n    Must be relative to obj.\n  @param {String} from The path
        to the 'from' side of the binding.\n    Must be relative to obj or a global
        path.\n  @return {Ember.Binding} binding instance\n*/\nEmber.bind = function(obj,
        to, from) {\n  return new Ember.Binding(to, from).connect(obj);\n};\n\n/**\n
        \ @method oneWay\n  @for Ember\n  @param {Object} obj The root object of the
        transform.\n  @param {String} to The path to the 'to' side of the binding.\n
        \   Must be relative to obj.\n  @param {String} from The path to the 'from'
        side of the binding.\n    Must be relative to obj or a global path.\n  @return
        {Ember.Binding} binding instance\n*/\nEmber.oneWay = function(obj, to, from)
        {\n  return new Ember.Binding(to, from).oneWay().connect(obj);\n};\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-metal\n*/\n\nvar Mixin, REQUIRED,
        Alias,\n    a_map = Ember.ArrayPolyfills.map,\n    a_indexOf = Ember.ArrayPolyfills.indexOf,\n
        \   a_forEach = Ember.ArrayPolyfills.forEach,\n    a_slice = [].slice,\n    o_create
        = Ember.create,\n    defineProperty = Ember.defineProperty,\n    guidFor =
        Ember.guidFor;\n\nfunction mixinsMeta(obj) {\n  var m = Ember.meta(obj, true),
        ret = m.mixins;\n  if (!ret) {\n    ret = m.mixins = {};\n  } else if (!m.hasOwnProperty('mixins'))
        {\n    ret = m.mixins = o_create(ret);\n  }\n  return ret;\n}\n\nfunction
        initMixin(mixin, args) {\n  if (args && args.length > 0) {\n    mixin.mixins
        = a_map.call(args, function(x) {\n      if (x instanceof Mixin) { return x;
        }\n\n      // Note: Manually setup a primitive mixin here. This is the only\n
        \     // way to actually get a primitive mixin. This way normal creation\n
        \     // of mixins will give you combined mixins...\n      var mixin = new
        Mixin();\n      mixin.properties = x;\n      return mixin;\n    });\n  }\n
        \ return mixin;\n}\n\nfunction isMethod(obj) {\n  return 'function' === typeof
        obj &&\n         obj.isMethod !== false &&\n         obj !== Boolean && obj
        !== Object && obj !== Number && obj !== Array && obj !== Date && obj !== String;\n}\n\nvar
        CONTINUE = {};\n\nfunction mixinProperties(mixinsMeta, mixin) {\n  var guid;\n\n
        \ if (mixin instanceof Mixin) {\n    guid = guidFor(mixin);\n    if (mixinsMeta[guid])
        { return CONTINUE; }\n    mixinsMeta[guid] = mixin;\n    return mixin.properties;\n
        \ } else {\n    return mixin; // apply anonymous mixin properties\n  }\n}\n\nfunction
        concatenatedMixinProperties(concatProp, props, values, base) {\n  var concats;\n\n
        \ // reset before adding each new mixin to pickup concats from previous\n
        \ concats = values[concatProp] || base[concatProp];\n  if (props[concatProp])
        {\n    concats = concats ? concats.concat(props[concatProp]) : props[concatProp];\n
        \ }\n\n  return concats;\n}\n\nfunction giveDescriptorSuper(meta, key, property,
        values, descs) {\n  var superProperty;\n\n  // Computed properties override
        methods, and do not call super to them\n  if (values[key] === undefined) {\n
        \   // Find the original descriptor in a parent mixin\n    superProperty =
        descs[key];\n  }\n\n  // If we didn't find the original descriptor in a parent
        mixin, find\n  // it on the original object.\n  superProperty = superProperty
        || meta.descs[key];\n\n  if (!superProperty || !(superProperty instanceof
        Ember.ComputedProperty)) {\n    return property;\n  }\n\n  // Since multiple
        mixins may inherit from the same parent, we need\n  // to clone the computed
        property so that other mixins do not receive\n  // the wrapped version.\n
        \ property = o_create(property);\n  property.func = Ember.wrap(property.func,
        superProperty.func);\n\n  return property;\n}\n\nfunction giveMethodSuper(obj,
        key, method, values, descs) {\n  var superMethod;\n\n  // Methods overwrite
        computed properties, and do not call super to them.\n  if (descs[key] ===
        undefined) {\n    // Find the original method in a parent mixin\n    superMethod
        = values[key];\n  }\n\n  // If we didn't find the original value in a parent
        mixin, find it in\n  // the original object\n  superMethod = superMethod ||
        obj[key];\n\n  // Only wrap the new method if the original method was a function\n
        \ if ('function' !== typeof superMethod) {\n    return method;\n  }\n\n  return
        Ember.wrap(method, superMethod);\n}\n\nfunction applyConcatenatedProperties(obj,
        key, value, values) {\n  var baseValue = values[key] || obj[key];\n\n  if
        (baseValue) {\n    if ('function' === typeof baseValue.concat) {\n      return
        baseValue.concat(value);\n    } else {\n      return Ember.makeArray(baseValue).concat(value);\n
        \   }\n  } else {\n    return Ember.makeArray(value);\n  }\n}\n\nfunction
        applyMergedProperties(obj, key, value, values) {\n  var baseValue = values[key]
        || obj[key];\n\n  if (!baseValue) { return value; }\n\n  var newBase = Ember.merge({},
        baseValue);\n  for (var prop in value) {\n    if (!value.hasOwnProperty(prop))
        { continue; }\n\n    var propValue = value[prop];\n    if (isMethod(propValue))
        {\n      // TODO: support for Computed Properties, etc?\n      newBase[prop]
        = giveMethodSuper(obj, prop, propValue, baseValue, {});\n    } else {\n      newBase[prop]
        = propValue;\n    }\n  }\n\n  return newBase;\n}\n\nfunction addNormalizedProperty(base,
        key, value, meta, descs, values, concats, mergings) {\n  if (value instanceof
        Ember.Descriptor) {\n    if (value === REQUIRED && descs[key]) { return CONTINUE;
        }\n\n    // Wrap descriptor function to implement\n    // _super() if needed\n
        \   if (value.func) {\n      value = giveDescriptorSuper(meta, key, value,
        values, descs);\n    }\n\n    descs[key]  = value;\n    values[key] = undefined;\n
        \ } else {\n    if ((concats && a_indexOf.call(concats, key) >= 0) ||\n                key
        === 'concatenatedProperties' ||\n                key === 'mergedProperties')
        {\n      value = applyConcatenatedProperties(base, key, value, values);\n
        \   } else if ((mergings && a_indexOf.call(mergings, key) >= 0)) {\n      value
        = applyMergedProperties(base, key, value, values);\n    } else if (isMethod(value))
        {\n      value = giveMethodSuper(base, key, value, values, descs);\n    }\n\n
        \   descs[key] = undefined;\n    values[key] = value;\n  }\n}\n\nfunction
        mergeMixins(mixins, m, descs, values, base, keys) {\n  var mixin, props, key,
        concats, mergings, meta;\n\n  function removeKeys(keyName) {\n    delete descs[keyName];\n
        \   delete values[keyName];\n  }\n\n  for(var i=0, l=mixins.length; i<l; i++)
        {\n    mixin = mixins[i];\n    Ember.assert('Expected hash or Mixin instance,
        got ' + Object.prototype.toString.call(mixin), typeof mixin === 'object' &&
        mixin !== null && Object.prototype.toString.call(mixin) !== '[object Array]');\n\n
        \   props = mixinProperties(m, mixin);\n    if (props === CONTINUE) { continue;
        }\n\n    if (props) {\n      meta = Ember.meta(base);\n      if (base.willMergeMixin)
        { base.willMergeMixin(props); }\n      concats = concatenatedMixinProperties('concatenatedProperties',
        props, values, base);\n      mergings = concatenatedMixinProperties('mergedProperties',
        props, values, base);\n\n      for (key in props) {\n        if (!props.hasOwnProperty(key))
        { continue; }\n        keys.push(key);\n        addNormalizedProperty(base,
        key, props[key], meta, descs, values, concats, mergings);\n      }\n\n      //
        manually copy toString() because some JS engines do not enumerate it\n      if
        (props.hasOwnProperty('toString')) { base.toString = props.toString; }\n    }
        else if (mixin.mixins) {\n      mergeMixins(mixin.mixins, m, descs, values,
        base, keys);\n      if (mixin._without) { a_forEach.call(mixin._without, removeKeys);
        }\n    }\n  }\n}\n\nvar IS_BINDING = Ember.IS_BINDING = /^.+Binding$/;\n\nfunction
        detectBinding(obj, key, value, m) {\n  if (IS_BINDING.test(key)) {\n    var
        bindings = m.bindings;\n    if (!bindings) {\n      bindings = m.bindings
        = {};\n    } else if (!m.hasOwnProperty('bindings')) {\n      bindings = m.bindings
        = o_create(m.bindings);\n    }\n    bindings[key] = value;\n  }\n}\n\nfunction
        connectBindings(obj, m) {\n  // TODO Mixin.apply(instance) should disconnect
        binding if exists\n  var bindings = m.bindings, key, binding, to;\n  if (bindings)
        {\n    for (key in bindings) {\n      binding = bindings[key];\n      if (binding)
        {\n        to = key.slice(0, -7); // strip Binding off end\n        if (binding
        instanceof Ember.Binding) {\n          binding = binding.copy(); // copy prototypes'
        instance\n          binding.to(to);\n        } else { // binding is string
        path\n          binding = new Ember.Binding(to, binding);\n        }\n        binding.connect(obj);\n
        \       obj[key] = binding;\n      }\n    }\n    // mark as applied\n    m.bindings
        = {};\n  }\n}\n\nfunction finishPartial(obj, m) {\n  connectBindings(obj,
        m || Ember.meta(obj));\n  return obj;\n}\n\nfunction followAlias(obj, desc,
        m, descs, values) {\n  var altKey = desc.methodName, value;\n  if (descs[altKey]
        || values[altKey]) {\n    value = values[altKey];\n    desc  = descs[altKey];\n
        \ } else if (m.descs[altKey]) {\n    desc  = m.descs[altKey];\n    value =
        undefined;\n  } else {\n    desc = undefined;\n    value = obj[altKey];\n
        \ }\n\n  return { desc: desc, value: value };\n}\n\nfunction updateObserversAndListeners(obj,
        key, observerOrListener, pathsKey, updateMethod) {\n  var paths = observerOrListener[pathsKey];\n\n
        \ if (paths) {\n    for (var i=0, l=paths.length; i<l; i++) {\n      Ember[updateMethod](obj,
        paths[i], null, key);\n    }\n  }\n}\n\nfunction replaceObserversAndListeners(obj,
        key, observerOrListener) {\n  var prev = obj[key];\n\n  if ('function' ===
        typeof prev) {\n    updateObserversAndListeners(obj, key, prev, '__ember_observesBefore__',
        'removeBeforeObserver');\n    updateObserversAndListeners(obj, key, prev,
        '__ember_observes__', 'removeObserver');\n    updateObserversAndListeners(obj,
        key, prev, '__ember_listens__', 'removeListener');\n  }\n\n  if ('function'
        === typeof observerOrListener) {\n    updateObserversAndListeners(obj, key,
        observerOrListener, '__ember_observesBefore__', 'addBeforeObserver');\n    updateObserversAndListeners(obj,
        key, observerOrListener, '__ember_observes__', 'addObserver');\n    updateObserversAndListeners(obj,
        key, observerOrListener, '__ember_listens__', 'addListener');\n  }\n}\n\nfunction
        applyMixin(obj, mixins, partial) {\n  var descs = {}, values = {}, m = Ember.meta(obj),\n
        \     key, value, desc, keys = [];\n\n  // Go through all mixins and hashes
        passed in, and:\n  //\n  // * Handle concatenated properties\n  // * Handle
        merged properties\n  // * Set up _super wrapping if necessary\n  // * Set
        up computed property descriptors\n  // * Copying `toString` in broken browsers\n
        \ mergeMixins(mixins, mixinsMeta(obj), descs, values, obj, keys);\n\n  for(var
        i = 0, l = keys.length; i < l; i++) {\n    key = keys[i];\n    if (key ===
        'constructor' || !values.hasOwnProperty(key)) { continue; }\n\n    desc =
        descs[key];\n    value = values[key];\n\n    if (desc === REQUIRED) { continue;
        }\n\n    while (desc && desc instanceof Alias) {\n      var followed = followAlias(obj,
        desc, m, descs, values);\n      desc = followed.desc;\n      value = followed.value;\n
        \   }\n\n    if (desc === undefined && value === undefined) { continue; }\n\n
        \   replaceObserversAndListeners(obj, key, value);\n    detectBinding(obj,
        key, value, m);\n    defineProperty(obj, key, desc, value, m);\n  }\n\n  if
        (!partial) { // don't apply to prototype\n    finishPartial(obj, m);\n  }\n\n
        \ return obj;\n}\n\n/**\n  @method mixin\n  @for Ember\n  @param obj\n  @param
        mixins*\n  @return obj\n*/\nEmber.mixin = function(obj) {\n  var args = a_slice.call(arguments,
        1);\n  applyMixin(obj, args, false);\n  return obj;\n};\n\n/**\n  The `Ember.Mixin`
        class allows you to create mixins, whose properties can be\n  added to other
        classes. For instance,\n\n  ```javascript\n  App.Editable = Ember.Mixin.create({\n
        \   edit: function() {\n      console.log('starting to edit');\n      this.set('isEditing',
        true);\n    },\n    isEditing: false\n  });\n\n  // Mix mixins into classes
        by passing them as the first arguments to\n  // .extend.\n  App.CommentView
        = Ember.View.extend(App.Editable, {\n    template: Ember.Handlebars.compile('{{#if
        view.isEditing}}...{{else}}...{{/if}}')\n  });\n\n  commentView = App.CommentView.create();\n
        \ commentView.edit(); // outputs 'starting to edit'\n  ```\n\n  Note that
        Mixins are created with `Ember.Mixin.create`, not\n  `Ember.Mixin.extend`.\n\n
        \ Note that mixins extend a constructor's prototype so arrays and object literals\n
        \ defined as properties will be shared amongst objects that implement the
        mixin.\n  If you want to define an property in a mixin that is not shared,
        you can define\n  it either as a computed property or have it be created on
        initialization of the object.\n\n  ```javascript\n  //filters array will be
        shared amongst any object implementing mixin\n  App.Filterable = Ember.Mixin.create({\n
        \   filters: Ember.A()\n  });\n\n  //filters will be a separate  array for
        every object implementing the mixin\n  App.Filterable = Ember.Mixin.create({\n
        \   filters: Ember.computed(function(){return Ember.A();})\n  });\n\n  //filters
        will be created as a separate array during the object's initialization\n  App.Filterable
        = Ember.Mixin.create({\n    init: function() {\n      this._super();\n      this.set(\"filters\",
        Ember.A());\n    }\n  });\n  ```\n\n  @class Mixin\n  @namespace Ember\n*/\nEmber.Mixin
        = function() { return initMixin(this, arguments); };\n\nMixin = Ember.Mixin;\n\nMixin.prototype
        = {\n  properties: null,\n  mixins: null,\n  ownerConstructor: null\n};\n\nMixin._apply
        = applyMixin;\n\nMixin.applyPartial = function(obj) {\n  var args = a_slice.call(arguments,
        1);\n  return applyMixin(obj, args, true);\n};\n\nMixin.finishPartial = finishPartial;\n\nEmber.anyUnprocessedMixins
        = false;\n\n/**\n  @method create\n  @static\n  @param arguments*\n*/\nMixin.create
        = function() {\n  Ember.anyUnprocessedMixins = true;\n  var M = this;\n  return
        initMixin(new M(), arguments);\n};\n\nvar MixinPrototype = Mixin.prototype;\n\n/**\n
        \ @method reopen\n  @param arguments*\n*/\nMixinPrototype.reopen = function()
        {\n  var mixin, tmp;\n\n  if (this.properties) {\n    mixin = Mixin.create();\n
        \   mixin.properties = this.properties;\n    delete this.properties;\n    this.mixins
        = [mixin];\n  } else if (!this.mixins) {\n    this.mixins = [];\n  }\n\n  var
        len = arguments.length, mixins = this.mixins, idx;\n\n  for(idx=0; idx < len;
        idx++) {\n    mixin = arguments[idx];\n    Ember.assert('Expected hash or
        Mixin instance, got ' + Object.prototype.toString.call(mixin), typeof mixin
        === 'object' && mixin !== null && Object.prototype.toString.call(mixin) !==
        '[object Array]');\n\n    if (mixin instanceof Mixin) {\n      mixins.push(mixin);\n
        \   } else {\n      tmp = Mixin.create();\n      tmp.properties = mixin;\n
        \     mixins.push(tmp);\n    }\n  }\n\n  return this;\n};\n\n/**\n  @method
        apply\n  @param obj\n  @return applied object\n*/\nMixinPrototype.apply =
        function(obj) {\n  return applyMixin(obj, [this], false);\n};\n\nMixinPrototype.applyPartial
        = function(obj) {\n  return applyMixin(obj, [this], true);\n};\n\nfunction
        _detect(curMixin, targetMixin, seen) {\n  var guid = guidFor(curMixin);\n\n
        \ if (seen[guid]) { return false; }\n  seen[guid] = true;\n\n  if (curMixin
        === targetMixin) { return true; }\n  var mixins = curMixin.mixins, loc = mixins
        ? mixins.length : 0;\n  while (--loc >= 0) {\n    if (_detect(mixins[loc],
        targetMixin, seen)) { return true; }\n  }\n  return false;\n}\n\n/**\n  @method
        detect\n  @param obj\n  @return {Boolean}\n*/\nMixinPrototype.detect = function(obj)
        {\n  if (!obj) { return false; }\n  if (obj instanceof Mixin) { return _detect(obj,
        this, {}); }\n  var mixins = Ember.meta(obj, false).mixins;\n  if (mixins)
        {\n    return !!mixins[guidFor(this)];\n  }\n  return false;\n};\n\nMixinPrototype.without
        = function() {\n  var ret = new Mixin(this);\n  ret._without = a_slice.call(arguments);\n
        \ return ret;\n};\n\nfunction _keys(ret, mixin, seen) {\n  if (seen[guidFor(mixin)])
        { return; }\n  seen[guidFor(mixin)] = true;\n\n  if (mixin.properties) {\n
        \   var props = mixin.properties;\n    for (var key in props) {\n      if
        (props.hasOwnProperty(key)) { ret[key] = true; }\n    }\n  } else if (mixin.mixins)
        {\n    a_forEach.call(mixin.mixins, function(x) { _keys(ret, x, seen); });\n
        \ }\n}\n\nMixinPrototype.keys = function() {\n  var keys = {}, seen = {},
        ret = [];\n  _keys(keys, this, seen);\n  for(var key in keys) {\n    if (keys.hasOwnProperty(key))
        { ret.push(key); }\n  }\n  return ret;\n};\n\n// returns the mixins currently
        applied to the specified object\n// TODO: Make Ember.mixin\nMixin.mixins =
        function(obj) {\n  var mixins = Ember.meta(obj, false).mixins, ret = [];\n\n
        \ if (!mixins) { return ret; }\n\n  for (var key in mixins) {\n    var mixin
        = mixins[key];\n\n    // skip primitive mixins since these are always anonymous\n
        \   if (!mixin.properties) { ret.push(mixin); }\n  }\n\n  return ret;\n};\n\nREQUIRED
        = new Ember.Descriptor();\nREQUIRED.toString = function() { return '(Required
        Property)'; };\n\n/**\n  Denotes a required property for a mixin\n\n  @method
        required\n  @for Ember\n*/\nEmber.required = function() {\n  return REQUIRED;\n};\n\nAlias
        = function(methodName) {\n  this.methodName = methodName;\n};\nAlias.prototype
        = new Ember.Descriptor();\n\n/**\n  Makes a property or method available via
        an additional name.\n\n  ```javascript\n  App.PaintSample = Ember.Object.extend({\n
        \   color: 'red',\n    colour: Ember.alias('color'),\n    name: function()
        {\n      return \"Zed\";\n    },\n    moniker: Ember.alias(\"name\")\n  });\n\n
        \ var paintSample = App.PaintSample.create()\n  paintSample.get('colour');
        \ // 'red'\n  paintSample.moniker();      // 'Zed'\n  ```\n\n  @method alias\n
        \ @for Ember\n  @param {String} methodName name of the method or property
        to alias\n  @return {Ember.Descriptor}\n  @deprecated Use `Ember.aliasMethod`
        or `Ember.computed.alias` instead\n*/\nEmber.alias = function(methodName)
        {\n  Ember.deprecate(\"Ember.alias is deprecated. Please use Ember.aliasMethod
        or Ember.computed.alias instead.\");\n  return new Alias(methodName);\n};\n\n/**\n
        \ Makes a method available via an additional name.\n\n  ```javascript\n  App.Person
        = Ember.Object.extend({\n    name: function() {\n      return 'Tomhuda Katzdale';\n
        \   },\n    moniker: Ember.aliasMethod('name')\n  });\n\n  var goodGuy = App.Person.create()\n
        \ ```\n\n  @method aliasMethod\n  @for Ember\n  @param {String} methodName
        name of the method to alias\n  @return {Ember.Descriptor}\n*/\nEmber.aliasMethod
        = function(methodName) {\n  return new Alias(methodName);\n};\n\n// ..........................................................\n//
        OBSERVER HELPER\n//\n\n/**\n  Specify a method that observes property changes.\n\n
        \ ```javascript\n  Ember.Object.extend({\n    valueObserver: Ember.observer(function()
        {\n      // Executes whenever the \"value\" property changes\n    }, 'value')\n
        \ });\n  ```\n\n  In the future this method may become asynchronous. If you
        want to ensure\n  synchronous behavior, use `immediateObserver`.\n\n  Also
        available as `Function.prototype.observes` if prototype extensions are\n  enabled.\n\n
        \ @method observer\n  @for Ember\n  @param {Function} func\n  @param {String}
        propertyNames*\n  @return func\n*/\nEmber.observer = function(func) {\n  var
        paths = a_slice.call(arguments, 1);\n  func.__ember_observes__ = paths;\n
        \ return func;\n};\n\n/**\n  Specify a method that observes property changes.\n\n
        \ ```javascript\n  Ember.Object.extend({\n    valueObserver: Ember.immediateObserver(function()
        {\n      // Executes whenever the \"value\" property changes\n    }, 'value')\n
        \ });\n  ```\n\n  In the future, `Ember.observer` may become asynchronous.
        In this event,\n  `Ember.immediateObserver` will maintain the synchronous
        behavior.\n\n  Also available as `Function.prototype.observesImmediately`
        if prototype extensions are\n  enabled.\n\n  @method immediateObserver\n  @for
        Ember\n  @param {Function} func\n  @param {String} propertyNames*\n  @return
        func\n*/\nEmber.immediateObserver = function() {\n  for (var i=0, l=arguments.length;
        i<l; i++) {\n    var arg = arguments[i];\n    Ember.assert(\"Immediate observers
        must observe internal properties only, not properties on other objects.\",
        typeof arg !== \"string\" || arg.indexOf('.') === -1);\n  }\n\n  return Ember.observer.apply(this,
        arguments);\n};\n\n/**\n  When observers fire, they are called with the arguments
        `obj`, `keyName`.\n\n  Note, `@each.property` observer is called per each
        add or replace of an element\n  and it's not called with a specific enumeration
        item.\n\n  A `beforeObserver` fires before a property changes.\n\n  A `beforeObserver`
        is an alternative form of `.observesBefore()`.\n\n  ```javascript\n  App.PersonView
        = Ember.View.extend({\n\n    friends: [{ name: 'Tom' }, { name: 'Stefan' },
        { name: 'Kris' }],\n\n    valueWillChange: Ember.beforeObserver(function(obj,
        keyName) {\n      this.changingFrom = obj.get(keyName);\n    }, 'content.value'),\n\n
        \   valueDidChange: Ember.observer(function(obj, keyName) {\n        // only
        run if updating a value already in the DOM\n        if (this.get('state')
        === 'inDOM') {\n          var color = obj.get(keyName) > this.changingFrom
        ? 'green' : 'red';\n          // logic\n        }\n    }, 'content.value'),\n\n
        \   friendsDidChange: Ember.observer(function(obj, keyName) {\n      // some
        logic\n      // obj.get(keyName) returns friends array\n    }, 'friends.@each.name')\n
        \ });\n  ```\n\n  Also available as `Function.prototype.observesBefore` if
        prototype extensions are\n  enabled.\n\n  @method beforeObserver\n  @for Ember\n
        \ @param {Function} func\n  @param {String} propertyNames*\n  @return func\n*/\nEmber.beforeObserver
        = function(func) {\n  var paths = a_slice.call(arguments, 1);\n  func.__ember_observesBefore__
        = paths;\n  return func;\n};\n\n})();\n\n\n\n(function() {\n// Provides a
        way to register library versions with ember.\nvar forEach = Ember.EnumerableUtils.forEach,\n
        \   indexOf = Ember.EnumerableUtils.indexOf;\n\nEmber.libraries = function()
        {\n  var libraries    = [];\n  var coreLibIndex = 0;\n\n  var getLibrary =
        function(name) {\n    for (var i = 0; i < libraries.length; i++) {\n      if
        (libraries[i].name === name) {\n        return libraries[i];\n      }\n    }\n
        \ };\n\n  libraries.register = function(name, version) {\n    if (!getLibrary(name))
        {\n      libraries.push({name: name, version: version});\n    }\n  };\n\n
        \ libraries.registerCoreLibrary = function(name, version) {\n    if (!getLibrary(name))
        {\n      libraries.splice(coreLibIndex++, 0, {name: name, version: version});\n
        \   }\n  };\n\n  libraries.deRegister = function(name) {\n    var lib = getLibrary(name);\n
        \   if (lib) libraries.splice(indexOf(libraries, lib), 1);\n  };\n\n  libraries.each
        = function (callback) {\n    forEach(libraries, function(lib) {\n      callback(lib.name,
        lib.version);\n    });\n  };\n\n  return libraries;\n}();\n\nEmber.libraries.registerCoreLibrary('Ember',
        Ember.VERSION);\n\n})();\n\n\n\n(function() {\n/**\nEmber Metal\n\n@module
        ember\n@submodule ember-metal\n*/\n\n})();\n\n(function() {\ndefine(\"rsvp/all\",\n
        \ [\"rsvp/promise\",\"exports\"],\n  function(__dependency1__, __exports__)
        {\n    \"use strict\";\n    var Promise = __dependency1__.Promise;\n    /*
        global toString */\n\n\n    function all(promises) {\n      if (Object.prototype.toString.call(promises)
        !== \"[object Array]\") {\n        throw new TypeError('You must pass an array
        to all.');\n      }\n\n      return new Promise(function(resolve, reject)
        {\n        var results = [], remaining = promises.length,\n        promise;\n\n
        \       if (remaining === 0) {\n          resolve([]);\n        }\n\n        function
        resolver(index) {\n          return function(value) {\n            resolveAll(index,
        value);\n          };\n        }\n\n        function resolveAll(index, value)
        {\n          results[index] = value;\n          if (--remaining === 0) {\n
        \           resolve(results);\n          }\n        }\n\n        for (var
        i = 0; i < promises.length; i++) {\n          promise = promises[i];\n\n          if
        (promise && typeof promise.then === 'function') {\n            promise.then(resolver(i),
        reject);\n          } else {\n            resolveAll(i, promise);\n          }\n
        \       }\n      });\n    }\n\n\n    __exports__.all = all;\n  });\ndefine(\"rsvp/async\",\n
        \ [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var
        browserGlobal = (typeof window !== 'undefined') ? window : {};\n    var BrowserMutationObserver
        = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\n
        \   var async;\n    var local = (typeof global !== 'undefined') ? global :
        this;\n\n    // old node\n    function useNextTick() {\n      return function(callback,
        arg) {\n        process.nextTick(function() {\n          callback(arg);\n
        \       });\n      };\n    }\n\n    // node >= 0.10.x\n    function useSetImmediate()
        {\n      return function(callback, arg) {\n        /* global  setImmediate
        */\n        setImmediate(function(){\n          callback(arg);\n        });\n
        \     };\n    }\n\n    function useMutationObserver() {\n      var queue =
        [];\n\n      var observer = new BrowserMutationObserver(function() {\n        var
        toProcess = queue.slice();\n        queue = [];\n\n        toProcess.forEach(function(tuple)
        {\n          var callback = tuple[0], arg= tuple[1];\n          callback(arg);\n
        \       });\n      });\n\n      var element = document.createElement('div');\n
        \     observer.observe(element, { attributes: true });\n\n      // Chrome
        Memory Leak: https://bugs.webkit.org/show_bug.cgi?id=93661\n      window.addEventListener('unload',
        function(){\n        observer.disconnect();\n        observer = null;\n      },
        false);\n\n      return function(callback, arg) {\n        queue.push([callback,
        arg]);\n        element.setAttribute('drainQueue', 'drainQueue');\n      };\n
        \   }\n\n    function useSetTimeout() {\n      return function(callback, arg)
        {\n        local.setTimeout(function() {\n          callback(arg);\n        },
        1);\n      };\n    }\n\n    if (typeof setImmediate === 'function') {\n      async
        = useSetImmediate();\n    } else if (typeof process !== 'undefined' && {}.toString.call(process)
        === '[object process]') {\n      async = useNextTick();\n    } else if (BrowserMutationObserver)
        {\n      async = useMutationObserver();\n    } else {\n      async = useSetTimeout();\n
        \   }\n\n\n    __exports__.async = async;\n  });\ndefine(\"rsvp/config\",\n
        \ [\"rsvp/async\",\"exports\"],\n  function(__dependency1__, __exports__)
        {\n    \"use strict\";\n    var async = __dependency1__.async;\n\n    var
        config = {};\n    config.async = async;\n\n\n    __exports__.config = config;\n
        \ });\ndefine(\"rsvp/defer\",\n  [\"rsvp/promise\",\"exports\"],\n  function(__dependency1__,
        __exports__) {\n    \"use strict\";\n    var Promise = __dependency1__.Promise;\n\n
        \   function defer() {\n      var deferred = {\n        // pre-allocate shape\n
        \       resolve: undefined,\n        reject:  undefined,\n        promise:
        undefined\n      };\n\n      deferred.promise = new Promise(function(resolve,
        reject) {\n        deferred.resolve = resolve;\n        deferred.reject =
        reject;\n      });\n\n      return deferred;\n    }\n\n\n    __exports__.defer
        = defer;\n  });\ndefine(\"rsvp/events\",\n  [\"exports\"],\n  function(__exports__)
        {\n    \"use strict\";\n    var Event = function(type, options) {\n      this.type
        = type;\n\n      for (var option in options) {\n        if (!options.hasOwnProperty(option))
        { continue; }\n\n        this[option] = options[option];\n      }\n    };\n\n
        \   var indexOf = function(callbacks, callback) {\n      for (var i=0, l=callbacks.length;
        i<l; i++) {\n        if (callbacks[i][0] === callback) { return i; }\n      }\n\n
        \     return -1;\n    };\n\n    var callbacksFor = function(object) {\n      var
        callbacks = object._promiseCallbacks;\n\n      if (!callbacks) {\n        callbacks
        = object._promiseCallbacks = {};\n      }\n\n      return callbacks;\n    };\n\n
        \   var EventTarget = {\n      mixin: function(object) {\n        object.on
        = this.on;\n        object.off = this.off;\n        object.trigger = this.trigger;\n
        \       return object;\n      },\n\n      on: function(eventNames, callback,
        binding) {\n        var allCallbacks = callbacksFor(this), callbacks, eventName;\n
        \       eventNames = eventNames.split(/\\s+/);\n        binding = binding
        || this;\n\n        while (eventName = eventNames.shift()) {\n          callbacks
        = allCallbacks[eventName];\n\n          if (!callbacks) {\n            callbacks
        = allCallbacks[eventName] = [];\n          }\n\n          if (indexOf(callbacks,
        callback) === -1) {\n            callbacks.push([callback, binding]);\n          }\n
        \       }\n      },\n\n      off: function(eventNames, callback) {\n        var
        allCallbacks = callbacksFor(this), callbacks, eventName, index;\n        eventNames
        = eventNames.split(/\\s+/);\n\n        while (eventName = eventNames.shift())
        {\n          if (!callback) {\n            allCallbacks[eventName] = [];\n
        \           continue;\n          }\n\n          callbacks = allCallbacks[eventName];\n\n
        \         index = indexOf(callbacks, callback);\n\n          if (index !==
        -1) { callbacks.splice(index, 1); }\n        }\n      },\n\n      trigger:
        function(eventName, options) {\n        var allCallbacks = callbacksFor(this),\n
        \           callbacks, callbackTuple, callback, binding, event;\n\n        if
        (callbacks = allCallbacks[eventName]) {\n          // Don't cache the callbacks.length
        since it may grow\n          for (var i=0; i<callbacks.length; i++) {\n            callbackTuple
        = callbacks[i];\n            callback = callbackTuple[0];\n            binding
        = callbackTuple[1];\n\n            if (typeof options !== 'object') {\n              options
        = { detail: options };\n            }\n\n            event = new Event(eventName,
        options);\n            callback.call(binding, event);\n          }\n        }\n
        \     }\n    };\n\n\n    __exports__.EventTarget = EventTarget;\n  });\ndefine(\"rsvp/hash\",\n
        \ [\"rsvp/defer\",\"exports\"],\n  function(__dependency1__, __exports__)
        {\n    \"use strict\";\n    var defer = __dependency1__.defer;\n\n    function
        size(object) {\n      var s = 0;\n\n      for (var prop in object) {\n        s++;\n
        \     }\n\n      return s;\n    }\n\n    function hash(promises) {\n      var
        results = {}, deferred = defer(), remaining = size(promises);\n\n      if
        (remaining === 0) {\n        deferred.resolve({});\n      }\n\n      var resolver
        = function(prop) {\n        return function(value) {\n          resolveAll(prop,
        value);\n        };\n      };\n\n      var resolveAll = function(prop, value)
        {\n        results[prop] = value;\n        if (--remaining === 0) {\n          deferred.resolve(results);\n
        \       }\n      };\n\n      var rejectAll = function(error) {\n        deferred.reject(error);\n
        \     };\n\n      for (var prop in promises) {\n        if (promises[prop]
        && typeof promises[prop].then === 'function') {\n          promises[prop].then(resolver(prop),
        rejectAll);\n        } else {\n          resolveAll(prop, promises[prop]);\n
        \       }\n      }\n\n      return deferred.promise;\n    }\n\n\n    __exports__.hash
        = hash;\n  });\ndefine(\"rsvp/node\",\n  [\"rsvp/promise\",\"rsvp/all\",\"exports\"],\n
        \ function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n
        \   var Promise = __dependency1__.Promise;\n    var all = __dependency2__.all;\n\n
        \   function makeNodeCallbackFor(resolve, reject) {\n      return function
        (error, value) {\n        if (error) {\n          reject(error);\n        }
        else if (arguments.length > 2) {\n          resolve(Array.prototype.slice.call(arguments,
        1));\n        } else {\n          resolve(value);\n        }\n      };\n    }\n\n
        \   function denodeify(nodeFunc) {\n      return function()  {\n        var
        nodeArgs = Array.prototype.slice.call(arguments), resolve, reject;\n        var
        thisArg = this;\n\n        var promise = new Promise(function(nodeResolve,
        nodeReject) {\n          resolve = nodeResolve;\n          reject = nodeReject;\n
        \       });\n\n        all(nodeArgs).then(function(nodeArgs) {\n          nodeArgs.push(makeNodeCallbackFor(resolve,
        reject));\n\n          try {\n            nodeFunc.apply(thisArg, nodeArgs);\n
        \         } catch(e) {\n            reject(e);\n          }\n        });\n\n
        \       return promise;\n      };\n    }\n\n\n    __exports__.denodeify =
        denodeify;\n  });\ndefine(\"rsvp/promise\",\n  [\"rsvp/config\",\"rsvp/events\",\"exports\"],\n
        \ function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n
        \   var config = __dependency1__.config;\n    var EventTarget = __dependency2__.EventTarget;\n\n
        \   function objectOrFunction(x) {\n      return isFunction(x) || (typeof
        x === \"object\" && x !== null);\n    }\n\n    function isFunction(x){\n      return
        typeof x === \"function\";\n    }\n\n    var Promise = function(resolver)
        {\n      var promise = this,\n      resolved = false;\n\n      if (typeof
        resolver !== 'function') {\n        throw new TypeError('You must pass a resolver
        function as the sole argument to the promise constructor');\n      }\n\n      if
        (!(promise instanceof Promise)) {\n        return new Promise(resolver);\n
        \     }\n\n      var resolvePromise = function(value) {\n        if (resolved)
        { return; }\n        resolved = true;\n        resolve(promise, value);\n
        \     };\n\n      var rejectPromise = function(value) {\n        if (resolved)
        { return; }\n        resolved = true;\n        reject(promise, value);\n      };\n\n
        \     this.on('promise:resolved', function(event) {\n        this.trigger('success',
        { detail: event.detail });\n      }, this);\n\n      this.on('promise:failed',
        function(event) {\n        this.trigger('error', { detail: event.detail });\n
        \     }, this);\n\n      this.on('error', onerror);\n\n      try {\n        resolver(resolvePromise,
        rejectPromise);\n      } catch(e) {\n        rejectPromise(e);\n      }\n
        \   };\n\n    function onerror(event) {\n      if (config.onerror) {\n        config.onerror(event.detail);\n
        \     }\n    }\n\n    var invokeCallback = function(type, promise, callback,
        event) {\n      var hasCallback = isFunction(callback),\n          value,
        error, succeeded, failed;\n\n      if (hasCallback) {\n        try {\n          value
        = callback(event.detail);\n          succeeded = true;\n        } catch(e)
        {\n          failed = true;\n          error = e;\n        }\n      } else
        {\n        value = event.detail;\n        succeeded = true;\n      }\n\n      if
        (handleThenable(promise, value)) {\n        return;\n      } else if (hasCallback
        && succeeded) {\n        resolve(promise, value);\n      } else if (failed)
        {\n        reject(promise, error);\n      } else if (type === 'resolve') {\n
        \       resolve(promise, value);\n      } else if (type === 'reject') {\n
        \       reject(promise, value);\n      }\n    };\n\n    Promise.prototype
        = {\n      constructor: Promise,\n\n      isRejected: undefined,\n      isFulfilled:
        undefined,\n      rejectedReason: undefined,\n      fulfillmentValue: undefined,\n\n
        \     then: function(done, fail) {\n        this.off('error', onerror);\n\n
        \       var thenPromise = new this.constructor(function() {});\n\n        if
        (this.isFulfilled) {\n          config.async(function(promise) {\n            invokeCallback('resolve',
        thenPromise, done, { detail: promise.fulfillmentValue });\n          }, this);\n
        \       }\n\n        if (this.isRejected) {\n          config.async(function(promise)
        {\n            invokeCallback('reject', thenPromise, fail, { detail: promise.rejectedReason
        });\n          }, this);\n        }\n\n        this.on('promise:resolved',
        function(event) {\n          invokeCallback('resolve', thenPromise, done,
        event);\n        });\n\n        this.on('promise:failed', function(event)
        {\n          invokeCallback('reject', thenPromise, fail, event);\n        });\n\n
        \       return thenPromise;\n      },\n\n      fail: function(fail) {\n        return
        this.then(null, fail);\n      }\n    };\n\n    EventTarget.mixin(Promise.prototype);\n\n
        \   function resolve(promise, value) {\n      if (promise === value) {\n        fulfill(promise,
        value);\n      } else if (!handleThenable(promise, value)) {\n        fulfill(promise,
        value);\n      }\n    }\n\n    function handleThenable(promise, value) {\n
        \     var then = null,\n      resolved;\n\n      try {\n        if (promise
        === value) {\n          throw new TypeError(\"A promises callback cannot return
        that same promise.\");\n        }\n\n        if (objectOrFunction(value))
        {\n          then = value.then;\n\n          if (isFunction(then)) {\n            then.call(value,
        function(val) {\n              if (resolved) { return true; }\n              resolved
        = true;\n\n              if (value !== val) {\n                resolve(promise,
        val);\n              } else {\n                fulfill(promise, val);\n              }\n
        \           }, function(val) {\n              if (resolved) { return true;
        }\n              resolved = true;\n\n              reject(promise, val);\n
        \           });\n\n            return true;\n          }\n        }\n      }
        catch (error) {\n        reject(promise, error);\n        return true;\n      }\n\n
        \     return false;\n    }\n\n    function fulfill(promise, value) {\n      config.async(function()
        {\n        promise.trigger('promise:resolved', { detail: value });\n        promise.isFulfilled
        = true;\n        promise.fulfillmentValue = value;\n      });\n    }\n\n    function
        reject(promise, value) {\n      config.async(function() {\n        promise.trigger('promise:failed',
        { detail: value });\n        promise.isRejected = true;\n        promise.rejectedReason
        = value;\n      });\n    }\n\n\n    __exports__.Promise = Promise;\n  });\ndefine(\"rsvp/reject\",\n
        \ [\"rsvp/promise\",\"exports\"],\n  function(__dependency1__, __exports__)
        {\n    \"use strict\";\n    var Promise = __dependency1__.Promise;\n\n    function
        reject(reason) {\n      return new Promise(function (resolve, reject) {\n
        \       reject(reason);\n      });\n    }\n\n\n    __exports__.reject = reject;\n
        \ });\ndefine(\"rsvp/resolve\",\n  [\"rsvp/promise\",\"exports\"],\n  function(__dependency1__,
        __exports__) {\n    \"use strict\";\n    var Promise = __dependency1__.Promise;\n\n
        \   function resolve(thenable) {\n      return new Promise(function(resolve,
        reject) {\n        resolve(thenable);\n      });\n    }\n\n\n    __exports__.resolve
        = resolve;\n  });\ndefine(\"rsvp/rethrow\",\n  [\"exports\"],\n  function(__exports__)
        {\n    \"use strict\";\n    var local = (typeof global === \"undefined\")
        ? this : global;\n\n    function rethrow(reason) {\n      local.setTimeout(function()
        {\n        throw reason;\n      });\n      throw reason;\n    }\n\n\n    __exports__.rethrow
        = rethrow;\n  });\ndefine(\"rsvp\",\n  [\"rsvp/events\",\"rsvp/promise\",\"rsvp/node\",\"rsvp/all\",\"rsvp/hash\",\"rsvp/rethrow\",\"rsvp/defer\",\"rsvp/config\",\"rsvp/resolve\",\"rsvp/reject\",\"exports\"],\n
        \ function(__dependency1__, __dependency2__, __dependency3__, __dependency4__,
        __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__,
        __dependency10__, __exports__) {\n    \"use strict\";\n    var EventTarget
        = __dependency1__.EventTarget;\n    var Promise = __dependency2__.Promise;\n
        \   var denodeify = __dependency3__.denodeify;\n    var all = __dependency4__.all;\n
        \   var hash = __dependency5__.hash;\n    var rethrow = __dependency6__.rethrow;\n
        \   var defer = __dependency7__.defer;\n    var config = __dependency8__.config;\n
        \   var resolve = __dependency9__.resolve;\n    var reject = __dependency10__.reject;\n\n
        \   function configure(name, value) {\n      config[name] = value;\n    }\n\n\n
        \   __exports__.Promise = Promise;\n    __exports__.EventTarget = EventTarget;\n
        \   __exports__.all = all;\n    __exports__.hash = hash;\n    __exports__.rethrow
        = rethrow;\n    __exports__.defer = defer;\n    __exports__.denodeify = denodeify;\n
        \   __exports__.configure = configure;\n    __exports__.resolve = resolve;\n
        \   __exports__.reject = reject;\n  });\n})();\n\n(function() {\n/**\n@private\nPublic
        api for the container is still in flux.\nThe public api, specified on the
        application namespace should be considered the stable api.\n// @module container\n*/\n\n/*\n
        Flag to enable/disable model factory injections (disabled by default)\n If
        model factory injections are enabled, models should not be\n accessed globally
        (only through `container.lookupFactory('model:modelName'))`);\n*/\nEmber.MODEL_FACTORY_INJECTIONS
        = false || !!Ember.ENV.MODEL_FACTORY_INJECTIONS;\n\ndefine(\"container\",\n
        \ [],\n  function() {\n\n    // A safe and simple inheriting object.\n    function
        InheritingDict(parent) {\n      this.parent = parent;\n      this.dict = {};\n
        \   }\n\n    InheritingDict.prototype = {\n\n      /**\n        @property
        parent\n        @type InheritingDict\n        @default null\n      */\n\n
        \     parent: null,\n\n      /**\n        Object used to store the current
        nodes data.\n\n        @property dict\n        @type Object\n        @default
        Object\n      */\n      dict: null,\n\n      /**\n        Retrieve the value
        given a key, if the value is present at the current\n        level use it,
        otherwise walk up the parent hierarchy and try again. If\n        no matching
        key is found, return undefined.\n\n        @method get\n        @return {any}\n
        \     */\n      get: function(key) {\n        var dict = this.dict;\n\n        if
        (dict.hasOwnProperty(key)) {\n          return dict[key];\n        }\n\n        if
        (this.parent) {\n          return this.parent.get(key);\n        }\n      },\n\n
        \     /**\n        Set the given value for the given key, at the current level.\n\n
        \       @method set\n        @param {String} key\n        @param {Any} value\n
        \     */\n      set: function(key, value) {\n        this.dict[key] = value;\n
        \     },\n\n      /**\n        Delete the given key\n\n        @method remove\n
        \       @param {String} key\n      */\n      remove: function(key) {\n        delete
        this.dict[key];\n      },\n\n      /**\n        Check for the existence of
        given a key, if the key is present at the current\n        level return true,
        otherwise walk up the parent hierarchy and try again. If\n        no matching
        key is found, return false.\n\n        @method has\n        @param {String}
        key\n        @return {Boolean}\n      */\n      has: function(key) {\n        var
        dict = this.dict;\n\n        if (dict.hasOwnProperty(key)) {\n          return
        true;\n        }\n\n        if (this.parent) {\n          return this.parent.has(key);\n
        \       }\n\n        return false;\n      },\n\n      /**\n        Iterate
        and invoke a callback for each local key-value pair.\n\n        @method eachLocal\n
        \       @param {Function} callback\n        @param {Object} binding\n      */\n
        \     eachLocal: function(callback, binding) {\n        var dict = this.dict;\n\n
        \       for (var prop in dict) {\n          if (dict.hasOwnProperty(prop))
        {\n            callback.call(binding, prop, dict[prop]);\n          }\n        }\n
        \     }\n    };\n\n\n    // A lightweight container that helps to assemble
        and decouple components.\n    // Public api for the container is still in
        flux.\n    // The public api, specified on the application namespace should
        be considered the stable api.\n    function Container(parent) {\n      this.parent
        = parent;\n      this.children = [];\n\n      this.resolver = parent && parent.resolver
        || function() {};\n\n      this.registry = new InheritingDict(parent && parent.registry);\n
        \     this.cache = new InheritingDict(parent && parent.cache);\n      this.factoryCache
        = new InheritingDict(parent && parent.cache);\n      this.typeInjections =
        new InheritingDict(parent && parent.typeInjections);\n      this.injections
        = {};\n\n      this.factoryTypeInjections = new InheritingDict(parent && parent.factoryTypeInjections);\n
        \     this.factoryInjections = {};\n\n      this._options = new InheritingDict(parent
        && parent._options);\n      this._typeOptions = new InheritingDict(parent
        && parent._typeOptions);\n    }\n\n    Container.prototype = {\n\n      /**\n
        \       @property parent\n        @type Container\n        @default null\n
        \     */\n      parent: null,\n\n      /**\n        @property children\n        @type
        Array\n        @default []\n      */\n      children: null,\n\n      /**\n
        \       @property resolver\n        @type function\n      */\n      resolver:
        null,\n\n      /**\n        @property registry\n        @type InheritingDict\n
        \     */\n      registry: null,\n\n      /**\n        @property cache\n        @type
        InheritingDict\n      */\n      cache: null,\n\n      /**\n        @property
        typeInjections\n        @type InheritingDict\n      */\n      typeInjections:
        null,\n\n      /**\n        @property injections\n        @type Object\n        @default
        {}\n      */\n      injections: null,\n\n      /**\n        @private\n\n        @property
        _options\n        @type InheritingDict\n        @default null\n      */\n
        \     _options: null,\n\n      /**\n        @private\n\n        @property
        _typeOptions\n        @type InheritingDict\n      */\n      _typeOptions:
        null,\n\n      /**\n        Returns a new child of the current container.
        These children are configured\n        to correctly inherit from the current
        container.\n\n        @method child\n        @return {Container}\n      */\n
        \     child: function() {\n        var container = new Container(this);\n
        \       this.children.push(container);\n        return container;\n      },\n\n
        \     /**\n        Sets a key-value pair on the current container. If a parent
        container,\n        has the same key, once set on a child, the parent and
        child will diverge\n        as expected.\n\n        @method set\n        @param
        {Object} object\n        @param {String} key\n        @param {any} value\n
        \     */\n      set: function(object, key, value) {\n        object[key] =
        value;\n      },\n\n      /**\n        Registers a factory for later injection.\n\n
        \       Example:\n\n        ```javascript\n        var container = new Container();\n\n
        \       container.register('model:user', Person, {singleton: false });\n        container.register('fruit:favorite',
        Orange);\n        container.register('communication:main', Email, {singleton:
        false});\n        ```\n\n        @method register\n        @param {String}
        fullName\n        @param {Function} factory\n        @param {Object} options\n
        \     */\n      register: function(fullName, factory, options) {\n        if
        (fullName.indexOf(':') === -1) {\n          throw new TypeError(\"malformed
        fullName, expected: `type:name` got: \" + fullName + \"\");\n        }\n\n
        \       if (factory === undefined) {\n          throw new TypeError('Attempting
        to register an unknown factory: `' + fullName + '`');\n        }\n\n        var
        normalizedName = this.normalize(fullName);\n\n        if (this.cache.has(normalizedName))
        {\n          throw new Error('Cannot re-register: `' + fullName +'`, as it
        has already been looked up.');\n        }\n\n        this.registry.set(normalizedName,
        factory);\n        this._options.set(normalizedName, options || {});\n      },\n\n
        \     /**\n        Unregister a fullName\n\n        ```javascript\n        var
        container = new Container();\n        container.register('model:user', User);\n\n
        \       container.lookup('model:user') instanceof User //=> true\n\n        container.unregister('model:user')\n
        \       container.lookup('model:user') === undefined //=> true\n        ```\n\n
        \       @method unregister\n        @param {String} fullName\n       */\n
        \     unregister: function(fullName) {\n        var normalizedName = this.normalize(fullName);\n\n
        \       this.registry.remove(normalizedName);\n        this.cache.remove(normalizedName);\n
        \       this.factoryCache.remove(normalizedName);\n        this._options.remove(normalizedName);\n
        \     },\n\n      /**\n        Given a fullName return the corresponding factory.\n\n
        \       By default `resolve` will retrieve the factory from\n        its container's
        registry.\n\n        ```javascript\n        var container = new Container();\n
        \       container.register('api:twitter', Twitter);\n\n        container.resolve('api:twitter')
        // => Twitter\n        ```\n\n        Optionally the container can be provided
        with a custom resolver.\n        If provided, `resolve` will first provide
        the custom resolver\n        the oppertunity to resolve the fullName, otherwise
        it will fallback\n        to the registry.\n\n        ```javascript\n        var
        container = new Container();\n        container.resolver = function(fullName)
        {\n          // lookup via the module system of choice\n        };\n\n        //
        the twitter factory is added to the module system\n        container.resolve('api:twitter')
        // => Twitter\n        ```\n\n        @method resolve\n        @param {String}
        fullName\n        @return {Function} fullName's factory\n      */\n      resolve:
        function(fullName) {\n        return this.resolver(fullName) || this.registry.get(fullName);\n
        \     },\n\n      /**\n        A hook that can be used to describe how the
        resolver will\n        attempt to find the factory.\n\n        For example,
        the default Ember `.describe` returns the full\n        class name (including
        namespace) where Ember's resolver expects\n        to find the `fullName`.\n\n
        \       @method describe\n      */\n      describe: function(fullName) {\n
        \       return fullName;\n      },\n\n      /**\n        A hook to enable
        custom fullName normalization behaviour\n\n        @method normalize\n        @param
        {String} fullName\n        @return {string} normalized fullName\n      */\n
        \     normalize: function(fullName) {\n        return fullName;\n      },\n\n
        \     /**\n        @method makeToString\n\n        @param {any} factory\n
        \       @param {string} fullName\n        @return {function} toString function\n
        \     */\n      makeToString: function(factory, fullName) {\n        return
        factory.toString();\n      },\n\n      /**\n        Given a fullName return
        a corresponding instance.\n\n        The default behaviour is for lookup to
        return a singleton instance.\n        The singleton is scoped to the container,
        allowing multiple containers\n        to all have their own locally scoped
        singletons.\n\n        ```javascript\n        var container = new Container();\n
        \       container.register('api:twitter', Twitter);\n\n        var twitter
        = container.lookup('api:twitter');\n\n        twitter instanceof Twitter;
        // => true\n\n        // by default the container will return singletons\n
        \       twitter2 = container.lookup('api:twitter');\n        twitter instanceof
        Twitter; // => true\n\n        twitter === twitter2; //=> true\n        ```\n\n
        \       If singletons are not wanted an optional flag can be provided at lookup.\n\n
        \       ```javascript\n        var container = new Container();\n        container.register('api:twitter',
        Twitter);\n\n        var twitter = container.lookup('api:twitter', { singleton:
        false });\n        var twitter2 = container.lookup('api:twitter', { singleton:
        false });\n\n        twitter === twitter2; //=> false\n        ```\n\n        @method
        lookup\n        @param {String} fullName\n        @param {Object} options\n
        \       @return {any}\n      */\n      lookup: function(fullName, options)
        {\n        fullName = this.normalize(fullName);\n\n        options = options
        || {};\n\n        if (this.cache.has(fullName) && options.singleton !== false)
        {\n          return this.cache.get(fullName);\n        }\n\n        var value
        = instantiate(this, fullName);\n\n        if (value === undefined) { return;
        }\n\n        if (isSingleton(this, fullName) && options.singleton !== false)
        {\n          this.cache.set(fullName, value);\n        }\n\n        return
        value;\n      },\n\n      /**\n        Given a fullName return the corresponding
        factory.\n\n        @method lookupFactory\n        @param {String} fullName\n
        \       @return {any}\n      */\n      lookupFactory: function(fullName) {\n
        \       return factoryFor(this, fullName);\n      },\n\n      /**\n        Given
        a fullName check if the container is aware of its factory\n        or singleton
        instance.\n\n        @method has\n        @param {String} fullName\n        @return
        {Boolean}\n      */\n      has: function(fullName) {\n        if (this.cache.has(fullName))
        {\n          return true;\n        }\n\n        return !!factoryFor(this,
        fullName);\n      },\n\n      /**\n        Allow registering options for all
        factories of a type.\n\n        ```javascript\n        var container = new
        Container();\n\n        // if all of type `connection` must not be singletons\n
        \       container.optionsForType('connection', { singleton: false });\n\n
        \       container.register('connection:twitter', TwitterConnection);\n        container.register('connection:facebook',
        FacebookConnection);\n\n        var twitter = container.lookup('connection:twitter');\n
        \       var twitter2 = container.lookup('connection:twitter');\n\n        twitter
        === twitter2; // => false\n\n        var facebook = container.lookup('connection:facebook');\n
        \       var facebook2 = container.lookup('connection:facebook');\n\n        facebook
        === facebook2; // => false\n        ```\n\n        @method optionsForType\n
        \       @param {String} type\n        @param {Object} options\n      */\n
        \     optionsForType: function(type, options) {\n        if (this.parent)
        { illegalChildOperation('optionsForType'); }\n\n        this._typeOptions.set(type,
        options);\n      },\n\n      /**\n        @method options\n        @param
        {String} type\n        @param {Object} options\n      */\n      options: function(type,
        options) {\n        this.optionsForType(type, options);\n      },\n\n      /**\n
        \       @private\n\n        Used only via `injection`.\n\n        Provides
        a specialized form of injection, specifically enabling\n        all objects
        of one type to be injected with a reference to another\n        object.\n\n
        \       For example, provided each object of type `controller` needed a `router`.\n
        \       one would do the following:\n\n        ```javascript\n        var
        container = new Container();\n\n        container.register('router:main',
        Router);\n        container.register('controller:user', UserController);\n
        \       container.register('controller:post', PostController);\n\n        container.typeInjection('controller',
        'router', 'router:main');\n\n        var user = container.lookup('controller:user');\n
        \       var post = container.lookup('controller:post');\n\n        user.router
        instanceof Router; //=> true\n        post.router instanceof Router; //=>
        true\n\n        // both controllers share the same router\n        user.router
        === post.router; //=> true\n        ```\n\n        @method typeInjection\n
        \       @param {String} type\n        @param {String} property\n        @param
        {String} fullName\n      */\n      typeInjection: function(type, property,
        fullName) {\n        if (this.parent) { illegalChildOperation('typeInjection');
        }\n\n        addTypeInjection(this.typeInjections, type, property, fullName);\n
        \     },\n\n      /**\n        Defines injection rules.\n\n        These rules
        are used to inject dependencies onto objects when they\n        are instantiated.\n\n
        \       Two forms of injections are possible:\n\n      * Injecting one fullName
        on another fullName\n      * Injecting one fullName on a type\n\n        Example:\n\n
        \       ```javascript\n        var container = new Container();\n\n        container.register('source:main',
        Source);\n        container.register('model:user', User);\n        container.register('model:post',
        Post);\n\n        // injecting one fullName on another fullName\n        //
        eg. each user model gets a post model\n        container.injection('model:user',
        'post', 'model:post');\n\n        // injecting one fullName on another type\n
        \       container.injection('model', 'source', 'source:main');\n\n        var
        user = container.lookup('model:user');\n        var post = container.lookup('model:post');\n\n
        \       user.source instanceof Source; //=> true\n        post.source instanceof
        Source; //=> true\n\n        user.post instanceof Post; //=> true\n\n        //
        and both models share the same source\n        user.source === post.source;
        //=> true\n        ```\n\n        @method injection\n        @param {String}
        factoryName\n        @param {String} property\n        @param {String} injectionName\n
        \     */\n      injection: function(factoryName, property, injectionName)
        {\n        if (this.parent) { illegalChildOperation('injection'); }\n\n        if
        (factoryName.indexOf(':') === -1) {\n          return this.typeInjection(factoryName,
        property, injectionName);\n        }\n\n        addInjection(this.injections,
        factoryName, property, injectionName);\n      },\n\n\n      /**\n        @private\n\n
        \       Used only via `factoryInjection`.\n\n        Provides a specialized
        form of injection, specifically enabling\n        all factory of one type
        to be injected with a reference to another\n        object.\n\n        For
        example, provided each factory of type `model` needed a `store`.\n        one
        would do the following:\n\n        ```javascript\n        var container =
        new Container();\n\n        container.registerFactory('model:user', User);\n
        \       container.register('store:main', SomeStore);\n\n        container.factoryTypeInjection('model',
        'store', 'store:main');\n\n        var store = container.lookup('store:main');\n
        \       var UserFactory = container.lookupFactory('model:user');\n\n        UserFactory.store
        instanceof SomeStore; //=> true\n        ```\n\n        @method factoryTypeInjection\n
        \       @param {String} type\n        @param {String} property\n        @param
        {String} fullName\n      */\n      factoryTypeInjection: function(type, property,
        fullName) {\n        if (this.parent) { illegalChildOperation('factoryTypeInjection');
        }\n\n        addTypeInjection(this.factoryTypeInjections, type, property,
        fullName);\n      },\n\n      /**\n        Defines factory injection rules.\n\n
        \       Similar to regular injection rules, but are run against factories,
        via\n        `Container#lookupFactory`.\n\n        These rules are used to
        inject objects onto factories when they\n        are looked up.\n\n        Two
        forms of injections are possible:\n\n      * Injecting one fullName on another
        fullName\n      * Injecting one fullName on a type\n\n        Example:\n\n
        \       ```javascript\n        var container = new Container();\n\n        container.register('store:main',
        Store);\n        container.register('store:secondary', OtherStore);\n        container.register('model:user',
        User);\n        container.register('model:post', Post);\n\n        // injecting
        one fullName on another type\n        container.factoryInjection('model',
        'store', 'store:main');\n\n        // injecting one fullName on another fullName\n
        \       container.factoryInjection('model:post', 'secondaryStore', 'store:secondary');\n\n
        \       var UserFactory = container.lookupFactory('model:user');\n        var
        PostFactory = container.lookupFactory('model:post');\n        var store =
        container.lookup('store:main');\n\n        UserFactory.store instanceof Store;
        //=> true\n        UserFactory.secondaryStore instanceof OtherStore; //=>
        false\n\n        PostFactory.store instanceof Store; //=> true\n        PostFactory.secondaryStore
        instanceof OtherStore; //=> true\n\n        // and both models share the same
        source instance\n        UserFactory.store === PostFactory.store; //=> true\n
        \       ```\n\n        @method factoryInjection\n        @param {String} factoryName\n
        \       @param {String} property\n        @param {String} injectionName\n
        \     */\n      factoryInjection: function(factoryName, property, injectionName)
        {\n        if (this.parent) { illegalChildOperation('injection'); }\n\n        if
        (factoryName.indexOf(':') === -1) {\n          return this.factoryTypeInjection(factoryName,
        property, injectionName);\n        }\n\n        addInjection(this.factoryInjections,
        factoryName, property, injectionName);\n      },\n\n      /**\n        A depth
        first traversal, destroying the container, its descendant containers and all\n
        \       their managed objects.\n\n        @method destroy\n      */\n      destroy:
        function() {\n        this.isDestroyed = true;\n\n        for (var i=0, l=this.children.length;
        i<l; i++) {\n          this.children[i].destroy();\n        }\n\n        this.children
        = [];\n\n        eachDestroyable(this, function(item) {\n          item.destroy();\n
        \       });\n\n        this.parent = undefined;\n        this.isDestroyed
        = true;\n      },\n\n      /**\n        @method reset\n      */\n      reset:
        function() {\n        for (var i=0, l=this.children.length; i<l; i++) {\n
        \         resetCache(this.children[i]);\n        }\n        resetCache(this);\n
        \     }\n    };\n\n    function illegalChildOperation(operation) {\n      throw
        new Error(operation + \" is not currently supported on child containers\");\n
        \   }\n\n    function isSingleton(container, fullName) {\n      var singleton
        = option(container, fullName, 'singleton');\n\n      return singleton !==
        false;\n    }\n\n    function buildInjections(container, injections) {\n      var
        hash = {};\n\n      if (!injections) { return hash; }\n\n      var injection,
        lookup;\n\n      for (var i=0, l=injections.length; i<l; i++) {\n        injection
        = injections[i];\n        lookup = container.lookup(injection.fullName);\n\n
        \       if (lookup !== undefined) {\n          hash[injection.property] =
        lookup;\n        } else {\n          throw new Error('Attempting to inject
        an unknown injection: `' + injection.fullName + '`');\n        }\n      }\n\n
        \     return hash;\n    }\n\n    function option(container, fullName, optionName)
        {\n      var options = container._options.get(fullName);\n\n      if (options
        && options[optionName] !== undefined) {\n        return options[optionName];\n
        \     }\n\n      var type = fullName.split(\":\")[0];\n      options = container._typeOptions.get(type);\n\n
        \     if (options) {\n        return options[optionName];\n      }\n    }\n\n
        \   function factoryFor(container, fullName) {\n      var name = container.normalize(fullName);\n
        \     var factory = container.resolve(name);\n      var injectedFactory;\n
        \     var cache = container.factoryCache;\n      var type = fullName.split(\":\")[0];\n\n
        \     if (factory === undefined) { return; }\n\n      if (cache.has(fullName))
        {\n        return cache.get(fullName);\n      }\n\n      if (!factory || typeof
        factory.extend !== 'function' || (!Ember.MODEL_FACTORY_INJECTIONS && type
        === 'model')) {\n        // TODO: think about a 'safe' merge style extension\n
        \       // for now just fallback to create time injection\n        return
        factory;\n      } else {\n\n        var injections        = injectionsFor(container,
        fullName);\n        var factoryInjections = factoryInjectionsFor(container,
        fullName);\n\n        factoryInjections._toString = container.makeToString(factory,
        fullName);\n\n        injectedFactory = factory.extend(injections);\n        injectedFactory.reopenClass(factoryInjections);\n\n
        \       cache.set(fullName, injectedFactory);\n\n        return injectedFactory;\n
        \     }\n    }\n\n    function injectionsFor(container ,fullName) {\n      var
        splitName = fullName.split(\":\"),\n        type = splitName[0],\n        injections
        = [];\n\n      injections = injections.concat(container.typeInjections.get(type)
        || []);\n      injections = injections.concat(container.injections[fullName]
        || []);\n\n      injections = buildInjections(container, injections);\n      injections._debugContainerKey
        = fullName;\n      injections.container = container;\n\n      return injections;\n
        \   }\n\n    function factoryInjectionsFor(container, fullName) {\n      var
        splitName = fullName.split(\":\"),\n        type = splitName[0],\n        factoryInjections
        = [];\n\n      factoryInjections = factoryInjections.concat(container.factoryTypeInjections.get(type)
        || []);\n      factoryInjections = factoryInjections.concat(container.factoryInjections[fullName]
        || []);\n\n      factoryInjections = buildInjections(container, factoryInjections);\n
        \     factoryInjections._debugContainerKey = fullName;\n\n      return factoryInjections;\n
        \   }\n\n    function instantiate(container, fullName) {\n      var factory
        = factoryFor(container, fullName);\n\n      if (option(container, fullName,
        'instantiate') === false) {\n        return factory;\n      }\n\n      if
        (factory) {\n        if (typeof factory.extend === 'function') {\n          //
        assume the factory was extendable and is already injected\n          return
        factory.create();\n        } else {\n          // assume the factory was extendable\n
        \         // to create time injections\n          // TODO: support new'ing
        for instantiation and merge injections for pure JS Functions\n          return
        factory.create(injectionsFor(container, fullName));\n        }\n      }\n
        \   }\n\n    function eachDestroyable(container, callback) {\n      container.cache.eachLocal(function(key,
        value) {\n        if (option(container, key, 'instantiate') === false) { return;
        }\n        callback(value);\n      });\n    }\n\n    function resetCache(container)
        {\n      container.cache.eachLocal(function(key, value) {\n        if (option(container,
        key, 'instantiate') === false) { return; }\n        value.destroy();\n      });\n
        \     container.cache.dict = {};\n    }\n\n    function addTypeInjection(rules,
        type, property, fullName) {\n      var injections = rules.get(type);\n\n      if
        (!injections) {\n        injections = [];\n        rules.set(type, injections);\n
        \     }\n\n      injections.push({\n        property: property,\n        fullName:
        fullName\n      });\n    }\n\n    function addInjection(rules, factoryName,
        property, injectionName) {\n      var injections = rules[factoryName] = rules[factoryName]
        || [];\n      injections.push({ property: property, fullName: injectionName
        });\n    }\n\n    return Container;\n});\n\n})();\n\n(function() {\n/*globals
        ENV */\n/**\n@module ember\n@submodule ember-runtime\n*/\n\nvar indexOf =
        Ember.EnumerableUtils.indexOf;\n\n/**\n This will compare two javascript values
        of possibly different types.\n It will tell you which one is greater than
        the other by returning:\n\n  - -1 if the first is smaller than the second,\n
        \ - 0 if both are equal,\n  - 1 if the first is greater than the second.\n\n
        The order is calculated based on `Ember.ORDER_DEFINITION`, if types are different.\n
        In case they have the same type an appropriate comparison for this type is
        made.\n\n  ```javascript\n  Ember.compare('hello', 'hello');  // 0\n  Ember.compare('abc',
        'dfg');      // -1\n  Ember.compare(2, 1);              // 1\n  ```\n\n @method
        compare\n @for Ember\n @param {Object} v First value to compare\n @param {Object}
        w Second value to compare\n @return {Number} -1 if v < w, 0 if v = w and 1
        if v > w.\n*/\nEmber.compare = function compare(v, w) {\n  if (v === w) {
        return 0; }\n\n  var type1 = Ember.typeOf(v);\n  var type2 = Ember.typeOf(w);\n\n
        \ var Comparable = Ember.Comparable;\n  if (Comparable) {\n    if (type1==='instance'
        && Comparable.detect(v.constructor)) {\n      return v.constructor.compare(v,
        w);\n    }\n\n    if (type2 === 'instance' && Comparable.detect(w.constructor))
        {\n      return 1-w.constructor.compare(w, v);\n    }\n  }\n\n  // If we haven't
        yet generated a reverse-mapping of Ember.ORDER_DEFINITION,\n  // do so now.\n
        \ var mapping = Ember.ORDER_DEFINITION_MAPPING;\n  if (!mapping) {\n    var
        order = Ember.ORDER_DEFINITION;\n    mapping = Ember.ORDER_DEFINITION_MAPPING
        = {};\n    var idx, len;\n    for (idx = 0, len = order.length; idx < len;
        \ ++idx) {\n      mapping[order[idx]] = idx;\n    }\n\n    // We no longer
        need Ember.ORDER_DEFINITION.\n    delete Ember.ORDER_DEFINITION;\n  }\n\n
        \ var type1Index = mapping[type1];\n  var type2Index = mapping[type2];\n\n
        \ if (type1Index < type2Index) { return -1; }\n  if (type1Index > type2Index)
        { return 1; }\n\n  // types are equal - so we have to check values now\n  switch
        (type1) {\n    case 'boolean':\n    case 'number':\n      if (v < w) { return
        -1; }\n      if (v > w) { return 1; }\n      return 0;\n\n    case 'string':\n
        \     var comp = v.localeCompare(w);\n      if (comp < 0) { return -1; }\n
        \     if (comp > 0) { return 1; }\n      return 0;\n\n    case 'array':\n
        \     var vLen = v.length;\n      var wLen = w.length;\n      var l = Math.min(vLen,
        wLen);\n      var r = 0;\n      var i = 0;\n      while (r === 0 && i < l)
        {\n        r = compare(v[i],w[i]);\n        i++;\n      }\n      if (r !==
        0) { return r; }\n\n      // all elements are equal now\n      // shorter
        array should be ordered first\n      if (vLen < wLen) { return -1; }\n      if
        (vLen > wLen) { return 1; }\n      // arrays are equal now\n      return 0;\n\n
        \   case 'instance':\n      if (Ember.Comparable && Ember.Comparable.detect(v))
        {\n        return v.compare(v, w);\n      }\n      return 0;\n\n    case 'date':\n
        \     var vNum = v.getTime();\n      var wNum = w.getTime();\n      if (vNum
        < wNum) { return -1; }\n      if (vNum > wNum) { return 1; }\n      return
        0;\n\n    default:\n      return 0;\n  }\n};\n\nfunction _copy(obj, deep,
        seen, copies) {\n  var ret, loc, key;\n\n  // primitive data types are immutable,
        just return them.\n  if ('object' !== typeof obj || obj===null) return obj;\n\n
        \ // avoid cyclical loops\n  if (deep && (loc=indexOf(seen, obj))>=0) return
        copies[loc];\n\n  Ember.assert('Cannot clone an Ember.Object that does not
        implement Ember.Copyable', !(obj instanceof Ember.Object) || (Ember.Copyable
        && Ember.Copyable.detect(obj)));\n\n  // IMPORTANT: this specific test will
        detect a native array only. Any other\n  // object will need to implement
        Copyable.\n  if (Ember.typeOf(obj) === 'array') {\n    ret = obj.slice();\n
        \   if (deep) {\n      loc = ret.length;\n      while(--loc>=0) ret[loc] =
        _copy(ret[loc], deep, seen, copies);\n    }\n  } else if (Ember.Copyable &&
        Ember.Copyable.detect(obj)) {\n    ret = obj.copy(deep, seen, copies);\n  }
        else {\n    ret = {};\n    for(key in obj) {\n      if (!obj.hasOwnProperty(key))
        continue;\n\n      // Prevents browsers that don't respect non-enumerability
        from\n      // copying internal Ember properties\n      if (key.substring(0,2)
        === '__') continue;\n\n      ret[key] = deep ? _copy(obj[key], deep, seen,
        copies) : obj[key];\n    }\n  }\n\n  if (deep) {\n    seen.push(obj);\n    copies.push(ret);\n
        \ }\n\n  return ret;\n}\n\n/**\n  Creates a clone of the passed object. This
        function can take just about\n  any type of object and create a clone of it,
        including primitive values\n  (which are not actually cloned because they
        are immutable).\n\n  If the passed object implements the `clone()` method,
        then this function\n  will simply call that method and return the result.\n\n
        \ @method copy\n  @for Ember\n  @param {Object} obj The object to clone\n
        \ @param {Boolean} deep If true, a deep copy of the object is made\n  @return
        {Object} The cloned object\n*/\nEmber.copy = function(obj, deep) {\n  // fast
        paths\n  if ('object' !== typeof obj || obj===null) return obj; // can't copy
        primitives\n  if (Ember.Copyable && Ember.Copyable.detect(obj)) return obj.copy(deep);\n
        \ return _copy(obj, deep, deep ? [] : null, deep ? [] : null);\n};\n\n/**\n
        \ Convenience method to inspect an object. This method will attempt to\n  convert
        the object into a useful string description.\n\n  It is a pretty simple implementation.
        If you want something more robust,\n  use something like JSDump: https://github.com/NV/jsDump\n\n
        \ @method inspect\n  @for Ember\n  @param {Object} obj The object you want
        to inspect.\n  @return {String} A description of the object\n*/\nEmber.inspect
        = function(obj) {\n  var type = Ember.typeOf(obj);\n  if (type === 'array')
        {\n    return '[' + obj + ']';\n  }\n  if (type !== 'object') {\n    return
        obj + '';\n  }\n\n  var v, ret = [];\n  for(var key in obj) {\n    if (obj.hasOwnProperty(key))
        {\n      v = obj[key];\n      if (v === 'toString') { continue; } // ignore
        useless items\n      if (Ember.typeOf(v) === 'function') { v = \"function()
        { ... }\"; }\n      ret.push(key + \": \" + v);\n    }\n  }\n  return \"{\"
        + ret.join(\", \") + \"}\";\n};\n\n/**\n  Compares two objects, returning
        true if they are logically equal. This is\n  a deeper comparison than a simple
        triple equal. For sets it will compare the\n  internal objects. For any other
        object that implements `isEqual()` it will\n  respect that method.\n\n  ```javascript\n
        \ Ember.isEqual('hello', 'hello');  // true\n  Ember.isEqual(1, 2);              //
        false\n  Ember.isEqual([4,2], [4,2]);      // false\n  ```\n\n  @method isEqual\n
        \ @for Ember\n  @param {Object} a first object to compare\n  @param {Object}
        b second object to compare\n  @return {Boolean}\n*/\nEmber.isEqual = function(a,
        b) {\n  if (a && 'function'===typeof a.isEqual) return a.isEqual(b);\n  return
        a === b;\n};\n\n// Used by Ember.compare\nEmber.ORDER_DEFINITION = Ember.ENV.ORDER_DEFINITION
        || [\n  'undefined',\n  'null',\n  'boolean',\n  'number',\n  'string',\n
        \ 'array',\n  'object',\n  'instance',\n  'function',\n  'class',\n  'date'\n];\n\n/**\n
        \ Returns all of the keys defined on an object or hash. This is useful\n  when
        inspecting objects for debugging. On browsers that support it, this\n  uses
        the native `Object.keys` implementation.\n\n  @method keys\n  @for Ember\n
        \ @param {Object} obj\n  @return {Array} Array containing keys of obj\n*/\nEmber.keys
        = Object.keys;\n\nif (!Ember.keys || Ember.create.isSimulated) {\n  var prototypeProperties
        = [\n    'constructor',\n    'hasOwnProperty',\n    'isPrototypeOf',\n    'propertyIsEnumerable',\n
        \   'valueOf',\n    'toLocaleString',\n    'toString'\n  ],\n  pushPropertyName
        = function(obj, array, key) {\n    // Prevents browsers that don't respect
        non-enumerability from\n    // copying internal Ember properties\n    if (key.substring(0,2)
        === '__') return;\n    if (key === '_super') return;\n    if (indexOf(array,
        key) >= 0) return;\n    if (!obj.hasOwnProperty(key)) return;\n\n    array.push(key);\n
        \ };\n\n  Ember.keys = function(obj) {\n    var ret = [], key;\n    for (key
        in obj) {\n      pushPropertyName(obj, ret, key);\n    }\n\n    // IE8 doesn't
        enumerate property that named the same as prototype properties.\n    for (var
        i = 0, l = prototypeProperties.length; i < l; i++) {\n      key = prototypeProperties[i];\n\n
        \     pushPropertyName(obj, ret, key);\n    }\n\n    return ret;\n  };\n}\n\n//
        ..........................................................\n// ERROR\n//\n\nvar
        errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name',
        'number', 'stack'];\n\n/**\n  A subclass of the JavaScript Error object for
        use in Ember.\n\n  @class Error\n  @namespace Ember\n  @extends Error\n  @constructor\n*/\nEmber.Error
        = function() {\n  var tmp = Error.apply(this, arguments);\n\n  // Unfortunately
        errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't
        work.\n  for (var idx = 0; idx < errorProps.length; idx++) {\n    this[errorProps[idx]]
        = tmp[errorProps[idx]];\n  }\n};\n\nEmber.Error.prototype = Ember.create(Error.prototype);\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\n// ..........................................................\n//
        HELPERS\n//\n\nvar get = Ember.get, set = Ember.set;\nvar a_slice = Array.prototype.slice;\nvar
        a_indexOf = Ember.EnumerableUtils.indexOf;\n\nvar contexts = [];\n\nfunction
        popCtx() {\n  return contexts.length===0 ? {} : contexts.pop();\n}\n\nfunction
        pushCtx(ctx) {\n  contexts.push(ctx);\n  return null;\n}\n\nfunction iter(key,
        value) {\n  var valueProvided = arguments.length === 2;\n\n  function i(item)
        {\n    var cur = get(item, key);\n    return valueProvided ? value===cur :
        !!cur;\n  }\n  return i ;\n}\n\n/**\n  This mixin defines the common interface
        implemented by enumerable objects\n  in Ember. Most of these methods follow
        the standard Array iteration\n  API defined up to JavaScript 1.8 (excluding
        language-specific features that\n  cannot be emulated in older versions of
        JavaScript).\n\n  This mixin is applied automatically to the Array class on
        page load, so you\n  can use any of these methods on simple arrays. If Array
        already implements\n  one of these methods, the mixin will not override them.\n\n
        \ ## Writing Your Own Enumerable\n\n  To make your own custom class enumerable,
        you need two items:\n\n  1. You must have a length property. This property
        should change whenever\n     the number of items in your enumerable object
        changes. If you using this\n     with an `Ember.Object` subclass, you should
        be sure to change the length\n     property using `set().`\n\n  2. If you
        must implement `nextObject().` See documentation.\n\n  Once you have these
        two methods implement, apply the `Ember.Enumerable` mixin\n  to your class
        and you will be able to enumerate the contents of your object\n  like any
        other collection.\n\n  ## Using Ember Enumeration with Other Libraries\n\n
        \ Many other libraries provide some kind of iterator or enumeration like\n
        \ facility. This is often where the most common API conflicts occur.\n  Ember's
        API is designed to be as friendly as possible with other\n  libraries by implementing
        only methods that mostly correspond to the\n  JavaScript 1.8 API.\n\n  @class
        Enumerable\n  @namespace Ember\n  @since Ember 0.9\n*/\nEmber.Enumerable =
        Ember.Mixin.create({\n\n  /**\n    Implement this method to make your class
        enumerable.\n\n    This method will be call repeatedly during enumeration.
        The index value\n    will always begin with 0 and increment monotonically.
        You don't have to\n    rely on the index value to determine what object to
        return, but you should\n    always check the value and start from the beginning
        when you see the\n    requested index is 0.\n\n    The `previousObject` is
        the object that was returned from the last call\n    to `nextObject` for the
        current iteration. This is a useful way to\n    manage iteration if you are
        tracing a linked list, for example.\n\n    Finally the context parameter will
        always contain a hash you can use as\n    a \"scratchpad\" to maintain any
        other state you need in order to iterate\n    properly. The context object
        is reused and is not reset between\n    iterations so make sure you setup
        the context with a fresh state whenever\n    the index parameter is 0.\n\n
        \   Generally iterators will continue to call `nextObject` until the index\n
        \   reaches the your current length-1. If you run out of data before this\n
        \   time for some reason, you should simply return undefined.\n\n    The default
        implementation of this method simply looks up the index.\n    This works great
        on any Array-like objects.\n\n    @method nextObject\n    @param {Number}
        index the current index of the iteration\n    @param {Object} previousObject
        the value returned by the last call to\n      `nextObject`.\n    @param {Object}
        context a context object you can use to maintain state.\n    @return {Object}
        the next object in the iteration or undefined\n  */\n  nextObject: Ember.required(Function),\n\n
        \ /**\n    Helper method returns the first object from a collection. This
        is usually\n    used by bindings and other parts of the framework to extract
        a single\n    object if the enumerable contains only one item.\n\n    If you
        override this method, you should implement it so that it will\n    always
        return the same value each time it is called. If your enumerable\n    contains
        only one object, this method should always return that object.\n    If your
        enumerable is empty, this method should return `undefined`.\n\n    ```javascript\n
        \   var arr = [\"a\", \"b\", \"c\"];\n    arr.get('firstObject');  // \"a\"\n\n
        \   var arr = [];\n    arr.get('firstObject');  // undefined\n    ```\n\n
        \   @property firstObject\n    @return {Object} the object or undefined\n
        \ */\n  firstObject: Ember.computed(function() {\n    if (get(this, 'length')===0)
        return undefined ;\n\n    // handle generic enumerables\n    var context =
        popCtx(), ret;\n    ret = this.nextObject(0, null, context);\n    pushCtx(context);\n
        \   return ret ;\n  }).property('[]'),\n\n  /**\n    Helper method returns
        the last object from a collection. If your enumerable\n    contains only one
        object, this method should always return that object.\n    If your enumerable
        is empty, this method should return `undefined`.\n\n    ```javascript\n    var
        arr = [\"a\", \"b\", \"c\"];\n    arr.get('lastObject');  // \"c\"\n\n    var
        arr = [];\n    arr.get('lastObject');  // undefined\n    ```\n\n    @property
        lastObject\n    @return {Object} the last object or undefined\n  */\n  lastObject:
        Ember.computed(function() {\n    var len = get(this, 'length');\n    if (len===0)
        return undefined ;\n    var context = popCtx(), idx=0, cur, last = null;\n
        \   do {\n      last = cur;\n      cur = this.nextObject(idx++, last, context);\n
        \   } while (cur !== undefined);\n    pushCtx(context);\n    return last;\n
        \ }).property('[]'),\n\n  /**\n    Returns `true` if the passed object can
        be found in the receiver. The\n    default version will iterate through the
        enumerable until the object\n    is found. You may want to override this with
        a more efficient version.\n\n    ```javascript\n    var arr = [\"a\", \"b\",
        \"c\"];\n    arr.contains(\"a\"); // true\n    arr.contains(\"z\"); // false\n
        \   ```\n\n    @method contains\n    @param {Object} obj The object to search
        for.\n    @return {Boolean} `true` if object is found in enumerable.\n  */\n
        \ contains: function(obj) {\n    return this.find(function(item) { return
        item===obj; }) !== undefined;\n  },\n\n  /**\n    Iterates through the enumerable,
        calling the passed function on each\n    item. This method corresponds to
        the `forEach()` method defined in\n    JavaScript 1.6.\n\n    The callback
        method you provide should have the following signature (all\n    parameters
        are optional):\n\n    ```javascript\n    function(item, index, enumerable);\n
        \   ```\n\n    - `item` is the current item in the iteration.\n    - `index`
        is the current index in the iteration.\n    - `enumerable` is the enumerable
        object itself.\n\n    Note that in addition to a callback, you can also pass
        an optional target\n    object that will be set as `this` on the context.
        This is a good way\n    to give your iterator function access to the current
        object.\n\n    @method forEach\n    @param {Function} callback The callback
        to execute\n    @param {Object} [target] The target object to use\n    @return
        {Object} receiver\n  */\n  forEach: function(callback, target) {\n    if (typeof
        callback !== \"function\") throw new TypeError() ;\n    var len = get(this,
        'length'), last = null, context = popCtx();\n\n    if (target === undefined)
        target = null;\n\n    for(var idx=0;idx<len;idx++) {\n      var next = this.nextObject(idx,
        last, context) ;\n      callback.call(target, next, idx, this);\n      last
        = next ;\n    }\n    last = null ;\n    context = pushCtx(context);\n    return
        this ;\n  },\n\n  /**\n    Alias for `mapBy`\n\n    @method getEach\n    @param
        {String} key name of the property\n    @return {Array} The mapped array.\n
        \ */\n  getEach: function(key) {\n    return this.mapBy(key);\n  },\n\n  /**\n
        \   Sets the value on the named property for each member. This is more\n    efficient
        than using other methods defined on this helper. If the object\n    implements
        Ember.Observable, the value will be changed to `set(),` otherwise\n    it
        will be set directly. `null` objects are skipped.\n\n    @method setEach\n
        \   @param {String} key The key to set\n    @param {Object} value The object
        to set\n    @return {Object} receiver\n  */\n  setEach: function(key, value)
        {\n    return this.forEach(function(item) {\n      set(item, key, value);\n
        \   });\n  },\n\n  /**\n    Maps all of the items in the enumeration to another
        value, returning\n    a new array. This method corresponds to `map()` defined
        in JavaScript 1.6.\n\n    The callback method you provide should have the
        following signature (all\n    parameters are optional):\n\n    ```javascript\n
        \   function(item, index, enumerable);\n    ```\n\n    - `item` is the current
        item in the iteration.\n    - `index` is the current index in the iteration.\n
        \   - `enumerable` is the enumerable object itself.\n\n    It should return
        the mapped value.\n\n    Note that in addition to a callback, you can also
        pass an optional target\n    object that will be set as `this` on the context.
        This is a good way\n    to give your iterator function access to the current
        object.\n\n    @method map\n    @param {Function} callback The callback to
        execute\n    @param {Object} [target] The target object to use\n    @return
        {Array} The mapped array.\n  */\n  map: function(callback, target) {\n    var
        ret = Ember.A();\n    this.forEach(function(x, idx, i) {\n      ret[idx] =
        callback.call(target, x, idx,i);\n    });\n    return ret ;\n  },\n\n  /**\n
        \   Similar to map, this specialized function returns the value of the named\n
        \   property on all items in the enumeration.\n\n    @method mapBy\n    @param
        {String} key name of the property\n    @return {Array} The mapped array.\n
        \ */\n  mapBy: function(key) {\n    return this.map(function(next) {\n      return
        get(next, key);\n    });\n  },\n\n  /**\n    Similar to map, this specialized
        function returns the value of the named\n    property on all items in the
        enumeration.\n\n    @method mapProperty\n    @param {String} key name of the
        property\n    @return {Array} The mapped array.\n    @deprecated Use `mapBy`
        instead\n  */\n\n  mapProperty: Ember.aliasMethod('mapBy'),\n\n  /**\n    Returns
        an array with all of the items in the enumeration that the passed\n    function
        returns true for. This method corresponds to `filter()` defined in\n    JavaScript
        1.6.\n\n    The callback method you provide should have the following signature
        (all\n    parameters are optional):\n\n    ```javascript\n    function(item,
        index, enumerable);\n    ```\n\n    - `item` is the current item in the iteration.\n
        \   - `index` is the current index in the iteration.\n    - `enumerable` is
        the enumerable object itself.\n\n    It should return the `true` to include
        the item in the results, `false`\n    otherwise.\n\n    Note that in addition
        to a callback, you can also pass an optional target\n    object that will
        be set as `this` on the context. This is a good way\n    to give your iterator
        function access to the current object.\n\n    @method filter\n    @param {Function}
        callback The callback to execute\n    @param {Object} [target] The target
        object to use\n    @return {Array} A filtered array.\n  */\n  filter: function(callback,
        target) {\n    var ret = Ember.A();\n    this.forEach(function(x, idx, i)
        {\n      if (callback.call(target, x, idx, i)) ret.push(x);\n    });\n    return
        ret ;\n  },\n\n  /**\n    Returns an array with all of the items in the enumeration
        where the passed\n    function returns false for. This method is the inverse
        of filter().\n\n    The callback method you provide should have the following
        signature (all\n    parameters are optional):\n\n          function(item,
        index, enumerable);\n\n    - *item* is the current item in the iteration.\n
        \   - *index* is the current index in the iteration\n    - *enumerable* is
        the enumerable object itself.\n\n    It should return the a falsey value to
        include the item in the results.\n\n    Note that in addition to a callback,
        you can also pass an optional target\n    object that will be set as \"this\"
        on the context. This is a good way\n    to give your iterator function access
        to the current object.\n\n    @method reject\n    @param {Function} callback
        The callback to execute\n    @param {Object} [target] The target object to
        use\n    @return {Array} A rejected array.\n   */\n  reject: function(callback,
        target) {\n    return this.filter(function() {\n      return !(callback.apply(target,
        arguments));\n    });\n  },\n\n  /**\n    Returns an array with just the items
        with the matched property. You\n    can pass an optional second argument with
        the target value. Otherwise\n    this will match any property that evaluates
        to `true`.\n\n    @method filterBy\n    @param {String} key the property to
        test\n    @param {String} [value] optional value to test against.\n    @return
        {Array} filtered array\n  */\n  filterBy: function(key, value) {\n    return
        this.filter(iter.apply(this, arguments));\n  },\n\n  /**\n    Returns an array
        with just the items with the matched property. You\n    can pass an optional
        second argument with the target value. Otherwise\n    this will match any
        property that evaluates to `true`.\n\n    @method filterProperty\n    @param
        {String} key the property to test\n    @param {String} [value] optional value
        to test against.\n    @return {Array} filtered array\n    @deprecated Use
        `filterBy` instead\n  */\n  filterProperty: Ember.aliasMethod('filterBy'),\n\n
        \ /**\n    Returns an array with the items that do not have truthy values
        for\n    key.  You can pass an optional second argument with the target value.
        \ Otherwise\n    this will match any property that evaluates to false.\n\n
        \   @method rejectBy\n    @param {String} key the property to test\n    @param
        {String} [value] optional value to test against.\n    @return {Array} rejected
        array\n  */\n  rejectBy: function(key, value) {\n    var exactValue = function(item)
        { return get(item, key) === value; },\n        hasValue = function(item) {
        return !!get(item, key); },\n        use = (arguments.length === 2 ? exactValue
        : hasValue);\n\n    return this.reject(use);\n  },\n\n  /**\n    Returns an
        array with the items that do not have truthy values for\n    key.  You can
        pass an optional second argument with the target value.  Otherwise\n    this
        will match any property that evaluates to false.\n\n    @method rejectProperty\n
        \   @param {String} key the property to test\n    @param {String} [value]
        optional value to test against.\n    @return {Array} rejected array\n    @deprecated
        Use `rejectBy` instead\n  */\n  rejectProperty: Ember.aliasMethod('rejectBy'),\n\n
        \ /**\n    Returns the first item in the array for which the callback returns
        true.\n    This method works similar to the `filter()` method defined in JavaScript
        1.6\n    except that it will stop working on the array once a match is found.\n\n
        \   The callback method you provide should have the following signature (all\n
        \   parameters are optional):\n\n    ```javascript\n    function(item, index,
        enumerable);\n    ```\n\n    - `item` is the current item in the iteration.\n
        \   - `index` is the current index in the iteration.\n    - `enumerable` is
        the enumerable object itself.\n\n    It should return the `true` to include
        the item in the results, `false`\n    otherwise.\n\n    Note that in addition
        to a callback, you can also pass an optional target\n    object that will
        be set as `this` on the context. This is a good way\n    to give your iterator
        function access to the current object.\n\n    @method find\n    @param {Function}
        callback The callback to execute\n    @param {Object} [target] The target
        object to use\n    @return {Object} Found item or `undefined`.\n  */\n  find:
        function(callback, target) {\n    var len = get(this, 'length') ;\n    if
        (target === undefined) target = null;\n\n    var last = null, next, found
        = false, ret ;\n    var context = popCtx();\n    for(var idx=0;idx<len &&
        !found;idx++) {\n      next = this.nextObject(idx, last, context) ;\n      if
        (found = callback.call(target, next, idx, this)) ret = next ;\n      last
        = next ;\n    }\n    next = last = null ;\n    context = pushCtx(context);\n
        \   return ret ;\n  },\n\n  /**\n    Returns the first item with a property
        matching the passed value. You\n    can pass an optional second argument with
        the target value. Otherwise\n    this will match any property that evaluates
        to `true`.\n\n    This method works much like the more generic `find()` method.\n\n
        \   @method findBy\n    @param {String} key the property to test\n    @param
        {String} [value] optional value to test against.\n    @return {Object} found
        item or `undefined`\n  */\n  findBy: function(key, value) {\n    return this.find(iter.apply(this,
        arguments));\n  },\n\n  /**\n    Returns the first item with a property matching
        the passed value. You\n    can pass an optional second argument with the target
        value. Otherwise\n    this will match any property that evaluates to `true`.\n\n
        \   This method works much like the more generic `find()` method.\n\n    @method
        findProperty\n    @param {String} key the property to test\n    @param {String}
        [value] optional value to test against.\n    @return {Object} found item or
        `undefined`\n    @deprecated Use `findBy` instead\n  */\n  findProperty: Ember.aliasMethod('findBy'),\n\n
        \ /**\n    Returns `true` if the passed function returns true for every item
        in the\n    enumeration. This corresponds with the `every()` method in JavaScript
        1.6.\n\n    The callback method you provide should have the following signature
        (all\n    parameters are optional):\n\n    ```javascript\n    function(item,
        index, enumerable);\n    ```\n\n    - `item` is the current item in the iteration.\n
        \   - `index` is the current index in the iteration.\n    - `enumerable` is
        the enumerable object itself.\n\n    It should return the `true` or `false`.\n\n
        \   Note that in addition to a callback, you can also pass an optional target\n
        \   object that will be set as `this` on the context. This is a good way\n
        \   to give your iterator function access to the current object.\n\n    Example
        Usage:\n\n    ```javascript\n    if (people.every(isEngineer)) { Paychecks.addBigBonus();
        }\n    ```\n\n    @method every\n    @param {Function} callback The callback
        to execute\n    @param {Object} [target] The target object to use\n    @return
        {Boolean}\n  */\n  every: function(callback, target) {\n    return !this.find(function(x,
        idx, i) {\n      return !callback.call(target, x, idx, i);\n    });\n  },\n\n
        \ /**\n    Returns `true` if the passed property resolves to `true` for all
        items in\n    the enumerable. This method is often simpler/faster than using
        a callback.\n\n    @method everyBy\n    @param {String} key the property to
        test\n    @param {String} [value] optional value to test against.\n    @return
        {Boolean}\n  */\n  everyBy: function(key, value) {\n    return this.every(iter.apply(this,
        arguments));\n  },\n\n  /**\n    Returns `true` if the passed property resolves
        to `true` for all items in\n    the enumerable. This method is often simpler/faster
        than using a callback.\n\n    @method everyProperty\n    @param {String} key
        the property to test\n    @param {String} [value] optional value to test against.\n
        \   @return {Boolean}\n    @deprecated Use `everyBy` instead\n  */\n  everyProperty:
        Ember.aliasMethod('everyBy'),\n\n  /**\n    Returns `true` if the passed function
        returns true for any item in the\n    enumeration. This corresponds with the
        `some()` method in JavaScript 1.6.\n\n    The callback method you provide
        should have the following signature (all\n    parameters are optional):\n\n
        \   ```javascript\n    function(item, index, enumerable);\n    ```\n\n    -
        `item` is the current item in the iteration.\n    - `index` is the current
        index in the iteration.\n    - `enumerable` is the enumerable object itself.\n\n
        \   It should return the `true` to include the item in the results, `false`\n
        \   otherwise.\n\n    Note that in addition to a callback, you can also pass
        an optional target\n    object that will be set as `this` on the context.
        This is a good way\n    to give your iterator function access to the current
        object.\n\n    Usage Example:\n\n    ```javascript\n    if (people.any(isManager))
        { Paychecks.addBiggerBonus(); }\n    ```\n\n    @method any\n    @param {Function}
        callback The callback to execute\n    @param {Object} [target] The target
        object to use\n    @return {Boolean} `true` if the passed function returns
        `true` for any item\n  */\n  any: function(callback, target) {\n    return
        !!this.find(function(x, idx, i) {\n      return !!callback.call(target, x,
        idx, i);\n    });\n  },\n\n  /**\n    Returns `true` if the passed function
        returns true for any item in the\n    enumeration. This corresponds with the
        `some()` method in JavaScript 1.6.\n\n    The callback method you provide
        should have the following signature (all\n    parameters are optional):\n\n
        \   ```javascript\n    function(item, index, enumerable);\n    ```\n\n    -
        `item` is the current item in the iteration.\n    - `index` is the current
        index in the iteration.\n    - `enumerable` is the enumerable object itself.\n\n
        \   It should return the `true` to include the item in the results, `false`\n
        \   otherwise.\n\n    Note that in addition to a callback, you can also pass
        an optional target\n    object that will be set as `this` on the context.
        This is a good way\n    to give your iterator function access to the current
        object.\n\n    Usage Example:\n\n    ```javascript\n    if (people.some(isManager))
        { Paychecks.addBiggerBonus(); }\n    ```\n\n    @method some\n    @param {Function}
        callback The callback to execute\n    @param {Object} [target] The target
        object to use\n    @return {Boolean} `true` if the passed function returns
        `true` for any item\n    @deprecated Use `any` instead\n  */\n  some: Ember.aliasMethod('any'),\n\n
        \ /**\n    Returns `true` if the passed property resolves to `true` for any
        item in\n    the enumerable. This method is often simpler/faster than using
        a callback.\n\n    @method anyBy\n    @param {String} key the property to
        test\n    @param {String} [value] optional value to test against.\n    @return
        {Boolean} `true` if the passed function returns `true` for any item\n  */\n
        \ anyBy: function(key, value) {\n    return this.any(iter.apply(this, arguments));\n
        \ },\n\n  /**\n    Returns `true` if the passed property resolves to `true`
        for any item in\n    the enumerable. This method is often simpler/faster than
        using a callback.\n\n    @method someProperty\n    @param {String} key the
        property to test\n    @param {String} [value] optional value to test against.\n
        \   @return {Boolean} `true` if the passed function returns `true` for any
        item\n    @deprecated Use `anyBy` instead\n  */\n  someProperty: Ember.aliasMethod('anyBy'),\n\n
        \ /**\n    This will combine the values of the enumerator into a single value.
        It\n    is a useful way to collect a summary value from an enumeration. This\n
        \   corresponds to the `reduce()` method defined in JavaScript 1.8.\n\n    The
        callback method you provide should have the following signature (all\n    parameters
        are optional):\n\n    ```javascript\n    function(previousValue, item, index,
        enumerable);\n    ```\n\n    - `previousValue` is the value returned by the
        last call to the iterator.\n    - `item` is the current item in the iteration.\n
        \   - `index` is the current index in the iteration.\n    - `enumerable` is
        the enumerable object itself.\n\n    Return the new cumulative value.\n\n
        \   In addition to the callback you can also pass an `initialValue`. An error\n
        \   will be raised if you do not pass an initial value and the enumerator
        is\n    empty.\n\n    Note that unlike the other methods, this method does
        not allow you to\n    pass a target object to set as this for the callback.
        It's part of the\n    spec. Sorry.\n\n    @method reduce\n    @param {Function}
        callback The callback to execute\n    @param {Object} initialValue Initial
        value for the reduce\n    @param {String} reducerProperty internal use only.\n
        \   @return {Object} The reduced value.\n  */\n  reduce: function(callback,
        initialValue, reducerProperty) {\n    if (typeof callback !== \"function\")
        { throw new TypeError(); }\n\n    var ret = initialValue;\n\n    this.forEach(function(item,
        i) {\n      ret = callback.call(null, ret, item, i, this, reducerProperty);\n
        \   }, this);\n\n    return ret;\n  },\n\n  /**\n    Invokes the named method
        on every object in the receiver that\n    implements it. This method corresponds
        to the implementation in\n    Prototype 1.6.\n\n    @method invoke\n    @param
        {String} methodName the name of the method\n    @param {Object...} args optional
        arguments to pass as well.\n    @return {Array} return values from calling
        invoke.\n  */\n  invoke: function(methodName) {\n    var args, ret = Ember.A();\n
        \   if (arguments.length>1) args = a_slice.call(arguments, 1);\n\n    this.forEach(function(x,
        idx) {\n      var method = x && x[methodName];\n      if ('function' === typeof
        method) {\n        ret[idx] = args ? method.apply(x, args) : method.call(x);\n
        \     }\n    }, this);\n\n    return ret;\n  },\n\n  /**\n    Simply converts
        the enumerable into a genuine array. The order is not\n    guaranteed. Corresponds
        to the method implemented by Prototype.\n\n    @method toArray\n    @return
        {Array} the enumerable as an array.\n  */\n  toArray: function() {\n    var
        ret = Ember.A();\n    this.forEach(function(o, idx) { ret[idx] = o; });\n
        \   return ret ;\n  },\n\n  /**\n    Returns a copy of the array with all
        null and undefined elements removed.\n\n    ```javascript\n    var arr = [\"a\",
        null, \"c\", undefined];\n    arr.compact();  // [\"a\", \"c\"]\n    ```\n\n
        \   @method compact\n    @return {Array} the array without null and undefined
        elements.\n  */\n  compact: function() {\n    return this.filter(function(value)
        { return value != null; });\n  },\n\n  /**\n    Returns a new enumerable that
        excludes the passed value. The default\n    implementation returns an array
        regardless of the receiver type unless\n    the receiver does not contain
        the value.\n\n    ```javascript\n    var arr = [\"a\", \"b\", \"a\", \"c\"];\n
        \   arr.without(\"a\");  // [\"b\", \"c\"]\n    ```\n\n    @method without\n
        \   @param {Object} value\n    @return {Ember.Enumerable}\n  */\n  without:
        function(value) {\n    if (!this.contains(value)) return this; // nothing
        to do\n    var ret = Ember.A();\n    this.forEach(function(k) {\n      if
        (k !== value) ret[ret.length] = k;\n    }) ;\n    return ret ;\n  },\n\n  /**\n
        \   Returns a new enumerable that contains only unique values. The default\n
        \   implementation returns an array regardless of the receiver type.\n\n    ```javascript\n
        \   var arr = [\"a\", \"a\", \"b\", \"b\"];\n    arr.uniq();  // [\"a\", \"b\"]\n
        \   ```\n\n    @method uniq\n    @return {Ember.Enumerable}\n  */\n  uniq:
        function() {\n    var ret = Ember.A();\n    this.forEach(function(k) {\n      if
        (a_indexOf(ret, k)<0) ret.push(k);\n    });\n    return ret;\n  },\n\n  /**\n
        \   This property will trigger anytime the enumerable's content changes.\n
        \   You can observe this property to be notified of changes to the enumerables\n
        \   content.\n\n    For plain enumerables, this property is read only. `Ember.Array`
        overrides\n    this method.\n\n    @property []\n    @type Ember.Array\n    @return
        this\n  */\n  '[]': Ember.computed(function(key, value) {\n    return this;\n
        \ }),\n\n  // ..........................................................\n
        \ // ENUMERABLE OBSERVERS\n  //\n\n  /**\n    Registers an enumerable observer.
        Must implement `Ember.EnumerableObserver`\n    mixin.\n\n    @method addEnumerableObserver\n
        \   @param {Object} target\n    @param {Hash} [opts]\n    @return this\n  */\n
        \ addEnumerableObserver: function(target, opts) {\n    var willChange = (opts
        && opts.willChange) || 'enumerableWillChange',\n        didChange  = (opts
        && opts.didChange) || 'enumerableDidChange';\n\n    var hasObservers = get(this,
        'hasEnumerableObservers');\n    if (!hasObservers) Ember.propertyWillChange(this,
        'hasEnumerableObservers');\n    Ember.addListener(this, '@enumerable:before',
        target, willChange);\n    Ember.addListener(this, '@enumerable:change', target,
        didChange);\n    if (!hasObservers) Ember.propertyDidChange(this, 'hasEnumerableObservers');\n
        \   return this;\n  },\n\n  /**\n    Removes a registered enumerable observer.\n\n
        \   @method removeEnumerableObserver\n    @param {Object} target\n    @param
        {Hash} [opts]\n    @return this\n  */\n  removeEnumerableObserver: function(target,
        opts) {\n    var willChange = (opts && opts.willChange) || 'enumerableWillChange',\n
        \       didChange  = (opts && opts.didChange) || 'enumerableDidChange';\n\n
        \   var hasObservers = get(this, 'hasEnumerableObservers');\n    if (hasObservers)
        Ember.propertyWillChange(this, 'hasEnumerableObservers');\n    Ember.removeListener(this,
        '@enumerable:before', target, willChange);\n    Ember.removeListener(this,
        '@enumerable:change', target, didChange);\n    if (hasObservers) Ember.propertyDidChange(this,
        'hasEnumerableObservers');\n    return this;\n  },\n\n  /**\n    Becomes true
        whenever the array currently has observers watching changes\n    on the array.\n\n
        \   @property hasEnumerableObservers\n    @type Boolean\n  */\n  hasEnumerableObservers:
        Ember.computed(function() {\n    return Ember.hasListeners(this, '@enumerable:change')
        || Ember.hasListeners(this, '@enumerable:before');\n  }),\n\n\n  /**\n    Invoke
        this method just before the contents of your enumerable will\n    change.
        You can either omit the parameters completely or pass the objects\n    to
        be removed or added if available or just a count.\n\n    @method enumerableContentWillChange\n
        \   @param {Ember.Enumerable|Number} removing An enumerable of the objects
        to\n      be removed or the number of items to be removed.\n    @param {Ember.Enumerable|Number}
        adding An enumerable of the objects to be\n      added or the number of items
        to be added.\n    @chainable\n  */\n  enumerableContentWillChange: function(removing,
        adding) {\n\n    var removeCnt, addCnt, hasDelta;\n\n    if ('number' ===
        typeof removing) removeCnt = removing;\n    else if (removing) removeCnt =
        get(removing, 'length');\n    else removeCnt = removing = -1;\n\n    if ('number'
        === typeof adding) addCnt = adding;\n    else if (adding) addCnt = get(adding,'length');\n
        \   else addCnt = adding = -1;\n\n    hasDelta = addCnt<0 || removeCnt<0 ||
        addCnt-removeCnt!==0;\n\n    if (removing === -1) removing = null;\n    if
        (adding   === -1) adding   = null;\n\n    Ember.propertyWillChange(this, '[]');\n
        \   if (hasDelta) Ember.propertyWillChange(this, 'length');\n    Ember.sendEvent(this,
        '@enumerable:before', [this, removing, adding]);\n\n    return this;\n  },\n\n
        \ /**\n    Invoke this method when the contents of your enumerable has changed.\n
        \   This will notify any observers watching for content changes. If your are\n
        \   implementing an ordered enumerable (such as an array), also pass the\n
        \   start and end values where the content changed so that it can be used
        to\n    notify range observers.\n\n    @method enumerableContentDidChange\n
        \   @param {Number} [start] optional start offset for the content change.\n
        \     For unordered enumerables, you should always pass -1.\n    @param {Ember.Enumerable|Number}
        removing An enumerable of the objects to\n      be removed or the number of
        items to be removed.\n    @param {Ember.Enumerable|Number} adding  An enumerable
        of the objects to\n      be added or the number of items to be added.\n    @chainable\n
        \ */\n  enumerableContentDidChange: function(removing, adding) {\n    var
        removeCnt, addCnt, hasDelta;\n\n    if ('number' === typeof removing) removeCnt
        = removing;\n    else if (removing) removeCnt = get(removing, 'length');\n
        \   else removeCnt = removing = -1;\n\n    if ('number' === typeof adding)
        addCnt = adding;\n    else if (adding) addCnt = get(adding, 'length');\n    else
        addCnt = adding = -1;\n\n    hasDelta = addCnt<0 || removeCnt<0 || addCnt-removeCnt!==0;\n\n
        \   if (removing === -1) removing = null;\n    if (adding   === -1) adding
        \  = null;\n\n    Ember.sendEvent(this, '@enumerable:change', [this, removing,
        adding]);\n    if (hasDelta) Ember.propertyDidChange(this, 'length');\n    Ember.propertyDidChange(this,
        '[]');\n\n    return this ;\n  }\n\n}) ;\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-runtime\n*/\n\n// ..........................................................\n//
        HELPERS\n//\n\nvar get = Ember.get, set = Ember.set, isNone = Ember.isNone,
        map = Ember.EnumerableUtils.map, cacheFor = Ember.cacheFor;\n\n// ..........................................................\n//
        ARRAY\n//\n/**\n  This module implements Observer-friendly Array-like behavior.
        This mixin is\n  picked up by the Array class as well as other controllers,
        etc. that want to\n  appear to be arrays.\n\n  Unlike `Ember.Enumerable,`
        this mixin defines methods specifically for\n  collections that provide index-ordered
        access to their contents. When you\n  are designing code that needs to accept
        any kind of Array-like object, you\n  should use these methods instead of
        Array primitives because these will\n  properly notify observers of changes
        to the array.\n\n  Although these methods are efficient, they do add a layer
        of indirection to\n  your application so it is a good idea to use them only
        when you need the\n  flexibility of using both true JavaScript arrays and
        \"virtual\" arrays such\n  as controllers and collections.\n\n  You can use
        the methods defined in this module to access and modify array\n  contents
        in a KVO-friendly way. You can also be notified whenever the\n  membership
        of an array changes by changing the syntax of the property to\n  `.observes('*myProperty.[]')`.\n\n
        \ To support `Ember.Array` in your own class, you must override two\n  primitives
        to use it: `replace()` and `objectAt()`.\n\n  Note that the Ember.Array mixin
        also incorporates the `Ember.Enumerable`\n  mixin. All `Ember.Array`-like
        objects are also enumerable.\n\n  @class Array\n  @namespace Ember\n  @uses
        Ember.Enumerable\n  @since Ember 0.9.0\n*/\nEmber.Array = Ember.Mixin.create(Ember.Enumerable,
        /** @scope Ember.Array.prototype */ {\n\n  /**\n    Your array must support
        the `length` property. Your replace methods should\n    set this property
        whenever it changes.\n\n    @property {Number} length\n  */\n  length: Ember.required(),\n\n
        \ /**\n    Returns the object at the given `index`. If the given `index` is
        negative\n    or is greater or equal than the array length, returns `undefined`.\n\n
        \   This is one of the primitives you must implement to support `Ember.Array`.\n
        \   If your object supports retrieving the value of an array item using `get()`\n
        \   (i.e. `myArray.get(0)`), then you do not need to implement this method\n
        \   yourself.\n\n    ```javascript\n    var arr = ['a', 'b', 'c', 'd'];\n
        \   arr.objectAt(0);   // \"a\"\n    arr.objectAt(3);   // \"d\"\n    arr.objectAt(-1);
        \ // undefined\n    arr.objectAt(4);   // undefined\n    arr.objectAt(5);
        \  // undefined\n    ```\n\n    @method objectAt\n    @param {Number} idx
        The index of the item to return.\n    @return {*} item at index or undefined\n
        \ */\n  objectAt: function(idx) {\n    if ((idx < 0) || (idx>=get(this, 'length')))
        return undefined ;\n    return get(this, idx);\n  },\n\n  /**\n    This returns
        the objects at the specified indexes, using `objectAt`.\n\n    ```javascript\n
        \   var arr = ['a', 'b', 'c', 'd'];\n    arr.objectsAt([0, 1, 2]);  // [\"a\",
        \"b\", \"c\"]\n    arr.objectsAt([2, 3, 4]);  // [\"c\", \"d\", undefined]\n
        \   ```\n\n    @method objectsAt\n    @param {Array} indexes An array of indexes
        of items to return.\n    @return {Array}\n   */\n  objectsAt: function(indexes)
        {\n    var self = this;\n    return map(indexes, function(idx) { return self.objectAt(idx);
        });\n  },\n\n  // overrides Ember.Enumerable version\n  nextObject: function(idx)
        {\n    return this.objectAt(idx);\n  },\n\n  /**\n    This is the handler
        for the special array content property. If you get\n    this property, it
        will return this. If you set this property it a new\n    array, it will replace
        the current content.\n\n    This property overrides the default property defined
        in `Ember.Enumerable`.\n\n    @property []\n    @return this\n  */\n  '[]':
        Ember.computed(function(key, value) {\n    if (value !== undefined) this.replace(0,
        get(this, 'length'), value) ;\n    return this ;\n  }),\n\n  firstObject:
        Ember.computed(function() {\n    return this.objectAt(0);\n  }),\n\n  lastObject:
        Ember.computed(function() {\n    return this.objectAt(get(this, 'length')-1);\n
        \ }),\n\n  // optimized version from Enumerable\n  contains: function(obj)
        {\n    return this.indexOf(obj) >= 0;\n  },\n\n  // Add any extra methods
        to Ember.Array that are native to the built-in Array.\n  /**\n    Returns
        a new array that is a slice of the receiver. This implementation\n    uses
        the observable array methods to retrieve the objects for the new\n    slice.\n\n
        \   ```javascript\n    var arr = ['red', 'green', 'blue'];\n    arr.slice(0);
        \      // ['red', 'green', 'blue']\n    arr.slice(0, 2);    // ['red', 'green']\n
        \   arr.slice(1, 100);  // ['green', 'blue']\n    ```\n\n    @method slice\n
        \   @param {Integer} beginIndex (Optional) index to begin slicing from.\n
        \   @param {Integer} endIndex (Optional) index to end the slice at.\n    @return
        {Array} New array with specified slice\n  */\n  slice: function(beginIndex,
        endIndex) {\n    var ret = Ember.A();\n    var length = get(this, 'length')
        ;\n    if (isNone(beginIndex)) beginIndex = 0 ;\n    if (isNone(endIndex)
        || (endIndex > length)) endIndex = length ;\n\n    if (beginIndex < 0) beginIndex
        = length + beginIndex;\n    if (endIndex < 0) endIndex = length + endIndex;\n\n
        \   while(beginIndex < endIndex) {\n      ret[ret.length] = this.objectAt(beginIndex++)
        ;\n    }\n    return ret ;\n  },\n\n  /**\n    Returns the index of the given
        object's first occurrence.\n    If no `startAt` argument is given, the starting
        location to\n    search is 0. If it's negative, will count backward from\n
        \   the end of the array. Returns -1 if no match is found.\n\n    ```javascript\n
        \   var arr = [\"a\", \"b\", \"c\", \"d\", \"a\"];\n    arr.indexOf(\"a\");
        \      //  0\n    arr.indexOf(\"z\");       // -1\n    arr.indexOf(\"a\",
        2);    //  4\n    arr.indexOf(\"a\", -1);   //  4\n    arr.indexOf(\"b\",
        3);    // -1\n    arr.indexOf(\"a\", 100);  // -1\n    ```\n\n    @method
        indexOf\n    @param {Object} object the item to search for\n    @param {Number}
        startAt optional starting location to search, default 0\n    @return {Number}
        index or -1 if not found\n  */\n  indexOf: function(object, startAt) {\n    var
        idx, len = get(this, 'length');\n\n    if (startAt === undefined) startAt
        = 0;\n    if (startAt < 0) startAt += len;\n\n    for(idx=startAt;idx<len;idx++)
        {\n      if (this.objectAt(idx) === object) return idx ;\n    }\n    return
        -1;\n  },\n\n  /**\n    Returns the index of the given object's last occurrence.\n
        \   If no `startAt` argument is given, the search starts from\n    the last
        position. If it's negative, will count backward\n    from the end of the array.
        Returns -1 if no match is found.\n\n    ```javascript\n    var arr = [\"a\",
        \"b\", \"c\", \"d\", \"a\"];\n    arr.lastIndexOf(\"a\");       //  4\n    arr.lastIndexOf(\"z\");
        \      // -1\n    arr.lastIndexOf(\"a\", 2);    //  0\n    arr.lastIndexOf(\"a\",
        -1);   //  4\n    arr.lastIndexOf(\"b\", 3);    //  1\n    arr.lastIndexOf(\"a\",
        100);  //  4\n    ```\n\n    @method lastIndexOf\n    @param {Object} object
        the item to search for\n    @param {Number} startAt optional starting location
        to search, default 0\n    @return {Number} index or -1 if not found\n  */\n
        \ lastIndexOf: function(object, startAt) {\n    var idx, len = get(this, 'length');\n\n
        \   if (startAt === undefined || startAt >= len) startAt = len-1;\n    if
        (startAt < 0) startAt += len;\n\n    for(idx=startAt;idx>=0;idx--) {\n      if
        (this.objectAt(idx) === object) return idx ;\n    }\n    return -1;\n  },\n\n
        \ // ..........................................................\n  // ARRAY
        OBSERVERS\n  //\n\n  /**\n    Adds an array observer to the receiving array.
        The array observer object\n    normally must implement two methods:\n\n    *
        `arrayWillChange(observedObj, start, removeCount, addCount)` - This method
        will be\n      called just before the array is modified.\n    * `arrayDidChange(observedObj,
        start, removeCount, addCount)` - This method will be\n      called just after
        the array is modified.\n\n    Both callbacks will be passed the observed object,
        starting index of the\n    change as well a a count of the items to be removed
        and added. You can use\n    these callbacks to optionally inspect the array
        during the change, clear\n    caches, or do any other bookkeeping necessary.\n\n
        \   In addition to passing a target, you can also include an options hash\n
        \   which you can use to override the method names that will be invoked on
        the\n    target.\n\n    @method addArrayObserver\n    @param {Object} target
        The observer object.\n    @param {Hash} opts Optional hash of configuration
        options including\n      `willChange` and `didChange` option.\n    @return
        {Ember.Array} receiver\n  */\n  addArrayObserver: function(target, opts) {\n
        \   var willChange = (opts && opts.willChange) || 'arrayWillChange',\n        didChange
        \ = (opts && opts.didChange) || 'arrayDidChange';\n\n    var hasObservers
        = get(this, 'hasArrayObservers');\n    if (!hasObservers) Ember.propertyWillChange(this,
        'hasArrayObservers');\n    Ember.addListener(this, '@array:before', target,
        willChange);\n    Ember.addListener(this, '@array:change', target, didChange);\n
        \   if (!hasObservers) Ember.propertyDidChange(this, 'hasArrayObservers');\n
        \   return this;\n  },\n\n  /**\n    Removes an array observer from the object
        if the observer is current\n    registered. Calling this method multiple times
        with the same object will\n    have no effect.\n\n    @method removeArrayObserver\n
        \   @param {Object} target The object observing the array.\n    @param {Hash}
        opts Optional hash of configuration options including\n      `willChange`
        and `didChange` option.\n    @return {Ember.Array} receiver\n  */\n  removeArrayObserver:
        function(target, opts) {\n    var willChange = (opts && opts.willChange) ||
        'arrayWillChange',\n        didChange  = (opts && opts.didChange) || 'arrayDidChange';\n\n
        \   var hasObservers = get(this, 'hasArrayObservers');\n    if (hasObservers)
        Ember.propertyWillChange(this, 'hasArrayObservers');\n    Ember.removeListener(this,
        '@array:before', target, willChange);\n    Ember.removeListener(this, '@array:change',
        target, didChange);\n    if (hasObservers) Ember.propertyDidChange(this, 'hasArrayObservers');\n
        \   return this;\n  },\n\n  /**\n    Becomes true whenever the array currently
        has observers watching changes\n    on the array.\n\n    @property Boolean\n
        \ */\n  hasArrayObservers: Ember.computed(function() {\n    return Ember.hasListeners(this,
        '@array:change') || Ember.hasListeners(this, '@array:before');\n  }),\n\n
        \ /**\n    If you are implementing an object that supports `Ember.Array`,
        call this\n    method just before the array content changes to notify any
        observers and\n    invalidate any related properties. Pass the starting index
        of the change\n    as well as a delta of the amounts to change.\n\n    @method
        arrayContentWillChange\n    @param {Number} startIdx The starting index in
        the array that will change.\n    @param {Number} removeAmt The number of items
        that will be removed. If you\n      pass `null` assumes 0\n    @param {Number}
        addAmt The number of items that will be added. If you\n      pass `null` assumes
        0.\n    @return {Ember.Array} receiver\n  */\n  arrayContentWillChange: function(startIdx,
        removeAmt, addAmt) {\n\n    // if no args are passed assume everything changes\n
        \   if (startIdx===undefined) {\n      startIdx = 0;\n      removeAmt = addAmt
        = -1;\n    } else {\n      if (removeAmt === undefined) removeAmt=-1;\n      if
        (addAmt    === undefined) addAmt=-1;\n    }\n\n    // Make sure the @each
        proxy is set up if anyone is observing @each\n    if (Ember.isWatching(this,
        '@each')) { get(this, '@each'); }\n\n    Ember.sendEvent(this, '@array:before',
        [this, startIdx, removeAmt, addAmt]);\n\n    var removing, lim;\n    if (startIdx>=0
        && removeAmt>=0 && get(this, 'hasEnumerableObservers')) {\n      removing
        = [];\n      lim = startIdx+removeAmt;\n      for(var idx=startIdx;idx<lim;idx++)
        removing.push(this.objectAt(idx));\n    } else {\n      removing = removeAmt;\n
        \   }\n\n    this.enumerableContentWillChange(removing, addAmt);\n\n    return
        this;\n  },\n\n  /**\n    If you are implementing an object that supports
        `Ember.Array`, call this\n    method just after the array content changes
        to notify any observers and\n    invalidate any related properties. Pass the
        starting index of the change\n    as well as a delta of the amounts to change.\n\n
        \   @method arrayContentDidChange\n    @param {Number} startIdx The starting
        index in the array that did change.\n    @param {Number} removeAmt The number
        of items that were removed. If you\n      pass `null` assumes 0\n    @param
        {Number} addAmt The number of items that were added. If you\n      pass `null`
        assumes 0.\n    @return {Ember.Array} receiver\n  */\n  arrayContentDidChange:
        function(startIdx, removeAmt, addAmt) {\n\n    // if no args are passed assume
        everything changes\n    if (startIdx===undefined) {\n      startIdx = 0;\n
        \     removeAmt = addAmt = -1;\n    } else {\n      if (removeAmt === undefined)
        removeAmt=-1;\n      if (addAmt    === undefined) addAmt=-1;\n    }\n\n    var
        adding, lim;\n    if (startIdx>=0 && addAmt>=0 && get(this, 'hasEnumerableObservers'))
        {\n      adding = [];\n      lim = startIdx+addAmt;\n      for(var idx=startIdx;idx<lim;idx++)
        adding.push(this.objectAt(idx));\n    } else {\n      adding = addAmt;\n    }\n\n
        \   this.enumerableContentDidChange(removeAmt, adding);\n    Ember.sendEvent(this,
        '@array:change', [this, startIdx, removeAmt, addAmt]);\n\n    var length      =
        get(this, 'length'),\n        cachedFirst = cacheFor(this, 'firstObject'),\n
        \       cachedLast  = cacheFor(this, 'lastObject');\n    if (this.objectAt(0)
        !== cachedFirst) {\n      Ember.propertyWillChange(this, 'firstObject');\n
        \     Ember.propertyDidChange(this, 'firstObject');\n    }\n    if (this.objectAt(length-1)
        !== cachedLast) {\n      Ember.propertyWillChange(this, 'lastObject');\n      Ember.propertyDidChange(this,
        'lastObject');\n    }\n\n    return this;\n  },\n\n  // ..........................................................\n
        \ // ENUMERATED PROPERTIES\n  //\n\n  /**\n    Returns a special object that
        can be used to observe individual properties\n    on the array. Just get an
        equivalent property on this object and it will\n    return an enumerable that
        maps automatically to the named key on the\n    member objects.\n\n    If
        you merely want to watch for any items being added or removed to the array,\n
        \   use the `[]` property instead of `@each`.\n\n    @property @each\n  */\n
        \ '@each': Ember.computed(function() {\n    if (!this.__each) this.__each
        = new Ember.EachProxy(this);\n    return this.__each;\n  })\n\n}) ;\n\n})();\n\n\n\n(function()
        {\nvar get = Ember.get,\n    set = Ember.set,\n    guidFor = Ember.guidFor,\n
        \   metaFor = Ember.meta,\n    propertyWillChange = Ember.propertyWillChange,\n
        \   propertyDidChange = Ember.propertyDidChange,\n    addBeforeObserver =
        Ember.addBeforeObserver,\n    removeBeforeObserver = Ember.removeBeforeObserver,\n
        \   addObserver = Ember.addObserver,\n    removeObserver = Ember.removeObserver,\n
        \   ComputedProperty = Ember.ComputedProperty,\n    a_slice = [].slice,\n
        \   o_create = Ember.create,\n    forEach = Ember.EnumerableUtils.forEach,\n
        \   // Here we explicitly don't allow `@each.foo`; it would require some special\n
        \   // testing, but there's no particular reason why it should be disallowed.\n
        \   eachPropertyPattern = /^(.*)\\.@each\\.(.*)/,\n    doubleEachPropertyPattern
        = /(.*\\.@each){2,}/;\n\n/*\n  Tracks changes to dependent arrays, as well
        as to properties of items in\n  dependent arrays.\n\n  @class DependentArraysObserver\n*/\nfunction
        DependentArraysObserver(callbacks, cp, instanceMeta, context, propertyName,
        sugarMeta) {\n  // user specified callbacks for `addedItem` and `removedItem`\n
        \ this.callbacks = callbacks;\n\n  // the computed property: remember these
        are shared across instances\n  this.cp = cp;\n\n  // the ReduceComputedPropertyInstanceMeta
        this DependentArraysObserver is\n  // associated with\n  this.instanceMeta
        = instanceMeta;\n\n  // A map of array guids to dependentKeys, for the given
        context.  We track\n  // this because we want to set up the computed property
        potentially before the\n  // dependent array even exists, but when the array
        observer fires, we lack\n  // enough context to know what to update: we can
        recover that context by\n  // getting the dependentKey.\n  this.dependentKeysByGuid
        = {};\n\n  // a map of dependent array guids -> Ember.TrackedArray instances.
        \ We use\n  // this to lazily recompute indexes for item property observers.\n
        \ this.trackedArraysByGuid = {};\n\n  // This is used to coalesce item changes
        from property observers.\n  this.changedItems = {};\n}\n\nfunction ItemPropertyObserverContext
        (dependentArray, index, trackedArray) {\n  Ember.assert(\"Internal error:
        trackedArray is null or undefined\", trackedArray);\n\n  this.dependentArray
        = dependentArray;\n  this.index = index;\n  this.item = dependentArray.objectAt(index);\n
        \ this.trackedArray = trackedArray;\n  this.beforeObserver = null;\n  this.observer
        = null;\n\n  this.destroyed = false;\n}\n\nDependentArraysObserver.prototype
        = {\n  setValue: function (newValue) {\n    this.instanceMeta.setValue(newValue,
        true);\n  },\n  getValue: function () {\n    return this.instanceMeta.getValue();\n
        \ },\n\n  setupObservers: function (dependentArray, dependentKey) {\n    Ember.assert(\"dependent
        array must be an `Ember.Array`\", Ember.Array.detect(dependentArray));\n\n
        \   this.dependentKeysByGuid[guidFor(dependentArray)] = dependentKey;\n\n
        \   dependentArray.addArrayObserver(this, {\n      willChange: 'dependentArrayWillChange',\n
        \     didChange: 'dependentArrayDidChange'\n    });\n\n    if (this.cp._itemPropertyKeys[dependentKey])
        {\n      this.setupPropertyObservers(dependentKey, this.cp._itemPropertyKeys[dependentKey]);\n
        \   }\n  },\n\n  teardownObservers: function (dependentArray, dependentKey)
        {\n    var itemPropertyKeys = this.cp._itemPropertyKeys[dependentKey] || [];\n\n
        \   delete this.dependentKeysByGuid[guidFor(dependentArray)];\n\n    this.teardownPropertyObservers(dependentKey,
        itemPropertyKeys);\n\n    dependentArray.removeArrayObserver(this, {\n      willChange:
        'dependentArrayWillChange',\n      didChange: 'dependentArrayDidChange'\n
        \   });\n  },\n\n  setupPropertyObservers: function (dependentKey, itemPropertyKeys)
        {\n    var dependentArray = get(this.instanceMeta.context, dependentKey),\n
        \       length = get(dependentArray, 'length'),\n        observerContexts
        = new Array(length);\n\n    this.resetTransformations(dependentKey, observerContexts);\n\n
        \   forEach(dependentArray, function (item, index) {\n      var observerContext
        = this.createPropertyObserverContext(dependentArray, index, this.trackedArraysByGuid[dependentKey]);\n
        \     observerContexts[index] = observerContext;\n\n      forEach(itemPropertyKeys,
        function (propertyKey) {\n        addBeforeObserver(item, propertyKey, this,
        observerContext.beforeObserver);\n        addObserver(item, propertyKey, this,
        observerContext.observer);\n      }, this);\n    }, this);\n  },\n\n  teardownPropertyObservers:
        function (dependentKey, itemPropertyKeys) {\n    var dependentArrayObserver
        = this,\n        trackedArray = this.trackedArraysByGuid[dependentKey],\n
        \       beforeObserver,\n        observer,\n        item;\n\n    if (!trackedArray)
        { return; }\n\n    trackedArray.apply(function (observerContexts, offset,
        operation) {\n      if (operation === Ember.TrackedArray.DELETE) { return;
        }\n\n      forEach(observerContexts, function (observerContext) {\n        observerContext.destroyed
        = true;\n        beforeObserver = observerContext.beforeObserver;\n        observer
        = observerContext.observer;\n        item = observerContext.item;\n\n        forEach(itemPropertyKeys,
        function (propertyKey) {\n          removeBeforeObserver(item, propertyKey,
        dependentArrayObserver, beforeObserver);\n          removeObserver(item, propertyKey,
        dependentArrayObserver, observer);\n        });\n      });\n    });\n  },\n\n
        \ createPropertyObserverContext: function (dependentArray, index, trackedArray)
        {\n    var observerContext = new ItemPropertyObserverContext(dependentArray,
        index, trackedArray);\n\n    this.createPropertyObserver(observerContext);\n\n
        \   return observerContext;\n  },\n\n  createPropertyObserver: function (observerContext)
        {\n    var dependentArrayObserver = this;\n\n    observerContext.beforeObserver
        = function (obj, keyName) {\n      return dependentArrayObserver.itemPropertyWillChange(obj,
        keyName, observerContext.dependentArray, observerContext);\n    };\n    observerContext.observer
        = function (obj, keyName) {\n      return dependentArrayObserver.itemPropertyDidChange(obj,
        keyName, observerContext.dependentArray, observerContext);\n    };\n  },\n\n
        \ resetTransformations: function (dependentKey, observerContexts) {\n    this.trackedArraysByGuid[dependentKey]
        = new Ember.TrackedArray(observerContexts);\n  },\n\n  trackAdd: function
        (dependentKey, index, newItems) {\n    var trackedArray = this.trackedArraysByGuid[dependentKey];\n
        \   if (trackedArray) {\n      trackedArray.addItems(index, newItems);\n    }\n
        \ },\n\n  trackRemove: function (dependentKey, index, removedCount) {\n    var
        trackedArray = this.trackedArraysByGuid[dependentKey];\n\n    if (trackedArray)
        {\n      return trackedArray.removeItems(index, removedCount);\n    }\n\n
        \   return [];\n  },\n\n  updateIndexes: function (trackedArray, array) {\n
        \   var length = get(array, 'length');\n    // OPTIMIZE: we could stop updating
        once we hit the object whose observer\n    // fired; ie partially apply the
        transformations\n    trackedArray.apply(function (observerContexts, offset,
        operation) {\n      // we don't even have observer contexts for removed items,
        even if we did,\n      // they no longer have any index in the array\n      if
        (operation === Ember.TrackedArray.DELETE) { return; }\n      if (operation
        === Ember.TrackedArray.RETAIN && observerContexts.length === length && offset
        === 0) {\n        // If we update many items we don't want to walk the array
        each time: we\n        // only need to update the indexes at most once per
        run loop.\n        return;\n      }\n\n      forEach(observerContexts, function
        (context, index) {\n        context.index = index + offset;\n      });\n    });\n
        \ },\n\n  dependentArrayWillChange: function (dependentArray, index, removedCount,
        addedCount) {\n    var removedItem = this.callbacks.removedItem,\n        changeMeta,\n
        \       guid = guidFor(dependentArray),\n        dependentKey = this.dependentKeysByGuid[guid],\n
        \       itemPropertyKeys = this.cp._itemPropertyKeys[dependentKey] || [],\n
        \       item,\n        itemIndex,\n        sliceIndex,\n        observerContexts;\n\n
        \   observerContexts = this.trackRemove(dependentKey, index, removedCount);\n\n
        \   function removeObservers(propertyKey) {\n      observerContexts[sliceIndex].destroyed
        = true;\n      removeBeforeObserver(item, propertyKey, this, observerContexts[sliceIndex].beforeObserver);\n
        \     removeObserver(item, propertyKey, this, observerContexts[sliceIndex].observer);\n
        \   }\n\n    for (sliceIndex = removedCount - 1; sliceIndex >= 0; --sliceIndex)
        {\n      itemIndex = index + sliceIndex;\n      item = dependentArray.objectAt(itemIndex);\n\n
        \     forEach(itemPropertyKeys, removeObservers, this);\n\n      changeMeta
        = createChangeMeta(dependentArray, item, itemIndex, this.instanceMeta.propertyName,
        this.cp);\n      this.setValue( removedItem.call(\n        this.instanceMeta.context,
        this.getValue(), item, changeMeta, this.instanceMeta.sugarMeta));\n    }\n
        \ },\n\n  dependentArrayDidChange: function (dependentArray, index, removedCount,
        addedCount) {\n    var addedItem = this.callbacks.addedItem,\n        guid
        = guidFor(dependentArray),\n        dependentKey = this.dependentKeysByGuid[guid],\n
        \       observerContexts = new Array(addedCount),\n        itemPropertyKeys
        = this.cp._itemPropertyKeys[dependentKey],\n        changeMeta,\n        observerContext;\n\n
        \   forEach(dependentArray.slice(index, index + addedCount), function (item,
        sliceIndex) {\n      if (itemPropertyKeys) {\n        observerContext =\n
        \         observerContexts[sliceIndex] =\n          this.createPropertyObserverContext(dependentArray,
        index + sliceIndex, this.trackedArraysByGuid[dependentKey]);\n        forEach(itemPropertyKeys,
        function (propertyKey) {\n          addBeforeObserver(item, propertyKey, this,
        observerContext.beforeObserver);\n          addObserver(item, propertyKey,
        this, observerContext.observer);\n        }, this);\n      }\n\n      changeMeta
        = createChangeMeta(dependentArray, item, index + sliceIndex, this.instanceMeta.propertyName,
        this.cp);\n      this.setValue( addedItem.call(\n        this.instanceMeta.context,
        this.getValue(), item, changeMeta, this.instanceMeta.sugarMeta));\n    },
        this);\n\n    this.trackAdd(dependentKey, index, observerContexts);\n  },\n\n
        \ itemPropertyWillChange: function (obj, keyName, array, observerContext)
        {\n    var guid = guidFor(obj);\n\n    if (!this.changedItems[guid]) {\n      this.changedItems[guid]
        = {\n        array:            array,\n        observerContext:  observerContext,\n
        \       obj:              obj,\n        previousValues:   {}\n      };\n    }\n\n
        \   this.changedItems[guid].previousValues[keyName] = get(obj, keyName);\n
        \ },\n\n  itemPropertyDidChange: function(obj, keyName, array, observerContext)
        {\n    this.flushChanges();\n  },\n\n  flushChanges: function() {\n    var
        changedItems = this.changedItems, key, c, changeMeta;\n\n    for (key in changedItems)
        {\n      c = changedItems[key];\n      if (c.observerContext.destroyed) {
        continue; }\n\n      this.updateIndexes(c.observerContext.trackedArray, c.observerContext.dependentArray);\n\n
        \     changeMeta = createChangeMeta(c.array, c.obj, c.observerContext.index,
        this.instanceMeta.propertyName, this.cp, c.previousValues);\n      this.setValue(\n
        \       this.callbacks.removedItem.call(this.instanceMeta.context, this.getValue(),
        c.obj, changeMeta, this.instanceMeta.sugarMeta));\n      this.setValue(\n
        \       this.callbacks.addedItem.call(this.instanceMeta.context, this.getValue(),
        c.obj, changeMeta, this.instanceMeta.sugarMeta));\n    }\n    this.changedItems
        = {};\n  }\n};\n\nfunction createChangeMeta(dependentArray, item, index, propertyName,
        property, previousValues) {\n  var meta = {\n    arrayChanged: dependentArray,\n
        \   index: index,\n    item: item,\n    propertyName: propertyName,\n    property:
        property\n  };\n\n  if (previousValues) {\n    // previous values only available
        for item property changes\n    meta.previousValues = previousValues;\n  }\n\n
        \ return meta;\n}\n\nfunction addItems (dependentArray, callbacks, cp, propertyName,
        meta) {\n  forEach(dependentArray, function (item, index) {\n    meta.setValue(
        callbacks.addedItem.call(\n      this, meta.getValue(), item, createChangeMeta(dependentArray,
        item, index, propertyName, cp), meta.sugarMeta));\n  }, this);\n}\n\nfunction
        reset(cp, propertyName) {\n  var callbacks = cp._callbacks(),\n      meta;\n\n
        \ if (cp._hasInstanceMeta(this, propertyName)) {\n    meta = cp._instanceMeta(this,
        propertyName);\n    meta.setValue(cp.resetValue(meta.getValue()));\n  } else
        {\n    meta = cp._instanceMeta(this, propertyName);\n  }\n\n  if (cp.options.initialize)
        {\n    cp.options.initialize.call(this, meta.getValue(), { property: cp, propertyName:
        propertyName }, meta.sugarMeta);\n  }\n}\n\nfunction ReduceComputedPropertyInstanceMeta(context,
        propertyName, initialValue) {\n  this.context = context;\n  this.propertyName
        = propertyName;\n  this.cache = metaFor(context).cache;\n\n  this.dependentArrays
        = {};\n  this.sugarMeta = {};\n\n  this.initialValue = initialValue;\n}\n\nReduceComputedPropertyInstanceMeta.prototype
        = {\n  getValue: function () {\n    if (this.propertyName in this.cache) {\n
        \     return this.cache[this.propertyName];\n    } else {\n      return this.initialValue;\n
        \   }\n  },\n\n  setValue: function(newValue, triggerObservers) {\n    //
        This lets sugars force a recomputation, handy for very simple\n    // implementations
        of eg max.\n    if (newValue !== undefined) {\n      var fireObservers = triggerObservers
        && (newValue !== this.cache[this.propertyName]);\n\n      if (fireObservers)
        {\n        propertyWillChange(this.context, this.propertyName);\n      }\n\n
        \     this.cache[this.propertyName] = newValue;\n\n      if (fireObservers)
        {\n        propertyDidChange(this.context, this.propertyName);\n      }\n
        \   } else {\n      delete this.cache[this.propertyName];\n    }\n  }\n};\n\n/**\n
        \ A computed property whose dependent keys are arrays and which is updated
        with\n  \"one at a time\" semantics.\n\n  @class ReduceComputedProperty\n
        \ @namespace Ember\n  @extends Ember.ComputedProperty\n  @constructor\n*/\nfunction
        ReduceComputedProperty(options) {\n  var cp = this;\n\n  this.options = options;\n
        \ this._instanceMetas = {};\n\n  this._dependentKeys = null;\n  // A map of
        dependentKey -> [itemProperty, ...] that tracks what properties of\n  // items
        in the array we must track to update this property.\n  this._itemPropertyKeys
        = {};\n  this._previousItemPropertyKeys = {};\n\n  this.readOnly();\n  this.cacheable();\n\n
        \ this.recomputeOnce = function(propertyName) {\n    // What we really want
        to do is coalesce by <cp, propertyName>.\n    // We need a form of `scheduleOnce`
        that accepts an arbitrary token to\n    // coalesce by, in addition to the
        target and method.\n    Ember.run.once(this, recompute, propertyName);\n  };\n
        \ var recompute = function(propertyName) {\n    var dependentKeys = cp._dependentKeys,\n
        \       meta = cp._instanceMeta(this, propertyName),\n        callbacks =
        cp._callbacks();\n\n    reset.call(this, cp, propertyName);\n\n    forEach(cp._dependentKeys,
        function (dependentKey) {\n      var dependentArray = get(this, dependentKey),\n
        \         previousDependentArray = meta.dependentArrays[dependentKey];\n\n
        \     if (dependentArray === previousDependentArray) {\n        // The array
        may be the same, but our item property keys may have\n        // changed,
        so we set them up again.  We can't easily tell if they've\n        // changed:
        the array may be the same object, but with different\n        // contents.\n
        \       if (cp._previousItemPropertyKeys[dependentKey]) {\n          delete
        cp._previousItemPropertyKeys[dependentKey];\n          meta.dependentArraysObserver.setupPropertyObservers(dependentKey,
        cp._itemPropertyKeys[dependentKey]);\n        }\n      } else {\n        meta.dependentArrays[dependentKey]
        = dependentArray;\n\n        if (previousDependentArray) {\n          meta.dependentArraysObserver.teardownObservers(previousDependentArray,
        dependentKey);\n        }\n\n        if (dependentArray) {\n          meta.dependentArraysObserver.setupObservers(dependentArray,
        dependentKey);\n        }\n      }\n    }, this);\n\n    forEach(cp._dependentKeys,
        function(dependentKey) {\n      var dependentArray = get(this, dependentKey);\n
        \     if (dependentArray) {\n        addItems.call(this, dependentArray, callbacks,
        cp, propertyName, meta);\n      }\n    }, this);\n  };\n\n  this.func = function
        (propertyName) {\n    Ember.assert(\"Computed reduce values require at least
        one dependent key\", cp._dependentKeys);\n\n    recompute.call(this, propertyName);\n\n
        \   return cp._instanceMeta(this, propertyName).getValue();\n  };\n}\n\nEmber.ReduceComputedProperty
        = ReduceComputedProperty;\nReduceComputedProperty.prototype = o_create(ComputedProperty.prototype);\n\nfunction
        defaultCallback(computedValue) {\n  return computedValue;\n}\n\nReduceComputedProperty.prototype._callbacks
        = function () {\n  if (!this.callbacks) {\n    var options = this.options;\n
        \   this.callbacks = {\n      removedItem: options.removedItem || defaultCallback,\n
        \     addedItem: options.addedItem || defaultCallback\n    };\n  }\n  return
        this.callbacks;\n};\n\nReduceComputedProperty.prototype._hasInstanceMeta =
        function (context, propertyName) {\n  var guid = guidFor(context),\n      key
        = guid + ':' + propertyName;\n\n  return !!this._instanceMetas[key];\n};\n\nReduceComputedProperty.prototype._instanceMeta
        = function (context, propertyName) {\n  var guid = guidFor(context),\n      key
        = guid + ':' + propertyName,\n      meta = this._instanceMetas[key];\n\n  if
        (!meta) {\n    meta = this._instanceMetas[key] = new ReduceComputedPropertyInstanceMeta(context,
        propertyName, this.initialValue());\n    meta.dependentArraysObserver = new
        DependentArraysObserver(this._callbacks(), this, meta, context, propertyName,
        meta.sugarMeta);\n  }\n\n  return meta;\n};\n\nReduceComputedProperty.prototype.initialValue
        = function () {\n  if (typeof this.options.initialValue === 'function') {\n
        \   return this.options.initialValue();\n  }\n  else {\n    return this.options.initialValue;\n
        \ }\n};\n\nReduceComputedProperty.prototype.resetValue = function (value)
        {\n  return this.initialValue();\n};\n\nReduceComputedProperty.prototype.itemPropertyKey
        = function (dependentArrayKey, itemPropertyKey) {\n  this._itemPropertyKeys[dependentArrayKey]
        = this._itemPropertyKeys[dependentArrayKey] || [];\n  this._itemPropertyKeys[dependentArrayKey].push(itemPropertyKey);\n};\n\nReduceComputedProperty.prototype.clearItemPropertyKeys
        = function (dependentArrayKey) {\n  if (this._itemPropertyKeys[dependentArrayKey])
        {\n    this._previousItemPropertyKeys[dependentArrayKey] = this._itemPropertyKeys[dependentArrayKey];\n
        \   this._itemPropertyKeys[dependentArrayKey] = [];\n  }\n};\n\nReduceComputedProperty.prototype.property
        = function () {\n  var cp = this,\n      args = a_slice.call(arguments),\n
        \     propertyArgs = new Ember.Set(),\n      match,\n      dependentArrayKey,\n
        \     itemPropertyKey;\n\n  forEach(a_slice.call(arguments), function (dependentKey)
        {\n    if (doubleEachPropertyPattern.test(dependentKey)) {\n      throw new
        Ember.Error(\"Nested @each properties not supported: \" + dependentKey);\n
        \   } else if (match = eachPropertyPattern.exec(dependentKey)) {\n      dependentArrayKey
        = match[1];\n      itemPropertyKey = match[2];\n      cp.itemPropertyKey(dependentArrayKey,
        itemPropertyKey);\n      propertyArgs.add(dependentArrayKey);\n    } else
        {\n      propertyArgs.add(dependentKey);\n    }\n  });\n\n  return ComputedProperty.prototype.property.apply(this,
        propertyArgs.toArray());\n};\n\n/**\n  Creates a computed property which operates
        on dependent arrays and\n  is updated with \"one at a time\" semantics. When
        items are added or\n  removed from the dependent array(s) a reduce computed
        only operates\n  on the change instead of re-evaluating the entire array.\n\n
        \ If there are more than one arguments the first arguments are\n  considered
        to be dependent property keys. The last argument is\n  required to be an options
        object. The options object can have the\n  following four properties:\n\n
        \ `initialValue` - A value or function that will be used as the initial\n
        \ value for the computed. If this property is a function the result of calling\n
        \ the function will be used as the initial value. This property is required.\n\n
        \ `initialize` - An optional initialize function. Typically this will be used\n
        \ to set up state on the instanceMeta object.\n\n  `removedItem` - A function
        that is called each time an element is removed\n  from the array.\n\n  `addedItem`
        - A function that is called each time an element is added to\n  the array.\n\n\n
        \ The `initialize` function has the following signature:\n\n  ```javascript\n
        \  function (initialValue, changeMeta, instanceMeta)\n  ```\n\n  `initialValue`
        - The value of the `initialValue` property from the\n  options object.\n\n
        \ `changeMeta` - An object which contains meta information about the\n  computed.
        It contains the following properties:\n\n     - `property` the computed property\n
        \    - `propertyName` the name of the property on the object\n\n  `instanceMeta`
        - An object that can be used to store meta\n  information needed for calculating
        your computed. For example a\n  unique computed might use this to store the
        number of times a given\n  element is found in the dependent array.\n\n\n
        \ The `removedItem` and `addedItem` functions both have the following signature:\n\n
        \ ```javascript\n  function (accumulatedValue, item, changeMeta, instanceMeta)\n
        \ ```\n\n  `accumulatedValue` - The value returned from the last time\n  `removedItem`
        or `addedItem` was called or `initialValue`.\n\n  `item` - the element added
        or removed from the array\n\n  `changeMeta` - An object which contains meta
        information about the\n  change. It contains the following properties:\n\n
        \   - `property` the computed property\n    - `propertyName` the name of the
        property on the object\n    - `index` the index of the added or removed item\n
        \   - `item` the added or removed item: this is exactly the same as\n      the
        second arg\n    - `arrayChanged` the array that triggered the change. Can
        be\n      useful when depending on multiple arrays.\n\n  For property changes
        triggered on an item property change (when\n  depKey is something like `someArray.@each.someProperty`),\n
        \ `changeMeta` will also contain the following property:\n\n    - `previousValues`
        an object whose keys are the properties that changed on\n    the item, and
        whose values are the item's previous values.\n\n  `previousValues` is important
        Ember coalesces item property changes via\n  Ember.run.once. This means that
        by the time removedItem gets called, item has\n  the new values, but you may
        need the previous value (eg for sorting &\n  filtering).\n\n  `instanceMeta`
        - An object that can be used to store meta\n  information needed for calculating
        your computed. For example a\n  unique computed might use this to store the
        number of times a given\n  element is found in the dependent array.\n\n  The
        `removedItem` and `addedItem` functions should return the accumulated\n  value.
        It is acceptable to not return anything (ie return undefined)\n  to invalidate
        the computation. This is generally not a good idea for\n  arrayComputed but
        it's used in eg max and min.\n\n  Note that observers will be fired if either
        of these functions return a value\n  that differs from the accumulated value.
        \ When returning an object that\n  mutates in response to array changes, for
        example an array that maps\n  everything from some other array (see `Ember.computed.map`),
        it is usually\n  important that the *same* array be returned to avoid accidentally
        triggering observers.\n\n  Example\n\n  ```javascript\n  Ember.computed.max
        = function (dependentKey) {\n    return Ember.reduceComputed.call(null, dependentKey,
        {\n      initialValue: -Infinity,\n\n      addedItem: function (accumulatedValue,
        item, changeMeta, instanceMeta) {\n        return Math.max(accumulatedValue,
        item);\n      },\n\n      removedItem: function (accumulatedValue, item, changeMeta,
        instanceMeta) {\n        if (item < accumulatedValue) {\n          return
        accumulatedValue;\n        }\n      }\n    });\n  };\n  ```\n\n  @method reduceComputed\n
        \ @for Ember\n  @param {String} [dependentKeys*]\n  @param {Object} options\n
        \ @return {Ember.ComputedProperty}\n*/\nEmber.reduceComputed = function (options)
        {\n  var args;\n\n  if (arguments.length > 1) {\n    args = a_slice.call(arguments,
        0, -1);\n    options = a_slice.call(arguments, -1)[0];\n  }\n\n  if (typeof
        options !== \"object\") {\n    throw new Ember.Error(\"Reduce Computed Property
        declared without an options hash\");\n  }\n\n  if (!('initialValue' in options))
        {\n    throw new Ember.Error(\"Reduce Computed Property declared without an
        initial value\");\n  }\n\n  var cp = new ReduceComputedProperty(options);\n\n
        \ if (args) {\n    cp.property.apply(cp, args);\n  }\n\n  return cp;\n};\n\n})();\n\n\n\n(function()
        {\nvar ReduceComputedProperty = Ember.ReduceComputedProperty,\n    a_slice
        = [].slice,\n    o_create = Ember.create,\n    forEach = Ember.EnumerableUtils.forEach;\n\nfunction
        ArrayComputedProperty() {\n  var cp = this;\n\n  ReduceComputedProperty.apply(this,
        arguments);\n\n  this.func = (function(reduceFunc) {\n    return function
        (propertyName) {\n      if (!cp._hasInstanceMeta(this, propertyName)) {\n
        \       // When we recompute an array computed property, we need already\n
        \       // retrieved arrays to be updated; we can't simply empty the cache
        and\n        // hope the array is re-retrieved.\n        forEach(cp._dependentKeys,
        function(dependentKey) {\n          Ember.addObserver(this, dependentKey,
        function() {\n            cp.recomputeOnce.call(this, propertyName);\n          });\n
        \       }, this);\n      }\n\n      return reduceFunc.apply(this, arguments);\n
        \   };\n  })(this.func);\n\n  return this;\n}\nEmber.ArrayComputedProperty
        = ArrayComputedProperty;\nArrayComputedProperty.prototype = o_create(ReduceComputedProperty.prototype);\nArrayComputedProperty.prototype.initialValue
        = function () {\n  return Ember.A();\n};\nArrayComputedProperty.prototype.resetValue
        = function (array) {\n  array.clear();\n  return array;\n};\n\n/**\n  Creates
        a computed property which operates on dependent arrays and\n  is updated with
        \"one at a time\" semantics. When items are added or\n  removed from the dependent
        array(s) an array computed only operates\n  on the change instead of re-evaluating
        the entire array. This should\n  return an array, if you'd like to use \"one
        at a time\" semantics and\n  compute some value other then an array look at\n
        \ `Ember.reduceComputed`.\n\n  If there are more than one arguments the first
        arguments are\n  considered to be dependent property keys. The last argument
        is\n  required to be an options object. The options object can have the\n
        \ following three properties.\n\n  `initialize` - An optional initialize function.
        Typically this will be used\n  to set up state on the instanceMeta object.\n\n
        \ `removedItem` - A function that is called each time an element is\n  removed
        from the array.\n\n  `addedItem` - A function that is called each time an
        element is\n  added to the array.\n\n\n  The `initialize` function has the
        following signature:\n\n  ```javascript\n   function (array, changeMeta, instanceMeta)\n
        \ ```\n\n  `array` - The initial value of the arrayComputed, an empty array.\n\n
        \ `changeMeta` - An object which contains meta information about the\n  computed.
        It contains the following properties:\n\n     - `property` the computed property\n
        \    - `propertyName` the name of the property on the object\n\n  `instanceMeta`
        - An object that can be used to store meta\n  information needed for calculating
        your computed. For example a\n  unique computed might use this to store the
        number of times a given\n  element is found in the dependent array.\n\n\n
        \ The `removedItem` and `addedItem` functions both have the following signature:\n\n
        \ ```javascript\n  function (accumulatedValue, item, changeMeta, instanceMeta)\n
        \ ```\n\n  `accumulatedValue` - The value returned from the last time\n  `removedItem`
        or `addedItem` was called or an empty array.\n\n  `item` - the element added
        or removed from the array\n\n  `changeMeta` - An object which contains meta
        information about the\n  change. It contains the following properties:\n\n
        \   - `property` the computed property\n    - `propertyName` the name of the
        property on the object\n    - `index` the index of the added or removed item\n
        \   - `item` the added or removed item: this is exactly the same as\n      the
        second arg\n    - `arrayChanged` the array that triggered the change. Can
        be\n      useful when depending on multiple arrays.\n\n  For property changes
        triggered on an item property change (when\n  depKey is something like `someArray.@each.someProperty`),\n
        \ `changeMeta` will also contain the following property:\n\n    - `previousValues`
        an object whose keys are the properties that changed on\n    the item, and
        whose values are the item's previous values.\n\n  `previousValues` is important
        Ember coalesces item property changes via\n  Ember.run.once. This means that
        by the time removedItem gets called, item has\n  the new values, but you may
        need the previous value (eg for sorting &\n  filtering).\n\n  `instanceMeta`
        - An object that can be used to store meta\n  information needed for calculating
        your computed. For example a\n  unique computed might use this to store the
        number of times a given\n  element is found in the dependent array.\n\n  The
        `removedItem` and `addedItem` functions should return the accumulated\n  value.
        It is acceptable to not return anything (ie return undefined)\n  to invalidate
        the computation. This is generally not a good idea for\n  arrayComputed but
        it's used in eg max and min.\n\n  Example\n\n  ```javascript\n  Ember.computed.map
        = function(dependentKey, callback) {\n    var options = {\n      addedItem:
        function(array, item, changeMeta, instanceMeta) {\n        var mapped = callback(item);\n
        \       array.insertAt(changeMeta.index, mapped);\n        return array;\n
        \     },\n      removedItem: function(array, item, changeMeta, instanceMeta)
        {\n        array.removeAt(changeMeta.index, 1);\n        return array;\n      }\n
        \   };\n\n    return Ember.arrayComputed(dependentKey, options);\n  };\n  ```\n\n
        \ @method arrayComputed\n  @for Ember\n  @param {String} [dependentKeys*]\n
        \ @param {Object} options\n  @return {Ember.ComputedProperty}\n*/\nEmber.arrayComputed
        = function (options) {\n  var args;\n\n  if (arguments.length > 1) {\n    args
        = a_slice.call(arguments, 0, -1);\n    options = a_slice.call(arguments, -1)[0];\n
        \ }\n\n  if (typeof options !== \"object\") {\n    throw new Ember.Error(\"Array
        Computed Property declared without an options hash\");\n  }\n\n  var cp =
        new ArrayComputedProperty(options);\n\n  if (args) {\n    cp.property.apply(cp,
        args);\n  }\n\n  return cp;\n};\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-runtime\n*/\n\nvar get = Ember.get,\n    set = Ember.set,\n
        \   guidFor = Ember.guidFor,\n    merge = Ember.merge,\n    a_slice = [].slice,\n
        \   forEach = Ember.EnumerableUtils.forEach,\n    map = Ember.EnumerableUtils.map;\n\n/**\n
        \ A computed property that calculates the maximum value in the\n  dependent
        array. This will return `-Infinity` when the dependent\n  array is empty.\n\n
        \ Example\n\n  ```javascript\n  App.Person = Ember.Object.extend({\n    childAges:
        Ember.computed.mapBy('children', 'age'),\n    maxChildAge: Ember.computed.max('childAges')\n
        \ });\n\n  var lordByron = App.Person.create({children: []});\n  lordByron.get('maxChildAge');
        // -Infinity\n  lordByron.get('children').pushObject({name: 'Augusta Ada Byron',
        age: 7});\n  lordByron.get('maxChildAge'); // 7\n  lordByron.get('children').pushObjects([{name:
        'Allegra Byron', age: 5}, {name: 'Elizabeth Medora Leigh', age: 8}]);\n  lordByron.get('maxChildAge');
        // 8\n  ```\n\n  @method computed.max\n  @for Ember\n  @param {String} dependentKey\n
        \ @return {Ember.ComputedProperty} computes the largest value in the dependentKey's
        array\n*/\nEmber.computed.max = function (dependentKey) {\n  return Ember.reduceComputed.call(null,
        dependentKey, {\n    initialValue: -Infinity,\n\n    addedItem: function (accumulatedValue,
        item, changeMeta, instanceMeta) {\n      return Math.max(accumulatedValue,
        item);\n    },\n\n    removedItem: function (accumulatedValue, item, changeMeta,
        instanceMeta) {\n      if (item < accumulatedValue) {\n        return accumulatedValue;\n
        \     }\n    }\n  });\n};\n\n/**\n  A computed property that calculates the
        minimum value in the\n  dependent array. This will return `Infinity` when
        the dependent\n  array is empty.\n\n  Example\n\n  ```javascript\n  App.Person
        = Ember.Object.extend({\n    childAges: Ember.computed.mapBy('children', 'age'),\n
        \   minChildAge: Ember.computed.min('childAges')\n  });\n\n  var lordByron
        = App.Person.create({children: []});\n  lordByron.get('minChildAge'); // Infinity\n
        \ lordByron.get('children').pushObject({name: 'Augusta Ada Byron', age: 7});\n
        \ lordByron.get('minChildAge'); // 7\n  lordByron.get('children').pushObjects([{name:
        'Allegra Byron', age: 5}, {name: 'Elizabeth Medora Leigh', age: 8}]);\n  lordByron.get('minChildAge');
        // 5\n  ```\n\n  @method computed.min\n  @for Ember\n  @param {String} dependentKey\n
        \ @return {Ember.ComputedProperty} computes the smallest value in the dependentKey's
        array\n*/\nEmber.computed.min = function (dependentKey) {\n  return Ember.reduceComputed.call(null,
        dependentKey, {\n    initialValue: Infinity,\n\n    addedItem: function (accumulatedValue,
        item, changeMeta, instanceMeta) {\n      return Math.min(accumulatedValue,
        item);\n    },\n\n    removedItem: function (accumulatedValue, item, changeMeta,
        instanceMeta) {\n      if (item > accumulatedValue) {\n        return accumulatedValue;\n
        \     }\n    }\n  });\n};\n\n/**\n  Returns an array mapped via the callback\n\n
        \ The callback method you provide should have the following signature:\n\n
        \ ```javascript\n  function(item);\n  ```\n\n  - `item` is the current item
        in the iteration.\n\n  Example\n\n  ```javascript\n  App.Hampster = Ember.Object.extend({\n
        \   excitingChores: Ember.computed.map('chores', function(chore) {\n      return
        chore.toUpperCase() + '!';\n    })\n  });\n\n  var hampster = App.Hampster.create({chores:
        ['cook', 'clean', 'write more unit tests']});\n  hampster.get('excitingChores');
        // ['COOK!', 'CLEAN!', 'WRITE MORE UNIT TESTS!']\n  ```\n\n  @method computed.map\n
        \ @for Ember\n  @param {String} dependentKey\n  @param {Function} callback\n
        \ @return {Ember.ComputedProperty} an array mapped via the callback\n*/\nEmber.computed.map
        = function(dependentKey, callback) {\n  var options = {\n    addedItem: function(array,
        item, changeMeta, instanceMeta) {\n      var mapped = callback.call(this,
        item);\n      array.insertAt(changeMeta.index, mapped);\n      return array;\n
        \   },\n    removedItem: function(array, item, changeMeta, instanceMeta) {\n
        \     array.removeAt(changeMeta.index, 1);\n      return array;\n    }\n  };\n\n
        \ return Ember.arrayComputed(dependentKey, options);\n};\n\n/**\n  Returns
        an array mapped to the specified key.\n\n  Example\n\n  ```javascript\n  App.Person
        = Ember.Object.extend({\n    childAges: Ember.computed.mapBy('children', 'age')\n
        \ });\n\n  var lordByron = App.Person.create({children: []});\n  lordByron.get('childAges');
        // []\n  lordByron.get('children').pushObject({name: 'Augusta Ada Byron',
        age: 7});\n  lordByron.get('childAges'); // [7]\n  lordByron.get('children').pushObjects([{name:
        'Allegra Byron', age: 5}, {name: 'Elizabeth Medora Leigh', age: 8}]);\n  lordByron.get('childAges');
        // [7, 5, 8]\n  ```\n\n  @method computed.mapBy\n  @for Ember\n  @param {String}
        dependentKey\n  @param {String} propertyKey\n  @return {Ember.ComputedProperty}
        an array mapped to the specified key\n*/\nEmber.computed.mapBy = function(dependentKey,
        propertyKey) {\n  var callback = function(item) { return get(item, propertyKey);
        };\n  return Ember.computed.map(dependentKey + '.@each.' + propertyKey, callback);\n};\n\n/**\n
        \ @method computed.mapProperty\n  @for Ember\n  @deprecated Use `Ember.computed.mapBy`
        instead\n  @param dependentKey\n  @param propertyKey\n*/\nEmber.computed.mapProperty
        = Ember.computed.mapBy;\n\n/**\n  Filters the array by the callback.\n\n  The
        callback method you provide should have the following signature:\n\n  ```javascript\n
        \ function(item);\n  ```\n\n  - `item` is the current item in the iteration.\n\n
        \ Example\n\n  ```javascript\n  App.Hampster = Ember.Object.extend({\n    remainingChores:
        Ember.computed.filter('chores', function(chore) {\n      return !chore.done;\n
        \   })\n  });\n\n  var hampster = App.Hampster.create({chores: [\n    {name:
        'cook', done: true},\n    {name: 'clean', done: true},\n    {name: 'write
        more unit tests', done: false}\n  ]});\n  hampster.get('remainingChores');
        // [{name: 'write more unit tests', done: false}]\n  ```\n\n  @method computed.filter\n
        \ @for Ember\n  @param {String} dependentKey\n  @param {Function} callback\n
        \ @return {Ember.ComputedProperty} the filtered array\n*/\nEmber.computed.filter
        = function(dependentKey, callback) {\n  var options = {\n    initialize: function
        (array, changeMeta, instanceMeta) {\n      instanceMeta.filteredArrayIndexes
        = new Ember.SubArray();\n    },\n\n    addedItem: function(array, item, changeMeta,
        instanceMeta) {\n      var match = !!callback.call(this, item),\n          filterIndex
        = instanceMeta.filteredArrayIndexes.addItem(changeMeta.index, match);\n\n
        \     if (match) {\n        array.insertAt(filterIndex, item);\n      }\n\n
        \     return array;\n    },\n\n    removedItem: function(array, item, changeMeta,
        instanceMeta) {\n      var filterIndex = instanceMeta.filteredArrayIndexes.removeItem(changeMeta.index);\n\n
        \     if (filterIndex > -1) {\n        array.removeAt(filterIndex);\n      }\n\n
        \     return array;\n    }\n  };\n\n  return Ember.arrayComputed(dependentKey,
        options);\n};\n\n/**\n  Filters the array by the property and value\n\n  Example\n\n
        \ ```javascript\n  App.Hampster = Ember.Object.extend({\n    remainingChores:
        Ember.computed.filterBy('chores', 'done', false)\n  });\n\n  var hampster
        = App.Hampster.create({chores: [\n    {name: 'cook', done: true},\n    {name:
        'clean', done: true},\n    {name: 'write more unit tests', done: false}\n
        \ ]});\n  hampster.get('remainingChores'); // [{name: 'write more unit tests',
        done: false}]\n  ```\n\n  @method computed.filterBy\n  @for Ember\n  @param
        {String} dependentKey\n  @param {String} propertyKey\n  @param {String} value\n
        \ @return {Ember.ComputedProperty} the filtered array\n*/\nEmber.computed.filterBy
        = function(dependentKey, propertyKey, value) {\n  var callback;\n\n  if (arguments.length
        === 2) {\n    callback = function(item) {\n      return get(item, propertyKey);\n
        \   };\n  } else {\n    callback = function(item) {\n      return get(item,
        propertyKey) === value;\n    };\n  }\n\n  return Ember.computed.filter(dependentKey
        + '.@each.' + propertyKey, callback);\n};\n\n/**\n  @method computed.filterProperty\n
        \ @for Ember\n  @param dependentKey\n  @param propertyKey\n  @param value\n
        \ @deprecated Use `Ember.computed.filterBy` instead\n*/\nEmber.computed.filterProperty
        = Ember.computed.filterBy;\n\n/**\n  A computed property which returns a new
        array with all the unique\n  elements from one or more dependent arrays.\n\n
        \ Example\n\n  ```javascript\n  App.Hampster = Ember.Object.extend({\n    uniqueFruits:
        Ember.computed.uniq('fruits')\n  });\n\n  var hampster = App.Hampster.create({fruits:
        [\n    'banana',\n    'grape',\n    'kale',\n    'banana'\n  ]});\n  hampster.get('uniqueFruits');
        // ['banana', 'grape', 'kale']\n  ```\n\n  @method computed.uniq\n  @for Ember\n
        \ @param {String} propertyKey*\n  @return {Ember.ComputedProperty} computes
        a new array with all the\n  unique elements from the dependent array\n*/\nEmber.computed.uniq
        = function() {\n  var args = a_slice.call(arguments);\n  args.push({\n    initialize:
        function(array, changeMeta, instanceMeta) {\n      instanceMeta.itemCounts
        = {};\n    },\n\n    addedItem: function(array, item, changeMeta, instanceMeta)
        {\n      var guid = guidFor(item);\n\n      if (!instanceMeta.itemCounts[guid])
        {\n        instanceMeta.itemCounts[guid] = 1;\n      } else {\n        ++instanceMeta.itemCounts[guid];\n
        \     }\n      array.addObject(item);\n      return array;\n    },\n    removedItem:
        function(array, item, _, instanceMeta) {\n      var guid = guidFor(item),\n
        \         itemCounts = instanceMeta.itemCounts;\n\n      if (--itemCounts[guid]
        === 0) {\n        array.removeObject(item);\n      }\n      return array;\n
        \   }\n  });\n  return Ember.arrayComputed.apply(null, args);\n};\n\n/**\n
        \ Alias for [Ember.computed.uniq](/api/#method_computed_uniq).\n\n  @method
        computed.union\n  @for Ember\n  @param {String} propertyKey*\n  @return {Ember.ComputedProperty}
        computes a new array with all the\n  unique elements from the dependent array\n*/\nEmber.computed.union
        = Ember.computed.uniq;\n\n/**\n  A computed property which returns a new array
        with all the duplicated\n  elements from two or more dependeny arrays.\n\n
        \ Example\n\n  ```javascript\n  var obj = Ember.Object.createWithMixins({\n
        \   adaFriends: ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary
        Somerville'],\n    charlesFriends: ['William King', 'Mary Somerville', 'Ada
        Lovelace', 'George Peacock'],\n    friendsInCommon: Ember.computed.intersect('adaFriends',
        'charlesFriends')\n  });\n\n  obj.get('friendsInCommon'); // ['William King',
        'Mary Somerville']\n  ```\n\n  @method computed.intersect\n  @for Ember\n
        \ @param {String} propertyKey*\n  @return {Ember.ComputedProperty} computes
        a new array with all the\n  duplicated elements from the dependent arrays\n*/\nEmber.computed.intersect
        = function () {\n  var getDependentKeyGuids = function (changeMeta) {\n    return
        map(changeMeta.property._dependentKeys, function (dependentKey) {\n      return
        guidFor(dependentKey);\n    });\n  };\n\n  var args = a_slice.call(arguments);\n
        \ args.push({\n    initialize: function (array, changeMeta, instanceMeta)
        {\n      instanceMeta.itemCounts = {};\n    },\n\n    addedItem: function(array,
        item, changeMeta, instanceMeta) {\n      var itemGuid = guidFor(item),\n          dependentGuids
        = getDependentKeyGuids(changeMeta),\n          dependentGuid = guidFor(changeMeta.arrayChanged),\n
        \         numberOfDependentArrays = changeMeta.property._dependentKeys.length,\n
        \         itemCounts = instanceMeta.itemCounts;\n\n      if (!itemCounts[itemGuid])
        { itemCounts[itemGuid] = {}; }\n      if (itemCounts[itemGuid][dependentGuid]
        === undefined) { itemCounts[itemGuid][dependentGuid] = 0; }\n\n      if (++itemCounts[itemGuid][dependentGuid]
        === 1 &&\n          numberOfDependentArrays === Ember.keys(itemCounts[itemGuid]).length)
        {\n\n        array.addObject(item);\n      }\n      return array;\n    },\n
        \   removedItem: function(array, item, changeMeta, instanceMeta) {\n      var
        itemGuid = guidFor(item),\n          dependentGuids = getDependentKeyGuids(changeMeta),\n
        \         dependentGuid = guidFor(changeMeta.arrayChanged),\n          numberOfDependentArrays
        = changeMeta.property._dependentKeys.length,\n          numberOfArraysItemAppearsIn,\n
        \         itemCounts = instanceMeta.itemCounts;\n\n      if (itemCounts[itemGuid][dependentGuid]
        === undefined) { itemCounts[itemGuid][dependentGuid] = 0; }\n      if (--itemCounts[itemGuid][dependentGuid]
        === 0) {\n        delete itemCounts[itemGuid][dependentGuid];\n        numberOfArraysItemAppearsIn
        = Ember.keys(itemCounts[itemGuid]).length;\n\n        if (numberOfArraysItemAppearsIn
        === 0) {\n          delete itemCounts[itemGuid];\n        }\n        array.removeObject(item);\n
        \     }\n      return array;\n    }\n  });\n  return Ember.arrayComputed.apply(null,
        args);\n};\n\n/**\n  A computed property which returns a new array with all
        the\n  properties from the first dependent array that are not in the second\n
        \ dependent array.\n\n  Example\n\n  ```javascript\n  App.Hampster = Ember.Object.extend({\n
        \   likes: ['banana', 'grape', 'kale'],\n    wants: Ember.computed.setDiff('likes',
        'fruits')\n  });\n\n  var hampster = App.Hampster.create({fruits: [\n    'grape',\n
        \   'kale',\n  ]});\n  hampster.get('wants'); // ['banana']\n  ```\n\n  @method
        computed.setDiff\n  @for Ember\n  @param {String} setAProperty\n  @param {String}
        setBProperty\n  @return {Ember.ComputedProperty} computes a new array with
        all the\n  items from the first dependent array that are not in the second\n
        \ dependent array\n*/\nEmber.computed.setDiff = function (setAProperty, setBProperty)
        {\n  if (arguments.length !== 2) {\n    throw new Ember.Error(\"setDiff requires
        exactly two dependent arrays.\");\n  }\n  return Ember.arrayComputed.call(null,
        setAProperty, setBProperty, {\n    addedItem: function (array, item, changeMeta,
        instanceMeta) {\n      var setA = get(this, setAProperty),\n          setB
        = get(this, setBProperty);\n\n      if (changeMeta.arrayChanged === setA)
        {\n        if (!setB.contains(item)) {\n          array.addObject(item);\n
        \       }\n      } else {\n        array.removeObject(item);\n      }\n      return
        array;\n    },\n\n    removedItem: function (array, item, changeMeta, instanceMeta)
        {\n      var setA = get(this, setAProperty),\n          setB = get(this, setBProperty);\n\n
        \     if (changeMeta.arrayChanged === setB) {\n        if (setA.contains(item))
        {\n          array.addObject(item);\n        }\n      } else {\n        array.removeObject(item);\n
        \     }\n      return array;\n    }\n  });\n};\n\nfunction binarySearch(array,
        item, low, high) {\n  var mid, midItem, res, guidMid, guidItem;\n\n  if (arguments.length
        < 4) { high = get(array, 'length'); }\n  if (arguments.length < 3) { low =
        0; }\n\n  if (low === high) {\n    return low;\n  }\n\n  mid = low + Math.floor((high
        - low) / 2);\n  midItem = array.objectAt(mid);\n\n  guidMid = _guidFor(midItem);\n
        \ guidItem = _guidFor(item);\n\n  if (guidMid === guidItem) {\n    return
        mid;\n  }\n\n  res = this.order(midItem, item);\n  if (res === 0) {\n    res
        = guidMid < guidItem ? -1 : 1;\n  }\n\n\n  if (res < 0) {\n    return this.binarySearch(array,
        item, mid+1, high);\n  } else if (res > 0) {\n    return this.binarySearch(array,
        item, low, mid);\n  }\n\n  return mid;\n\n  function _guidFor(item) {\n    if
        (Ember.ObjectProxy.detectInstance(item)) {\n      return guidFor(get(item,
        'content'));\n    }\n    return guidFor(item);\n  }\n}\n\n/**\n  A computed
        property which returns a new array with all the\n  properties from the first
        dependent array sorted based on a property\n  or sort function.\n\n  The callback
        method you provide should have the following signature:\n\n  ```javascript\n
        \ function(itemA, itemB);\n  ```\n\n  - `itemA` the first item to compare.\n
        \ - `itemB` the second item to compare.\n\n  This function should return `-1`
        when `itemA` should come before\n  `itemB`. It should return `1` when `itemA`
        should come after\n  `itemB`. If the `itemA` and `itemB` are equal this function
        should return `0`.\n\n  Example\n\n  ```javascript\n  var ToDoList = Ember.Object.extend({\n
        \   todosSorting: ['name'],\n    sortedTodos: Ember.computed.sort('todos',
        'todosSorting'),\n    priorityTodos: Ember.computed.sort('todos', function(a,
        b){\n      if (a.priority > b.priority) {\n        return 1;\n      } else
        if (a.priority < b.priority) {\n        return -1;\n      }\n      return
        0;\n    }),\n  });\n  var todoList = ToDoList.create({todos: [\n    {name:
        'Unit Test', priority: 2},\n    {name: 'Documentation', priority: 3},\n    {name:
        'Release', priority: 1}\n  ]});\n\n  todoList.get('sortedTodos'); // [{name:'Documentation',
        priority:3}, {name:'Release', priority:1}, {name:'Unit Test', priority:2}]\n
        \ todoList.get('priorityTodos'); // [{name:'Release', priority:1}, {name:'Unit
        Test', priority:2}, {name:'Documentation', priority:3}]\n  ```\n\n  @method
        computed.sort\n  @for Ember\n  @param {String} dependentKey\n  @param {String
        or Function} sortDefinition a dependent key to an\n  array of sort properties
        or a function to use when sorting\n  @return {Ember.ComputedProperty} computes
        a new sorted array based\n  on the sort property array or callback function\n*/\nEmber.computed.sort
        = function (itemsKey, sortDefinition) {\n  Ember.assert(\"Ember.computed.sort
        requires two arguments: an array key to sort and either a sort properties
        key or sort function\", arguments.length === 2);\n\n  var initFn, sortPropertiesKey;\n\n
        \ if (typeof sortDefinition === 'function') {\n    initFn = function (array,
        changeMeta, instanceMeta) {\n      instanceMeta.order = sortDefinition;\n
        \     instanceMeta.binarySearch = binarySearch;\n    };\n  } else {\n    sortPropertiesKey
        = sortDefinition;\n    initFn = function (array, changeMeta, instanceMeta)
        {\n      function setupSortProperties() {\n        var sortPropertyDefinitions
        = get(this, sortPropertiesKey),\n            sortProperty,\n            sortProperties
        = instanceMeta.sortProperties = [],\n            sortPropertyAscending = instanceMeta.sortPropertyAscending
        = {},\n            idx,\n            asc;\n\n        Ember.assert(\"Cannot
        sort: '\" + sortPropertiesKey + \"' is not an array.\", Ember.isArray(sortPropertyDefinitions));\n\n
        \       changeMeta.property.clearItemPropertyKeys(itemsKey);\n\n        forEach(sortPropertyDefinitions,
        function (sortPropertyDefinition) {\n          if ((idx = sortPropertyDefinition.indexOf(':'))
        !== -1) {\n            sortProperty = sortPropertyDefinition.substring(0,
        idx);\n            asc = sortPropertyDefinition.substring(idx+1).toLowerCase()
        !== 'desc';\n          } else {\n            sortProperty = sortPropertyDefinition;\n
        \           asc = true;\n          }\n\n          sortProperties.push(sortProperty);\n
        \         sortPropertyAscending[sortProperty] = asc;\n          changeMeta.property.itemPropertyKey(itemsKey,
        sortProperty);\n        });\n\n        sortPropertyDefinitions.addObserver('@each',
        this, updateSortPropertiesOnce);\n      }\n\n      function updateSortPropertiesOnce()
        {\n        Ember.run.once(this, updateSortProperties, changeMeta.propertyName);\n
        \     }\n\n      function updateSortProperties(propertyName) {\n        setupSortProperties.call(this);\n
        \       changeMeta.property.recomputeOnce.call(this, propertyName);\n      }\n\n
        \     Ember.addObserver(this, sortPropertiesKey, updateSortPropertiesOnce);\n\n
        \     setupSortProperties.call(this);\n\n\n      instanceMeta.order = function
        (itemA, itemB) {\n        var sortProperty, result, asc;\n        for (var
        i = 0; i < this.sortProperties.length; ++i) {\n          sortProperty = this.sortProperties[i];\n
        \         result = Ember.compare(get(itemA, sortProperty), get(itemB, sortProperty));\n\n
        \         if (result !== 0) {\n            asc = this.sortPropertyAscending[sortProperty];\n
        \           return asc ? result : (-1 * result);\n          }\n        }\n\n
        \       return 0;\n      };\n\n      instanceMeta.binarySearch = binarySearch;\n
        \   };\n  }\n\n  return Ember.arrayComputed.call(null, itemsKey, {\n    initialize:
        initFn,\n\n    addedItem: function (array, item, changeMeta, instanceMeta)
        {\n      var index = instanceMeta.binarySearch(array, item);\n      array.insertAt(index,
        item);\n      return array;\n    },\n\n    removedItem: function (array, item,
        changeMeta, instanceMeta) {\n      var proxyProperties, index, searchItem;\n\n
        \     if (changeMeta.previousValues) {\n        proxyProperties = merge({
        content: item }, changeMeta.previousValues);\n\n        searchItem = Ember.ObjectProxy.create(proxyProperties);\n
        \    } else {\n       searchItem = item;\n     }\n\n      index = instanceMeta.binarySearch(array,
        searchItem);\n      array.removeAt(index);\n      return array;\n    }\n  });\n};\n\n})();\n\n\n\n(function()
        {\n/**\n  Expose RSVP implementation\n  \n  Documentation can be found here:
        https://github.com/tildeio/rsvp.js/blob/master/README.md\n\n  @class RSVP\n
        \ @namespace Ember\n  @constructor\n*/\nEmber.RSVP = requireModule('rsvp');\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\nvar STRING_DASHERIZE_REGEXP
        = (/[ _]/g);\nvar STRING_DASHERIZE_CACHE = {};\nvar STRING_DECAMELIZE_REGEXP
        = (/([a-z\\d])([A-Z])/g);\nvar STRING_CAMELIZE_REGEXP = (/(\\-|_|\\.|\\s)+(.)?/g);\nvar
        STRING_UNDERSCORE_REGEXP_1 = (/([a-z\\d])([A-Z]+)/g);\nvar STRING_UNDERSCORE_REGEXP_2
        = (/\\-|\\s+/g);\n\n/**\n  Defines the hash of localized strings for the current
        language. Used by\n  the `Ember.String.loc()` helper. To localize, add string
        values to this\n  hash.\n\n  @property STRINGS\n  @for Ember\n  @type Hash\n*/\nEmber.STRINGS
        = {};\n\n/**\n  Defines string helper methods including string formatting
        and localization.\n  Unless `Ember.EXTEND_PROTOTYPES.String` is `false` these
        methods will also be\n  added to the `String.prototype` as well.\n\n  @class
        String\n  @namespace Ember\n  @static\n*/\nEmber.String = {\n\n  /**\n    Apply
        formatting options to the string. This will look for occurrences\n    of \"%@\"
        in your string and substitute them with the arguments you pass into\n    this
        method. If you want to control the specific order of replacement,\n    you
        can add a number after the key as well to indicate which argument\n    you
        want to insert.\n\n    Ordered insertions are most useful when building loc
        strings where values\n    you need to insert may appear in different orders.\n\n
        \   ```javascript\n    \"Hello %@ %@\".fmt('John', 'Doe');     // \"Hello
        John Doe\"\n    \"Hello %@2, %@1\".fmt('John', 'Doe');  // \"Hello Doe, John\"\n
        \   ```\n\n    @method fmt\n    @param {String} str The string to format\n
        \   @param {Array} formats An array of parameters to interpolate into string.\n
        \   @return {String} formatted string\n  */\n  fmt: function(str, formats)
        {\n    // first, replace any ORDERED replacements.\n    var idx  = 0; // the
        current index for non-numerical replacements\n    return str.replace(/%@([0-9]+)?/g,
        function(s, argIndex) {\n      argIndex = (argIndex) ? parseInt(argIndex,
        10) - 1 : idx++;\n      s = formats[argIndex];\n      return (s === null)
        ? '(null)' : (s === undefined) ? '' : Ember.inspect(s);\n    }) ;\n  },\n\n
        \ /**\n    Formats the passed string, but first looks up the string in the
        localized\n    strings hash. This is a convenient way to localize text. See\n
        \   `Ember.String.fmt()` for more information on formatting.\n\n    Note that
        it is traditional but not required to prefix localized string\n    keys with
        an underscore or other character so you can easily identify\n    localized
        strings.\n\n    ```javascript\n    Ember.STRINGS = {\n      '_Hello World':
        'Bonjour le monde',\n      '_Hello %@ %@': 'Bonjour %@ %@'\n    };\n\n    Ember.String.loc(\"_Hello
        World\");  // 'Bonjour le monde';\n    Ember.String.loc(\"_Hello %@ %@\",
        [\"John\", \"Smith\"]);  // \"Bonjour John Smith\";\n    ```\n\n    @method
        loc\n    @param {String} str The string to format\n    @param {Array} formats
        Optional array of parameters to interpolate into string.\n    @return {String}
        formatted string\n  */\n  loc: function(str, formats) {\n    str = Ember.STRINGS[str]
        || str;\n    return Ember.String.fmt(str, formats) ;\n  },\n\n  /**\n    Splits
        a string into separate units separated by spaces, eliminating any\n    empty
        strings in the process. This is a convenience method for split that\n    is
        mostly useful when applied to the `String.prototype`.\n\n    ```javascript\n
        \   Ember.String.w(\"alpha beta gamma\").forEach(function(key) {\n      console.log(key);\n
        \   });\n\n    // > alpha\n    // > beta\n    // > gamma\n    ```\n\n    @method
        w\n    @param {String} str The string to split\n    @return {String} split
        string\n  */\n  w: function(str) { return str.split(/\\s+/); },\n\n  /**\n
        \   Converts a camelized string into all lower case separated by underscores.\n\n
        \   ```javascript\n    'innerHTML'.decamelize();           // 'inner_html'\n
        \   'action_name'.decamelize();        // 'action_name'\n    'css-class-name'.decamelize();
        \    // 'css-class-name'\n    'my favorite items'.decamelize();  // 'my favorite
        items'\n    ```\n\n    @method decamelize\n    @param {String} str The string
        to decamelize.\n    @return {String} the decamelized string.\n  */\n  decamelize:
        function(str) {\n    return str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase();\n
        \ },\n\n  /**\n    Replaces underscores, spaces, or camelCase with dashes.\n\n
        \   ```javascript\n    'innerHTML'.dasherize();          // 'inner-html'\n
        \   'action_name'.dasherize();        // 'action-name'\n    'css-class-name'.dasherize();
        \    // 'css-class-name'\n    'my favorite items'.dasherize();  // 'my-favorite-items'\n
        \   ```\n\n    @method dasherize\n    @param {String} str The string to dasherize.\n
        \   @return {String} the dasherized string.\n  */\n  dasherize: function(str)
        {\n    var cache = STRING_DASHERIZE_CACHE,\n        hit   = cache.hasOwnProperty(str),\n
        \       ret;\n\n    if (hit) {\n      return cache[str];\n    } else {\n      ret
        = Ember.String.decamelize(str).replace(STRING_DASHERIZE_REGEXP,'-');\n      cache[str]
        = ret;\n    }\n\n    return ret;\n  },\n\n  /**\n    Returns the lowerCamelCase
        form of a string.\n\n    ```javascript\n    'innerHTML'.camelize();          //
        'innerHTML'\n    'action_name'.camelize();        // 'actionName'\n    'css-class-name'.camelize();
        \    // 'cssClassName'\n    'my favorite items'.camelize();  // 'myFavoriteItems'\n
        \   'My Favorite Items'.camelize();  // 'myFavoriteItems'\n    ```\n\n    @method
        camelize\n    @param {String} str The string to camelize.\n    @return {String}
        the camelized string.\n  */\n  camelize: function(str) {\n    return str.replace(STRING_CAMELIZE_REGEXP,
        function(match, separator, chr) {\n      return chr ? chr.toUpperCase() :
        '';\n    }).replace(/^([A-Z])/, function(match, separator, chr) {\n      return
        match.toLowerCase();\n    });\n  },\n\n  /**\n    Returns the UpperCamelCase
        form of a string.\n\n    ```javascript\n    'innerHTML'.classify();          //
        'InnerHTML'\n    'action_name'.classify();        // 'ActionName'\n    'css-class-name'.classify();
        \    // 'CssClassName'\n    'my favorite items'.classify();  // 'MyFavoriteItems'\n
        \   ```\n\n    @method classify\n    @param {String} str the string to classify\n
        \   @return {String} the classified string\n  */\n  classify: function(str)
        {\n    var parts = str.split(\".\"),\n        out = [];\n\n    for (var i=0,
        l=parts.length; i<l; i++) {\n      var camelized = Ember.String.camelize(parts[i]);\n
        \     out.push(camelized.charAt(0).toUpperCase() + camelized.substr(1));\n
        \   }\n\n    return out.join(\".\");\n  },\n\n  /**\n    More general than
        decamelize. Returns the lower\\_case\\_and\\_underscored\n    form of a string.\n\n
        \   ```javascript\n    'innerHTML'.underscore();          // 'inner_html'\n
        \   'action_name'.underscore();        // 'action_name'\n    'css-class-name'.underscore();
        \    // 'css_class_name'\n    'my favorite items'.underscore();  // 'my_favorite_items'\n
        \   ```\n\n    @method underscore\n    @param {String} str The string to underscore.\n
        \   @return {String} the underscored string.\n  */\n  underscore: function(str)
        {\n    return str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').\n      replace(STRING_UNDERSCORE_REGEXP_2,
        '_').toLowerCase();\n  },\n\n  /**\n    Returns the Capitalized form of a
        string\n\n    ```javascript\n    'innerHTML'.capitalize()         // 'InnerHTML'\n
        \   'action_name'.capitalize()       // 'Action_name'\n    'css-class-name'.capitalize()
        \   // 'Css-class-name'\n    'my favorite items'.capitalize() // 'My favorite
        items'\n    ```\n\n    @method capitalize\n    @param {String} str The string
        to capitalize.\n    @return {String} The capitalized string.\n  */\n  capitalize:
        function(str) {\n    return str.charAt(0).toUpperCase() + str.substr(1);\n
        \ }\n\n};\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\n\n\nvar
        fmt = Ember.String.fmt,\n    w   = Ember.String.w,\n    loc = Ember.String.loc,\n
        \   camelize = Ember.String.camelize,\n    decamelize = Ember.String.decamelize,\n
        \   dasherize = Ember.String.dasherize,\n    underscore = Ember.String.underscore,\n
        \   capitalize = Ember.String.capitalize,\n    classify = Ember.String.classify;\n\nif
        (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.String) {\n\n
        \ /**\n    See [Ember.String.fmt](/api/classes/Ember.String.html#method_fmt).\n\n
        \   @method fmt\n    @for String\n  */\n  String.prototype.fmt = function()
        {\n    return fmt(this, arguments);\n  };\n\n  /**\n    See [Ember.String.w](/api/classes/Ember.String.html#method_w).\n\n
        \   @method w\n    @for String\n  */\n  String.prototype.w = function() {\n
        \   return w(this);\n  };\n\n  /**\n    See [Ember.String.loc](/api/classes/Ember.String.html#method_loc).\n\n
        \   @method loc\n    @for String\n  */\n  String.prototype.loc = function()
        {\n    return loc(this, arguments);\n  };\n\n  /**\n    See [Ember.String.camelize](/api/classes/Ember.String.html#method_camelize).\n\n
        \   @method camelize\n    @for String\n  */\n  String.prototype.camelize =
        function() {\n    return camelize(this);\n  };\n\n  /**\n    See [Ember.String.decamelize](/api/classes/Ember.String.html#method_decamelize).\n\n
        \   @method decamelize\n    @for String\n  */\n  String.prototype.decamelize
        = function() {\n    return decamelize(this);\n  };\n\n  /**\n    See [Ember.String.dasherize](/api/classes/Ember.String.html#method_dasherize).\n\n
        \   @method dasherize\n    @for String\n  */\n  String.prototype.dasherize
        = function() {\n    return dasherize(this);\n  };\n\n  /**\n    See [Ember.String.underscore](/api/classes/Ember.String.html#method_underscore).\n\n
        \   @method underscore\n    @for String\n  */\n  String.prototype.underscore
        = function() {\n    return underscore(this);\n  };\n\n  /**\n    See [Ember.String.classify](/api/classes/Ember.String.html#method_classify).\n\n
        \   @method classify\n    @for String\n  */\n  String.prototype.classify =
        function() {\n    return classify(this);\n  };\n\n  /**\n    See [Ember.String.capitalize](/api/classes/Ember.String.html#method_capitalize).\n\n
        \   @method capitalize\n    @for String\n  */\n  String.prototype.capitalize
        = function() {\n    return capitalize(this);\n  };\n\n}\n\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\nvar a_slice = Array.prototype.slice;\n\nif
        (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Function) {\n\n
        \ /**\n    The `property` extension of Javascript's Function prototype is
        available\n    when `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function`
        is\n    `true`, which is the default.\n\n    Computed properties allow you
        to treat a function like a property:\n\n    ```javascript\n    MyApp.President
        = Ember.Object.extend({\n      firstName: '',\n      lastName:  '',\n\n      fullName:
        function() {\n        return this.get('firstName') + ' ' + this.get('lastName');\n\n
        \       // Call this flag to mark the function as a property\n      }.property()\n
        \   });\n\n    var president = MyApp.President.create({\n      firstName:
        \"Barack\",\n      lastName: \"Obama\"\n    });\n\n    president.get('fullName');
        \   // \"Barack Obama\"\n    ```\n\n    Treating a function like a property
        is useful because they can work with\n    bindings, just like any other property.\n\n
        \   Many computed properties have dependencies on other properties. For\n
        \   example, in the above example, the `fullName` property depends on\n    `firstName`
        and `lastName` to determine its value. You can tell Ember\n    about these
        dependencies like this:\n\n    ```javascript\n    MyApp.President = Ember.Object.extend({\n
        \     firstName: '',\n      lastName:  '',\n\n      fullName: function() {\n
        \       return this.get('firstName') + ' ' + this.get('lastName');\n\n        //
        Tell Ember.js that this computed property depends on firstName\n        //
        and lastName\n      }.property('firstName', 'lastName')\n    });\n    ```\n\n
        \   Make sure you list these dependencies so Ember knows when to update\n
        \   bindings that connect to a computed property. Changing a dependency\n
        \   will not immediately trigger an update of the computed property, but\n
        \   will instead clear the cache so that it is updated when the next `get`\n
        \   is called on the property.\n\n    See [Ember.ComputedProperty](/api/classes/Ember.ComputedProperty.html),
        [Ember.computed](/api/#method_computed).\n\n    @method property\n    @for
        Function\n  */\n  Function.prototype.property = function() {\n    var ret
        = Ember.computed(this);\n    return ret.property.apply(ret, arguments);\n
        \ };\n\n  /**\n    The `observes` extension of Javascript's Function prototype
        is available\n    when `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function`
        is\n    true, which is the default.\n\n    You can observe property changes
        simply by adding the `observes`\n    call to the end of your method declarations
        in classes that you write.\n    For example:\n\n    ```javascript\n    Ember.Object.extend({\n
        \     valueObserver: function() {\n        // Executes whenever the \"value\"
        property changes\n      }.observes('value')\n    });\n    ```\n\n    In the
        future this method may become asynchronous. If you want to ensure\n    synchronous
        behavior, use `observesImmediately`.\n\n    See `Ember.observer`.\n\n    @method
        observes\n    @for Function\n  */\n  Function.prototype.observes = function()
        {\n    this.__ember_observes__ = a_slice.call(arguments);\n    return this;\n
        \ };\n\n  /**\n    The `observesImmediately` extension of Javascript's Function
        prototype is\n    available when `Ember.EXTEND_PROTOTYPES` or\n    `Ember.EXTEND_PROTOTYPES.Function`
        is true, which is the default.\n\n    You can observe property changes simply
        by adding the `observesImmediately`\n    call to the end of your method declarations
        in classes that you write.\n    For example:\n\n    ```javascript\n    Ember.Object.extend({\n
        \     valueObserver: function() {\n        // Executes immediately after the
        \"value\" property changes\n      }.observesImmediately('value')\n    });\n
        \   ```\n\n    In the future, `observes` may become asynchronous. In this
        event,\n    `observesImmediately` will maintain the synchronous behavior.\n\n
        \   See `Ember.immediateObserver`.\n\n    @method observesImmediately\n    @for
        Function\n  */\n  Function.prototype.observesImmediately = function() {\n
        \   for (var i=0, l=arguments.length; i<l; i++) {\n      var arg = arguments[i];\n
        \     Ember.assert(\"Immediate observers must observe internal properties
        only, not properties on other objects.\", arg.indexOf('.') === -1);\n    }\n\n
        \   return this.observes.apply(this, arguments);\n  };\n\n  /**\n    The `observesBefore`
        extension of Javascript's Function prototype is\n    available when `Ember.EXTEND_PROTOTYPES`
        or\n    `Ember.EXTEND_PROTOTYPES.Function` is true, which is the default.\n\n
        \   You can get notified when a property change is about to happen by\n    by
        adding the `observesBefore` call to the end of your method\n    declarations
        in classes that you write. For example:\n\n    ```javascript\n    Ember.Object.extend({\n
        \     valueObserver: function() {\n        // Executes whenever the \"value\"
        property is about to change\n      }.observesBefore('value')\n    });\n    ```\n\n
        \   See `Ember.beforeObserver`.\n\n    @method observesBefore\n    @for Function\n
        \ */\n  Function.prototype.observesBefore = function() {\n    this.__ember_observesBefore__
        = a_slice.call(arguments);\n    return this;\n  };\n\n  /**\n    The `on`
        extension of Javascript's Function prototype is available\n    when `Ember.EXTEND_PROTOTYPES`
        or `Ember.EXTEND_PROTOTYPES.Function` is\n    true, which is the default.\n\n
        \   You can listen for events simply by adding the `on` call to the end of\n
        \   your method declarations in classes or mixins that you write. For example:\n\n
        \   ```javascript\n    Ember.Mixin.create({\n      doSomethingWithElement:
        function() {\n        // Executes whenever the \"didInsertElement\" event
        fires\n      }.on('didInsertElement')\n    });\n    ```\n\n    See `Ember.on`.\n\n
        \   @method on\n    @for Function\n  */\n  Function.prototype.on = function()
        {\n    var events = a_slice.call(arguments);\n    this.__ember_listens__ =
        events;\n    return this;\n  };\n}\n\n\n})();\n\n\n\n(function() {\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\n\n/**\n  Implements
        some standard methods for comparing objects. Add this mixin to\n  any class
        you create that can compare its instances.\n\n  You should implement the `compare()`
        method.\n\n  @class Comparable\n  @namespace Ember\n  @since Ember 0.9\n*/\nEmber.Comparable
        = Ember.Mixin.create( /** @scope Ember.Comparable.prototype */{\n\n  /**\n
        \   Override to return the result of the comparison of the two parameters.
        The\n    compare method should return:\n\n    - `-1` if `a < b`\n    - `0`
        if `a == b`\n    - `1` if `a > b`\n\n    Default implementation raises an
        exception.\n\n    @method compare\n    @param a {Object} the first object
        to compare\n    @param b {Object} the second object to compare\n    @return
        {Integer} the result of the comparison\n  */\n  compare: Ember.required(Function)\n\n});\n\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\n\n\nvar get = Ember.get,
        set = Ember.set;\n\n/**\n  Implements some standard methods for copying an
        object. Add this mixin to\n  any object you create that can create a copy
        of itself. This mixin is\n  added automatically to the built-in array.\n\n
        \ You should generally implement the `copy()` method to return a copy of the\n
        \ receiver.\n\n  Note that `frozenCopy()` will only work if you also implement\n
        \ `Ember.Freezable`.\n\n  @class Copyable\n  @namespace Ember\n  @since Ember
        0.9\n*/\nEmber.Copyable = Ember.Mixin.create(/** @scope Ember.Copyable.prototype
        */ {\n\n  /**\n    Override to return a copy of the receiver. Default implementation
        raises\n    an exception.\n\n    @method copy\n    @param {Boolean} deep if
        `true`, a deep copy of the object should be made\n    @return {Object} copy
        of receiver\n  */\n  copy: Ember.required(Function),\n\n  /**\n    If the
        object implements `Ember.Freezable`, then this will return a new\n    copy
        if the object is not frozen and the receiver if the object is frozen.\n\n
        \   Raises an exception if you try to call this method on a object that does\n
        \   not support freezing.\n\n    You should use this method whenever you want
        a copy of a freezable object\n    since a freezable object can simply return
        itself without actually\n    consuming more memory.\n\n    @method frozenCopy\n
        \   @return {Object} copy of receiver or receiver\n  */\n  frozenCopy: function()
        {\n    if (Ember.Freezable && Ember.Freezable.detect(this)) {\n      return
        get(this, 'isFrozen') ? this : this.copy().freeze();\n    } else {\n      throw
        new Ember.Error(Ember.String.fmt(\"%@ does not support freezing\", [this]));\n
        \   }\n  }\n});\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule
        ember-runtime\n*/\n\n\nvar get = Ember.get, set = Ember.set;\n\n/**\n  The
        `Ember.Freezable` mixin implements some basic methods for marking an\n  object
        as frozen. Once an object is frozen it should be read only. No changes\n  may
        be made the internal state of the object.\n\n  ## Enforcement\n\n  To fully
        support freezing in your subclass, you must include this mixin and\n  override
        any method that might alter any property on the object to instead\n  raise
        an exception. You can check the state of an object by checking the\n  `isFrozen`
        property.\n\n  Although future versions of JavaScript may support language-level
        freezing\n  object objects, that is not the case today. Even if an object
        is freezable,\n  it is still technically possible to modify the object, even
        though it could\n  break other parts of your application that do not expect
        a frozen object to\n  change. It is, therefore, very important that you always
        respect the\n  `isFrozen` property on all freezable objects.\n\n  ## Example
        Usage\n\n  The example below shows a simple object that implement the `Ember.Freezable`\n
        \ protocol.\n\n  ```javascript\n  Contact = Ember.Object.extend(Ember.Freezable,
        {\n    firstName: null,\n    lastName: null,\n\n    // swaps the names\n    swapNames:
        function() {\n      if (this.get('isFrozen')) throw Ember.FROZEN_ERROR;\n
        \     var tmp = this.get('firstName');\n      this.set('firstName', this.get('lastName'));\n
        \     this.set('lastName', tmp);\n      return this;\n    }\n\n  });\n\n  c
        = Context.create({ firstName: \"John\", lastName: \"Doe\" });\n  c.swapNames();
        \ // returns c\n  c.freeze();\n  c.swapNames();  // EXCEPTION\n  ```\n\n  ##
        Copying\n\n  Usually the `Ember.Freezable` protocol is implemented in cooperation
        with the\n  `Ember.Copyable` protocol, which defines a `frozenCopy()` method
        that will\n  return a frozen object, if the object implements this method
        as well.\n\n  @class Freezable\n  @namespace Ember\n  @since Ember 0.9\n*/\nEmber.Freezable
        = Ember.Mixin.create(/** @scope Ember.Freezable.prototype */ {\n\n  /**\n
        \   Set to `true` when the object is frozen. Use this property to detect\n
        \   whether your object is frozen or not.\n\n    @property isFrozen\n    @type
        Boolean\n  */\n  isFrozen: false,\n\n  /**\n    Freezes the object. Once this
        method has been called the object should\n    no longer allow any properties
        to be edited.\n\n    @method freeze\n    @return {Object} receiver\n  */\n
        \ freeze: function() {\n    if (get(this, 'isFrozen')) return this;\n    set(this,
        'isFrozen', true);\n    return this;\n  }\n\n});\n\nEmber.FROZEN_ERROR = \"Frozen
        object cannot be modified.\";\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-runtime\n*/\n\nvar forEach = Ember.EnumerableUtils.forEach;\n\n/**\n
        \ This mixin defines the API for modifying generic enumerables. These methods\n
        \ can be applied to an object regardless of whether it is ordered or\n  unordered.\n\n
        \ Note that an Enumerable can change even if it does not implement this mixin.\n
        \ For example, a MappedEnumerable cannot be directly modified but if its\n
        \ underlying enumerable changes, it will change also.\n\n  ## Adding Objects\n\n
        \ To add an object to an enumerable, use the `addObject()` method. This\n
        \ method will only add the object to the enumerable if the object is not\n
        \ already present and is of a type supported by the enumerable.\n\n  ```javascript\n
        \ set.addObject(contact);\n  ```\n\n  ## Removing Objects\n\n  To remove an
        object from an enumerable, use the `removeObject()` method. This\n  will only
        remove the object if it is present in the enumerable, otherwise\n  this method
        has no effect.\n\n  ```javascript\n  set.removeObject(contact);\n  ```\n\n
        \ ## Implementing In Your Own Code\n\n  If you are implementing an object
        and want to support this API, just include\n  this mixin in your class and
        implement the required methods. In your unit\n  tests, be sure to apply the
        Ember.MutableEnumerableTests to your object.\n\n  @class MutableEnumerable\n
        \ @namespace Ember\n  @uses Ember.Enumerable\n*/\nEmber.MutableEnumerable
        = Ember.Mixin.create(Ember.Enumerable, {\n\n  /**\n    __Required.__ You must
        implement this method to apply this mixin.\n\n    Attempts to add the passed
        object to the receiver if the object is not\n    already present in the collection.
        If the object is present, this method\n    has no effect.\n\n    If the passed
        object is of a type not supported by the receiver,\n    then this method should
        raise an exception.\n\n    @method addObject\n    @param {Object} object The
        object to add to the enumerable.\n    @return {Object} the passed object\n
        \ */\n  addObject: Ember.required(Function),\n\n  /**\n    Adds each object
        in the passed enumerable to the receiver.\n\n    @method addObjects\n    @param
        {Ember.Enumerable} objects the objects to add.\n    @return {Object} receiver\n
        \ */\n  addObjects: function(objects) {\n    Ember.beginPropertyChanges(this);\n
        \   forEach(objects, function(obj) { this.addObject(obj); }, this);\n    Ember.endPropertyChanges(this);\n
        \   return this;\n  },\n\n  /**\n    __Required.__ You must implement this
        method to apply this mixin.\n\n    Attempts to remove the passed object from
        the receiver collection if the\n    object is present in the collection. If
        the object is not present,\n    this method has no effect.\n\n    If the passed
        object is of a type not supported by the receiver,\n    then this method should
        raise an exception.\n\n    @method removeObject\n    @param {Object} object
        The object to remove from the enumerable.\n    @return {Object} the passed
        object\n  */\n  removeObject: Ember.required(Function),\n\n\n  /**\n    Removes
        each object in the passed enumerable from the receiver.\n\n    @method removeObjects\n
        \   @param {Ember.Enumerable} objects the objects to remove\n    @return {Object}
        receiver\n  */\n  removeObjects: function(objects) {\n    Ember.beginPropertyChanges(this);\n
        \   forEach(objects, function(obj) { this.removeObject(obj); }, this);\n    Ember.endPropertyChanges(this);\n
        \   return this;\n  }\n\n});\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule
        ember-runtime\n*/\n// ..........................................................\n//
        CONSTANTS\n//\n\nvar OUT_OF_RANGE_EXCEPTION = \"Index out of range\" ;\nvar
        EMPTY = [];\n\n// ..........................................................\n//
        HELPERS\n//\n\nvar get = Ember.get, set = Ember.set;\n\n/**\n  This mixin
        defines the API for modifying array-like objects. These methods\n  can be
        applied only to a collection that keeps its items in an ordered set.\n\n  Note
        that an Array can change even if it does not implement this mixin.\n  For
        example, one might implement a SparseArray that cannot be directly\n  modified,
        but if its underlying enumerable changes, it will change also.\n\n  @class
        MutableArray\n  @namespace Ember\n  @uses Ember.Array\n  @uses Ember.MutableEnumerable\n*/\nEmber.MutableArray
        = Ember.Mixin.create(Ember.Array, Ember.MutableEnumerable,/** @scope Ember.MutableArray.prototype
        */ {\n\n  /**\n    __Required.__ You must implement this method to apply this
        mixin.\n\n    This is one of the primitives you must implement to support
        `Ember.Array`.\n    You should replace amt objects started at idx with the
        objects in the\n    passed array. You should also call `this.enumerableContentDidChange()`\n\n
        \   @method replace\n    @param {Number} idx Starting index in the array to
        replace. If\n      idx >= length, then append to the end of the array.\n    @param
        {Number} amt Number of elements that should be removed from\n      the array,
        starting at *idx*.\n    @param {Array} objects An array of zero or more objects
        that should be\n      inserted into the array at *idx*\n  */\n  replace: Ember.required(),\n\n
        \ /**\n    Remove all elements from self. This is useful if you\n    want
        to reuse an existing array without having to recreate it.\n\n    ```javascript\n
        \   var colors = [\"red\", \"green\", \"blue\"];\n    color.length();   //
        \ 3\n    colors.clear();   //  []\n    colors.length();  //  0\n    ```\n\n
        \   @method clear\n    @return {Ember.Array} An empty Array.\n  */\n  clear:
        function () {\n    var len = get(this, 'length');\n    if (len === 0) return
        this;\n    this.replace(0, len, EMPTY);\n    return this;\n  },\n\n  /**\n
        \   This will use the primitive `replace()` method to insert an object at
        the\n    specified index.\n\n    ```javascript\n    var colors = [\"red\",
        \"green\", \"blue\"];\n    colors.insertAt(2, \"yellow\");  // [\"red\", \"green\",
        \"yellow\", \"blue\"]\n    colors.insertAt(5, \"orange\");  // Error: Index
        out of range\n    ```\n\n    @method insertAt\n    @param {Number} idx index
        of insert the object at.\n    @param {Object} object object to insert\n    @return
        this\n  */\n  insertAt: function(idx, object) {\n    if (idx > get(this, 'length'))
        throw new Ember.Error(OUT_OF_RANGE_EXCEPTION) ;\n    this.replace(idx, 0,
        [object]) ;\n    return this ;\n  },\n\n  /**\n    Remove an object at the
        specified index using the `replace()` primitive\n    method. You can pass
        either a single index, or a start and a length.\n\n    If you pass a start
        and length that is beyond the\n    length this method will throw an `OUT_OF_RANGE_EXCEPTION`\n\n
        \   ```javascript\n    var colors = [\"red\", \"green\", \"blue\", \"yellow\",
        \"orange\"];\n    colors.removeAt(0);     // [\"green\", \"blue\", \"yellow\",
        \"orange\"]\n    colors.removeAt(2, 2);  // [\"green\", \"blue\"]\n    colors.removeAt(4,
        2);  // Error: Index out of range\n    ```\n\n    @method removeAt\n    @param
        {Number} start index, start of range\n    @param {Number} len length of passing
        range\n    @return {Object} receiver\n  */\n  removeAt: function(start, len)
        {\n    if ('number' === typeof start) {\n\n      if ((start < 0) || (start
        >= get(this, 'length'))) {\n        throw new Ember.Error(OUT_OF_RANGE_EXCEPTION);\n
        \     }\n\n      // fast case\n      if (len === undefined) len = 1;\n      this.replace(start,
        len, EMPTY);\n    }\n\n    return this ;\n  },\n\n  /**\n    Push the object
        onto the end of the array. Works just like `push()` but it\n    is KVO-compliant.\n\n
        \   ```javascript\n    var colors = [\"red\", \"green\", \"blue\"];\n    colors.pushObject(\"black\");
        \              // [\"red\", \"green\", \"blue\", \"black\"]\n    colors.pushObject([\"yellow\",
        \"orange\"]);  // [\"red\", \"green\", \"blue\", \"black\", [\"yellow\", \"orange\"]]\n
        \   ```\n\n    @method pushObject\n    @param {*} obj object to push\n    @return
        {*} the same obj passed as param\n  */\n  pushObject: function(obj) {\n    this.insertAt(get(this,
        'length'), obj) ;\n    return obj ;\n  },\n\n  /**\n    Add the objects in
        the passed numerable to the end of the array. Defers\n    notifying observers
        of the change until all objects are added.\n\n    ```javascript\n    var colors
        = [\"red\", \"green\", \"blue\"];\n    colors.pushObjects([\"black\"]);               //
        [\"red\", \"green\", \"blue\", \"black\"]\n    colors.pushObjects([\"yellow\",
        \"orange\"]);  // [\"red\", \"green\", \"blue\", \"black\", \"yellow\", \"orange\"]\n
        \   ```\n\n    @method pushObjects\n    @param {Ember.Enumerable} objects
        the objects to add\n    @return {Ember.Array} receiver\n  */\n  pushObjects:
        function(objects) {\n    if (!(Ember.Enumerable.detect(objects) || Ember.isArray(objects)))
        {\n      throw new TypeError(\"Must pass Ember.Enumerable to Ember.MutableArray#pushObjects\");\n
        \   }\n    this.replace(get(this, 'length'), 0, objects);\n    return this;\n
        \ },\n\n  /**\n    Pop object from array or nil if none are left. Works just
        like `pop()` but\n    it is KVO-compliant.\n\n    ```javascript\n    var colors
        = [\"red\", \"green\", \"blue\"];\n    colors.popObject();   // \"blue\"\n
        \   console.log(colors);  // [\"red\", \"green\"]\n    ```\n\n    @method
        popObject\n    @return object\n  */\n  popObject: function() {\n    var len
        = get(this, 'length') ;\n    if (len === 0) return null ;\n\n    var ret =
        this.objectAt(len-1) ;\n    this.removeAt(len-1, 1) ;\n    return ret ;\n
        \ },\n\n  /**\n    Shift an object from start of array or nil if none are
        left. Works just\n    like `shift()` but it is KVO-compliant.\n\n    ```javascript\n
        \   var colors = [\"red\", \"green\", \"blue\"];\n    colors.shiftObject();
        \ // \"red\"\n    console.log(colors);   // [\"green\", \"blue\"]\n    ```\n\n
        \   @method shiftObject\n    @return object\n  */\n  shiftObject: function()
        {\n    if (get(this, 'length') === 0) return null ;\n    var ret = this.objectAt(0)
        ;\n    this.removeAt(0) ;\n    return ret ;\n  },\n\n  /**\n    Unshift an
        object to start of array. Works just like `unshift()` but it is\n    KVO-compliant.\n\n
        \   ```javascript\n    var colors = [\"red\", \"green\", \"blue\"];\n    colors.unshiftObject(\"yellow\");
        \            // [\"yellow\", \"red\", \"green\", \"blue\"]\n    colors.unshiftObject([\"black\",
        \"white\"]);   // [[\"black\", \"white\"], \"yellow\", \"red\", \"green\",
        \"blue\"]\n    ```\n\n    @method unshiftObject\n    @param {*} obj object
        to unshift\n    @return {*} the same obj passed as param\n  */\n  unshiftObject:
        function(obj) {\n    this.insertAt(0, obj) ;\n    return obj ;\n  },\n\n  /**\n
        \   Adds the named objects to the beginning of the array. Defers notifying\n
        \   observers until all objects have been added.\n\n    ```javascript\n    var
        colors = [\"red\", \"green\", \"blue\"];\n    colors.unshiftObjects([\"black\",
        \"white\"]);   // [\"black\", \"white\", \"red\", \"green\", \"blue\"]\n    colors.unshiftObjects(\"yellow\");
        \            // Type Error: 'undefined' is not a function\n    ```\n\n    @method
        unshiftObjects\n    @param {Ember.Enumerable} objects the objects to add\n
        \   @return {Ember.Array} receiver\n  */\n  unshiftObjects: function(objects)
        {\n    this.replace(0, 0, objects);\n    return this;\n  },\n\n  /**\n    Reverse
        objects in the array. Works just like `reverse()` but it is\n    KVO-compliant.\n\n
        \   @method reverseObjects\n    @return {Ember.Array} receiver\n   */\n  reverseObjects:
        function() {\n    var len = get(this, 'length');\n    if (len === 0) return
        this;\n    var objects = this.toArray().reverse();\n    this.replace(0, len,
        objects);\n    return this;\n  },\n\n  /**\n    Replace all the the receiver's
        content with content of the argument.\n    If argument is an empty array receiver
        will be cleared.\n\n    ```javascript\n    var colors = [\"red\", \"green\",
        \"blue\"];\n    colors.setObjects([\"black\", \"white\"]);  // [\"black\",
        \"white\"]\n    colors.setObjects([]);                  // []\n    ```\n\n
        \   @method setObjects\n    @param {Ember.Array} objects array whose content
        will be used for replacing\n        the content of the receiver\n    @return
        {Ember.Array} receiver with the new content\n   */\n  setObjects: function(objects)
        {\n    if (objects.length === 0) return this.clear();\n\n    var len = get(this,
        'length');\n    this.replace(0, len, objects);\n    return this;\n  },\n\n
        \ // ..........................................................\n  // IMPLEMENT
        Ember.MutableEnumerable\n  //\n\n  removeObject: function(obj) {\n    var
        loc = get(this, 'length') || 0;\n    while(--loc >= 0) {\n      var curObject
        = this.objectAt(loc) ;\n      if (curObject === obj) this.removeAt(loc) ;\n
        \   }\n    return this ;\n  },\n\n  addObject: function(obj) {\n    if (!this.contains(obj))
        this.pushObject(obj);\n    return this ;\n  }\n\n});\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\nvar get = Ember.get,\n
        \   set = Ember.set,\n    slice = Array.prototype.slice,\n    getProperties
        = Ember.getProperties;\n\n/**\n  ## Overview\n\n  This mixin provides properties
        and property observing functionality, core\n  features of the Ember object
        model.\n\n  Properties and observers allow one object to observe changes to
        a\n  property on another object. This is one of the fundamental ways that\n
        \ models, controllers and views communicate with each other in an Ember\n
        \ application.\n\n  Any object that has this mixin applied can be used in
        observer\n  operations. That includes `Ember.Object` and most objects you
        will\n  interact with as you write your Ember application.\n\n  Note that
        you will not generally apply this mixin to classes yourself,\n  but you will
        use the features provided by this module frequently, so it\n  is important
        to understand how to use it.\n\n  ## Using `get()` and `set()`\n\n  Because
        of Ember's support for bindings and observers, you will always\n  access properties
        using the get method, and set properties using the\n  set method. This allows
        the observing objects to be notified and\n  computed properties to be handled
        properly.\n\n  More documentation about `get` and `set` are below.\n\n  ##
        Observing Property Changes\n\n  You typically observe property changes simply
        by adding the `observes`\n  call to the end of your method declarations in
        classes that you write.\n  For example:\n\n  ```javascript\n  Ember.Object.extend({\n
        \   valueObserver: function() {\n      // Executes whenever the \"value\"
        property changes\n    }.observes('value')\n  });\n  ```\n\n  Although this
        is the most common way to add an observer, this capability\n  is actually
        built into the `Ember.Object` class on top of two methods\n  defined in this
        mixin: `addObserver` and `removeObserver`. You can use\n  these two methods
        to add and remove observers yourself if you need to\n  do so at runtime.\n\n
        \ To add an observer for a property, call:\n\n  ```javascript\n  object.addObserver('propertyKey',
        targetObject, targetAction)\n  ```\n\n  This will call the `targetAction`
        method on the `targetObject` whenever\n  the value of the `propertyKey` changes.\n\n
        \ Note that if `propertyKey` is a computed property, the observer will be\n
        \ called when any of the property dependencies are changed, even if the\n
        \ resulting value of the computed property is unchanged. This is necessary\n
        \ because computed properties are not computed until `get` is called.\n\n
        \ @class Observable\n  @namespace Ember\n*/\nEmber.Observable = Ember.Mixin.create({\n\n
        \ /**\n    Retrieves the value of a property from the object.\n\n    This
        method is usually similar to using `object[keyName]` or `object.keyName`,\n
        \   however it supports both computed properties and the unknownProperty\n
        \   handler.\n\n    Because `get` unifies the syntax for accessing all these
        kinds\n    of properties, it can make many refactorings easier, such as replacing
        a\n    simple property with a computed property, or vice versa.\n\n    ###
        Computed Properties\n\n    Computed properties are methods defined with the
        `property` modifier\n    declared at the end, such as:\n\n    ```javascript\n
        \   fullName: function() {\n      return this.getEach('firstName', 'lastName').compact().join('
        ');\n    }.property('firstName', 'lastName')\n    ```\n\n    When you call
        `get` on a computed property, the function will be\n    called and the return
        value will be returned instead of the function\n    itself.\n\n    ### Unknown
        Properties\n\n    Likewise, if you try to call `get` on a property whose value
        is\n    `undefined`, the `unknownProperty()` method will be called on the
        object.\n    If this method returns any value other than `undefined`, it will
        be returned\n    instead. This allows you to implement \"virtual\" properties
        that are\n    not defined upfront.\n\n    @method get\n    @param {String}
        keyName The property to retrieve\n    @return {Object} The property value
        or undefined.\n  */\n  get: function(keyName) {\n    return get(this, keyName);\n
        \ },\n\n  /**\n    To get multiple properties at once, call `getProperties`\n
        \   with a list of strings or an array:\n\n    ```javascript\n    record.getProperties('firstName',
        'lastName', 'zipCode');  // { firstName: 'John', lastName: 'Doe', zipCode:
        '10011' }\n    ```\n\n    is equivalent to:\n\n    ```javascript\n    record.getProperties(['firstName',
        'lastName', 'zipCode']);  // { firstName: 'John', lastName: 'Doe', zipCode:
        '10011' }\n    ```\n\n    @method getProperties\n    @param {String...|Array}
        list of keys to get\n    @return {Hash}\n  */\n  getProperties: function()
        {\n    return getProperties.apply(null, [this].concat(slice.call(arguments)));\n
        \ },\n\n  /**\n    Sets the provided key or path to the value.\n\n    This
        method is generally very similar to calling `object[key] = value` or\n    `object.key
        = value`, except that it provides support for computed\n    properties, the
        `setUnknownProperty()` method and property observers.\n\n    ### Computed
        Properties\n\n    If you try to set a value on a key that has a computed property
        handler\n    defined (see the `get()` method for an example), then `set()`
        will call\n    that method, passing both the value and key instead of simply
        changing\n    the value itself. This is useful for those times when you need
        to\n    implement a property that is composed of one or more member\n    properties.\n\n
        \   ### Unknown Properties\n\n    If you try to set a value on a key that
        is undefined in the target\n    object, then the `setUnknownProperty()` handler
        will be called instead. This\n    gives you an opportunity to implement complex
        \"virtual\" properties that\n    are not predefined on the object. If `setUnknownProperty()`
        returns\n    undefined, then `set()` will simply set the value on the object.\n\n
        \   ### Property Observers\n\n    In addition to changing the property, `set()`
        will also register a property\n    change with the object. Unless you have
        placed this call inside of a\n    `beginPropertyChanges()` and `endPropertyChanges(),`
        any \"local\" observers\n    (i.e. observer methods declared on the same object),
        will be called\n    immediately. Any \"remote\" observers (i.e. observer methods
        declared on\n    another object) will be placed in a queue and called at a
        later time in a\n    coalesced manner.\n\n    ### Chaining\n\n    In addition
        to property changes, `set()` returns the value of the object\n    itself so
        you can do chaining like this:\n\n    ```javascript\n    record.set('firstName',
        'Charles').set('lastName', 'Jolley');\n    ```\n\n    @method set\n    @param
        {String} keyName The property to set\n    @param {Object} value The value
        to set or `null`.\n    @return {Ember.Observable}\n  */\n  set: function(keyName,
        value) {\n    set(this, keyName, value);\n    return this;\n  },\n\n  /**\n
        \   To set multiple properties at once, call `setProperties`\n    with a Hash:\n\n
        \   ```javascript\n    record.setProperties({ firstName: 'Charles', lastName:
        'Jolley' });\n    ```\n\n    @method setProperties\n    @param {Hash} hash
        the hash of keys and values to set\n    @return {Ember.Observable}\n  */\n
        \ setProperties: function(hash) {\n    return Ember.setProperties(this, hash);\n
        \ },\n\n  /**\n    Begins a grouping of property changes.\n\n    You can use
        this method to group property changes so that notifications\n    will not
        be sent until the changes are finished. If you plan to make a\n    large number
        of changes to an object at one time, you should call this\n    method at the
        beginning of the changes to begin deferring change\n    notifications. When
        you are done making changes, call\n    `endPropertyChanges()` to deliver the
        deferred change notifications and end\n    deferring.\n\n    @method beginPropertyChanges\n
        \   @return {Ember.Observable}\n  */\n  beginPropertyChanges: function() {\n
        \   Ember.beginPropertyChanges();\n    return this;\n  },\n\n  /**\n    Ends
        a grouping of property changes.\n\n    You can use this method to group property
        changes so that notifications\n    will not be sent until the changes are
        finished. If you plan to make a\n    large number of changes to an object
        at one time, you should call\n    `beginPropertyChanges()` at the beginning
        of the changes to defer change\n    notifications. When you are done making
        changes, call this method to\n    deliver the deferred change notifications
        and end deferring.\n\n    @method endPropertyChanges\n    @return {Ember.Observable}\n
        \ */\n  endPropertyChanges: function() {\n    Ember.endPropertyChanges();\n
        \   return this;\n  },\n\n  /**\n    Notify the observer system that a property
        is about to change.\n\n    Sometimes you need to change a value directly or
        indirectly without\n    actually calling `get()` or `set()` on it. In this
        case, you can use this\n    method and `propertyDidChange()` instead. Calling
        these two methods\n    together will notify all observers that the property
        has potentially\n    changed value.\n\n    Note that you must always call
        `propertyWillChange` and `propertyDidChange`\n    as a pair. If you do not,
        it may get the property change groups out of\n    order and cause notifications
        to be delivered more often than you would\n    like.\n\n    @method propertyWillChange\n
        \   @param {String} keyName The property key that is about to change.\n    @return
        {Ember.Observable}\n  */\n  propertyWillChange: function(keyName) {\n    Ember.propertyWillChange(this,
        keyName);\n    return this;\n  },\n\n  /**\n    Notify the observer system
        that a property has just changed.\n\n    Sometimes you need to change a value
        directly or indirectly without\n    actually calling `get()` or `set()` on
        it. In this case, you can use this\n    method and `propertyWillChange()`
        instead. Calling these two methods\n    together will notify all observers
        that the property has potentially\n    changed value.\n\n    Note that you
        must always call `propertyWillChange` and `propertyDidChange`\n    as a pair.
        If you do not, it may get the property change groups out of\n    order and
        cause notifications to be delivered more often than you would\n    like.\n\n
        \   @method propertyDidChange\n    @param {String} keyName The property key
        that has just changed.\n    @return {Ember.Observable}\n  */\n  propertyDidChange:
        function(keyName) {\n    Ember.propertyDidChange(this, keyName);\n    return
        this;\n  },\n\n  /**\n    Convenience method to call `propertyWillChange`
        and `propertyDidChange` in\n    succession.\n\n    @method notifyPropertyChange\n
        \   @param {String} keyName The property key to be notified about.\n    @return
        {Ember.Observable}\n  */\n  notifyPropertyChange: function(keyName) {\n    this.propertyWillChange(keyName);\n
        \   this.propertyDidChange(keyName);\n    return this;\n  },\n\n  addBeforeObserver:
        function(key, target, method) {\n    Ember.addBeforeObserver(this, key, target,
        method);\n  },\n\n  /**\n    Adds an observer on a property.\n\n    This is
        the core method used to register an observer for a property.\n\n    Once you
        call this method, any time the key's value is set, your observer\n    will
        be notified. Note that the observers are triggered any time the\n    value
        is set, regardless of whether it has actually changed. Your\n    observer
        should be prepared to handle that.\n\n    You can also pass an optional context
        parameter to this method. The\n    context will be passed to your observer
        method whenever it is triggered.\n    Note that if you add the same target/method
        pair on a key multiple times\n    with different context parameters, your
        observer will only be called once\n    with the last context you passed.\n\n
        \   ### Observer Methods\n\n    Observer methods you pass should generally
        have the following signature if\n    you do not pass a `context` parameter:\n\n
        \   ```javascript\n    fooDidChange: function(sender, key, value, rev) { };\n
        \   ```\n\n    The sender is the object that changed. The key is the property
        that\n    changes. The value property is currently reserved and unused. The
        rev\n    is the last property revision of the object when it changed, which
        you can\n    use to detect if the key value has really changed or not.\n\n
        \   If you pass a `context` parameter, the context will be passed before the\n
        \   revision like so:\n\n    ```javascript\n    fooDidChange: function(sender,
        key, value, context, rev) { };\n    ```\n\n    Usually you will not need the
        value, context or revision parameters at\n    the end. In this case, it is
        common to write observer methods that take\n    only a sender and key value
        as parameters or, if you aren't interested in\n    any of these values, to
        write an observer that has no parameters at all.\n\n    @method addObserver\n
        \   @param {String} key The key to observer\n    @param {Object} target The
        target object to invoke\n    @param {String|Function} method The method to
        invoke.\n    @return {Ember.Object} self\n  */\n  addObserver: function(key,
        target, method) {\n    Ember.addObserver(this, key, target, method);\n  },\n\n
        \ /**\n    Remove an observer you have previously registered on this object.
        Pass\n    the same key, target, and method you passed to `addObserver()` and
        your\n    target will no longer receive notifications.\n\n    @method removeObserver\n
        \   @param {String} key The key to observer\n    @param {Object} target The
        target object to invoke\n    @param {String|Function} method The method to
        invoke.\n    @return {Ember.Observable} receiver\n  */\n  removeObserver:
        function(key, target, method) {\n    Ember.removeObserver(this, key, target,
        method);\n  },\n\n  /**\n    Returns `true` if the object currently has observers
        registered for a\n    particular key. You can use this method to potentially
        defer performing\n    an expensive action until someone begins observing a
        particular property\n    on the object.\n\n    @method hasObserverFor\n    @param
        {String} key Key to check\n    @return {Boolean}\n  */\n  hasObserverFor:
        function(key) {\n    return Ember.hasListeners(this, key+':change');\n  },\n\n
        \ /**\n    @deprecated\n    @method getPath\n    @param {String} path The
        property path to retrieve\n    @return {Object} The property value or undefined.\n
        \ */\n  getPath: function(path) {\n    Ember.deprecate(\"getPath is deprecated
        since get now supports paths\");\n    return this.get(path);\n  },\n\n  /**\n
        \   @deprecated\n    @method setPath\n    @param {String} path The path to
        the property that will be set\n    @param {Object} value The value to set
        or `null`.\n    @return {Ember.Observable}\n  */\n  setPath: function(path,
        value) {\n    Ember.deprecate(\"setPath is deprecated since set now supports
        paths\");\n    return this.set(path, value);\n  },\n\n  /**\n    Retrieves
        the value of a property, or a default value in the case that the\n    property
        returns `undefined`.\n\n    ```javascript\n    person.getWithDefault('lastName',
        'Doe');\n    ```\n\n    @method getWithDefault\n    @param {String} keyName
        The name of the property to retrieve\n    @param {Object} defaultValue The
        value to return if the property value is undefined\n    @return {Object} The
        property value or the defaultValue.\n  */\n  getWithDefault: function(keyName,
        defaultValue) {\n    return Ember.getWithDefault(this, keyName, defaultValue);\n
        \ },\n\n  /**\n    Set the value of a property to the current value plus some
        amount.\n\n    ```javascript\n    person.incrementProperty('age');\n    team.incrementProperty('score',
        2);\n    ```\n\n    @method incrementProperty\n    @param {String} keyName
        The name of the property to increment\n    @param {Number} increment The amount
        to increment by. Defaults to 1\n    @return {Number} The new property value\n
        \ */\n  incrementProperty: function(keyName, increment) {\n    if (Ember.isNone(increment))
        { increment = 1; }\n    Ember.assert(\"Must pass a numeric value to incrementProperty\",
        (!isNaN(parseFloat(increment)) && isFinite(increment)));\n    set(this, keyName,
        (get(this, keyName) || 0) + increment);\n    return get(this, keyName);\n
        \ },\n\n  /**\n    Set the value of a property to the current value minus
        some amount.\n\n    ```javascript\n    player.decrementProperty('lives');\n
        \   orc.decrementProperty('health', 5);\n    ```\n\n    @method decrementProperty\n
        \   @param {String} keyName The name of the property to decrement\n    @param
        {Number} decrement The amount to decrement by. Defaults to 1\n    @return
        {Number} The new property value\n  */\n  decrementProperty: function(keyName,
        decrement) {\n    if (Ember.isNone(decrement)) { decrement = 1; }\n    Ember.assert(\"Must
        pass a numeric value to decrementProperty\", (!isNaN(parseFloat(decrement))
        && isFinite(decrement)));\n    set(this, keyName, (get(this, keyName) || 0)
        - decrement);\n    return get(this, keyName);\n  },\n\n  /**\n    Set the
        value of a boolean property to the opposite of it's\n    current value.\n\n
        \   ```javascript\n    starship.toggleProperty('warpDriveEngaged');\n    ```\n\n
        \   @method toggleProperty\n    @param {String} keyName The name of the property
        to toggle\n    @return {Object} The new property value\n  */\n  toggleProperty:
        function(keyName) {\n    set(this, keyName, !get(this, keyName));\n    return
        get(this, keyName);\n  },\n\n  /**\n    Returns the cached value of a computed
        property, if it exists.\n    This allows you to inspect the value of a computed
        property\n    without accidentally invoking it if it is intended to be\n    generated
        lazily.\n\n    @method cacheFor\n    @param {String} keyName\n    @return
        {Object} The cached value of the computed property, if any\n  */\n  cacheFor:
        function(keyName) {\n    return Ember.cacheFor(this, keyName);\n  },\n\n  //
        intended for debugging purposes\n  observersForKey: function(keyName) {\n
        \   return Ember.observersFor(this, keyName);\n  }\n});\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\nvar get = Ember.get,
        set = Ember.set;\n\n/**\n`Ember.TargetActionSupport` is a mixin that can be
        included in a class\nto add a `triggerAction` method with semantics similar
        to the Handlebars\n`{{action}}` helper. In normal Ember usage, the `{{action}}`
        helper is\nusually the best choice. This mixin is most often useful when you
        are\ndoing more complex event handling in View objects.\n\nSee also `Ember.ViewTargetActionSupport`,
        which has\nview-aware defaults for target and actionContext.\n\n@class TargetActionSupport\n@namespace
        Ember\n@extends Ember.Mixin\n*/\nEmber.TargetActionSupport = Ember.Mixin.create({\n
        \ target: null,\n  action: null,\n  actionContext: null,\n\n  targetObject:
        Ember.computed(function() {\n    var target = get(this, 'target');\n\n    if
        (Ember.typeOf(target) === \"string\") {\n      var value = get(this, target);\n
        \     if (value === undefined) { value = get(Ember.lookup, target); }\n      return
        value;\n    } else {\n      return target;\n    }\n  }).property('target'),\n\n
        \ actionContextObject: Ember.computed(function() {\n    var actionContext
        = get(this, 'actionContext');\n\n    if (Ember.typeOf(actionContext) === \"string\")
        {\n      var value = get(this, actionContext);\n      if (value === undefined)
        { value = get(Ember.lookup, actionContext); }\n      return value;\n    }
        else {\n      return actionContext;\n    }\n  }).property('actionContext'),\n\n
        \ /**\n  Send an \"action\" with an \"actionContext\" to a \"target\". The
        action, actionContext\n  and target will be retrieved from properties of the
        object. For example:\n\n  ```javascript\n  App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport,
        {\n    target: Ember.computed.alias('controller'),\n    action: 'save',\n
        \   actionContext: Ember.computed.alias('context'),\n    click: function()
        {\n      this.triggerAction(); // Sends the `save` action, along with the
        current context\n                            // to the current controller\n
        \   }\n  });\n  ```\n\n  The `target`, `action`, and `actionContext` can be
        provided as properties of\n  an optional object argument to `triggerAction`
        as well.\n\n  ```javascript\n  App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport,
        {\n    click: function() {\n      this.triggerAction({\n        action: 'save',\n
        \       target: this.get('controller'),\n        actionContext: this.get('context'),\n
        \     }); // Sends the `save` action, along with the current context\n          //
        to the current controller\n    }\n  });\n  ```\n\n  The `actionContext` defaults
        to the object you mixing `TargetActionSupport` into.\n  But `target` and `action`
        must be specified either as properties or with the argument\n  to `triggerAction`,
        or a combination:\n\n  ```javascript\n  App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport,
        {\n    target: Ember.computed.alias('controller'),\n    click: function()
        {\n      this.triggerAction({\n        action: 'save'\n      }); // Sends
        the `save` action, along with a reference to `this`,\n          // to the
        current controller\n    }\n  });\n  ```\n\n  @method triggerAction\n  @param
        opts {Hash} (optional, with the optional keys action, target and/or actionContext)\n
        \ @return {Boolean} true if the action was sent successfully and did not return
        false\n  */\n  triggerAction: function(opts) {\n    opts = opts || {};\n    var
        action = opts.action || get(this, 'action'),\n        target = opts.target
        || get(this, 'targetObject'),\n        actionContext = opts.actionContext;\n\n
        \   function args(options, actionName) {\n      var ret = [];\n      if (actionName)
        { ret.push(actionName); }\n\n      return ret.concat(options);\n    }\n\n
        \   if (typeof actionContext === 'undefined') {\n      actionContext = get(this,
        'actionContextObject') || this;\n    }\n\n    if (target && action) {\n      var
        ret;\n\n      if (target.send) {\n        ret = target.send.apply(target,
        args(actionContext, action));\n      } else {\n        Ember.assert(\"The
        action '\" + action + \"' did not exist on \" + target, typeof target[action]
        === 'function');\n        ret = target[action].apply(target, args(actionContext));\n
        \     }\n\n      if (ret !== false) ret = true;\n\n      return ret;\n    }
        else {\n      return false;\n    }\n  }\n});\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-runtime\n*/\n\n/**\n  This mixin allows for Ember
        objects to subscribe to and emit events.\n\n  ```javascript\n  App.Person
        = Ember.Object.extend(Ember.Evented, {\n    greet: function() {\n      //
        ...\n      this.trigger('greet');\n    }\n  });\n\n  var person = App.Person.create();\n\n
        \ person.on('greet', function() {\n    console.log('Our person has greeted');\n
        \ });\n\n  person.greet();\n\n  // outputs: 'Our person has greeted'\n  ```\n\n
        \ You can also chain multiple event subscriptions:\n\n  ```javascript\n  person.on('greet',
        function() {\n    console.log('Our person has greeted');\n  }).one('greet',
        function() {\n    console.log('Offer one-time special');\n  }).off('event',
        this, forgetThis);\n  ```\n\n  @class Evented\n  @namespace Ember\n */\nEmber.Evented
        = Ember.Mixin.create({\n\n  /**\n   Subscribes to a named event with given
        function.\n\n   ```javascript\n   person.on('didLoad', function() {\n     //
        fired once the person has loaded\n   });\n   ```\n\n   An optional target
        can be passed in as the 2nd argument that will\n   be set as the \"this\"
        for the callback. This is a good way to give your\n   function access to the
        object triggering the event. When the target\n   parameter is used the callback
        becomes the third argument.\n\n   @method on\n   @param {String} name The
        name of the event\n   @param {Object} [target] The \"this\" binding for the
        callback\n   @param {Function} method The callback to execute\n   @return
        this\n  */\n  on: function(name, target, method) {\n    Ember.addListener(this,
        name, target, method);\n    return this;\n  },\n\n  /**\n    Subscribes a
        function to a named event and then cancels the subscription\n    after the
        first time the event is triggered. It is good to use ``one`` when\n    you
        only care about the first time an event has taken place.\n\n    This function
        takes an optional 2nd argument that will become the \"this\"\n    value for
        the callback. If this argument is passed then the 3rd argument\n    becomes
        the function.\n\n    @method one\n    @param {String} name The name of the
        event\n    @param {Object} [target] The \"this\" binding for the callback\n
        \   @param {Function} method The callback to execute\n    @return this\n  */\n
        \ one: function(name, target, method) {\n    if (!method) {\n      method
        = target;\n      target = null;\n    }\n\n    Ember.addListener(this, name,
        target, method, true);\n    return this;\n  },\n\n  /**\n    Triggers a named
        event for the object. Any additional arguments\n    will be passed as parameters
        to the functions that are subscribed to the\n    event.\n\n    ```javascript\n
        \   person.on('didEat', function(food) {\n      console.log('person ate some
        ' + food);\n    });\n\n    person.trigger('didEat', 'broccoli');\n\n    //
        outputs: person ate some broccoli\n    ```\n    @method trigger\n    @param
        {String} name The name of the event\n    @param {Object...} args Optional
        arguments to pass on\n  */\n  trigger: function(name) {\n    var args = [],
        i, l;\n    for (i = 1, l = arguments.length; i < l; i++) {\n      args.push(arguments[i]);\n
        \   }\n    Ember.sendEvent(this, name, args);\n  },\n\n  /**\n    Cancels
        subscription for given name, target, and method.\n\n    @method off\n    @param
        {String} name The name of the event\n    @param {Object} target The target
        of the subscription\n    @param {Function} method The function of the subscription\n
        \   @return this\n  */\n  off: function(name, target, method) {\n    Ember.removeListener(this,
        name, target, method);\n    return this;\n  },\n\n  /**\n    Checks to see
        if object has any subscriptions for named event.\n\n    @method has\n    @param
        {String} name The name of the event\n    @return {Boolean} does the object
        have a subscription for event\n   */\n  has: function(name) {\n    return
        Ember.hasListeners(this, name);\n  }\n});\n\n})();\n\n\n\n(function() {\nvar
        RSVP = requireModule(\"rsvp\");\n\nRSVP.configure('async', function(callback,
        promise) {\n  Ember.run.schedule('actions', promise, callback, promise);\n});\n\n/**\n@module
        ember\n@submodule ember-runtime\n*/\n\nvar get = Ember.get;\n\n/**\n  @class
        Deferred\n  @namespace Ember\n */\nEmber.DeferredMixin = Ember.Mixin.create({\n
        \ /**\n    Add handlers to be called when the Deferred object is resolved
        or rejected.\n\n    @method then\n    @param {Function} resolve a callback
        function to be called when done\n    @param {Function} reject  a callback
        function to be called when failed\n  */\n  then: function(resolve, reject)
        {\n    var deferred, promise, entity;\n\n    entity = this;\n    deferred
        = get(this, '_deferred');\n    promise = deferred.promise;\n\n    function
        fulfillmentHandler(fulfillment) {\n      if (fulfillment === promise) {\n
        \       return resolve(entity);\n      } else {\n        return resolve(fulfillment);\n
        \     }\n    }\n\n    return promise.then(resolve && fulfillmentHandler, reject);\n
        \ },\n\n  /**\n    Resolve a Deferred object and call any `doneCallbacks`
        with the given args.\n\n    @method resolve\n  */\n  resolve: function(value)
        {\n    var deferred, promise;\n\n    deferred = get(this, '_deferred');\n
        \   promise = deferred.promise;\n\n    if (value === this) {\n      deferred.resolve(promise);\n
        \   } else {\n      deferred.resolve(value);\n    }\n  },\n\n  /**\n    Reject
        a Deferred object and call any `failCallbacks` with the given args.\n\n    @method
        reject\n  */\n  reject: function(value) {\n    get(this, '_deferred').reject(value);\n
        \ },\n\n  _deferred: Ember.computed(function() {\n    return RSVP.defer();\n
        \ })\n});\n\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule
        ember-runtime\n*/\n\nvar get = Ember.get;\n\n/**\n  The `Ember.ActionHandler`
        mixin implements support for moving an `actions`\n  property to an `_actions`
        property at extend time, and adding `_actions`\n  to the object's mergedProperties
        list.\n\n  `Ember.ActionHandler` is used internally by Ember in  `Ember.View`,\n
        \ `Ember.Controller`, and `Ember.Route`.\n\n  @class ActionHandler\n  @namespace
        Ember\n*/\nEmber.ActionHandler = Ember.Mixin.create({\n  mergedProperties:
        ['_actions'],\n\n  /**\n    @private\n\n    Moves `actions` to `_actions`
        at extend time. Note that this currently\n    modifies the mixin themselves,
        which is technically dubious but\n    is practically of little consequence.
        This may change in the future.\n\n    @method willMergeMixin\n  */\n  willMergeMixin:
        function(props) {\n    if (props.actions && !props._actions) {\n      props._actions
        = Ember.merge(props._actions || {}, props.actions);\n      delete props.actions;\n
        \   }\n  },\n\n  send: function(actionName) {\n    var args = [].slice.call(arguments,
        1), target;\n\n    if (this._actions && this._actions[actionName]) {\n      if
        (this._actions[actionName].apply(this, args) === true) {\n        // handler
        returned true, so this action will bubble\n      } else {\n        return;\n
        \     }\n    } else if (this.deprecatedSend && this.deprecatedSendHandles
        && this.deprecatedSendHandles(actionName)) {\n      if (this.deprecatedSend.apply(this,
        [].slice.call(arguments)) === true) {\n        // handler return true, so
        this action will bubble\n      } else {\n        return;\n      }\n    }\n\n
        \   if (target = get(this, 'target')) {\n      Ember.assert(\"The `target`
        for \" + this + \" (\" + target + \") does not have a `send` method\", typeof
        target.send === 'function');\n      target.send.apply(target, arguments);\n
        \   }\n  }\n\n});\n\n})();\n\n\n\n(function() {\nvar set = Ember.set, get
        = Ember.get,\n    resolve = Ember.RSVP.resolve,\n    rethrow = Ember.RSVP.rethrow,\n
        \   not = Ember.computed.not,\n    or = Ember.computed.or;\n\n/**\n  @module
        ember\n  @submodule ember-runtime\n */\n\nfunction installPromise(proxy, promise)
        {\n  promise.then(function(value) {\n    set(proxy, 'isFulfilled', true);\n
        \   set(proxy, 'content', value);\n\n    return value;\n  }, function(reason)
        {\n    set(proxy, 'isRejected', true);\n    set(proxy, 'reason', reason);\n
        \ }).fail(rethrow);\n}\n\n/**\n  A low level mixin making ObjectProxy, ObjectController
        or ArrayController's promise aware.\n\n  ```javascript\n  var ObjectPromiseController
        = Ember.ObjectController.extend(Ember.PromiseProxyMixin);\n\n  var controller
        = ObjectPromiseController.create({\n    promise: $.getJSON('/some/remote/data.json')\n
        \ });\n\n  controller.then(function(json){\n     // the json\n  }, function(reason)
        {\n     // the reason why you have no json\n  });\n  ```\n\n  the controller
        has bindable attributes which\n  track the promises life cycle\n\n  ```javascript\n
        \ controller.get('isPending')   //=> true\n  controller.get('isSettled')  //=>
        false\n  controller.get('isRejected')  //=> false\n  controller.get('isFulfilled')
        //=> false\n  ```\n\n  When the the $.getJSON completes, and the promise is
        fulfilled\n  with json, the life cycle attributes will update accordingly.\n\n
        \ ```javascript\n  controller.get('isPending')   //=> false\n  controller.get('isSettled')
        \  //=> true\n  controller.get('isRejected')  //=> false\n  controller.get('isFulfilled')
        //=> true\n  ```\n\n  As the controller is an ObjectController, and the json
        now its content,\n  all the json properties will be available directly from
        the controller.\n\n  ```javascript\n  // Assuming the following json:\n  {\n
        \   firstName: 'Stefan',\n    lastName: 'Penner'\n  }\n\n  // both properties
        will accessible on the controller\n  controller.get('firstName') //=> 'Stefan'\n
        \ controller.get('lastName')  //=> 'Penner'\n  ```\n\n  If the controller
        is backing a template, the attributes are \n  bindable from within that template\n\n
        \ ```handlebars\n  {{#if isPending}}\n    loading...\n  {{else}}\n    firstName:
        {{firstName}}\n    lastName: {{lastName}}\n  {{/if}}\n  ```\n  @class Ember.PromiseProxyMixin\n*/\nEmber.PromiseProxyMixin
        = Ember.Mixin.create({\n  reason:    null,\n  isPending:  not('isSettled').readOnly(),\n
        \ isSettled:  or('isRejected', 'isFulfilled').readOnly(),\n  isRejected:  false,\n
        \ isFulfilled: false,\n\n  promise: Ember.computed(function(key, promise)
        {\n    if (arguments.length === 2) {\n      promise = resolve(promise);\n
        \     installPromise(this, promise);\n      return promise;\n    } else {\n
        \     throw new Ember.Error(\"PromiseProxy's promise must be set\");\n    }\n
        \ }),\n\n  then: function(fulfill, reject) {\n    return get(this, 'promise').then(fulfill,
        reject);\n  }\n});\n\n\n})();\n\n\n\n(function() {\n\n})();\n\n\n\n(function()
        {\nvar get = Ember.get,\n    forEach = Ember.EnumerableUtils.forEach,\n    RETAIN
        = 'r',\n    INSERT = 'i',\n    DELETE = 'd';\n\n/**\n  An `Ember.TrackedArray`
        tracks array operations.  It's useful when you want to\n  lazily compute the
        indexes of items in an array after they've been shifted by\n  subsequent operations.\n\n
        \ @class TrackedArray\n  @namespace Ember\n  @param {array} [items=[]] The
        array to be tracked.  This is used just to get\n  the initial items for the
        starting state of retain:n.\n*/\nEmber.TrackedArray = function (items) {\n
        \ if (arguments.length < 1) { items = []; }\n\n  var length = get(items, 'length');\n\n
        \ if (length) {\n    this._operations = [new ArrayOperation(RETAIN, length,
        items)];\n  } else {\n    this._operations = [];\n  }\n};\n\nEmber.TrackedArray.RETAIN
        = RETAIN;\nEmber.TrackedArray.INSERT = INSERT;\nEmber.TrackedArray.DELETE
        = DELETE;\n\nEmber.TrackedArray.prototype = {\n\n  /**\n    Track that `newItems`
        were added to the tracked array at `index`.\n\n    @method addItems\n    @param
        index\n    @param newItems\n  */\n  addItems: function (index, newItems) {\n
        \   var count = get(newItems, 'length');\n    if (count < 1) { return; }\n\n
        \   var match = this._findArrayOperation(index),\n        arrayOperation =
        match.operation,\n        arrayOperationIndex = match.index,\n        arrayOperationRangeStart
        = match.rangeStart,\n        composeIndex,\n        splitIndex,\n        splitItems,\n
        \       splitArrayOperation,\n        newArrayOperation;\n\n    newArrayOperation
        = new ArrayOperation(INSERT, count, newItems);\n\n    if (arrayOperation)
        {\n      if (!match.split) {\n        // insert left of arrayOperation\n        this._operations.splice(arrayOperationIndex,
        0, newArrayOperation);\n        composeIndex = arrayOperationIndex;\n      }
        else {\n        this._split(arrayOperationIndex, index - arrayOperationRangeStart,
        newArrayOperation);\n        composeIndex = arrayOperationIndex + 1;\n      }\n
        \   } else {\n      // insert at end\n      this._operations.push(newArrayOperation);\n
        \     composeIndex = arrayOperationIndex;\n    }\n\n    this._composeInsert(composeIndex);\n
        \ },\n\n  /**\n    Track that `count` items were removed at `index`.\n\n    @method
        removeItems\n    @param index\n    @param count\n  */\n  removeItems: function
        (index, count) {\n    if (count < 1) { return; }\n\n    var match = this._findArrayOperation(index),\n
        \       arrayOperation = match.operation,\n        arrayOperationIndex = match.index,\n
        \       arrayOperationRangeStart = match.rangeStart,\n        newArrayOperation,\n
        \       composeIndex;\n\n    newArrayOperation = new ArrayOperation(DELETE,
        count);\n    if (!match.split) {\n      // insert left of arrayOperation\n
        \     this._operations.splice(arrayOperationIndex, 0, newArrayOperation);\n
        \     composeIndex = arrayOperationIndex;\n    } else {\n      this._split(arrayOperationIndex,
        index - arrayOperationRangeStart, newArrayOperation);\n      composeIndex
        = arrayOperationIndex + 1;\n    }\n\n    return this._composeDelete(composeIndex);\n
        \ },\n\n  /**\n    Apply all operations, reducing them to retain:n, for `n`,
        the number of\n    items in the array.\n\n    `callback` will be called for
        each operation and will be passed the following arguments:\n      * {array}
        items The items for the given operation\n      * {number} offset The computed
        offset of the items, ie the index in the\n      array of the first item for
        this operation.\n      * {string} operation The type of the operation.  One
        of\n      `Ember.TrackedArray.{RETAIN, DELETE, INSERT}`\n\n    @method apply\n
        \   @param {function} callback\n  */\n  apply: function (callback) {\n    var
        items = [],\n        offset = 0;\n\n    forEach(this._operations, function
        (arrayOperation) {\n      callback(arrayOperation.items, offset, arrayOperation.type);\n\n
        \     if (arrayOperation.type !== DELETE) {\n        offset += arrayOperation.count;\n
        \       items = items.concat(arrayOperation.items);\n      }\n    });\n\n
        \   this._operations = [new ArrayOperation(RETAIN, items.length, items)];\n
        \ },\n\n  /**\n    Return an ArrayOperationMatch for the operation that contains
        the item at `index`.\n\n    @method _findArrayOperation\n\n    @param {number}
        index the index of the item whose operation information\n    should be returned.\n
        \   @private\n  */\n  _findArrayOperation: function (index) {\n    var arrayOperationIndex,\n
        \       len,\n        split = false,\n        arrayOperation,\n        arrayOperationRangeStart,\n
        \       arrayOperationRangeEnd;\n\n    // OPTIMIZE: we could search these
        faster if we kept a balanced tree.\n    // find leftmost arrayOperation to
        the right of `index`\n    for (arrayOperationIndex = arrayOperationRangeStart
        = 0, len = this._operations.length; arrayOperationIndex < len; ++arrayOperationIndex)
        {\n      arrayOperation = this._operations[arrayOperationIndex];\n\n      if
        (arrayOperation.type === DELETE) { continue; }\n\n      arrayOperationRangeEnd
        = arrayOperationRangeStart + arrayOperation.count - 1;\n\n      if (index
        === arrayOperationRangeStart) {\n        break;\n      } else if (index >
        arrayOperationRangeStart && index <= arrayOperationRangeEnd) {\n        split
        = true;\n        break;\n      } else {\n        arrayOperationRangeStart
        = arrayOperationRangeEnd + 1;\n      }\n    }\n\n    return new ArrayOperationMatch(arrayOperation,
        arrayOperationIndex, split, arrayOperationRangeStart);\n  },\n\n  _split:
        function (arrayOperationIndex, splitIndex, newArrayOperation) {\n    var arrayOperation
        = this._operations[arrayOperationIndex],\n        splitItems = arrayOperation.items.slice(splitIndex),\n
        \       splitArrayOperation = new ArrayOperation(arrayOperation.type, splitItems.length,
        splitItems);\n\n    // truncate LHS\n    arrayOperation.count = splitIndex;\n
        \   arrayOperation.items = arrayOperation.items.slice(0, splitIndex);\n\n
        \   this._operations.splice(arrayOperationIndex + 1, 0, newArrayOperation,
        splitArrayOperation);\n  },\n\n  // see SubArray for a better implementation.\n
        \ _composeInsert: function (index) {\n    var newArrayOperation = this._operations[index],\n
        \       leftArrayOperation = this._operations[index-1], // may be undefined\n
        \       rightArrayOperation = this._operations[index+1], // may be undefined\n
        \       leftOp = leftArrayOperation && leftArrayOperation.type,\n        rightOp
        = rightArrayOperation && rightArrayOperation.type;\n\n    if (leftOp === INSERT)
        {\n        // merge left\n        leftArrayOperation.count += newArrayOperation.count;\n
        \       leftArrayOperation.items = leftArrayOperation.items.concat(newArrayOperation.items);\n\n
        \     if (rightOp === INSERT) {\n        // also merge right (we have split
        an insert with an insert)\n        leftArrayOperation.count += rightArrayOperation.count;\n
        \       leftArrayOperation.items = leftArrayOperation.items.concat(rightArrayOperation.items);\n
        \       this._operations.splice(index, 2);\n      } else {\n        // only
        merge left\n        this._operations.splice(index, 1);\n      }\n    } else
        if (rightOp === INSERT) {\n      // merge right\n      newArrayOperation.count
        += rightArrayOperation.count;\n      newArrayOperation.items = newArrayOperation.items.concat(rightArrayOperation.items);\n
        \     this._operations.splice(index + 1, 1);\n    }\n  },\n\n  _composeDelete:
        function (index) {\n    var arrayOperation = this._operations[index],\n        deletesToGo
        = arrayOperation.count,\n        leftArrayOperation = this._operations[index-1],
        // may be undefined\n        leftOp = leftArrayOperation && leftArrayOperation.type,\n
        \       nextArrayOperation,\n        nextOp,\n        nextCount,\n        removeNewAndNextOp
        = false,\n        removedItems = [];\n\n    if (leftOp === DELETE) {\n      arrayOperation
        = leftArrayOperation;\n      index -= 1;\n    }\n\n    for (var i = index
        + 1; deletesToGo > 0; ++i) {\n      nextArrayOperation = this._operations[i];\n
        \     nextOp = nextArrayOperation.type;\n      nextCount = nextArrayOperation.count;\n\n
        \     if (nextOp === DELETE) {\n        arrayOperation.count += nextCount;\n
        \       continue;\n      }\n\n      if (nextCount > deletesToGo) {\n        //
        d:2 {r,i}:5  we reduce the retain or insert, but it stays\n        removedItems
        = removedItems.concat(nextArrayOperation.items.splice(0, deletesToGo));\n
        \       nextArrayOperation.count -= deletesToGo;\n\n        // In the case
        where we truncate the last arrayOperation, we don't need to\n        // remove
        it; also the deletesToGo reduction is not the entirety of\n        // nextCount\n
        \       i -= 1;\n        nextCount = deletesToGo;\n\n        deletesToGo =
        0;\n      } else {\n        if (nextCount === deletesToGo) {\n          //
        Handle edge case of d:2 i:2 in which case both operations go away\n          //
        during composition.\n          removeNewAndNextOp = true;\n        }\n        removedItems
        = removedItems.concat(nextArrayOperation.items);\n        deletesToGo -= nextCount;\n
        \     }\n\n      if (nextOp === INSERT) {\n        // d:2 i:3 will result
        in delete going away\n        arrayOperation.count -= nextCount;\n      }\n
        \   }\n\n    if (arrayOperation.count > 0) {\n      // compose our new delete
        with possibly several operations to the right of\n      // disparate types\n
        \     this._operations.splice(index+1, i-1-index);\n    } else {\n      //
        The delete operation can go away; it has merely reduced some other\n      //
        operation, as in d:3 i:4; it may also have eliminated that operation,\n      //
        as in d:3 i:3.\n      this._operations.splice(index, removeNewAndNextOp ?
        2 : 1);\n    }\n\n    return removedItems;\n  },\n\n  toString: function ()
        {\n    var str = \"\";\n    forEach(this._operations, function (operation)
        {\n      str += \" \" + operation.type + \":\" + operation.count;\n    });\n
        \   return str.substring(1);\n  }\n};\n\n/**\n  Internal data structure to
        represent an array operation.\n\n  @method ArrayOperation\n  @private\n  @property
        {string} type The type of the operation.  One of\n  `Ember.TrackedArray.{RETAIN,
        INSERT, DELETE}`\n  @property {number} count The number of items in this operation.\n
        \ @property {array} items The items of the operation, if included.  RETAIN
        and\n  INSERT include their items, DELETE does not.\n*/\nfunction ArrayOperation
        (operation, count, items) {\n  this.type = operation; // RETAIN | INSERT |
        DELETE\n  this.count = count;\n  this.items = items;\n}\n\n/**\n  Internal
        data structure used to include information when looking up operations\n  by
        item index.\n\n  @method ArrayOperationMatch\n  @private\n  @property {ArrayOperation}
        operation\n  @property {number} index The index of `operation` in the array
        of operations.\n  @property {boolean} split Whether or not the item index
        searched for would\n  require a split for a new operation type.\n  @property
        {number} rangeStart The index of the first item in the operation,\n  with
        respect to the tracked array.  The index of the last item can be computed\n
        \ from `rangeStart` and `operation.count`.\n*/\nfunction ArrayOperationMatch(operation,
        index, split, rangeStart) {\n  this.operation = operation;\n  this.index =
        index;\n  this.split = split;\n  this.rangeStart = rangeStart;\n}\n\n})();\n\n\n\n(function()
        {\nvar get = Ember.get,\n    forEach = Ember.EnumerableUtils.forEach,\n    RETAIN
        = 'r',\n    FILTER = 'f';\n\nfunction Operation (type, count) {\n  this.type
        = type;\n  this.count = count;\n}\n\n/**\n  An `Ember.SubArray` tracks an
        array in a way similar to, but more specialized\n  than, `Ember.TrackedArray`.
        \ It is useful for keeping track of the indexes of\n  items within a filtered
        array.\n\n  @class SubArray\n  @namespace Ember\n*/\nEmber.SubArray = function
        (length) {\n  if (arguments.length < 1) { length = 0; }\n\n  if (length >
        0) {\n    this._operations = [new Operation(RETAIN, length)];\n  } else {\n
        \   this._operations = [];\n  }\n};\n\nEmber.SubArray.prototype = {\n  /**\n
        \   Track that an item was added to the tracked array.\n\n    @method addItem\n\n
        \   @param {number} index The index of the item in the tracked array.\n    @param
        {boolean} match `true` iff the item is included in the subarray.\n\n    @return
        {number} The index of the item in the subarray.\n  */\n  addItem: function(index,
        match) {\n    var returnValue = -1,\n        itemType = match ? RETAIN : FILTER,\n
        \       self = this;\n\n    this._findOperation(index, function(operation,
        operationIndex, rangeStart, rangeEnd, seenInSubArray) {\n      var newOperation,
        splitOperation;\n\n      if (itemType === operation.type) {\n        ++operation.count;\n
        \     } else if (index === rangeStart) {\n        // insert to the left of
        `operation`\n        self._operations.splice(operationIndex, 0, new Operation(itemType,
        1));\n      } else {\n        newOperation = new Operation(itemType, 1);\n
        \       splitOperation = new Operation(operation.type, rangeEnd - index +
        1);\n        operation.count = index - rangeStart;\n\n        self._operations.splice(operationIndex
        + 1, 0, newOperation, splitOperation);\n      }\n\n      if (match) {\n        if
        (operation.type === RETAIN) {\n          returnValue = seenInSubArray + (index
        - rangeStart);\n        } else {\n          returnValue = seenInSubArray;\n
        \       }\n      }\n\n      self._composeAt(operationIndex);\n    }, function(seenInSubArray)
        {\n      self._operations.push(new Operation(itemType, 1));\n\n      if (match)
        {\n        returnValue = seenInSubArray;\n      }\n\n      self._composeAt(self._operations.length-1);\n
        \   });\n\n    return returnValue;\n  },\n\n  /**\n    Track that an item
        was removed from the tracked array.\n\n    @method removeItem\n\n    @param
        {number} index The index of the item in the tracked array.\n\n    @return
        {number} The index of the item in the subarray, or `-1` if the item\n    was
        not in the subarray.\n  */\n  removeItem: function(index) {\n    var returnValue
        = -1,\n        self = this;\n\n    this._findOperation(index, function (operation,
        operationIndex, rangeStart, rangeEnd, seenInSubArray) {\n      if (operation.type
        === RETAIN) {\n        returnValue = seenInSubArray + (index - rangeStart);\n
        \     }\n\n      if (operation.count > 1) {\n        --operation.count;\n
        \     } else {\n        self._operations.splice(operationIndex, 1);\n        self._composeAt(operationIndex);\n
        \     }\n    }, function() {\n      throw new Ember.Error(\"Can't remove an
        item that has never been added.\");\n    });\n\n    return returnValue;\n
        \ },\n\n\n  _findOperation: function (index, foundCallback, notFoundCallback)
        {\n    var operationIndex,\n        len,\n        operation,\n        rangeStart,\n
        \       rangeEnd,\n        seenInSubArray = 0;\n\n    // OPTIMIZE: change
        to balanced tree\n    // find leftmost operation to the right of `index`\n
        \   for (operationIndex = rangeStart = 0, len = this._operations.length; operationIndex
        < len; rangeStart = rangeEnd + 1, ++operationIndex) {\n      operation = this._operations[operationIndex];\n
        \     rangeEnd = rangeStart + operation.count - 1;\n\n      if (index >= rangeStart
        && index <= rangeEnd) {\n        foundCallback(operation, operationIndex,
        rangeStart, rangeEnd, seenInSubArray);\n        return;\n      } else if (operation.type
        === RETAIN) {\n        seenInSubArray += operation.count;\n      }\n    }\n\n
        \   notFoundCallback(seenInSubArray);\n  },\n\n  _composeAt: function(index)
        {\n    var op = this._operations[index],\n        otherOp;\n\n    if (!op)
        {\n      // Composing out of bounds is a no-op, as when removing the last
        operation\n      // in the list.\n      return;\n    }\n\n    if (index >
        0) {\n      otherOp = this._operations[index-1];\n      if (otherOp.type ===
        op.type) {\n        op.count += otherOp.count;\n        this._operations.splice(index-1,
        1);\n        --index;\n      }\n    }\n\n    if (index < this._operations.length-1)
        {\n      otherOp = this._operations[index+1];\n      if (otherOp.type ===
        op.type) {\n        op.count += otherOp.count;\n        this._operations.splice(index+1,
        1);\n      }\n    }\n  }\n};\n\n})();\n\n\n\n(function() {\nEmber.Container
        = requireModule('container');\nEmber.Container.set = Ember.set;\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\n\n// NOTE: this object
        should never be included directly. Instead use `Ember.Object`.\n// We only
        define this separately so that `Ember.Set` can depend on it.\n\n\nvar set
        = Ember.set, get = Ember.get,\n    o_create = Ember.create,\n    o_defineProperty
        = Ember.platform.defineProperty,\n    GUID_KEY = Ember.GUID_KEY,\n    guidFor
        = Ember.guidFor,\n    generateGuid = Ember.generateGuid,\n    meta = Ember.meta,\n
        \   rewatch = Ember.rewatch,\n    finishChains = Ember.finishChains,\n    sendEvent
        = Ember.sendEvent,\n    destroy = Ember.destroy,\n    schedule = Ember.run.schedule,\n
        \   Mixin = Ember.Mixin,\n    applyMixin = Mixin._apply,\n    finishPartial
        = Mixin.finishPartial,\n    reopen = Mixin.prototype.reopen,\n    MANDATORY_SETTER
        = Ember.ENV.MANDATORY_SETTER,\n    indexOf = Ember.EnumerableUtils.indexOf;\n\nvar
        undefinedDescriptor = {\n  configurable: true,\n  writable: true,\n  enumerable:
        false,\n  value: undefined\n};\n\nfunction makeCtor() {\n\n  // Note: avoid
        accessing any properties on the object since it makes the\n  // method a lot
        faster. This is glue code so we want it to be as fast as\n  // possible.\n\n
        \ var wasApplied = false, initMixins, initProperties;\n\n  var Class = function()
        {\n    if (!wasApplied) {\n      Class.proto(); // prepare prototype...\n
        \   }\n    o_defineProperty(this, GUID_KEY, undefinedDescriptor);\n    o_defineProperty(this,
        '_super', undefinedDescriptor);\n    var m = meta(this), proto = m.proto;\n
        \   m.proto = this;\n    if (initMixins) {\n      // capture locally so we
        can clear the closed over variable\n      var mixins = initMixins;\n      initMixins
        = null;\n      this.reopen.apply(this, mixins);\n    }\n    if (initProperties)
        {\n      // capture locally so we can clear the closed over variable\n      var
        props = initProperties;\n      initProperties = null;\n\n      var concatenatedProperties
        = this.concatenatedProperties;\n\n      for (var i = 0, l = props.length;
        i < l; i++) {\n        var properties = props[i];\n\n        Ember.assert(\"Ember.Object.create
        no longer supports mixing in other definitions, use createWithMixins instead.\",
        !(properties instanceof Ember.Mixin));\n\n        if (properties === null
        || typeof properties !== 'object') {\n          Ember.assert(\"Ember.Object.create
        only accepts objects.\");\n          continue;\n        }\n\n        var keyNames
        = Ember.keys(properties);\n        for (var j = 0, ll = keyNames.length; j
        < ll; j++) {\n          var keyName = keyNames[j];\n          if (!properties.hasOwnProperty(keyName))
        { continue; }\n\n          var value = properties[keyName],\n              IS_BINDING
        = Ember.IS_BINDING;\n\n          if (IS_BINDING.test(keyName)) {\n            var
        bindings = m.bindings;\n            if (!bindings) {\n              bindings
        = m.bindings = {};\n            } else if (!m.hasOwnProperty('bindings'))
        {\n              bindings = m.bindings = o_create(m.bindings);\n            }\n
        \           bindings[keyName] = value;\n          }\n\n          var desc
        = m.descs[keyName];\n\n          Ember.assert(\"Ember.Object.create no longer
        supports defining computed properties.\", !(value instanceof Ember.ComputedProperty));\n
        \         Ember.assert(\"Ember.Object.create no longer supports defining methods
        that call _super.\", !(typeof value === 'function' && value.toString().indexOf('._super')
        !== -1));\n          Ember.assert(\"`actions` must be provided at extend time,
        not at create time, when Ember.ActionHandler is used (i.e. views, controllers
        & routes).\", !((keyName === 'actions') && Ember.ActionHandler.detect(this)));\n\n
        \         if (concatenatedProperties && indexOf(concatenatedProperties, keyName)
        >= 0) {\n            var baseValue = this[keyName];\n\n            if (baseValue)
        {\n              if ('function' === typeof baseValue.concat) {\n                value
        = baseValue.concat(value);\n              } else {\n                value
        = Ember.makeArray(baseValue).concat(value);\n              }\n            }
        else {\n              value = Ember.makeArray(value);\n            }\n          }\n\n
        \         if (desc) {\n            desc.set(this, keyName, value);\n          }
        else {\n            if (typeof this.setUnknownProperty === 'function' && !(keyName
        in this)) {\n              this.setUnknownProperty(keyName, value);\n            }
        else if (MANDATORY_SETTER) {\n              Ember.defineProperty(this, keyName,
        null, value); // setup mandatory setter\n            } else {\n              this[keyName]
        = value;\n            }\n          }\n        }\n      }\n    }\n    finishPartial(this,
        m);\n    this.init.apply(this, arguments);\n    m.proto = proto;\n    finishChains(this);\n
        \   sendEvent(this, \"init\");\n  };\n\n  Class.toString = Mixin.prototype.toString;\n
        \ Class.willReopen = function() {\n    if (wasApplied) {\n      Class.PrototypeMixin
        = Mixin.create(Class.PrototypeMixin);\n    }\n\n    wasApplied = false;\n
        \ };\n  Class._initMixins = function(args) { initMixins = args; };\n  Class._initProperties
        = function(args) { initProperties = args; };\n\n  Class.proto = function()
        {\n    var superclass = Class.superclass;\n    if (superclass) { superclass.proto();
        }\n\n    if (!wasApplied) {\n      wasApplied = true;\n      Class.PrototypeMixin.applyPartial(Class.prototype);\n
        \     rewatch(Class.prototype);\n    }\n\n    return this.prototype;\n  };\n\n
        \ return Class;\n\n}\n\n/**\n  @class CoreObject\n  @namespace Ember\n*/\nvar
        CoreObject = makeCtor();\nCoreObject.toString = function() { return \"Ember.CoreObject\";
        };\n\nCoreObject.PrototypeMixin = Mixin.create({\n  reopen: function() {\n
        \   applyMixin(this, arguments, true);\n    return this;\n  },\n\n  /**\n
        \   An overridable method called when objects are instantiated. By default,\n
        \   does nothing unless it is overridden during class definition.\n\n    Example:\n\n
        \   ```javascript\n    App.Person = Ember.Object.extend({\n      init: function()
        {\n        this._super();\n        alert('Name is ' + this.get('name'));\n
        \     }\n    });\n\n    var steve = App.Person.create({\n      name: \"Steve\"\n
        \   });\n\n    // alerts 'Name is Steve'.\n    ```\n\n    NOTE: If you do
        override `init` for a framework class like `Ember.View` or\n    `Ember.ArrayController`,
        be sure to call `this._super()` in your\n    `init` declaration! If you don't,
        Ember may not have an opportunity to\n    do important setup work, and you'll
        see strange behavior in your\n    application.\n\n    @method init\n  */\n
        \ init: function() {},\n\n  /**\n    Defines the properties that will be concatenated
        from the superclass\n    (instead of overridden).\n\n    By default, when
        you extend an Ember class a property defined in\n    the subclass overrides
        a property with the same name that is defined\n    in the superclass. However,
        there are some cases where it is preferable\n    to build up a property's
        value by combining the superclass' property\n    value with the subclass'
        value. An example of this in use within Ember\n    is the `classNames` property
        of `Ember.View`.\n\n    Here is some sample code showing the difference between
        a concatenated\n    property and a normal one:\n\n    ```javascript\n    App.BarView
        = Ember.View.extend({\n      someNonConcatenatedProperty: ['bar'],\n      classNames:
        ['bar']\n    });\n\n    App.FooBarView = App.BarView.extend({\n      someNonConcatenatedProperty:
        ['foo'],\n      classNames: ['foo'],\n    });\n\n    var fooBarView = App.FooBarView.create();\n
        \   fooBarView.get('someNonConcatenatedProperty'); // ['foo']\n    fooBarView.get('classNames');
        // ['ember-view', 'bar', 'foo']\n    ```\n\n    This behavior extends to object
        creation as well. Continuing the\n    above example:\n\n    ```javascript\n
        \   var view = App.FooBarView.create({\n      someNonConcatenatedProperty:
        ['baz'],\n      classNames: ['baz']\n    })\n    view.get('someNonConcatenatedProperty');
        // ['baz']\n    view.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n
        \   ```\n    Adding a single property that is not an array will just add it
        in the array:\n\n    ```javascript\n    var view = App.FooBarView.create({\n
        \     classNames: 'baz'\n    })\n    view.get('classNames'); // ['ember-view',
        'bar', 'foo', 'baz']\n    ```\n\n    Using the `concatenatedProperties` property,
        we can tell to Ember that mix\n    the content of the properties.\n\n    In
        `Ember.View` the `classNameBindings` and `attributeBindings` properties\n
        \   are also concatenated, in addition to `classNames`.\n\n    This feature
        is available for you to use throughout the Ember object model,\n    although
        typical app developers are likely to use it infrequently. Since\n    it changes
        expectations about behavior of properties, you should properly\n    document
        its usage in each individual concatenated property (to not\n    mislead your
        users to think they can override the property in a subclass).\n\n    @property
        concatenatedProperties\n    @type Array\n    @default null\n  */\n  concatenatedProperties:
        null,\n\n  /**\n    Destroyed object property flag.\n\n    if this property
        is `true` the observers and bindings were already\n    removed by the effect
        of calling the `destroy()` method.\n\n    @property isDestroyed\n    @default
        false\n  */\n  isDestroyed: false,\n\n  /**\n    Destruction scheduled flag.
        The `destroy()` method has been called.\n\n    The object stays intact until
        the end of the run loop at which point\n    the `isDestroyed` flag is set.\n\n
        \   @property isDestroying\n    @default false\n  */\n  isDestroying: false,\n\n
        \ /**\n    Destroys an object by setting the `isDestroyed` flag and removing
        its\n    metadata, which effectively destroys observers and bindings.\n\n
        \   If you try to set a property on a destroyed object, an exception will
        be\n    raised.\n\n    Note that destruction is scheduled for the end of the
        run loop and does not\n    happen immediately.  It will set an isDestroying
        flag immediately.\n\n    @method destroy\n    @return {Ember.Object} receiver\n
        \ */\n  destroy: function() {\n    if (this.isDestroying) { return; }\n    this.isDestroying
        = true;\n\n    schedule('actions', this, this.willDestroy);\n    schedule('destroy',
        this, this._scheduledDestroy);\n    return this;\n  },\n\n  /**\n    Override
        to implement teardown.\n\n    @method willDestroy\n   */\n  willDestroy: Ember.K,\n\n
        \ /**\n    @private\n\n    Invoked by the run loop to actually destroy the
        object. This is\n    scheduled for execution by the `destroy` method.\n\n
        \   @method _scheduledDestroy\n  */\n  _scheduledDestroy: function() {\n    if
        (this.isDestroyed) { return; }\n    destroy(this);\n    this.isDestroyed =
        true;\n  },\n\n  bind: function(to, from) {\n    if (!(from instanceof Ember.Binding))
        { from = Ember.Binding.from(from); }\n    from.to(to).connect(this);\n    return
        from;\n  },\n\n  /**\n    Returns a string representation which attempts to
        provide more information\n    than Javascript's `toString` typically does,
        in a generic way for all Ember\n    objects.\n\n        App.Person = Em.Object.extend()\n
        \       person = App.Person.create()\n        person.toString() //=> \"<App.Person:ember1024>\"\n\n
        \   If the object's class is not defined on an Ember namespace, it will\n
        \   indicate it is a subclass of the registered superclass:\n\n        Student
        = App.Person.extend()\n        student = Student.create()\n        student.toString()
        //=> \"<(subclass of App.Person):ember1025>\"\n\n    If the method `toStringExtension`
        is defined, its return value will be\n    included in the output.\n\n        App.Teacher
        = App.Person.extend({\n          toStringExtension: function() {\n            return
        this.get('fullName');\n          }\n        });\n        teacher = App.Teacher.create()\n
        \       teacher.toString(); //=> \"<App.Teacher:ember1026:Tom Dale>\"\n\n
        \   @method toString\n    @return {String} string representation\n  */\n  toString:
        function toString() {\n    var hasToStringExtension = typeof this.toStringExtension
        === 'function',\n        extension = hasToStringExtension ? \":\" + this.toStringExtension()
        : '';\n    var ret = '<'+this.constructor.toString()+':'+guidFor(this)+extension+'>';\n
        \   this.toString = makeToString(ret);\n    return ret;\n  }\n});\n\nCoreObject.PrototypeMixin.ownerConstructor
        = CoreObject;\n\nfunction makeToString(ret) {\n  return function() { return
        ret; };\n}\n\nif (Ember.config.overridePrototypeMixin) {\n  Ember.config.overridePrototypeMixin(CoreObject.PrototypeMixin);\n}\n\nCoreObject.__super__
        = null;\n\nvar ClassMixin = Mixin.create({\n\n  ClassMixin: Ember.required(),\n\n
        \ PrototypeMixin: Ember.required(),\n\n  isClass: true,\n\n  isMethod: false,\n\n
        \ /**\n    Creates a new subclass.\n\n    ```javascript\n    App.Person =
        Ember.Object.extend({\n      say: function(thing) {\n        alert(thing);\n
        \      }\n    });\n    ```\n\n    This defines a new subclass of Ember.Object:
        `App.Person`. It contains one method: `say()`.\n\n    You can also create
        a subclass from any existing class by calling its `extend()`  method. For
        example, you might want to create a subclass of Ember's built-in `Ember.View`
        class:\n\n    ```javascript\n    App.PersonView = Ember.View.extend({\n      tagName:
        'li',\n      classNameBindings: ['isAdministrator']\n    });\n    ```\n\n
        \   When defining a subclass, you can override methods but still access the
        implementation of your parent class by calling the special `_super()` method:\n\n
        \   ```javascript\n    App.Person = Ember.Object.extend({\n      say: function(thing)
        {\n        var name = this.get('name');\n        alert(name + ' says: ' +
        thing);\n      }\n    });\n\n    App.Soldier = App.Person.extend({\n      say:
        function(thing) {\n        this._super(thing + \", sir!\");\n      },\n      march:
        function(numberOfHours) {\n        alert(this.get('name') + ' marches for
        ' + numberOfHours + ' hours.')\n      }\n    });\n\n    var yehuda = App.Soldier.create({\n
        \     name: \"Yehuda Katz\"\n    });\n\n    yehuda.say(\"Yes\");  // alerts
        \"Yehuda Katz says: Yes, sir!\"\n    ```\n\n    The `create()` on line #17
        creates an *instance* of the `App.Soldier` class. The `extend()` on line #8
        creates a *subclass* of `App.Person`. Any instance of the `App.Person` class
        will *not* have the `march()` method.\n\n    You can also pass `Ember.Mixin`
        classes to add additional properties to the subclass.\n\n    ```javascript\n
        \   App.Person = Ember.Object.extend({\n      say: function(thing) {\n        alert(this.get('name')
        + ' says: ' + thing);\n      }\n    });\n\n    App.SingingMixin = Ember.Mixin.create({\n
        \     sing: function(thing){\n        alert(this.get('name') + ' sings: la
        la la ' + thing);\n      }\n    });\n\n    App.BroadwayStar = App.Person.extend(App.SingingMixin,
        {\n      dance: function() {\n        alert(this.get('name') + ' dances: tap
        tap tap tap ');\n      }\n    });\n    ```\n\n    The `App.BroadwayStar` class
        contains three methods: `say()`, `sing()`, and `dance()`.\n\n    @method extend\n
        \   @static\n\n    @param {Ember.Mixin} [mixins]* One or more Ember.Mixin
        classes\n    @param {Object} [arguments]* Object containing values to use
        within the new class\n  */\n  extend: function() {\n    var Class = makeCtor(),
        proto;\n    Class.ClassMixin = Mixin.create(this.ClassMixin);\n    Class.PrototypeMixin
        = Mixin.create(this.PrototypeMixin);\n\n    Class.ClassMixin.ownerConstructor
        = Class;\n    Class.PrototypeMixin.ownerConstructor = Class;\n\n    reopen.apply(Class.PrototypeMixin,
        arguments);\n\n    Class.superclass = this;\n    Class.__super__  = this.prototype;\n\n
        \   proto = Class.prototype = o_create(this.prototype);\n    proto.constructor
        = Class;\n    generateGuid(proto, 'ember');\n    meta(proto).proto = proto;
        // this will disable observers on prototype\n\n    Class.ClassMixin.apply(Class);\n
        \   return Class;\n  },\n\n  /**\n    Equivalent to doing `extend(arguments).create()`.\n
        \   If possible use the normal `create` method instead.\n\n    @method createWithMixins\n
        \   @static\n    @param [arguments]*\n  */\n  createWithMixins: function()
        {\n    var C = this;\n    if (arguments.length>0) { this._initMixins(arguments);
        }\n    return new C();\n  },\n\n  /**\n    Creates an instance of a class.
        Accepts either no arguments, or an object\n    containing values to initialize
        the newly instantiated object with.\n\n    ```javascript\n    App.Person =
        Ember.Object.extend({\n      helloWorld: function() {\n        alert(\"Hi,
        my name is \" + this.get('name'));\n      }\n    });\n\n    var tom = App.Person.create({\n
        \     name: 'Tom Dale'\n    });\n\n    tom.helloWorld(); // alerts \"Hi, my
        name is Tom Dale\".\n    ```\n\n    `create` will call the `init` function
        if defined during\n    `Ember.AnyObject.extend`\n\n    If no arguments are
        passed to `create`, it will not set values to the new\n    instance during
        initialization:\n\n    ```javascript\n    var noName = App.Person.create();\n
        \   noName.helloWorld(); // alerts undefined\n    ```\n\n    NOTE: For performance
        reasons, you cannot declare methods or computed\n    properties during `create`.
        You should instead declare methods and computed\n    properties when using
        `extend` or use the `createWithMixins` shorthand.\n\n    @method create\n
        \   @static\n    @param [arguments]*\n  */\n  create: function() {\n    var
        C = this;\n    if (arguments.length>0) { this._initProperties(arguments);
        }\n    return new C();\n  },\n\n  /**\n\n    Augments a constructor's prototype
        with additional\n    properties and functions:\n\n    ```javascript\n    MyObject
        = Ember.Object.extend({\n      name: 'an object'\n    });\n\n    o = MyObject.create();\n
        \   o.get('name'); // 'an object'\n\n    MyObject.reopen({\n      say: function(msg){\n
        \       console.log(msg);\n      }\n    })\n\n    o2 = MyObject.create();\n
        \   o2.say(\"hello\"); // logs \"hello\"\n\n    o.say(\"goodbye\"); // logs
        \"goodbye\"\n    ```\n\n    To add functions and properties to the constructor
        itself,\n    see `reopenClass`\n\n    @method reopen\n  */\n  reopen: function()
        {\n    this.willReopen();\n    reopen.apply(this.PrototypeMixin, arguments);\n
        \   return this;\n  },\n\n  /**\n    Augments a constructor's own properties
        and functions:\n\n    ```javascript\n    MyObject = Ember.Object.extend({\n
        \     name: 'an object'\n    });\n\n\n    MyObject.reopenClass({\n      canBuild:
        false\n    });\n\n    MyObject.canBuild; // false\n    o = MyObject.create();\n
        \   ```\n\n    In other words, this creates static properties and functions
        for the class. These are only available on the class\n    and not on any instance
        of that class.\n\n    ```javascript\n    App.Person = Ember.Object.extend({\n
        \     name : \"\",\n      sayHello : function(){\n        alert(\"Hello. My
        name is \" + this.get('name'));\n      }\n    });\n\n    App.Person.reopenClass({\n
        \     species : \"Homo sapiens\",\n      createPerson: function(newPersonsName){\n
        \       return App.Person.create({\n          name:newPersonsName\n        });\n
        \     }\n    });\n\n    var tom = App.Person.create({\n      name : \"Tom
        Dale\"\n    });\n    var yehuda = App.Person.createPerson(\"Yehuda Katz\");\n\n
        \   tom.sayHello(); // \"Hello. My name is Tom Dale\"\n    yehuda.sayHello();
        // \"Hello. My name is Yehuda Katz\"\n    alert(App.Person.species); // \"Homo
        sapiens\"\n    ```\n\n    Note that `species` and `createPerson` are *not*
        valid on the `tom` and `yehuda`\n    variables. They are only valid on `App.Person`.\n\n
        \   To add functions and properties to instances of\n    a constructor by
        extending the constructor's prototype\n    see `reopen`\n\n    @method reopenClass\n
        \ */\n  reopenClass: function() {\n    reopen.apply(this.ClassMixin, arguments);\n
        \   applyMixin(this, arguments, false);\n    return this;\n  },\n\n  detect:
        function(obj) {\n    if ('function' !== typeof obj) { return false; }\n    while(obj)
        {\n      if (obj===this) { return true; }\n      obj = obj.superclass;\n    }\n
        \   return false;\n  },\n\n  detectInstance: function(obj) {\n    return obj
        instanceof this;\n  },\n\n  /**\n    In some cases, you may want to annotate
        computed properties with additional\n    metadata about how they function
        or what values they operate on. For\n    example, computed property functions
        may close over variables that are then\n    no longer available for introspection.\n\n
        \   You can pass a hash of these values to a computed property like this:\n\n
        \   ```javascript\n    person: function() {\n      var personId = this.get('personId');\n
        \     return App.Person.create({ id: personId });\n    }.property().meta({
        type: App.Person })\n    ```\n\n    Once you've done this, you can retrieve
        the values saved to the computed\n    property from your class like this:\n\n
        \   ```javascript\n    MyClass.metaForProperty('person');\n    ```\n\n    This
        will return the original hash that was passed to `meta()`.\n\n    @method
        metaForProperty\n    @param key {String} property name\n  */\n  metaForProperty:
        function(key) {\n    var desc = meta(this.proto(), false).descs[key];\n\n
        \   Ember.assert(\"metaForProperty() could not find a computed property with
        key '\"+key+\"'.\", !!desc && desc instanceof Ember.ComputedProperty);\n    return
        desc._meta || {};\n  },\n\n  /**\n    Iterate over each computed property
        for the class, passing its name\n    and any associated metadata (see `metaForProperty`)
        to the callback.\n\n    @method eachComputedProperty\n    @param {Function}
        callback\n    @param {Object} binding\n  */\n  eachComputedProperty: function(callback,
        binding) {\n    var proto = this.proto(),\n        descs = meta(proto).descs,\n
        \       empty = {},\n        property;\n\n    for (var name in descs) {\n
        \     property = descs[name];\n\n      if (property instanceof Ember.ComputedProperty)
        {\n        callback.call(binding || this, name, property._meta || empty);\n
        \     }\n    }\n  }\n\n});\n\nClassMixin.ownerConstructor = CoreObject;\n\nif
        (Ember.config.overrideClassMixin) {\n  Ember.config.overrideClassMixin(ClassMixin);\n}\n\nCoreObject.ClassMixin
        = ClassMixin;\nClassMixin.apply(CoreObject);\n\nEmber.CoreObject = CoreObject;\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\n/**\n  `Ember.Object`
        is the main base class for all Ember objects. It is a subclass\n  of `Ember.CoreObject`
        with the `Ember.Observable` mixin applied. For details,\n  see the documentation
        for each of these.\n\n  @class Object\n  @namespace Ember\n  @extends Ember.CoreObject\n
        \ @uses Ember.Observable\n*/\nEmber.Object = Ember.CoreObject.extend(Ember.Observable);\nEmber.Object.toString
        = function() { return \"Ember.Object\"; };\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-runtime\n*/\n\nvar get = Ember.get, indexOf = Ember.ArrayPolyfills.indexOf;\n\n/**\n
        \ A Namespace is an object usually used to contain other objects or methods\n
        \ such as an application or framework. Create a namespace anytime you want\n
        \ to define one of these new containers.\n\n  # Example Usage\n\n  ```javascript\n
        \ MyFramework = Ember.Namespace.create({\n    VERSION: '1.0.0'\n  });\n  ```\n\n
        \ @class Namespace\n  @namespace Ember\n  @extends Ember.Object\n*/\nvar Namespace
        = Ember.Namespace = Ember.Object.extend({\n  isNamespace: true,\n\n  init:
        function() {\n    Ember.Namespace.NAMESPACES.push(this);\n    Ember.Namespace.PROCESSED
        = false;\n  },\n\n  toString: function() {\n    var name = get(this, 'name');\n
        \   if (name) { return name; }\n\n    findNamespaces();\n    return this[Ember.GUID_KEY+'_name'];\n
        \ },\n\n  nameClasses: function() {\n    processNamespace([this.toString()],
        this, {});\n  },\n\n  destroy: function() {\n    var namespaces = Ember.Namespace.NAMESPACES;\n
        \   Ember.lookup[this.toString()] = undefined;\n    namespaces.splice(indexOf.call(namespaces,
        this), 1);\n    this._super();\n  }\n});\n\nNamespace.reopenClass({\n  NAMESPACES:
        [Ember],\n  NAMESPACES_BY_ID: {},\n  PROCESSED: false,\n  processAll: processAllNamespaces,\n
        \ byName: function(name) {\n    if (!Ember.BOOTED) {\n      processAllNamespaces();\n
        \   }\n\n    return NAMESPACES_BY_ID[name];\n  }\n});\n\nvar NAMESPACES_BY_ID
        = Namespace.NAMESPACES_BY_ID;\n\nvar hasOwnProp = ({}).hasOwnProperty,\n    guidFor
        = Ember.guidFor;\n\nfunction processNamespace(paths, root, seen) {\n  var
        idx = paths.length;\n\n  NAMESPACES_BY_ID[paths.join('.')] = root;\n\n  //
        Loop over all of the keys in the namespace, looking for classes\n  for(var
        key in root) {\n    if (!hasOwnProp.call(root, key)) { continue; }\n    var
        obj = root[key];\n\n    // If we are processing the `Ember` namespace, for
        example, the\n    // `paths` will start with `[\"Ember\"]`. Every iteration
        through\n    // the loop will update the **second** element of this list with\n
        \   // the key, so processing `Ember.View` will make the Array\n    // `['Ember',
        'View']`.\n    paths[idx] = key;\n\n    // If we have found an unprocessed
        class\n    if (obj && obj.toString === classToString) {\n      // Replace
        the class' `toString` with the dot-separated path\n      // and set its `NAME_KEY`\n
        \     obj.toString = makeToString(paths.join('.'));\n      obj[NAME_KEY] =
        paths.join('.');\n\n    // Support nested namespaces\n    } else if (obj &&
        obj.isNamespace) {\n      // Skip aliased namespaces\n      if (seen[guidFor(obj)])
        { continue; }\n      seen[guidFor(obj)] = true;\n\n      // Process the child
        namespace\n      processNamespace(paths, obj, seen);\n    }\n  }\n\n  paths.length
        = idx; // cut out last item\n}\n\nfunction findNamespaces() {\n  var Namespace
        = Ember.Namespace, lookup = Ember.lookup, obj, isNamespace;\n\n  if (Namespace.PROCESSED)
        { return; }\n\n  for (var prop in lookup) {\n    // These don't raise exceptions
        but can cause warnings\n    if (prop === \"parent\" || prop === \"top\" ||
        prop === \"frameElement\" || prop === \"webkitStorageInfo\") { continue; }\n\n
        \   //  get(window.globalStorage, 'isNamespace') would try to read the storage
        for domain isNamespace and cause exception in Firefox.\n    // globalStorage
        is a storage obsoleted by the WhatWG storage specification. See https://developer.mozilla.org/en/DOM/Storage#globalStorage\n
        \   if (prop === \"globalStorage\" && lookup.StorageList && lookup.globalStorage
        instanceof lookup.StorageList) { continue; }\n    // Unfortunately, some versions
        of IE don't support window.hasOwnProperty\n    if (lookup.hasOwnProperty &&
        !lookup.hasOwnProperty(prop)) { continue; }\n\n    // At times we are not
        allowed to access certain properties for security reasons.\n    // There are
        also times where even if we can access them, we are not allowed to access
        their properties.\n    try {\n      obj = Ember.lookup[prop];\n      isNamespace
        = obj && obj.isNamespace;\n    } catch (e) {\n      continue;\n    }\n\n    if
        (isNamespace) {\n      Ember.deprecate(\"Namespaces should not begin with
        lowercase.\", /^[A-Z]/.test(prop));\n      obj[NAME_KEY] = prop;\n    }\n
        \ }\n}\n\nvar NAME_KEY = Ember.NAME_KEY = Ember.GUID_KEY + '_name';\n\nfunction
        superClassString(mixin) {\n  var superclass = mixin.superclass;\n  if (superclass)
        {\n    if (superclass[NAME_KEY]) { return superclass[NAME_KEY]; }\n    else
        { return superClassString(superclass); }\n  } else {\n    return;\n  }\n}\n\nfunction
        classToString() {\n  if (!Ember.BOOTED && !this[NAME_KEY]) {\n    processAllNamespaces();\n
        \ }\n\n  var ret;\n\n  if (this[NAME_KEY]) {\n    ret = this[NAME_KEY];\n
        \ } else if (this._toString) {\n    ret = this._toString; \n  } else {\n    var
        str = superClassString(this);\n    if (str) {\n      ret = \"(subclass of
        \" + str + \")\";\n    } else {\n      ret = \"(unknown mixin)\";\n    }\n
        \   this.toString = makeToString(ret);\n  }\n\n  return ret;\n}\n\nfunction
        processAllNamespaces() {\n  var unprocessedNamespaces = !Namespace.PROCESSED,\n
        \     unprocessedMixins = Ember.anyUnprocessedMixins;\n\n  if (unprocessedNamespaces)
        {\n    findNamespaces();\n    Namespace.PROCESSED = true;\n  }\n\n  if (unprocessedNamespaces
        || unprocessedMixins) {\n    var namespaces = Namespace.NAMESPACES, namespace;\n
        \   for (var i=0, l=namespaces.length; i<l; i++) {\n      namespace = namespaces[i];\n
        \     processNamespace([namespace.toString()], namespace, {});\n    }\n\n
        \   Ember.anyUnprocessedMixins = false;\n  }\n}\n\nfunction makeToString(ret)
        {\n  return function() { return ret; };\n}\n\nEmber.Mixin.prototype.toString
        = classToString;\n\n})();\n\n\n\n(function() {\nEmber.Application = Ember.Namespace.extend();\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\nvar OUT_OF_RANGE_EXCEPTION
        = \"Index out of range\";\nvar EMPTY = [];\n\nvar get = Ember.get, set = Ember.set;\n\n/**\n
        \ An ArrayProxy wraps any other object that implements `Ember.Array` and/or\n
        \ `Ember.MutableArray,` forwarding all requests. This makes it very useful
        for\n  a number of binding use cases or other cases where being able to swap\n
        \ out the underlying array is useful.\n\n  A simple example of usage:\n\n
        \ ```javascript\n  var pets = ['dog', 'cat', 'fish'];\n  var ap = Ember.ArrayProxy.create({
        content: Ember.A(pets) });\n\n  ap.get('firstObject');                        //
        'dog'\n  ap.set('content', ['amoeba', 'paramecium']);\n  ap.get('firstObject');
        \                       // 'amoeba'\n  ```\n\n  This class can also be useful
        as a layer to transform the contents of\n  an array, as they are accessed.
        This can be done by overriding\n  `objectAtContent`:\n\n  ```javascript\n
        \ var pets = ['dog', 'cat', 'fish'];\n  var ap = Ember.ArrayProxy.create({\n
        \     content: Ember.A(pets),\n      objectAtContent: function(idx) {\n          return
        this.get('content').objectAt(idx).toUpperCase();\n      }\n  });\n\n  ap.get('firstObject');
        // . 'DOG'\n  ```\n\n  @class ArrayProxy\n  @namespace Ember\n  @extends Ember.Object\n
        \ @uses Ember.MutableArray\n*/\nEmber.ArrayProxy = Ember.Object.extend(Ember.MutableArray,/**
        @scope Ember.ArrayProxy.prototype */ {\n\n  /**\n    The content array. Must
        be an object that implements `Ember.Array` and/or\n    `Ember.MutableArray.`\n\n
        \   @property content\n    @type Ember.Array\n  */\n  content: null,\n\n  /**\n
        \  The array that the proxy pretends to be. In the default `ArrayProxy`\n
        \  implementation, this and `content` are the same. Subclasses of `ArrayProxy`\n
        \  can override this property to provide things like sorting and filtering.\n\n
        \  @property arrangedContent\n  */\n  arrangedContent: Ember.computed.alias('content'),\n\n
        \ /**\n    Should actually retrieve the object at the specified index from
        the\n    content. You can override this method in subclasses to transform
        the\n    content item to something new.\n\n    This method will only be called
        if content is non-`null`.\n\n    @method objectAtContent\n    @param {Number}
        idx The index to retrieve.\n    @return {Object} the value or undefined if
        none found\n  */\n  objectAtContent: function(idx) {\n    return get(this,
        'arrangedContent').objectAt(idx);\n  },\n\n  /**\n    Should actually replace
        the specified objects on the content array.\n    You can override this method
        in subclasses to transform the content item\n    into something new.\n\n    This
        method will only be called if content is non-`null`.\n\n    @method replaceContent\n
        \   @param {Number} idx The starting index\n    @param {Number} amt The number
        of items to remove from the content.\n    @param {Array} objects Optional
        array of objects to insert or null if no\n      objects.\n    @return {void}\n
        \ */\n  replaceContent: function(idx, amt, objects) {\n    get(this, 'content').replace(idx,
        amt, objects);\n  },\n\n  /**\n    @private\n\n    Invoked when the content
        property is about to change. Notifies observers that the\n    entire array
        content will change.\n\n    @method _contentWillChange\n  */\n  _contentWillChange:
        Ember.beforeObserver(function() {\n    this._teardownContent();\n  }, 'content'),\n\n
        \ _teardownContent: function() {\n    var content = get(this, 'content');\n\n
        \   if (content) {\n      content.removeArrayObserver(this, {\n        willChange:
        'contentArrayWillChange',\n        didChange: 'contentArrayDidChange'\n      });\n
        \   }\n  },\n\n  contentArrayWillChange: Ember.K,\n  contentArrayDidChange:
        Ember.K,\n\n  /**\n    @private\n\n    Invoked when the content property changes.
        Notifies observers that the\n    entire array content has changed.\n\n    @method
        _contentDidChange\n  */\n  _contentDidChange: Ember.observer(function() {\n
        \   var content = get(this, 'content');\n\n    Ember.assert(\"Can't set ArrayProxy's
        content to itself\", content !== this);\n\n    this._setupContent();\n  },
        'content'),\n\n  _setupContent: function() {\n    var content = get(this,
        'content');\n\n    if (content) {\n      content.addArrayObserver(this, {\n
        \       willChange: 'contentArrayWillChange',\n        didChange: 'contentArrayDidChange'\n
        \     });\n    }\n  },\n\n  _arrangedContentWillChange: Ember.beforeObserver(function()
        {\n    var arrangedContent = get(this, 'arrangedContent'),\n        len =
        arrangedContent ? get(arrangedContent, 'length') : 0;\n\n    this.arrangedContentArrayWillChange(this,
        0, len, undefined);\n    this.arrangedContentWillChange(this);\n\n    this._teardownArrangedContent(arrangedContent);\n
        \ }, 'arrangedContent'),\n\n  _arrangedContentDidChange: Ember.observer(function()
        {\n    var arrangedContent = get(this, 'arrangedContent'),\n        len =
        arrangedContent ? get(arrangedContent, 'length') : 0;\n\n    Ember.assert(\"Can't
        set ArrayProxy's content to itself\", arrangedContent !== this);\n\n    this._setupArrangedContent();\n\n
        \   this.arrangedContentDidChange(this);\n    this.arrangedContentArrayDidChange(this,
        0, undefined, len);\n  }, 'arrangedContent'),\n\n  _setupArrangedContent:
        function() {\n    var arrangedContent = get(this, 'arrangedContent');\n\n
        \   if (arrangedContent) {\n      arrangedContent.addArrayObserver(this, {\n
        \       willChange: 'arrangedContentArrayWillChange',\n        didChange:
        'arrangedContentArrayDidChange'\n      });\n    }\n  },\n\n  _teardownArrangedContent:
        function() {\n    var arrangedContent = get(this, 'arrangedContent');\n\n
        \   if (arrangedContent) {\n      arrangedContent.removeArrayObserver(this,
        {\n        willChange: 'arrangedContentArrayWillChange',\n        didChange:
        'arrangedContentArrayDidChange'\n      });\n    }\n  },\n\n  arrangedContentWillChange:
        Ember.K,\n  arrangedContentDidChange: Ember.K,\n\n  objectAt: function(idx)
        {\n    return get(this, 'content') && this.objectAtContent(idx);\n  },\n\n
        \ length: Ember.computed(function() {\n    var arrangedContent = get(this,
        'arrangedContent');\n    return arrangedContent ? get(arrangedContent, 'length')
        : 0;\n    // No dependencies since Enumerable notifies length of change\n
        \ }),\n\n  _replace: function(idx, amt, objects) {\n    var content = get(this,
        'content');\n    Ember.assert('The content property of '+ this.constructor
        + ' should be set before modifying it', content);\n    if (content) this.replaceContent(idx,
        amt, objects);\n    return this;\n  },\n\n  replace: function() {\n    if
        (get(this, 'arrangedContent') === get(this, 'content')) {\n      this._replace.apply(this,
        arguments);\n    } else {\n      throw new Ember.Error(\"Using replace on
        an arranged ArrayProxy is not allowed.\");\n    }\n  },\n\n  _insertAt: function(idx,
        object) {\n    if (idx > get(this, 'content.length')) throw new Ember.Error(OUT_OF_RANGE_EXCEPTION);\n
        \   this._replace(idx, 0, [object]);\n    return this;\n  },\n\n  insertAt:
        function(idx, object) {\n    if (get(this, 'arrangedContent') === get(this,
        'content')) {\n      return this._insertAt(idx, object);\n    } else {\n      throw
        new Ember.Error(\"Using insertAt on an arranged ArrayProxy is not allowed.\");\n
        \   }\n  },\n\n  removeAt: function(start, len) {\n    if ('number' === typeof
        start) {\n      var content = get(this, 'content'),\n          arrangedContent
        = get(this, 'arrangedContent'),\n          indices = [], i;\n\n      if ((start
        < 0) || (start >= get(this, 'length'))) {\n        throw new Ember.Error(OUT_OF_RANGE_EXCEPTION);\n
        \     }\n\n      if (len === undefined) len = 1;\n\n      // Get a list of
        indices in original content to remove\n      for (i=start; i<start+len; i++)
        {\n        // Use arrangedContent here so we avoid confusion with objects
        transformed by objectAtContent\n        indices.push(content.indexOf(arrangedContent.objectAt(i)));\n
        \     }\n\n      // Replace in reverse order since indices will change\n      indices.sort(function(a,b)
        { return b - a; });\n\n      Ember.beginPropertyChanges();\n      for (i=0;
        i<indices.length; i++) {\n        this._replace(indices[i], 1, EMPTY);\n      }\n
        \     Ember.endPropertyChanges();\n    }\n\n    return this ;\n  },\n\n  pushObject:
        function(obj) {\n    this._insertAt(get(this, 'content.length'), obj) ;\n
        \   return obj ;\n  },\n\n  pushObjects: function(objects) {\n    if (!(Ember.Enumerable.detect(objects)
        || Ember.isArray(objects))) {\n      throw new TypeError(\"Must pass Ember.Enumerable
        to Ember.MutableArray#pushObjects\");\n    }\n    this._replace(get(this,
        'length'), 0, objects);\n    return this;\n  },\n\n  setObjects: function(objects)
        {\n    if (objects.length === 0) return this.clear();\n\n    var len = get(this,
        'length');\n    this._replace(0, len, objects);\n    return this;\n  },\n\n
        \ unshiftObject: function(obj) {\n    this._insertAt(0, obj) ;\n    return
        obj ;\n  },\n\n  unshiftObjects: function(objects) {\n    this._replace(0,
        0, objects);\n    return this;\n  },\n\n  slice: function() {\n    var arr
        = this.toArray();\n    return arr.slice.apply(arr, arguments);\n  },\n\n  arrangedContentArrayWillChange:
        function(item, idx, removedCnt, addedCnt) {\n    this.arrayContentWillChange(idx,
        removedCnt, addedCnt);\n  },\n\n  arrangedContentArrayDidChange: function(item,
        idx, removedCnt, addedCnt) {\n    this.arrayContentDidChange(idx, removedCnt,
        addedCnt);\n  },\n\n  init: function() {\n    this._super();\n    this._setupContent();\n
        \   this._setupArrangedContent();\n  },\n\n  willDestroy: function() {\n    this._teardownArrangedContent();\n
        \   this._teardownContent();\n  }\n});\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-runtime\n*/\n\nvar get = Ember.get,\n    set = Ember.set,\n
        \   fmt = Ember.String.fmt,\n    addBeforeObserver = Ember.addBeforeObserver,\n
        \   addObserver = Ember.addObserver,\n    removeBeforeObserver = Ember.removeBeforeObserver,\n
        \   removeObserver = Ember.removeObserver,\n    propertyWillChange = Ember.propertyWillChange,\n
        \   propertyDidChange = Ember.propertyDidChange,\n    meta = Ember.meta,\n
        \   defineProperty = Ember.defineProperty;\n\nfunction contentPropertyWillChange(content,
        contentKey) {\n  var key = contentKey.slice(8); // remove \"content.\"\n  if
        (key in this) { return; }  // if shadowed in proxy\n  propertyWillChange(this,
        key);\n}\n\nfunction contentPropertyDidChange(content, contentKey) {\n  var
        key = contentKey.slice(8); // remove \"content.\"\n  if (key in this) { return;
        } // if shadowed in proxy\n  propertyDidChange(this, key);\n}\n\n/**\n  `Ember.ObjectProxy`
        forwards all properties not defined by the proxy itself\n  to a proxied `content`
        object.\n\n  ```javascript\n  object = Ember.Object.create({\n    name: 'Foo'\n
        \ });\n\n  proxy = Ember.ObjectProxy.create({\n    content: object\n  });\n\n
        \ // Access and change existing properties\n  proxy.get('name')          //
        'Foo'\n  proxy.set('name', 'Bar');\n  object.get('name')         // 'Bar'\n\n
        \ // Create new 'description' property on `object`\n  proxy.set('description',
        'Foo is a whizboo baz');\n  object.get('description')  // 'Foo is a whizboo
        baz'\n  ```\n\n  While `content` is unset, setting a property to be delegated
        will throw an\n  Error.\n\n  ```javascript\n  proxy = Ember.ObjectProxy.create({\n
        \   content: null,\n    flag: null\n  });\n  proxy.set('flag', true);\n  proxy.get('flag');
        \        // true\n  proxy.get('foo');          // undefined\n  proxy.set('foo',
        'data');  // throws Error\n  ```\n\n  Delegated properties can be bound to
        and will change when content is updated.\n\n  Computed properties on the proxy
        itself can depend on delegated properties.\n\n  ```javascript\n  ProxyWithComputedProperty
        = Ember.ObjectProxy.extend({\n    fullName: function () {\n      var firstName
        = this.get('firstName'),\n          lastName = this.get('lastName');\n      if
        (firstName && lastName) {\n        return firstName + ' ' + lastName;\n      }\n
        \     return firstName || lastName;\n    }.property('firstName', 'lastName')\n
        \ });\n\n  proxy = ProxyWithComputedProperty.create();\n\n  proxy.get('fullName');
        \ // undefined\n  proxy.set('content', {\n    firstName: 'Tom', lastName:
        'Dale'\n  }); // triggers property change for fullName on proxy\n\n  proxy.get('fullName');
        \ // 'Tom Dale'\n  ```\n\n  @class ObjectProxy\n  @namespace Ember\n  @extends
        Ember.Object\n*/\nEmber.ObjectProxy = Ember.Object.extend(/** @scope Ember.ObjectProxy.prototype
        */ {\n  /**\n    The object whose properties will be forwarded.\n\n    @property
        content\n    @type Ember.Object\n    @default null\n  */\n  content: null,\n
        \ _contentDidChange: Ember.observer(function() {\n    Ember.assert(\"Can't
        set ObjectProxy's content to itself\", this.get('content') !== this);\n  },
        'content'),\n\n  isTruthy: Ember.computed.bool('content'),\n\n  _debugContainerKey:
        null,\n\n  willWatchProperty: function (key) {\n    var contentKey = 'content.'
        + key;\n    addBeforeObserver(this, contentKey, null, contentPropertyWillChange);\n
        \   addObserver(this, contentKey, null, contentPropertyDidChange);\n  },\n\n
        \ didUnwatchProperty: function (key) {\n    var contentKey = 'content.' +
        key;\n    removeBeforeObserver(this, contentKey, null, contentPropertyWillChange);\n
        \   removeObserver(this, contentKey, null, contentPropertyDidChange);\n  },\n\n
        \ unknownProperty: function (key) {\n    var content = get(this, 'content');\n
        \   if (content) {\n      return get(content, key);\n    }\n  },\n\n  setUnknownProperty:
        function (key, value) {\n    var m = meta(this);\n    if (m.proto === this)
        {\n      // if marked as prototype then just defineProperty\n      // rather
        than delegate\n      defineProperty(this, key, null, value);\n      return
        value;\n    }\n\n    var content = get(this, 'content');\n    Ember.assert(fmt(\"Cannot
        delegate set('%@', %@) to the 'content' property of object proxy %@: its 'content'
        is undefined.\", [key, value, this]), content);\n    return set(content, key,
        value);\n  }\n\n});\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule
        ember-runtime\n*/\n\n\nvar set = Ember.set, get = Ember.get, guidFor = Ember.guidFor;\nvar
        forEach = Ember.EnumerableUtils.forEach,\n    indexOf = Ember.ArrayPolyfills.indexOf;\n\nvar
        EachArray = Ember.Object.extend(Ember.Array, {\n\n  init: function(content,
        keyName, owner) {\n    this._super();\n    this._keyName = keyName;\n    this._owner
        \  = owner;\n    this._content = content;\n  },\n\n  objectAt: function(idx)
        {\n    var item = this._content.objectAt(idx);\n    return item && get(item,
        this._keyName);\n  },\n\n  length: Ember.computed(function() {\n    var content
        = this._content;\n    return content ? get(content, 'length') : 0;\n  })\n\n});\n\nvar
        IS_OBSERVER = /^.+:(before|change)$/;\n\nfunction addObserverForContentKey(content,
        keyName, proxy, idx, loc) {\n  var objects = proxy._objects, guid;\n  if (!objects)
        objects = proxy._objects = {};\n\n  while(--loc>=idx) {\n    var item = content.objectAt(loc);\n
        \   if (item) {\n      Ember.assert('When using @each to observe the array
        ' + content + ', the array must return an object', Ember.typeOf(item) ===
        'instance' || Ember.typeOf(item) === 'object');\n      Ember.addBeforeObserver(item,
        keyName, proxy, 'contentKeyWillChange');\n      Ember.addObserver(item, keyName,
        proxy, 'contentKeyDidChange');\n\n      // keep track of the index each item
        was found at so we can map\n      // it back when the obj changes.\n      guid
        = guidFor(item);\n      if (!objects[guid]) objects[guid] = [];\n      objects[guid].push(loc);\n
        \   }\n  }\n}\n\nfunction removeObserverForContentKey(content, keyName, proxy,
        idx, loc) {\n  var objects = proxy._objects;\n  if (!objects) objects = proxy._objects
        = {};\n  var indicies, guid;\n\n  while(--loc>=idx) {\n    var item = content.objectAt(loc);\n
        \   if (item) {\n      Ember.removeBeforeObserver(item, keyName, proxy, 'contentKeyWillChange');\n
        \     Ember.removeObserver(item, keyName, proxy, 'contentKeyDidChange');\n\n
        \     guid = guidFor(item);\n      indicies = objects[guid];\n      indicies[indexOf.call(indicies,
        loc)] = null;\n    }\n  }\n}\n\n/**\n  This is the object instance returned
        when you get the `@each` property on an\n  array. It uses the unknownProperty
        handler to automatically create\n  EachArray instances for property names.\n\n
        \ @private\n  @class EachProxy\n  @namespace Ember\n  @extends Ember.Object\n*/\nEmber.EachProxy
        = Ember.Object.extend({\n\n  init: function(content) {\n    this._super();\n
        \   this._content = content;\n    content.addArrayObserver(this);\n\n    //
        in case someone is already observing some keys make sure they are\n    //
        added\n    forEach(Ember.watchedEvents(this), function(eventName) {\n      this.didAddListener(eventName);\n
        \   }, this);\n  },\n\n  /**\n    You can directly access mapped properties
        by simply requesting them.\n    The `unknownProperty` handler will generate
        an EachArray of each item.\n\n    @method unknownProperty\n    @param keyName
        {String}\n    @param value {*}\n  */\n  unknownProperty: function(keyName,
        value) {\n    var ret;\n    ret = new EachArray(this._content, keyName, this);\n
        \   Ember.defineProperty(this, keyName, null, ret);\n    this.beginObservingContentKey(keyName);\n
        \   return ret;\n  },\n\n  // ..........................................................\n
        \ // ARRAY CHANGES\n  // Invokes whenever the content array itself changes.\n\n
        \ arrayWillChange: function(content, idx, removedCnt, addedCnt) {\n    var
        keys = this._keys, key, lim;\n\n    lim = removedCnt>0 ? idx+removedCnt :
        -1;\n    Ember.beginPropertyChanges(this);\n\n    for(key in keys) {\n      if
        (!keys.hasOwnProperty(key)) { continue; }\n\n      if (lim>0) { removeObserverForContentKey(content,
        key, this, idx, lim); }\n\n      Ember.propertyWillChange(this, key);\n    }\n\n
        \   Ember.propertyWillChange(this._content, '@each');\n    Ember.endPropertyChanges(this);\n
        \ },\n\n  arrayDidChange: function(content, idx, removedCnt, addedCnt) {\n
        \   var keys = this._keys, lim;\n\n    lim = addedCnt>0 ? idx+addedCnt : -1;\n
        \   Ember.changeProperties(function() {\n      for(var key in keys) {\n        if
        (!keys.hasOwnProperty(key)) { continue; }\n\n        if (lim>0) { addObserverForContentKey(content,
        key, this, idx, lim); }\n\n        Ember.propertyDidChange(this, key);\n      }\n\n
        \     Ember.propertyDidChange(this._content, '@each');\n    }, this);\n  },\n\n
        \ // ..........................................................\n  // LISTEN
        FOR NEW OBSERVERS AND OTHER EVENT LISTENERS\n  // Start monitoring keys based
        on who is listening...\n\n  didAddListener: function(eventName) {\n    if
        (IS_OBSERVER.test(eventName)) {\n      this.beginObservingContentKey(eventName.slice(0,
        -7));\n    }\n  },\n\n  didRemoveListener: function(eventName) {\n    if (IS_OBSERVER.test(eventName))
        {\n      this.stopObservingContentKey(eventName.slice(0, -7));\n    }\n  },\n\n
        \ // ..........................................................\n  // CONTENT
        KEY OBSERVING\n  // Actual watch keys on the source content.\n\n  beginObservingContentKey:
        function(keyName) {\n    var keys = this._keys;\n    if (!keys) keys = this._keys
        = {};\n    if (!keys[keyName]) {\n      keys[keyName] = 1;\n      var content
        = this._content,\n          len = get(content, 'length');\n      addObserverForContentKey(content,
        keyName, this, 0, len);\n    } else {\n      keys[keyName]++;\n    }\n  },\n\n
        \ stopObservingContentKey: function(keyName) {\n    var keys = this._keys;\n
        \   if (keys && (keys[keyName]>0) && (--keys[keyName]<=0)) {\n      var content
        = this._content,\n          len     = get(content, 'length');\n      removeObserverForContentKey(content,
        keyName, this, 0, len);\n    }\n  },\n\n  contentKeyWillChange: function(obj,
        keyName) {\n    Ember.propertyWillChange(this, keyName);\n  },\n\n  contentKeyDidChange:
        function(obj, keyName) {\n    Ember.propertyDidChange(this, keyName);\n  }\n\n});\n\n\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\n\nvar get = Ember.get,
        set = Ember.set, replace = Ember.EnumerableUtils._replace;\n\n// Add Ember.Array
        to Array.prototype. Remove methods with native\n// implementations and supply
        some more optimized versions of generic methods\n// because they are so common.\nvar
        NativeArray = Ember.Mixin.create(Ember.MutableArray, Ember.Observable, Ember.Copyable,
        {\n\n  // because length is a built-in property we need to know to just get
        the\n  // original property.\n  get: function(key) {\n    if (key==='length')
        return this.length;\n    else if ('number' === typeof key) return this[key];\n
        \   else return this._super(key);\n  },\n\n  objectAt: function(idx) {\n    return
        this[idx];\n  },\n\n  // primitive for array support.\n  replace: function(idx,
        amt, objects) {\n\n    if (this.isFrozen) throw Ember.FROZEN_ERROR;\n\n    //
        if we replaced exactly the same number of items, then pass only the\n    //
        replaced range. Otherwise, pass the full remaining array length\n    // since
        everything has shifted\n    var len = objects ? get(objects, 'length') : 0;\n
        \   this.arrayContentWillChange(idx, amt, len);\n\n    if (!objects || objects.length
        === 0) {\n      this.splice(idx, amt);\n    } else {\n      replace(this,
        idx, amt, objects);\n    }\n\n    this.arrayContentDidChange(idx, amt, len);\n
        \   return this;\n  },\n\n  // If you ask for an unknown property, then try
        to collect the value\n  // from member items.\n  unknownProperty: function(key,
        value) {\n    var ret;// = this.reducedProperty(key, value) ;\n    if ((value
        !== undefined) && ret === undefined) {\n      ret = this[key] = value;\n    }\n
        \   return ret ;\n  },\n\n  // If browser did not implement indexOf natively,
        then override with\n  // specialized version\n  indexOf: function(object,
        startAt) {\n    var idx, len = this.length;\n\n    if (startAt === undefined)
        startAt = 0;\n    else startAt = (startAt < 0) ? Math.ceil(startAt) : Math.floor(startAt);\n
        \   if (startAt < 0) startAt += len;\n\n    for(idx=startAt;idx<len;idx++)
        {\n      if (this[idx] === object) return idx ;\n    }\n    return -1;\n  },\n\n
        \ lastIndexOf: function(object, startAt) {\n    var idx, len = this.length;\n\n
        \   if (startAt === undefined) startAt = len-1;\n    else startAt = (startAt
        < 0) ? Math.ceil(startAt) : Math.floor(startAt);\n    if (startAt < 0) startAt
        += len;\n\n    for(idx=startAt;idx>=0;idx--) {\n      if (this[idx] === object)
        return idx ;\n    }\n    return -1;\n  },\n\n  copy: function(deep) {\n    if
        (deep) {\n      return this.map(function(item) { return Ember.copy(item, true);
        });\n    }\n\n    return this.slice();\n  }\n});\n\n// Remove any methods
        implemented natively so we don't override them\nvar ignore = ['length'];\nEmber.EnumerableUtils.forEach(NativeArray.keys(),
        function(methodName) {\n  if (Array.prototype[methodName]) ignore.push(methodName);\n});\n\nif
        (ignore.length>0) {\n  NativeArray = NativeArray.without.apply(NativeArray,
        ignore);\n}\n\n/**\n  The NativeArray mixin contains the properties needed
        to to make the native\n  Array support Ember.MutableArray and all of its dependent
        APIs. Unless you\n  have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array`
        set to\n  false, this will be applied automatically. Otherwise you can apply
        the mixin\n  at anytime by calling `Ember.NativeArray.activate`.\n\n  @class
        NativeArray\n  @namespace Ember\n  @uses Ember.MutableArray\n  @uses Ember.Observable\n
        \ @uses Ember.Copyable\n*/\nEmber.NativeArray = NativeArray;\n\n/**\n  Creates
        an `Ember.NativeArray` from an Array like object.\n  Does not modify the original
        object. Ember.A is not needed if\n  `Ember.EXTEND_PROTOTYPES` is `true` (the
        default value). However,\n  it is recommended that you use Ember.A when creating
        addons for\n  ember or when you can not garentee that `Ember.EXTEND_PROTOTYPES`\n
        \ will be `true`.\n\n  Example\n\n  ```js\n  var Pagination = Ember.CollectionView.extend({\n
        \   tagName: 'ul',\n    classNames: ['pagination'],\n    init: function()
        {\n      this._super();\n      if (!this.get('content')) {\n        this.set('content',
        Ember.A([]));\n      }\n    }\n  });\n  ```\n\n  @method A\n  @for Ember\n
        \ @return {Ember.NativeArray}\n*/\nEmber.A = function(arr) {\n  if (arr ===
        undefined) { arr = []; }\n  return Ember.Array.detect(arr) ? arr : Ember.NativeArray.apply(arr);\n};\n\n/**\n
        \ Activates the mixin on the Array.prototype if not already applied. Calling\n
        \ this method more than once is safe. This will be called when ember is loaded\n
        \ unless you have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array`\n
        \ set to `false`.\n\n  Example\n\n  ```js\n  if (Ember.EXTEND_PROTOTYPES ===
        true || Ember.EXTEND_PROTOTYPES.Array) {\n    Ember.NativeArray.activate();\n
        \ }\n  ```\n\n  @method activate\n  @for Ember.NativeArray\n  @static\n  @return
        {void}\n*/\nEmber.NativeArray.activate = function() {\n  NativeArray.apply(Array.prototype);\n\n
        \ Ember.A = function(arr) { return arr || []; };\n};\n\nif (Ember.EXTEND_PROTOTYPES
        === true || Ember.EXTEND_PROTOTYPES.Array) {\n  Ember.NativeArray.activate();\n}\n\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\nvar get = Ember.get,
        set = Ember.set, guidFor = Ember.guidFor, isNone = Ember.isNone, fmt = Ember.String.fmt;\n\n/**\n
        \ An unordered collection of objects.\n\n  A Set works a bit like an array
        except that its items are not ordered. You\n  can create a set to efficiently
        test for membership for an object. You can\n  also iterate through a set just
        like an array, even accessing objects by\n  index, however there is no guarantee
        as to their order.\n\n  All Sets are observable via the Enumerable Observer
        API - which works\n  on any enumerable object including both Sets and Arrays.\n\n
        \ ## Creating a Set\n\n  You can create a set like you would most objects
        using\n  `new Ember.Set()`. Most new sets you create will be empty, but you
        can\n  also initialize the set with some content by passing an array or other\n
        \ enumerable of objects to the constructor.\n\n  Finally, you can pass in
        an existing set and the set will be copied. You\n  can also create a copy
        of a set by calling `Ember.Set#copy()`.\n\n  ```javascript\n  // creates a
        new empty set\n  var foundNames = new Ember.Set();\n\n  // creates a set with
        four names in it.\n  var names = new Ember.Set([\"Charles\", \"Tom\", \"Juan\",
        \"Alex\"]); // :P\n\n  // creates a copy of the names set.\n  var namesCopy
        = new Ember.Set(names);\n\n  // same as above.\n  var anotherNamesCopy = names.copy();\n
        \ ```\n\n  ## Adding/Removing Objects\n\n  You generally add or remove objects
        from a set using `add()` or\n  `remove()`. You can add any type of object
        including primitives such as\n  numbers, strings, and booleans.\n\n  Unlike
        arrays, objects can only exist one time in a set. If you call `add()`\n  on
        a set with the same object multiple times, the object will only be added\n
        \ once. Likewise, calling `remove()` with the same object multiple times will\n
        \ remove the object the first time and have no effect on future calls until\n
        \ you add the object to the set again.\n\n  NOTE: You cannot add/remove `null`
        or `undefined` to a set. Any attempt to do\n  so will be ignored.\n\n  In
        addition to add/remove you can also call `push()`/`pop()`. Push behaves\n
        \ just like `add()` but `pop()`, unlike `remove()` will pick an arbitrary\n
        \ object, remove it and return it. This is a good way to use a set as a job\n
        \ queue when you don't care which order the jobs are executed in.\n\n  ##
        Testing for an Object\n\n  To test for an object's presence in a set you simply
        call\n  `Ember.Set#contains()`.\n\n  ## Observing changes\n\n  When using
        `Ember.Set`, you can observe the `\"[]\"` property to be\n  alerted whenever
        the content changes. You can also add an enumerable\n  observer to the set
        to be notified of specific objects that are added and\n  removed from the
        set. See [Ember.Enumerable](/api/classes/Ember.Enumerable.html)\n  for more
        information on enumerables.\n\n  This is often unhelpful. If you are filtering
        sets of objects, for instance,\n  it is very inefficient to re-filter all
        of the items each time the set\n  changes. It would be better if you could
        just adjust the filtered set based\n  on what was changed on the original
        set. The same issue applies to merging\n  sets, as well.\n\n  ## Other Methods\n\n
        \ `Ember.Set` primary implements other mixin APIs. For a complete reference\n
        \ on the methods you will use with `Ember.Set`, please consult these mixins.\n
        \ The most useful ones will be `Ember.Enumerable` and\n  `Ember.MutableEnumerable`
        which implement most of the common iterator\n  methods you are used to on
        Array.\n\n  Note that you can also use the `Ember.Copyable` and `Ember.Freezable`\n
        \ APIs on `Ember.Set` as well. Once a set is frozen it can no longer be\n
        \ modified. The benefit of this is that when you call `frozenCopy()` on it,\n
        \ Ember will avoid making copies of the set. This allows you to write\n  code
        that can know with certainty when the underlying set data will or\n  will
        not be modified.\n\n  @class Set\n  @namespace Ember\n  @extends Ember.CoreObject\n
        \ @uses Ember.MutableEnumerable\n  @uses Ember.Copyable\n  @uses Ember.Freezable\n
        \ @since Ember 0.9\n*/\nEmber.Set = Ember.CoreObject.extend(Ember.MutableEnumerable,
        Ember.Copyable, Ember.Freezable,\n  /** @scope Ember.Set.prototype */ {\n\n
        \ // ..........................................................\n  // IMPLEMENT
        ENUMERABLE APIS\n  //\n\n  /**\n    This property will change as the number
        of objects in the set changes.\n\n    @property length\n    @type number\n
        \   @default 0\n  */\n  length: 0,\n\n  /**\n    Clears the set. This is useful
        if you want to reuse an existing set\n    without having to recreate it.\n\n
        \   ```javascript\n    var colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\n
        \   colors.length;  // 3\n    colors.clear();\n    colors.length;  // 0\n
        \   ```\n\n    @method clear\n    @return {Ember.Set} An empty Set\n  */\n
        \ clear: function() {\n    if (this.isFrozen) { throw new Ember.Error(Ember.FROZEN_ERROR);
        }\n\n    var len = get(this, 'length');\n    if (len === 0) { return this;
        }\n\n    var guid;\n\n    this.enumerableContentWillChange(len, 0);\n    Ember.propertyWillChange(this,
        'firstObject');\n    Ember.propertyWillChange(this, 'lastObject');\n\n    for
        (var i=0; i < len; i++) {\n      guid = guidFor(this[i]);\n      delete this[guid];\n
        \     delete this[i];\n    }\n\n    set(this, 'length', 0);\n\n    Ember.propertyDidChange(this,
        'firstObject');\n    Ember.propertyDidChange(this, 'lastObject');\n    this.enumerableContentDidChange(len,
        0);\n\n    return this;\n  },\n\n  /**\n    Returns true if the passed object
        is also an enumerable that contains the\n    same objects as the receiver.\n\n
        \   ```javascript\n    var colors = [\"red\", \"green\", \"blue\"],\n        same_colors
        = new Ember.Set(colors);\n\n    same_colors.isEqual(colors);               //
        true\n    same_colors.isEqual([\"purple\", \"brown\"]);  // false\n    ```\n\n
        \   @method isEqual\n    @param {Ember.Set} obj the other object.\n    @return
        {Boolean}\n  */\n  isEqual: function(obj) {\n    // fail fast\n    if (!Ember.Enumerable.detect(obj))
        return false;\n\n    var loc = get(this, 'length');\n    if (get(obj, 'length')
        !== loc) return false;\n\n    while(--loc >= 0) {\n      if (!obj.contains(this[loc]))
        return false;\n    }\n\n    return true;\n  },\n\n  /**\n    Adds an object
        to the set. Only non-`null` objects can be added to a set\n    and those can
        only be added once. If the object is already in the set or\n    the passed
        value is null this method will have no effect.\n\n    This is an alias for
        `Ember.MutableEnumerable.addObject()`.\n\n    ```javascript\n    var colors
        = new Ember.Set();\n    colors.add(\"blue\");     // [\"blue\"]\n    colors.add(\"blue\");
        \    // [\"blue\"]\n    colors.add(\"red\");      // [\"blue\", \"red\"]\n
        \   colors.add(null);       // [\"blue\", \"red\"]\n    colors.add(undefined);
        \ // [\"blue\", \"red\"]\n    ```\n\n    @method add\n    @param {Object}
        obj The object to add.\n    @return {Ember.Set} The set itself.\n  */\n  add:
        Ember.aliasMethod('addObject'),\n\n  /**\n    Removes the object from the
        set if it is found. If you pass a `null` value\n    or an object that is already
        not in the set, this method will have no\n    effect. This is an alias for
        `Ember.MutableEnumerable.removeObject()`.\n\n    ```javascript\n    var colors
        = new Ember.Set([\"red\", \"green\", \"blue\"]);\n    colors.remove(\"red\");
        \    // [\"blue\", \"green\"]\n    colors.remove(\"purple\");  // [\"blue\",
        \"green\"]\n    colors.remove(null);      // [\"blue\", \"green\"]\n    ```\n\n
        \   @method remove\n    @param {Object} obj The object to remove\n    @return
        {Ember.Set} The set itself.\n  */\n  remove: Ember.aliasMethod('removeObject'),\n\n
        \ /**\n    Removes the last element from the set and returns it, or `null`
        if it's empty.\n\n    ```javascript\n    var colors = new Ember.Set([\"green\",
        \"blue\"]);\n    colors.pop();  // \"blue\"\n    colors.pop();  // \"green\"\n
        \   colors.pop();  // null\n    ```\n\n    @method pop\n    @return {Object}
        The removed object from the set or null.\n  */\n  pop: function() {\n    if
        (get(this, 'isFrozen')) throw new Ember.Error(Ember.FROZEN_ERROR);\n    var
        obj = this.length > 0 ? this[this.length-1] : null;\n    this.remove(obj);\n
        \   return obj;\n  },\n\n  /**\n    Inserts the given object on to the end
        of the set. It returns\n    the set itself.\n\n    This is an alias for `Ember.MutableEnumerable.addObject()`.\n\n
        \   ```javascript\n    var colors = new Ember.Set();\n    colors.push(\"red\");
        \  // [\"red\"]\n    colors.push(\"green\"); // [\"red\", \"green\"]\n    colors.push(\"blue\");
        \ // [\"red\", \"green\", \"blue\"]\n    ```\n\n    @method push\n    @return
        {Ember.Set} The set itself.\n  */\n  push: Ember.aliasMethod('addObject'),\n\n
        \ /**\n    Removes the last element from the set and returns it, or `null`
        if it's empty.\n\n    This is an alias for `Ember.Set.pop()`.\n\n    ```javascript\n
        \   var colors = new Ember.Set([\"green\", \"blue\"]);\n    colors.shift();
        \ // \"blue\"\n    colors.shift();  // \"green\"\n    colors.shift();  //
        null\n    ```\n\n    @method shift\n    @return {Object} The removed object
        from the set or null.\n  */\n  shift: Ember.aliasMethod('pop'),\n\n  /**\n
        \   Inserts the given object on to the end of the set. It returns\n    the
        set itself.\n\n    This is an alias of `Ember.Set.push()`\n\n    ```javascript\n
        \   var colors = new Ember.Set();\n    colors.unshift(\"red\");    // [\"red\"]\n
        \   colors.unshift(\"green\");  // [\"red\", \"green\"]\n    colors.unshift(\"blue\");
        \  // [\"red\", \"green\", \"blue\"]\n    ```\n\n    @method unshift\n    @return
        {Ember.Set} The set itself.\n  */\n  unshift: Ember.aliasMethod('push'),\n\n
        \ /**\n    Adds each object in the passed enumerable to the set.\n\n    This
        is an alias of `Ember.MutableEnumerable.addObjects()`\n\n    ```javascript\n
        \   var colors = new Ember.Set();\n    colors.addEach([\"red\", \"green\",
        \"blue\"]);  // [\"red\", \"green\", \"blue\"]\n    ```\n\n    @method addEach\n
        \   @param {Ember.Enumerable} objects the objects to add.\n    @return {Ember.Set}
        The set itself.\n  */\n  addEach: Ember.aliasMethod('addObjects'),\n\n  /**\n
        \   Removes each object in the passed enumerable to the set.\n\n    This is
        an alias of `Ember.MutableEnumerable.removeObjects()`\n\n    ```javascript\n
        \   var colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\n    colors.removeEach([\"red\",
        \"blue\"]);  //  [\"green\"]\n    ```\n\n    @method removeEach\n    @param
        {Ember.Enumerable} objects the objects to remove.\n    @return {Ember.Set}
        The set itself.\n  */\n  removeEach: Ember.aliasMethod('removeObjects'),\n\n
        \ // ..........................................................\n  // PRIVATE
        ENUMERABLE SUPPORT\n  //\n\n  init: function(items) {\n    this._super();\n
        \   if (items) this.addObjects(items);\n  },\n\n  // implement Ember.Enumerable\n
        \ nextObject: function(idx) {\n    return this[idx];\n  },\n\n  // more optimized
        version\n  firstObject: Ember.computed(function() {\n    return this.length
        > 0 ? this[0] : undefined;\n  }),\n\n  // more optimized version\n  lastObject:
        Ember.computed(function() {\n    return this.length > 0 ? this[this.length-1]
        : undefined;\n  }),\n\n  // implements Ember.MutableEnumerable\n  addObject:
        function(obj) {\n    if (get(this, 'isFrozen')) throw new Ember.Error(Ember.FROZEN_ERROR);\n
        \   if (isNone(obj)) return this; // nothing to do\n\n    var guid = guidFor(obj),\n
        \       idx  = this[guid],\n        len  = get(this, 'length'),\n        added
        ;\n\n    if (idx>=0 && idx<len && (this[idx] === obj)) return this; // added\n\n
        \   added = [obj];\n\n    this.enumerableContentWillChange(null, added);\n
        \   Ember.propertyWillChange(this, 'lastObject');\n\n    len = get(this, 'length');\n
        \   this[guid] = len;\n    this[len] = obj;\n    set(this, 'length', len+1);\n\n
        \   Ember.propertyDidChange(this, 'lastObject');\n    this.enumerableContentDidChange(null,
        added);\n\n    return this;\n  },\n\n  // implements Ember.MutableEnumerable\n
        \ removeObject: function(obj) {\n    if (get(this, 'isFrozen')) throw new
        Ember.Error(Ember.FROZEN_ERROR);\n    if (isNone(obj)) return this; // nothing
        to do\n\n    var guid = guidFor(obj),\n        idx  = this[guid],\n        len
        = get(this, 'length'),\n        isFirst = idx === 0,\n        isLast = idx
        === len-1,\n        last, removed;\n\n\n    if (idx>=0 && idx<len && (this[idx]
        === obj)) {\n      removed = [obj];\n\n      this.enumerableContentWillChange(removed,
        null);\n      if (isFirst) { Ember.propertyWillChange(this, 'firstObject');
        }\n      if (isLast)  { Ember.propertyWillChange(this, 'lastObject'); }\n\n
        \     // swap items - basically move the item to the end so it can be removed\n
        \     if (idx < len-1) {\n        last = this[len-1];\n        this[idx] =
        last;\n        this[guidFor(last)] = idx;\n      }\n\n      delete this[guid];\n
        \     delete this[len-1];\n      set(this, 'length', len-1);\n\n      if (isFirst)
        { Ember.propertyDidChange(this, 'firstObject'); }\n      if (isLast)  { Ember.propertyDidChange(this,
        'lastObject'); }\n      this.enumerableContentDidChange(removed, null);\n
        \   }\n\n    return this;\n  },\n\n  // optimized version\n  contains: function(obj)
        {\n    return this[guidFor(obj)]>=0;\n  },\n\n  copy: function() {\n    var
        C = this.constructor, ret = new C(), loc = get(this, 'length');\n    set(ret,
        'length', loc);\n    while(--loc>=0) {\n      ret[loc] = this[loc];\n      ret[guidFor(this[loc])]
        = loc;\n    }\n    return ret;\n  },\n\n  toString: function() {\n    var
        len = this.length, idx, array = [];\n    for(idx = 0; idx < len; idx++) {\n
        \     array[idx] = this[idx];\n    }\n    return fmt(\"Ember.Set<%@>\", [array.join(',')]);\n
        \ }\n\n});\n\n})();\n\n\n\n(function() {\nvar DeferredMixin = Ember.DeferredMixin,
        // mixins/deferred\n    get = Ember.get;\n\nvar Deferred = Ember.Object.extend(DeferredMixin);\n\nDeferred.reopenClass({\n
        \ promise: function(callback, binding) {\n    var deferred = Deferred.create();\n
        \   callback.call(binding, deferred);\n    return deferred;\n  }\n});\n\nEmber.Deferred
        = Deferred;\n\n})();\n\n\n\n(function() {\nvar forEach = Ember.ArrayPolyfills.forEach;\n\n/**\n@module
        ember\n@submodule ember-runtime\n*/\n\nvar loadHooks = Ember.ENV.EMBER_LOAD_HOOKS
        || {};\nvar loaded = {};\n\n/**\n\nDetects when a specific package of Ember
        (e.g. 'Ember.Handlebars')\nhas fully loaded and is available for extension.\n\nThe
        provided `callback` will be called with the `name` passed\nresolved from a
        string into the object:\n\n```javascript\nEmber.onLoad('Ember.Handlebars'
        function(hbars){\n  hbars.registerHelper(...);\n});\n```\n\n\n@method onLoad\n@for
        Ember\n@param name {String} name of hook\n@param callback {Function} callback
        to be called\n*/\nEmber.onLoad = function(name, callback) {\n  var object;\n\n
        \ loadHooks[name] = loadHooks[name] || Ember.A();\n  loadHooks[name].pushObject(callback);\n\n
        \ if (object = loaded[name]) {\n    callback(object);\n  }\n};\n\n/**\n\nCalled
        when an Ember.js package (e.g Ember.Handlebars) has finished\nloading. Triggers
        any callbacks registered for this event.\n\n@method runLoadHooks\n@for Ember\n@param
        name {String} name of hook\n@param object {Object} object to pass to callbacks\n*/\nEmber.runLoadHooks
        = function(name, object) {\n  loaded[name] = object;\n\n  if (loadHooks[name])
        {\n    forEach.call(loadHooks[name], function(callback) {\n      callback(object);\n
        \   });\n  }\n};\n\n})();\n\n\n\n(function() {\n\n})();\n\n\n\n(function()
        {\nvar get = Ember.get;\n\n/**\n@module ember\n@submodule ember-runtime\n*/\n\n/**\n
        \ `Ember.ControllerMixin` provides a standard interface for all classes that\n
        \ compose Ember's controller layer: `Ember.Controller`,\n  `Ember.ArrayController`,
        and `Ember.ObjectController`.\n\n  @class ControllerMixin\n  @namespace Ember\n*/\nEmber.ControllerMixin
        = Ember.Mixin.create(Ember.ActionHandler, {\n  /* ducktype as a controller
        */\n  isController: true,\n\n  /**\n    The object to which actions from the
        view should be sent.\n\n    For example, when a Handlebars template uses the
        `{{action}}` helper,\n    it will attempt to send the action to the view's
        controller's `target`.\n\n    By default, a controller's `target` is set to
        the router after it is\n    instantiated by `Ember.Application#initialize`.\n\n
        \   @property target\n    @default null\n  */\n  target: null,\n\n  container:
        null,\n\n  parentController: null,\n\n  store: null,\n\n  model: Ember.computed.alias('content'),\n\n
        \ deprecatedSendHandles: function(actionName) {\n    return !!this[actionName];\n
        \ },\n\n  deprecatedSend: function(actionName) {\n    var args = [].slice.call(arguments,
        1);\n    Ember.assert('' + this + \" has the action \" + actionName + \" but
        it is not a function\", typeof this[actionName] === 'function');\n    Ember.deprecate('Action
        handlers implemented directly on controllers are deprecated in favor of action
        handlers on an `actions` object (' + actionName + ' on ' + this + ')', false);\n
        \   this[actionName].apply(this, args);\n    return;\n  }\n});\n\n/**\n  @class
        Controller\n  @namespace Ember\n  @extends Ember.Object\n  @uses Ember.ControllerMixin\n*/\nEmber.Controller
        = Ember.Object.extend(Ember.ControllerMixin);\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\nvar get = Ember.get,
        set = Ember.set, forEach = Ember.EnumerableUtils.forEach;\n\n/**\n  `Ember.SortableMixin`
        provides a standard interface for array proxies\n  to specify a sort order
        and maintain this sorting when objects are added,\n  removed, or updated without
        changing the implicit order of their underlying\n  content array:\n\n  ```javascript\n
        \ songs = [\n    {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'},\n    {trackNumber:
        2, title: 'Back in the U.S.S.R.'},\n    {trackNumber: 3, title: 'Glass Onion'},\n
        \ ];\n\n  songsController = Ember.ArrayController.create({\n    content: songs,\n
        \   sortProperties: ['trackNumber'],\n    sortAscending: true\n  });\n\n  songsController.get('firstObject');
        \ // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\n  songsController.addObject({trackNumber:
        1, title: 'Dear Prudence'});\n  songsController.get('firstObject');  // {trackNumber:
        1, title: 'Dear Prudence'}\n  ```\n\n  If you add or remove the properties
        to sort by or change the sort direction the content\n  sort order will be
        automatically updated.\n\n  ```javascript\n  songsController.set('sortProperties',
        ['title']);\n  songsController.get('firstObject'); // {trackNumber: 2, title:
        'Back in the U.S.S.R.'}\n\n  songsController.toggleProperty('sortAscending');\n
        \ songsController.get('firstObject'); // {trackNumber: 4, title: 'Ob-La-Di,
        Ob-La-Da'}\n  ```\n\n  SortableMixin works by sorting the arrangedContent
        array, which is the array that\n  arrayProxy displays. Due to the fact that
        the underlying 'content' array is not changed, that\n  array will not display
        the sorted list:\n\n   ```javascript\n  songsController.get('content').get('firstObject');
        // Returns the unsorted original content\n  songsController.get('firstObject');
        // Returns the sorted content.\n  ``` \n  \n  Although the sorted content
        can also be accessed through the arrangedContent property,\n  it is preferable
        to use the proxied class and not the arrangedContent array directly.\n\n  @class
        SortableMixin\n  @namespace Ember\n  @uses Ember.MutableEnumerable\n*/\nEmber.SortableMixin
        = Ember.Mixin.create(Ember.MutableEnumerable, {\n\n  /**\n    Specifies which
        properties dictate the arrangedContent's sort order.\n\n    When specifying
        multiple properties the sorting will use properties\n    from the `sortProperties`
        array prioritized from first to last.\n\n    @property {Array} sortProperties\n
        \ */\n  sortProperties: null,\n\n  /**\n    Specifies the arrangedContent's
        sort direction\n\n    @property {Boolean} sortAscending\n  */\n  sortAscending:
        true,\n\n  /**\n    The function used to compare two values. You can override
        this if you\n    want to do custom comparisons. Functions must be of the type
        expected by\n    Array#sort, i.e.\n      return 0 if the two parameters are
        equal,\n      return a negative value if the first parameter is smaller than
        the second or\n      return a positive value otherwise:\n\n    ```javascript\n
        \   function(x,y) { // These are assumed to be integers\n      if (x === y)\n
        \       return 0;\n      return x < y ? -1 : 1;\n    }\n    ```\n\n    @property
        sortFunction\n    @type {Function}\n    @default Ember.compare\n  */\n  sortFunction:
        Ember.compare,\n\n  orderBy: function(item1, item2) {\n    var result = 0,\n
        \       sortProperties = get(this, 'sortProperties'),\n        sortAscending
        = get(this, 'sortAscending'),\n        sortFunction = get(this, 'sortFunction');\n\n
        \   Ember.assert(\"you need to define `sortProperties`\", !!sortProperties);\n\n
        \   forEach(sortProperties, function(propertyName) {\n      if (result ===
        0) {\n        result = sortFunction(get(item1, propertyName), get(item2, propertyName));\n
        \       if ((result !== 0) && !sortAscending) {\n          result = (-1) *
        result;\n        }\n      }\n    });\n\n    return result;\n  },\n\n  destroy:
        function() {\n    var content = get(this, 'content'),\n        sortProperties
        = get(this, 'sortProperties');\n\n    if (content && sortProperties) {\n      forEach(content,
        function(item) {\n        forEach(sortProperties, function(sortProperty) {\n
        \         Ember.removeObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');\n
        \       }, this);\n      }, this);\n    }\n\n    return this._super();\n  },\n\n
        \ isSorted: Ember.computed.bool('sortProperties'),\n\n  /**\n    Overrides
        the default arrangedContent from arrayProxy in order to sort by sortFunction.\n
        \   Also sets up observers for each sortProperty on each item in the content
        Array.\n    \n    @property arrangedContent\n  */\n\n  arrangedContent: Ember.computed('content',
        'sortProperties.@each', function(key, value) {\n    var content = get(this,
        'content'),\n        isSorted = get(this, 'isSorted'),\n        sortProperties
        = get(this, 'sortProperties'),\n        self = this;\n\n    if (content &&
        isSorted) {\n      content = content.slice();\n      content.sort(function(item1,
        item2) {\n        return self.orderBy(item1, item2);\n      });\n      forEach(content,
        function(item) {\n        forEach(sortProperties, function(sortProperty) {\n
        \         Ember.addObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');\n
        \       }, this);\n      }, this);\n      return Ember.A(content);\n    }\n\n
        \   return content;\n  }),\n\n  _contentWillChange: Ember.beforeObserver(function()
        {\n    var content = get(this, 'content'),\n        sortProperties = get(this,
        'sortProperties');\n\n    if (content && sortProperties) {\n      forEach(content,
        function(item) {\n        forEach(sortProperties, function(sortProperty) {\n
        \         Ember.removeObserver(item, sortProperty, this, 'contentItemSortPropertyDidChange');\n
        \       }, this);\n      }, this);\n    }\n\n    this._super();\n  }, 'content'),\n\n
        \ sortAscendingWillChange: Ember.beforeObserver(function() {\n    this._lastSortAscending
        = get(this, 'sortAscending');\n  }, 'sortAscending'),\n\n  sortAscendingDidChange:
        Ember.observer(function() {\n    if (get(this, 'sortAscending') !== this._lastSortAscending)
        {\n      var arrangedContent = get(this, 'arrangedContent');\n      arrangedContent.reverseObjects();\n
        \   }\n  }, 'sortAscending'),\n\n  contentArrayWillChange: function(array,
        idx, removedCount, addedCount) {\n    var isSorted = get(this, 'isSorted');\n\n
        \   if (isSorted) {\n      var arrangedContent = get(this, 'arrangedContent');\n
        \     var removedObjects = array.slice(idx, idx+removedCount);\n      var
        sortProperties = get(this, 'sortProperties');\n\n      forEach(removedObjects,
        function(item) {\n        arrangedContent.removeObject(item);\n\n        forEach(sortProperties,
        function(sortProperty) {\n          Ember.removeObserver(item, sortProperty,
        this, 'contentItemSortPropertyDidChange');\n        }, this);\n      }, this);\n
        \   }\n\n    return this._super(array, idx, removedCount, addedCount);\n  },\n\n
        \ contentArrayDidChange: function(array, idx, removedCount, addedCount) {\n
        \   var isSorted = get(this, 'isSorted'),\n        sortProperties = get(this,
        'sortProperties');\n\n    if (isSorted) {\n      var addedObjects = array.slice(idx,
        idx+addedCount);\n\n      forEach(addedObjects, function(item) {\n        this.insertItemSorted(item);\n\n
        \       forEach(sortProperties, function(sortProperty) {\n          Ember.addObserver(item,
        sortProperty, this, 'contentItemSortPropertyDidChange');\n        }, this);\n
        \     }, this);\n    }\n\n    return this._super(array, idx, removedCount,
        addedCount);\n  },\n\n  insertItemSorted: function(item) {\n    var arrangedContent
        = get(this, 'arrangedContent');\n    var length = get(arrangedContent, 'length');\n\n
        \   var idx = this._binarySearch(item, 0, length);\n    arrangedContent.insertAt(idx,
        item);\n  },\n\n  contentItemSortPropertyDidChange: function(item) {\n    var
        arrangedContent = get(this, 'arrangedContent'),\n        oldIndex = arrangedContent.indexOf(item),\n
        \       leftItem = arrangedContent.objectAt(oldIndex - 1),\n        rightItem
        = arrangedContent.objectAt(oldIndex + 1),\n        leftResult = leftItem &&
        this.orderBy(item, leftItem),\n        rightResult = rightItem && this.orderBy(item,
        rightItem);\n\n    if (leftResult < 0 || rightResult > 0) {\n      arrangedContent.removeObject(item);\n
        \     this.insertItemSorted(item);\n    }\n  },\n\n  _binarySearch: function(item,
        low, high) {\n    var mid, midItem, res, arrangedContent;\n\n    if (low ===
        high) {\n      return low;\n    }\n\n    arrangedContent = get(this, 'arrangedContent');\n\n
        \   mid = low + Math.floor((high - low) / 2);\n    midItem = arrangedContent.objectAt(mid);\n\n
        \   res = this.orderBy(midItem, item);\n\n    if (res < 0) {\n      return
        this._binarySearch(item, mid+1, high);\n    } else if (res > 0) {\n      return
        this._binarySearch(item, low, mid);\n    }\n\n    return mid;\n  }\n});\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\nvar get = Ember.get,
        set = Ember.set, forEach = Ember.EnumerableUtils.forEach,\n    replace = Ember.EnumerableUtils.replace;\n\n/**\n
        \ `Ember.ArrayController` provides a way for you to publish a collection of\n
        \ objects so that you can easily bind to the collection from a Handlebars\n
        \ `#each` helper, an `Ember.CollectionView`, or other controllers.\n\n  The
        advantage of using an `ArrayController` is that you only have to set up\n
        \ your view bindings once; to change what's displayed, simply swap out the\n
        \ `content` property on the controller.\n\n  For example, imagine you wanted
        to display a list of items fetched via an XHR\n  request. Create an `Ember.ArrayController`
        and set its `content` property:\n\n  ```javascript\n  MyApp.listController
        = Ember.ArrayController.create();\n\n  $.get('people.json', function(data)
        {\n    MyApp.listController.set('content', data);\n  });\n  ```\n\n  Then,
        create a view that binds to your new controller:\n\n  ```handlebars\n  {{#each
        MyApp.listController}}\n    {{firstName}} {{lastName}}\n  {{/each}}\n  ```\n\n
        \ Although you are binding to the controller, the behavior of this controller\n
        \ is to pass through any methods or properties to the underlying array. This\n
        \ capability comes from `Ember.ArrayProxy`, which this class inherits from.\n\n
        \ Sometimes you want to display computed properties within the body of an\n
        \ `#each` helper that depend on the underlying items in `content`, but are
        not\n  present on those items.   To do this, set `itemController` to the name
        of a\n  controller (probably an `ObjectController`) that will wrap each individual
        item.\n\n  For example:\n\n  ```handlebars\n    {{#each post in controller}}\n
        \     <li>{{title}} ({{titleLength}} characters)</li>\n    {{/each}}\n  ```\n\n
        \ ```javascript\n  App.PostsController = Ember.ArrayController.extend({\n
        \   itemController: 'post'\n  });\n\n  App.PostController = Ember.ObjectController.extend({\n
        \   // the `title` property will be proxied to the underlying post.\n\n    titleLength:
        function() {\n      return this.get('title').length;\n    }.property('title')\n
        \ });\n  ```\n\n  In some cases it is helpful to return a different `itemController`
        depending\n  on the particular item.  Subclasses can do this by overriding\n
        \ `lookupItemController`.\n\n  For example:\n\n  ```javascript\n  App.MyArrayController
        = Ember.ArrayController.extend({\n    lookupItemController: function( object
        ) {\n      if (object.get('isSpecial')) {\n        return \"special\"; //
        use App.SpecialController\n      } else {\n        return \"regular\"; //
        use App.RegularController\n      }\n    }\n  });\n  ```\n\n  The itemController
        instances will have a `parentController` property set to\n  either the the
        `parentController` property of the `ArrayController`\n  or to the `ArrayController`
        instance itself.\n\n  @class ArrayController\n  @namespace Ember\n  @extends
        Ember.ArrayProxy\n  @uses Ember.SortableMixin\n  @uses Ember.ControllerMixin\n*/\n\nEmber.ArrayController
        = Ember.ArrayProxy.extend(Ember.ControllerMixin,\n  Ember.SortableMixin, {\n\n
        \ /**\n    The controller used to wrap items, if any.\n\n    @property itemController\n
        \   @type String\n    @default null\n  */\n  itemController: null,\n\n  /**\n
        \   Return the name of the controller to wrap items, or `null` if items should\n
        \   be returned directly.  The default implementation simply returns the\n
        \   `itemController` property, but subclasses can override this method to
        return\n    different controllers for different objects.\n\n    For example:\n\n
        \   ```javascript\n    App.MyArrayController = Ember.ArrayController.extend({\n
        \     lookupItemController: function( object ) {\n        if (object.get('isSpecial'))
        {\n          return \"special\"; // use App.SpecialController\n        } else
        {\n          return \"regular\"; // use App.RegularController\n        }\n
        \     }\n    });\n    ```\n\n    @method lookupItemController\n    @param
        {Object} object\n    @return {String}\n  */\n  lookupItemController: function(object)
        {\n    return get(this, 'itemController');\n  },\n\n  objectAtContent: function(idx)
        {\n    var length = get(this, 'length'),\n        arrangedContent = get(this,'arrangedContent'),\n
        \       object = arrangedContent && arrangedContent.objectAt(idx);\n\n    if
        (idx >= 0 && idx < length) {\n      var controllerClass = this.lookupItemController(object);\n
        \     if (controllerClass) {\n        return this.controllerAt(idx, object,
        controllerClass);\n      }\n    }\n\n    // When `controllerClass` is falsy,
        we have not opted in to using item\n    // controllers, so return the object
        directly.\n\n    // When the index is out of range, we want to return the
        \"out of range\"\n    // value, whatever that might be.  Rather than make
        assumptions\n    // (e.g. guessing `null` or `undefined`) we defer this to
        `arrangedContent`.\n    return object;\n  },\n\n  arrangedContentDidChange:
        function() {\n    this._super();\n    this._resetSubControllers();\n  },\n\n
        \ arrayContentDidChange: function(idx, removedCnt, addedCnt) {\n    var subControllers
        = get(this, '_subControllers'),\n        subControllersToRemove = subControllers.slice(idx,
        idx+removedCnt);\n\n    forEach(subControllersToRemove, function(subController)
        {\n      if (subController) { subController.destroy(); }\n    });\n\n    replace(subControllers,
        idx, removedCnt, new Array(addedCnt));\n\n    // The shadow array of subcontrollers
        must be updated before we trigger\n    // observers, otherwise observers will
        get the wrong subcontainer when\n    // calling `objectAt`\n    this._super(idx,
        removedCnt, addedCnt);\n  },\n\n  init: function() {\n    this._super();\n\n
        \   this.set('_subControllers', Ember.A());\n  },\n\n  content: Ember.computed(function
        () {\n    return Ember.A();\n  }),\n\n  controllerAt: function(idx, object,
        controllerClass) {\n    var container = get(this, 'container'),\n        subControllers
        = get(this, '_subControllers'),\n        subController = subControllers[idx],\n
        \       factory, fullName;\n\n    if (subController) { return subController;
        }\n\n    fullName = \"controller:\" + controllerClass;\n\n    if (!container.has(fullName))
        {\n      throw new Ember.Error('Could not resolve itemController: \"' + controllerClass
        + '\"');\n    }\n\n    subController = container.lookupFactory(fullName).create({\n
        \     target: this,\n      parentController: get(this, 'parentController')
        || this,\n      content: object\n    });\n\n    subControllers[idx] = subController;\n\n
        \   return subController;\n  },\n\n  _subControllers: null,\n\n  _resetSubControllers:
        function() {\n    var subControllers = get(this, '_subControllers');\n    if
        (subControllers) {\n      forEach(subControllers, function(subController)
        {\n        if (subController) { subController.destroy(); }\n      });\n    }\n\n
        \   this.set('_subControllers', Ember.A());\n  }\n});\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-runtime\n*/\n\n/**\n  `Ember.ObjectController`
        is part of Ember's Controller layer. It is intended\n  to wrap a single object,
        proxying unhandled attempts to `get` and `set` to the underlying\n  content
        object, and to forward unhandled action attempts to its `target`.\n\n  `Ember.ObjectController`
        derives this functionality from its superclass\n  `Ember.ObjectProxy` and
        the `Ember.ControllerMixin` mixin.\n\n  @class ObjectController\n  @namespace
        Ember\n  @extends Ember.ObjectProxy\n  @uses Ember.ControllerMixin\n**/\nEmber.ObjectController
        = Ember.ObjectProxy.extend(Ember.ControllerMixin);\n\n})();\n\n\n\n(function()
        {\n\n})();\n\n\n\n(function() {\n/**\nEmber Runtime\n\n@module ember\n@submodule
        ember-runtime\n@requires ember-metal\n*/\n\n})();\n\n(function() {\n/**\n@module
        ember\n@submodule ember-views\n*/\n\nvar jQuery = Ember.imports.jQuery;\nEmber.assert(\"Ember
        Views require jQuery 1.7, 1.8, 1.9, 1.10, or 2.0\", jQuery && (jQuery().jquery.match(/^((1\\.(7|8|9|10))|2.0)(\\.\\d+)?(pre|rc\\d?)?/)
        || Ember.ENV.FORCE_JQUERY));\n\n/**\n  Alias for jQuery\n\n  @method $\n  @for
        Ember\n*/\nEmber.$ = jQuery;\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule
        ember-views\n*/\nif (Ember.$) {\n  // http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dndevents\n
        \ var dragEvents = Ember.String.w('dragstart drag dragenter dragleave dragover
        drop dragend');\n\n  // Copies the `dataTransfer` property from a browser
        event object onto the\n  // jQuery event object for the specified events\n
        \ Ember.EnumerableUtils.forEach(dragEvents, function(eventName) {\n    Ember.$.event.fixHooks[eventName]
        = { props: ['dataTransfer'] };\n  });\n}\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-views\n*/\n\n/* BEGIN METAMORPH HELPERS */\n\n// Internet
        Explorer prior to 9 does not allow setting innerHTML if the first element\n//
        is a \"zero-scope\" element. This problem can be worked around by making\n//
        the first node an invisible text node. We, like Modernizr, use &shy;\n\nvar
        needsShy = this.document && (function() {\n  var testEl = document.createElement('div');\n
        \ testEl.innerHTML = \"<div></div>\";\n  testEl.firstChild.innerHTML = \"<script></script>\";\n
        \ return testEl.firstChild.innerHTML === '';\n})();\n\n// IE 8 (and likely
        earlier) likes to move whitespace preceeding\n// a script tag to appear after
        it. This means that we can\n// accidentally remove whitespace when updating
        a morph.\nvar movesWhitespace = this.document && (function() {\n  var testEl
        = document.createElement('div');\n  testEl.innerHTML = \"Test: <script type='text/x-placeholder'></script>Value\";\n
        \ return testEl.childNodes[0].nodeValue === 'Test:' &&\n          testEl.childNodes[2].nodeValue
        === ' Value';\n})();\n\n// Use this to find children by ID instead of using
        jQuery\nvar findChildById = function(element, id) {\n  if (element.getAttribute('id')
        === id) { return element; }\n\n  var len = element.childNodes.length, idx,
        node, found;\n  for (idx=0; idx<len; idx++) {\n    node = element.childNodes[idx];\n
        \   found = node.nodeType === 1 && findChildById(node, id);\n    if (found)
        { return found; }\n  }\n};\n\nvar setInnerHTMLWithoutFix = function(element,
        html) {\n  if (needsShy) {\n    html = '&shy;' + html;\n  }\n\n  var matches
        = [];\n  if (movesWhitespace) {\n    // Right now we only check for script
        tags with ids with the\n    // goal of targeting morphs.\n    html = html.replace(/(\\s+)(<script
        id='([^']+)')/g, function(match, spaces, tag, id) {\n      matches.push([id,
        spaces]);\n      return tag;\n    });\n  }\n\n  element.innerHTML = html;\n\n
        \ // If we have to do any whitespace adjustments do them now\n  if (matches.length
        > 0) {\n    var len = matches.length, idx;\n    for (idx=0; idx<len; idx++)
        {\n      var script = findChildById(element, matches[idx][0]),\n          node
        = document.createTextNode(matches[idx][1]);\n      script.parentNode.insertBefore(node,
        script);\n    }\n  }\n\n  if (needsShy) {\n    var shyElement = element.firstChild;\n
        \   while (shyElement.nodeType === 1 && !shyElement.nodeName) {\n      shyElement
        = shyElement.firstChild;\n    }\n    if (shyElement.nodeType === 3 && shyElement.nodeValue.charAt(0)
        === \"\\u00AD\") {\n      shyElement.nodeValue = shyElement.nodeValue.slice(1);\n
        \   }\n  }\n};\n\n/* END METAMORPH HELPERS */\n\n\nvar innerHTMLTags = {};\nvar
        canSetInnerHTML = function(tagName) {\n  if (innerHTMLTags[tagName] !== undefined)
        {\n    return innerHTMLTags[tagName];\n  }\n\n  var canSet = true;\n\n  //
        IE 8 and earlier don't allow us to do innerHTML on select\n  if (tagName.toLowerCase()
        === 'select') {\n    var el = document.createElement('select');\n    setInnerHTMLWithoutFix(el,
        '<option value=\"test\">Test</option>');\n    canSet = el.options.length ===
        1;\n  }\n\n  innerHTMLTags[tagName] = canSet;\n\n  return canSet;\n};\n\nvar
        setInnerHTML = function(element, html) {\n  var tagName = element.tagName;\n\n
        \ if (canSetInnerHTML(tagName)) {\n    setInnerHTMLWithoutFix(element, html);\n
        \ } else {\n    // Firefox versions < 11 do not have support for element.outerHTML.\n
        \   var outerHTML = element.outerHTML || new XMLSerializer().serializeToString(element);\n
        \   Ember.assert(\"Can't set innerHTML on \"+element.tagName+\" in this browser\",
        outerHTML);\n\n    var startTag = outerHTML.match(new RegExp(\"<\"+tagName+\"([^>]*)>\",
        'i'))[0],\n        endTag = '</'+tagName+'>';\n\n    var wrapper = document.createElement('div');\n
        \   setInnerHTMLWithoutFix(wrapper, startTag + html + endTag);\n    element
        = wrapper.firstChild;\n    while (element.tagName !== tagName) {\n      element
        = element.nextSibling;\n    }\n  }\n\n  return element;\n};\n\nfunction isSimpleClick(event)
        {\n  var modifier = event.shiftKey || event.metaKey || event.altKey || event.ctrlKey,\n
        \     secondaryClick = event.which > 1; // IE9 may return undefined\n\n  return
        !modifier && !secondaryClick;\n}\n\nEmber.ViewUtils = {\n  setInnerHTML: setInnerHTML,\n
        \ isSimpleClick: isSimpleClick\n};\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-views\n*/\n\nvar get = Ember.get, set = Ember.set;\n\nvar
        ClassSet = function() {\n  this.seen = {};\n  this.list = [];\n};\n\nClassSet.prototype
        = {\n  add: function(string) {\n    if (string in this.seen) { return; }\n
        \   this.seen[string] = true;\n\n    this.list.push(string);\n  },\n\n  toDOM:
        function() {\n    return this.list.join(\" \");\n  }\n};\n\nvar BAD_TAG_NAME_TEST_REGEXP
        = /[^a-zA-Z0-9\\-]/;\nvar BAD_TAG_NAME_REPLACE_REGEXP = /[^a-zA-Z0-9\\-]/g;\n\nfunction
        stripTagName(tagName) {\n  if (!tagName) {\n    return tagName;\n  }\n\n  if
        (!BAD_TAG_NAME_TEST_REGEXP.test(tagName)) {\n    return tagName;\n  }\n\n
        \ return tagName.replace(BAD_TAG_NAME_REPLACE_REGEXP, '');\n}\n\nvar BAD_CHARS_REGEXP
        = /&(?!\\w+;)|[<>\"'`]/g;\nvar POSSIBLE_CHARS_REGEXP = /[&<>\"'`]/;\n\nfunction
        escapeAttribute(value) {\n  // Stolen shamelessly from Handlebars\n\n  var
        escape = {\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n
        \   \"'\": \"&#x27;\",\n    \"`\": \"&#x60;\"\n  };\n\n  var escapeChar =
        function(chr) {\n    return escape[chr] || \"&amp;\";\n  };\n\n  var string
        = value.toString();\n\n  if(!POSSIBLE_CHARS_REGEXP.test(string)) { return
        string; }\n  return string.replace(BAD_CHARS_REGEXP, escapeChar);\n}\n\n//
        IE 6/7 have bugs arond setting names on inputs during creation.\n// From http://msdn.microsoft.com/en-us/library/ie/ms536389(v=vs.85).aspx:\n//
        \"To include the NAME attribute at run time on objects created with the createElement
        method, use the eTag.\"\nvar canSetNameOnInputs = (function() {\n  var div
        = document.createElement('div'),\n      el = document.createElement('input');\n\n
        \ el.setAttribute('name', 'foo');\n  div.appendChild(el);\n\n  return !!div.innerHTML.match('foo');\n})();\n\n/**\n
        \ `Ember.RenderBuffer` gathers information regarding the a view and generates
        the\n  final representation. `Ember.RenderBuffer` will generate HTML which
        can be pushed\n  to the DOM.\n\n   ```javascript\n   var buffer = Ember.RenderBuffer('div');\n
        \ ```\n\n  @class RenderBuffer\n  @namespace Ember\n  @constructor\n  @param
        {String} tagName tag name (such as 'div' or 'p') used for the buffer\n*/\nEmber.RenderBuffer
        = function(tagName) {\n  return new Ember._RenderBuffer(tagName);\n};\n\nEmber._RenderBuffer
        = function(tagName) {\n  this.tagNames = [tagName || null];\n  this.buffer
        = \"\";\n};\n\nEmber._RenderBuffer.prototype =\n/** @scope Ember.RenderBuffer.prototype
        */ {\n\n  // The root view's element\n  _element: null,\n\n  _hasElement:
        true,\n\n  /**\n    @private\n\n    An internal set used to de-dupe class
        names when `addClass()` is\n    used. After each call to `addClass()`, the
        `classes` property\n    will be updated.\n\n    @property elementClasses\n
        \   @type Array\n    @default []\n  */\n  elementClasses: null,\n\n  /**\n
        \   Array of class names which will be applied in the class attribute.\n\n
        \   You can use `setClasses()` to set this property directly. If you\n    use
        `addClass()`, it will be maintained for you.\n\n    @property classes\n    @type
        Array\n    @default []\n  */\n  classes: null,\n\n  /**\n    The id in of
        the element, to be applied in the id attribute.\n\n    You should not set
        this property yourself, rather, you should use\n    the `id()` method of `Ember.RenderBuffer`.\n\n
        \   @property elementId\n    @type String\n    @default null\n  */\n  elementId:
        null,\n\n  /**\n    A hash keyed on the name of the attribute and whose value
        will be\n    applied to that attribute. For example, if you wanted to apply
        a\n    `data-view=\"Foo.bar\"` property to an element, you would set the\n
        \   elementAttributes hash to `{'data-view':'Foo.bar'}`.\n\n    You should
        not maintain this hash yourself, rather, you should use\n    the `attr()`
        method of `Ember.RenderBuffer`.\n\n    @property elementAttributes\n    @type
        Hash\n    @default {}\n  */\n  elementAttributes: null,\n\n  /**\n    A hash
        keyed on the name of the properties and whose value will be\n    applied to
        that property. For example, if you wanted to apply a\n    `checked=true` property
        to an element, you would set the\n    elementProperties hash to `{'checked':true}`.\n\n
        \   You should not maintain this hash yourself, rather, you should use\n    the
        `prop()` method of `Ember.RenderBuffer`.\n\n    @property elementProperties\n
        \   @type Hash\n    @default {}\n  */\n  elementProperties: null,\n\n  /**\n
        \   The tagname of the element an instance of `Ember.RenderBuffer` represents.\n\n
        \   Usually, this gets set as the first parameter to `Ember.RenderBuffer`.
        For\n    example, if you wanted to create a `p` tag, then you would call\n\n
        \   ```javascript\n    Ember.RenderBuffer('p')\n    ```\n\n    @property elementTag\n
        \   @type String\n    @default null\n  */\n  elementTag: null,\n\n  /**\n
        \   A hash keyed on the name of the style attribute and whose value will\n
        \   be applied to that attribute. For example, if you wanted to apply a\n
        \   `background-color:black;` style to an element, you would set the\n    elementStyle
        hash to `{'background-color':'black'}`.\n\n    You should not maintain this
        hash yourself, rather, you should use\n    the `style()` method of `Ember.RenderBuffer`.\n\n
        \   @property elementStyle\n    @type Hash\n    @default {}\n  */\n  elementStyle:
        null,\n\n  /**\n    Nested `RenderBuffers` will set this to their parent `RenderBuffer`\n
        \   instance.\n\n    @property parentBuffer\n    @type Ember._RenderBuffer\n
        \ */\n  parentBuffer: null,\n\n  /**\n    Adds a string of HTML to the `RenderBuffer`.\n\n
        \   @method push\n    @param {String} string HTML to push into the buffer\n
        \   @chainable\n  */\n  push: function(string) {\n    this.buffer += string;\n
        \   return this;\n  },\n\n  /**\n    Adds a class to the buffer, which will
        be rendered to the class attribute.\n\n    @method addClass\n    @param {String}
        className Class name to add to the buffer\n    @chainable\n  */\n  addClass:
        function(className) {\n    // lazily create elementClasses\n    this.elementClasses
        = (this.elementClasses || new ClassSet());\n    this.elementClasses.add(className);\n
        \   this.classes = this.elementClasses.list;\n\n    return this;\n  },\n\n
        \ setClasses: function(classNames) {\n    this.classes = classNames;\n  },\n\n
        \ /**\n    Sets the elementID to be used for the element.\n\n    @method id\n
        \   @param {String} id\n    @chainable\n  */\n  id: function(id) {\n    this.elementId
        = id;\n    return this;\n  },\n\n  // duck type attribute functionality like
        jQuery so a render buffer\n  // can be used like a jQuery object in attribute
        binding scenarios.\n\n  /**\n    Adds an attribute which will be rendered
        to the element.\n\n    @method attr\n    @param {String} name The name of
        the attribute\n    @param {String} value The value to add to the attribute\n
        \   @chainable\n    @return {Ember.RenderBuffer|String} this or the current
        attribute value\n  */\n  attr: function(name, value) {\n    var attributes
        = this.elementAttributes = (this.elementAttributes || {});\n\n    if (arguments.length
        === 1) {\n      return attributes[name];\n    } else {\n      attributes[name]
        = value;\n    }\n\n    return this;\n  },\n\n  /**\n    Remove an attribute
        from the list of attributes to render.\n\n    @method removeAttr\n    @param
        {String} name The name of the attribute\n    @chainable\n  */\n  removeAttr:
        function(name) {\n    var attributes = this.elementAttributes;\n    if (attributes)
        { delete attributes[name]; }\n\n    return this;\n  },\n\n  /**\n    Adds
        an property which will be rendered to the element.\n\n    @method prop\n    @param
        {String} name The name of the property\n    @param {String} value The value
        to add to the property\n    @chainable\n    @return {Ember.RenderBuffer|String}
        this or the current property value\n  */\n  prop: function(name, value) {\n
        \   var properties = this.elementProperties = (this.elementProperties || {});\n\n
        \   if (arguments.length === 1) {\n      return properties[name];\n    } else
        {\n      properties[name] = value;\n    }\n\n    return this;\n  },\n\n  /**\n
        \   Remove an property from the list of properties to render.\n\n    @method
        removeProp\n    @param {String} name The name of the property\n    @chainable\n
        \ */\n  removeProp: function(name) {\n    var properties = this.elementProperties;\n
        \   if (properties) { delete properties[name]; }\n\n    return this;\n  },\n\n
        \ /**\n    Adds a style to the style attribute which will be rendered to the
        element.\n\n    @method style\n    @param {String} name Name of the style\n
        \   @param {String} value\n    @chainable\n  */\n  style: function(name, value)
        {\n    this.elementStyle = (this.elementStyle || {});\n\n    this.elementStyle[name]
        = value;\n    return this;\n  },\n\n  begin: function(tagName) {\n    this.tagNames.push(tagName
        || null);\n    return this;\n  },\n\n  pushOpeningTag: function() {\n    var
        tagName = this.currentTagName();\n    if (!tagName) { return; }\n\n    if
        (this._hasElement && !this._element && this.buffer.length === 0) {\n      this._element
        = this.generateElement();\n      return;\n    }\n\n    var buffer = this.buffer,\n
        \       id = this.elementId,\n        classes = this.classes,\n        attrs
        = this.elementAttributes,\n        props = this.elementProperties,\n        style
        = this.elementStyle,\n        attr, prop;\n\n    buffer += '<' + stripTagName(tagName);\n\n
        \   if (id) {\n      buffer += ' id=\"' + escapeAttribute(id) + '\"';\n      this.elementId
        = null;\n    }\n    if (classes) {\n      buffer += ' class=\"' + escapeAttribute(classes.join('
        ')) + '\"';\n      this.classes = null;\n    }\n\n    if (style) {\n      buffer
        += ' style=\"';\n\n      for (prop in style) {\n        if (style.hasOwnProperty(prop))
        {\n          buffer += prop + ':' + escapeAttribute(style[prop]) + ';';\n
        \       }\n      }\n\n      buffer += '\"';\n\n      this.elementStyle = null;\n
        \   }\n\n    if (attrs) {\n      for (attr in attrs) {\n        if (attrs.hasOwnProperty(attr))
        {\n          buffer += ' ' + attr + '=\"' + escapeAttribute(attrs[attr]) +
        '\"';\n        }\n      }\n\n      this.elementAttributes = null;\n    }\n\n
        \   if (props) {\n      for (prop in props) {\n        if (props.hasOwnProperty(prop))
        {\n          var value = props[prop];\n          if (value || typeof(value)
        === 'number') {\n            if (value === true) {\n              buffer +=
        ' ' + prop + '=\"' + prop + '\"';\n            } else {\n              buffer
        += ' ' + prop + '=\"' + escapeAttribute(props[prop]) + '\"';\n            }\n
        \         }\n        }\n      }\n\n      this.elementProperties = null;\n
        \   }\n\n    buffer += '>';\n    this.buffer = buffer;\n  },\n\n  pushClosingTag:
        function() {\n    var tagName = this.tagNames.pop();\n    if (tagName) { this.buffer
        += '</' + stripTagName(tagName) + '>'; }\n  },\n\n  currentTagName: function()
        {\n    return this.tagNames[this.tagNames.length-1];\n  },\n\n  generateElement:
        function() {\n    var tagName = this.tagNames.pop(), // pop since we don't
        need to close\n        id = this.elementId,\n        classes = this.classes,\n
        \       attrs = this.elementAttributes,\n        props = this.elementProperties,\n
        \       style = this.elementStyle,\n        styleBuffer = '', attr, prop,
        tagString;\n\n    if (attrs && attrs.name && !canSetNameOnInputs) {\n      //
        IE allows passing a tag to createElement. See note on `canSetNameOnInputs`
        above as well.\n      tagString = '<'+stripTagName(tagName)+' name=\"'+escapeAttribute(attrs.name)+'\">';\n
        \   } else {\n      tagString = tagName;\n    }\n\n    var element = document.createElement(tagString),\n
        \       $element = Ember.$(element);\n\n    if (id) {\n      $element.attr('id',
        id);\n      this.elementId = null;\n    }\n    if (classes) {\n      $element.attr('class',
        classes.join(' '));\n      this.classes = null;\n    }\n\n    if (style) {\n
        \     for (prop in style) {\n        if (style.hasOwnProperty(prop)) {\n          styleBuffer
        += (prop + ':' + style[prop] + ';');\n        }\n      }\n\n      $element.attr('style',
        styleBuffer);\n\n      this.elementStyle = null;\n    }\n\n    if (attrs)
        {\n      for (attr in attrs) {\n        if (attrs.hasOwnProperty(attr)) {\n
        \         $element.attr(attr, attrs[attr]);\n        }\n      }\n\n      this.elementAttributes
        = null;\n    }\n\n    if (props) {\n      for (prop in props) {\n        if
        (props.hasOwnProperty(prop)) {\n          $element.prop(prop, props[prop]);\n
        \       }\n      }\n\n      this.elementProperties = null;\n    }\n\n    return
        element;\n  },\n\n  /**\n    @method element\n    @return {DOMElement} The
        element corresponding to the generated HTML\n      of this buffer\n  */\n
        \ element: function() {\n    var html = this.innerString();\n\n    if (html)
        {\n      this._element = Ember.ViewUtils.setInnerHTML(this._element, html);\n
        \   }\n\n    return this._element;\n  },\n\n  /**\n    Generates the HTML
        content for this buffer.\n\n    @method string\n    @return {String} The generated
        HTML\n  */\n  string: function() {\n    if (this._hasElement && this._element)
        {\n      // Firefox versions < 11 do not have support for element.outerHTML.\n
        \     var thisElement = this.element(), outerHTML = thisElement.outerHTML;\n
        \     if (typeof outerHTML === 'undefined') {\n        return Ember.$('<div/>').append(thisElement).html();\n
        \     }\n      return outerHTML;\n    } else {\n      return this.innerString();\n
        \   }\n  },\n\n  innerString: function() {\n    return this.buffer;\n  }\n};\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-views\n*/\n\nvar get = Ember.get,
        set = Ember.set, fmt = Ember.String.fmt;\n\n/**\n  `Ember.EventDispatcher`
        handles delegating browser events to their\n  corresponding `Ember.Views.`
        For example, when you click on a view,\n  `Ember.EventDispatcher` ensures
        that that view's `mouseDown` method gets\n  called.\n\n  @class EventDispatcher\n
        \ @namespace Ember\n  @private\n  @extends Ember.Object\n*/\nEmber.EventDispatcher
        = Ember.Object.extend(/** @scope Ember.EventDispatcher.prototype */{\n\n  /**\n
        \   The set of events names (and associated handler function names) to be
        setup\n    and dispatched by the `EventDispatcher`. Custom events can added
        to this list at setup\n    time, generally via the `Ember.Application.customEvents`
        hash. Only override this\n    default set to prevent the EventDispatcher from
        listening on some events all together.\n\n    This set will be modified by
        `setup` to also include any events added at that time.\n\n    @property events\n
        \   @type Object\n  */\n  events: {\n    touchstart  : 'touchStart',\n    touchmove
        \  : 'touchMove',\n    touchend    : 'touchEnd',\n    touchcancel : 'touchCancel',\n
        \   keydown     : 'keyDown',\n    keyup       : 'keyUp',\n    keypress    :
        'keyPress',\n    mousedown   : 'mouseDown',\n    mouseup     : 'mouseUp',\n
        \   contextmenu : 'contextMenu',\n    click       : 'click',\n    dblclick
        \   : 'doubleClick',\n    mousemove   : 'mouseMove',\n    focusin     : 'focusIn',\n
        \   focusout    : 'focusOut',\n    mouseenter  : 'mouseEnter',\n    mouseleave
        \ : 'mouseLeave',\n    submit      : 'submit',\n    input       : 'input',\n
        \   change      : 'change',\n    dragstart   : 'dragStart',\n    drag        :
        'drag',\n    dragenter   : 'dragEnter',\n    dragleave   : 'dragLeave',\n
        \   dragover    : 'dragOver',\n    drop        : 'drop',\n    dragend     :
        'dragEnd'\n  },\n\n  /**\n    @private\n\n    The root DOM element to which
        event listeners should be attached. Event\n    listeners will be attached
        to the document unless this is overridden.\n\n    Can be specified as a DOMElement
        or a selector string.\n\n    The default body is a string since this may be
        evaluated before document.body\n    exists in the DOM.\n\n    @property rootElement\n
        \   @type DOMElement\n    @default 'body'\n  */\n  rootElement: 'body',\n\n
        \ /**\n    @private\n\n    Sets up event listeners for standard browser events.\n\n
        \   This will be called after the browser sends a `DOMContentReady` event.
        By\n    default, it will set up all of the listeners on the document body.
        If you\n    would like to register the listeners on a different element, set
        the event\n    dispatcher's `root` property.\n\n    @method setup\n    @param
        addedEvents {Hash}\n  */\n  setup: function(addedEvents, rootElement) {\n
        \   var event, events = get(this, 'events');\n\n    Ember.$.extend(events,
        addedEvents || {});\n\n\n    if (!Ember.isNone(rootElement)) {\n      set(this,
        'rootElement', rootElement);\n    }\n\n    rootElement = Ember.$(get(this,
        'rootElement'));\n\n    Ember.assert(fmt('You cannot use the same root element
        (%@) multiple times in an Ember.Application', [rootElement.selector || rootElement[0].tagName]),
        !rootElement.is('.ember-application'));\n    Ember.assert('You cannot make
        a new Ember.Application using a root element that is a descendent of an existing
        Ember.Application', !rootElement.closest('.ember-application').length);\n
        \   Ember.assert('You cannot make a new Ember.Application using a root element
        that is an ancestor of an existing Ember.Application', !rootElement.find('.ember-application').length);\n\n
        \   rootElement.addClass('ember-application');\n\n    Ember.assert('Unable
        to add \"ember-application\" class to rootElement. Make sure you set rootElement
        to the body or an element in the body.', rootElement.is('.ember-application'));\n\n
        \   for (event in events) {\n      if (events.hasOwnProperty(event)) {\n        this.setupHandler(rootElement,
        event, events[event]);\n      }\n    }\n  },\n\n  /**\n    @private\n\n    Registers
        an event listener on the document. If the given event is\n    triggered, the
        provided event handler will be triggered on the target view.\n\n    If the
        target view does not implement the event handler, or if the handler\n    returns
        `false`, the parent view will be called. The event will continue to\n    bubble
        to each successive parent view until it reaches the top.\n\n    For example,
        to have the `mouseDown` method called on the target view when\n    a `mousedown`
        event is received from the browser, do the following:\n\n    ```javascript\n
        \   setupHandler('mousedown', 'mouseDown');\n    ```\n\n    @method setupHandler\n
        \   @param {Element} rootElement\n    @param {String} event the browser-originated
        event to listen to\n    @param {String} eventName the name of the method to
        call on the view\n  */\n  setupHandler: function(rootElement, event, eventName)
        {\n    var self = this;\n\n    rootElement.on(event + '.ember', '.ember-view',
        function(evt, triggeringManager) {\n      return Ember.handleErrors(function()
        {\n        var view = Ember.View.views[this.id],\n            result = true,
        manager = null;\n\n        manager = self._findNearestEventManager(view,eventName);\n\n
        \       if (manager && manager !== triggeringManager) {\n          result
        = self._dispatchEvent(manager, evt, eventName, view);\n        } else if (view)
        {\n          result = self._bubbleEvent(view,evt,eventName);\n        } else
        {\n          evt.stopPropagation();\n        }\n\n        return result;\n
        \     }, this);\n    });\n\n    rootElement.on(event + '.ember', '[data-ember-action]',
        function(evt) {\n      return Ember.handleErrors(function() {\n        var
        actionId = Ember.$(evt.currentTarget).attr('data-ember-action'),\n            action
        \  = Ember.Handlebars.ActionHelper.registeredActions[actionId];\n\n        //
        We have to check for action here since in some cases, jQuery will trigger\n
        \       // an event on `removeChild` (i.e. focusout) after we've already torn
        down the\n        // action handlers for the view.\n        if (action &&
        action.eventName === eventName) {\n          return action.handler(evt);\n
        \       }\n      }, this);\n    });\n  },\n\n  _findNearestEventManager: function(view,
        eventName) {\n    var manager = null;\n\n    while (view) {\n      manager
        = get(view, 'eventManager');\n      if (manager && manager[eventName]) { break;
        }\n\n      view = get(view, 'parentView');\n    }\n\n    return manager;\n
        \ },\n\n  _dispatchEvent: function(object, evt, eventName, view) {\n    var
        result = true;\n\n    var handler = object[eventName];\n    if (Ember.typeOf(handler)
        === 'function') {\n      result = Ember.run(function() {\n        return handler.call(object,
        evt, view);\n      });\n      // Do not preventDefault in eventManagers.\n
        \     evt.stopPropagation();\n    }\n    else {\n      result = this._bubbleEvent(view,
        evt, eventName);\n    }\n\n    return result;\n  },\n\n  _bubbleEvent: function(view,
        evt, eventName) {\n    return Ember.run(function() {\n      return view.handleEvent(eventName,
        evt);\n    });\n  },\n\n  destroy: function() {\n    var rootElement = get(this,
        'rootElement');\n    Ember.$(rootElement).off('.ember', '**').removeClass('ember-application');\n
        \   return this._super();\n  }\n});\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-views\n*/\n\n// Add a new named queue for rendering
        views that happens\n// after bindings have synced, and a queue for scheduling
        actions\n// that that should occur after view rendering.\nvar queues = Ember.run.queues,\n
        \   indexOf = Ember.ArrayPolyfills.indexOf;\nqueues.splice(indexOf.call(queues,
        'actions')+1, 0, 'render', 'afterRender');\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-views\n*/\n\nvar get = Ember.get, set = Ember.set;\n\n//
        Original class declaration and documentation in runtime/lib/controllers/controller.js\n//
        NOTE: It may be possible with YUIDoc to combine docs in two locations\n\n/**\nAdditional
        methods for the ControllerMixin\n\n@class ControllerMixin\n@namespace Ember\n*/\nEmber.ControllerMixin.reopen({\n
        \ target: null,\n  namespace: null,\n  view: null,\n  container: null,\n  _childContainers:
        null,\n\n  init: function() {\n    this._super();\n    set(this, '_childContainers',
        {});\n  },\n\n  _modelDidChange: Ember.observer(function() {\n    var containers
        = get(this, '_childContainers');\n\n    for (var prop in containers) {\n      if
        (!containers.hasOwnProperty(prop)) { continue; }\n      containers[prop].destroy();\n
        \   }\n\n    set(this, '_childContainers', {});\n  }, 'model')\n});\n\n})();\n\n\n\n(function()
        {\n\n})();\n\n\n\n(function() {\nvar states = {};\n\n/**\n@module ember\n@submodule
        ember-views\n*/\n\nvar get = Ember.get, set = Ember.set;\nvar guidFor = Ember.guidFor;\nvar
        a_forEach = Ember.EnumerableUtils.forEach;\nvar a_addObject = Ember.EnumerableUtils.addObject;\nvar
        meta = Ember.meta;\n\nvar childViewsProperty = Ember.computed(function() {\n
        \ var childViews = this._childViews, ret = Ember.A(), view = this;\n\n  a_forEach(childViews,
        function(view) {\n    var currentChildViews;\n    if (view.isVirtual) {\n
        \     if (currentChildViews = get(view, 'childViews')) {\n        ret.pushObjects(currentChildViews);\n
        \     }\n    } else {\n      ret.push(view);\n    }\n  });\n\n  ret.replace
        = function (idx, removedCount, addedViews) {\n    if (view instanceof Ember.ContainerView)
        {\n      Ember.deprecate(\"Manipulating an Ember.ContainerView through its
        childViews property is deprecated. Please use the ContainerView instance itself
        as an Ember.MutableArray.\");\n      return view.replace(idx, removedCount,
        addedViews);\n    }\n    throw new Ember.Error(\"childViews is immutable\");\n
        \ };\n\n  return ret;\n});\n\nEmber.warn(\"The VIEW_PRESERVES_CONTEXT flag
        has been removed and the functionality can no longer be disabled.\", Ember.ENV.VIEW_PRESERVES_CONTEXT
        !== false);\n\n/**\n  Global hash of shared templates. This will automatically
        be populated\n  by the build tools so that you can store your Handlebars templates
        in\n  separate files that get loaded into JavaScript at buildtime.\n\n  @property
        TEMPLATES\n  @for Ember\n  @type Hash\n*/\nEmber.TEMPLATES = {};\n\n/**\n
        \ `Ember.CoreView` is an abstract class that exists to give view-like behavior\n
        \ to both Ember's main view class `Ember.View` and other classes like\n  `Ember._SimpleMetamorphView`
        that don't need the fully functionaltiy of\n  `Ember.View`.\n\n  Unless you
        have specific needs for `CoreView`, you will use `Ember.View`\n  in your applications.\n\n
        \ @class CoreView\n  @namespace Ember\n  @extends Ember.Object\n  @uses Ember.Evented\n*/\n\nEmber.CoreView
        = Ember.Object.extend(Ember.Evented, Ember.ActionHandler, {\n  isView: true,\n\n
        \ states: states,\n\n  init: function() {\n    this._super();\n    this.transitionTo('preRender');\n
        \ },\n\n  /**\n    If the view is currently inserted into the DOM of a parent
        view, this\n    property will point to the parent of the view.\n\n    @property
        parentView\n    @type Ember.View\n    @default null\n  */\n  parentView: Ember.computed(function()
        {\n    var parent = this._parentView;\n\n    if (parent && parent.isVirtual)
        {\n      return get(parent, 'parentView');\n    } else {\n      return parent;\n
        \   }\n  }).property('_parentView'),\n\n  state: null,\n\n  _parentView: null,\n\n
        \ // return the current view, not including virtual views\n  concreteView:
        Ember.computed(function() {\n    if (!this.isVirtual) { return this; }\n    else
        { return get(this, 'parentView'); }\n  }).property('parentView'),\n\n  instrumentName:
        'core_view',\n\n  instrumentDetails: function(hash) {\n    hash.object = this.toString();\n
        \ },\n\n  /**\n    @private\n\n    Invoked by the view system when this view
        needs to produce an HTML\n    representation. This method will create a new
        render buffer, if needed,\n    then apply any default attributes, such as
        class names and visibility.\n    Finally, the `render()` method is invoked,
        which is responsible for\n    doing the bulk of the rendering.\n\n    You
        should not need to override this method; instead, implement the\n    `template`
        property, or if you need more control, override the `render`\n    method.\n\n
        \   @method renderToBuffer\n    @param {Ember.RenderBuffer} buffer the render
        buffer. If no buffer is\n      passed, a default buffer, using the current
        view's `tagName`, will\n      be used.\n  */\n  renderToBuffer: function(parentBuffer,
        bufferOperation) {\n    var name = 'render.' + this.instrumentName,\n        details
        = {};\n\n    this.instrumentDetails(details);\n\n    return Ember.instrument(name,
        details, function() {\n      return this._renderToBuffer(parentBuffer, bufferOperation);\n
        \   }, this);\n  },\n\n  _renderToBuffer: function(parentBuffer, bufferOperation)
        {\n    // If this is the top-most view, start a new buffer. Otherwise,\n    //
        create a new buffer relative to the original using the\n    // provided buffer
        operation (for example, `insertAfter` will\n    // insert a new buffer after
        the \"parent buffer\").\n    var tagName = this.tagName;\n\n    if (tagName
        === null || tagName === undefined) {\n      tagName = 'div';\n    }\n\n    var
        buffer = this.buffer = parentBuffer && parentBuffer.begin(tagName) || Ember.RenderBuffer(tagName);\n
        \   this.transitionTo('inBuffer', false);\n\n    this.beforeRender(buffer);\n
        \   this.render(buffer);\n    this.afterRender(buffer);\n\n    return buffer;\n
        \ },\n\n  /**\n    @private\n\n    Override the default event firing from
        `Ember.Evented` to\n    also call methods with the given name.\n\n    @method
        trigger\n    @param name {String}\n  */\n  trigger: function(name) {\n    this._super.apply(this,
        arguments);\n    var method = this[name];\n    if (method) {\n      var args
        = [], i, l;\n      for (i = 1, l = arguments.length; i < l; i++) {\n        args.push(arguments[i]);\n
        \     }\n      return method.apply(this, args);\n    }\n  },\n\n  deprecatedSendHandles:
        function(actionName) {\n    return !!this[actionName];\n  },\n\n  deprecatedSend:
        function(actionName) {\n    var args = [].slice.call(arguments, 1);\n    Ember.assert(''
        + this + \" has the action \" + actionName + \" but it is not a function\",
        typeof this[actionName] === 'function');\n    Ember.deprecate('Action handlers
        implemented directly on views are deprecated in favor of action handlers on
        an `actions` object (' + actionName + ' on ' + this + ')', false);\n    this[actionName].apply(this,
        args);\n    return;\n  },\n\n  has: function(name) {\n    return Ember.typeOf(this[name])
        === 'function' || this._super(name);\n  },\n\n  destroy: function() {\n    var
        parent = this._parentView;\n\n    if (!this._super()) { return; }\n\n    //
        destroy the element -- this will avoid each child view destroying\n    //
        the element over and over again...\n    if (!this.removedFromDOM) { this.destroyElement();
        }\n\n    // remove from parent if found. Don't call removeFromParent,\n    //
        as removeFromParent will try to remove the element from\n    // the DOM again.\n
        \   if (parent) { parent.removeChild(this); }\n\n    this.transitionTo('destroying',
        false);\n\n    return this;\n  },\n\n  clearRenderedChildren: Ember.K,\n  triggerRecursively:
        Ember.K,\n  invokeRecursively: Ember.K,\n  transitionTo: Ember.K,\n  destroyElement:
        Ember.K\n});\n\nvar ViewCollection = Ember._ViewCollection = function(initialViews)
        {\n  var views = this.views = initialViews || [];\n  this.length = views.length;\n};\n\nViewCollection.prototype
        = {\n  length: 0,\n\n  trigger: function(eventName) {\n    var views = this.views,
        view;\n    for (var i = 0, l = views.length; i < l; i++) {\n      view = views[i];\n
        \     if (view.trigger) { view.trigger(eventName); }\n    }\n  },\n\n  triggerRecursively:
        function(eventName) {\n    var views = this.views;\n    for (var i = 0, l
        = views.length; i < l; i++) {\n      views[i].triggerRecursively(eventName);\n
        \   }\n  },\n\n  invokeRecursively: function(fn) {\n    var views = this.views,
        view;\n\n    for (var i = 0, l = views.length; i < l; i++) {\n      view =
        views[i];\n      fn(view);\n    }\n  },\n\n  transitionTo: function(state,
        children) {\n    var views = this.views;\n    for (var i = 0, l = views.length;
        i < l; i++) {\n      views[i].transitionTo(state, children);\n    }\n  },\n\n
        \ push: function() {\n    this.length += arguments.length;\n    var views
        = this.views;\n    return views.push.apply(views, arguments);\n  },\n\n  objectAt:
        function(idx) {\n    return this.views[idx];\n  },\n\n  forEach: function(callback)
        {\n    var views = this.views;\n    return a_forEach(views, callback);\n  },\n\n
        \ clear: function() {\n    this.length = 0;\n    this.views.length = 0;\n
        \ }\n};\n\nvar EMPTY_ARRAY = [];\n\n/**\n  `Ember.View` is the class in Ember
        responsible for encapsulating templates of\n  HTML content, combining templates
        with data to render as sections of a page's\n  DOM, and registering and responding
        to user-initiated events.\n\n  ## HTML Tag\n\n  The default HTML tag name
        used for a view's DOM representation is `div`. This\n  can be customized by
        setting the `tagName` property. The following view\n  class:\n\n  ```javascript\n
        \ ParagraphView = Ember.View.extend({\n    tagName: 'em'\n  });\n  ```\n\n
        \ Would result in instances with the following HTML:\n\n  ```html\n  <em id=\"ember1\"
        class=\"ember-view\"></em>\n  ```\n\n  ## HTML `class` Attribute\n\n  The
        HTML `class` attribute of a view's tag can be set by providing a\n  `classNames`
        property that is set to an array of strings:\n\n  ```javascript\n  MyView
        = Ember.View.extend({\n    classNames: ['my-class', 'my-other-class']\n  });\n
        \ ```\n\n  Will result in view instances with an HTML representation of:\n\n
        \ ```html\n  <div id=\"ember1\" class=\"ember-view my-class my-other-class\"></div>\n
        \ ```\n\n  `class` attribute values can also be set by providing a `classNameBindings`\n
        \ property set to an array of properties names for the view. The return value\n
        \ of these properties will be added as part of the value for the view's `class`\n
        \ attribute. These properties can be computed properties:\n\n  ```javascript\n
        \ MyView = Ember.View.extend({\n    classNameBindings: ['propertyA', 'propertyB'],\n
        \   propertyA: 'from-a',\n    propertyB: function() {\n      if (someLogic)
        { return 'from-b'; }\n    }.property()\n  });\n  ```\n\n  Will result in view
        instances with an HTML representation of:\n\n  ```html\n  <div id=\"ember1\"
        class=\"ember-view from-a from-b\"></div>\n  ```\n\n  If the value of a class
        name binding returns a boolean the property name\n  itself will be used as
        the class name if the property is true. The class name\n  will not be added
        if the value is `false` or `undefined`.\n\n  ```javascript\n  MyView = Ember.View.extend({\n
        \   classNameBindings: ['hovered'],\n    hovered: true\n  });\n  ```\n\n  Will
        result in view instances with an HTML representation of:\n\n  ```html\n  <div
        id=\"ember1\" class=\"ember-view hovered\"></div>\n  ```\n\n  When using boolean
        class name bindings you can supply a string value other\n  than the property
        name for use as the `class` HTML attribute by appending the\n  preferred value
        after a \":\" character when defining the binding:\n\n  ```javascript\n  MyView
        = Ember.View.extend({\n    classNameBindings: ['awesome:so-very-cool'],\n
        \   awesome: true\n  });\n  ```\n\n  Will result in view instances with an
        HTML representation of:\n\n  ```html\n  <div id=\"ember1\" class=\"ember-view
        so-very-cool\"></div>\n  ```\n\n  Boolean value class name bindings whose
        property names are in a\n  camelCase-style format will be converted to a dasherized
        format:\n\n  ```javascript\n  MyView = Ember.View.extend({\n    classNameBindings:
        ['isUrgent'],\n    isUrgent: true\n  });\n  ```\n\n  Will result in view instances
        with an HTML representation of:\n\n  ```html\n  <div id=\"ember1\" class=\"ember-view
        is-urgent\"></div>\n  ```\n\n  Class name bindings can also refer to object
        values that are found by\n  traversing a path relative to the view itself:\n\n
        \ ```javascript\n  MyView = Ember.View.extend({\n    classNameBindings: ['messages.empty']\n
        \   messages: Ember.Object.create({\n      empty: true\n    })\n  });\n  ```\n\n
        \ Will result in view instances with an HTML representation of:\n\n  ```html\n
        \ <div id=\"ember1\" class=\"ember-view empty\"></div>\n  ```\n\n  If you
        want to add a class name for a property which evaluates to true and\n  and
        a different class name if it evaluates to false, you can pass a binding\n
        \ like this:\n\n  ```javascript\n  // Applies 'enabled' class when isEnabled
        is true and 'disabled' when isEnabled is false\n  Ember.View.extend({\n    classNameBindings:
        ['isEnabled:enabled:disabled']\n    isEnabled: true\n  });\n  ```\n\n  Will
        result in view instances with an HTML representation of:\n\n  ```html\n  <div
        id=\"ember1\" class=\"ember-view enabled\"></div>\n  ```\n\n  When isEnabled
        is `false`, the resulting HTML reprensentation looks like\n  this:\n\n  ```html\n
        \ <div id=\"ember1\" class=\"ember-view disabled\"></div>\n  ```\n\n  This
        syntax offers the convenience to add a class if a property is `false`:\n\n
        \ ```javascript\n  // Applies no class when isEnabled is true and class 'disabled'
        when isEnabled is false\n  Ember.View.extend({\n    classNameBindings: ['isEnabled::disabled']\n
        \   isEnabled: true\n  });\n  ```\n\n  Will result in view instances with
        an HTML representation of:\n\n  ```html\n  <div id=\"ember1\" class=\"ember-view\"></div>\n
        \ ```\n\n  When the `isEnabled` property on the view is set to `false`, it
        will result\n  in view instances with an HTML representation of:\n\n  ```html\n
        \ <div id=\"ember1\" class=\"ember-view disabled\"></div>\n  ```\n\n  Updates
        to the the value of a class name binding will result in automatic\n  update
        of the  HTML `class` attribute in the view's rendered HTML\n  representation.
        If the value becomes `false` or `undefined` the class name\n  will be removed.\n\n
        \ Both `classNames` and `classNameBindings` are concatenated properties. See\n
        \ [Ember.Object](/api/classes/Ember.Object.html) documentation for more\n
        \ information about concatenated properties.\n\n  ## HTML Attributes\n\n  The
        HTML attribute section of a view's tag can be set by providing an\n  `attributeBindings`
        property set to an array of property names on the view.\n  The return value
        of these properties will be used as the value of the view's\n  HTML associated
        attribute:\n\n  ```javascript\n  AnchorView = Ember.View.extend({\n    tagName:
        'a',\n    attributeBindings: ['href'],\n    href: 'http://google.com'\n  });\n
        \ ```\n\n  Will result in view instances with an HTML representation of:\n\n
        \ ```html\n  <a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n
        \ ```\n\n  If the return value of an `attributeBindings` monitored property
        is a boolean\n  the property will follow HTML's pattern of repeating the attribute's
        name as\n  its value:\n\n  ```javascript\n  MyTextInput = Ember.View.extend({\n
        \   tagName: 'input',\n    attributeBindings: ['disabled'],\n    disabled:
        true\n  });\n  ```\n\n  Will result in view instances with an HTML representation
        of:\n\n  ```html\n  <input id=\"ember1\" class=\"ember-view\" disabled=\"disabled\"
        />\n  ```\n\n  `attributeBindings` can refer to computed properties:\n\n  ```javascript\n
        \ MyTextInput = Ember.View.extend({\n    tagName: 'input',\n    attributeBindings:
        ['disabled'],\n    disabled: function() {\n      if (someLogic) {\n        return
        true;\n      } else {\n        return false;\n      }\n    }.property()\n
        \ });\n  ```\n\n  Updates to the the property of an attribute binding will
        result in automatic\n  update of the  HTML attribute in the view's rendered
        HTML representation.\n\n  `attributeBindings` is a concatenated property.
        See [Ember.Object](/api/classes/Ember.Object.html)\n  documentation for more
        information about concatenated properties.\n\n  ## Templates\n\n  The HTML
        contents of a view's rendered representation are determined by its\n  template.
        Templates can be any function that accepts an optional context\n  parameter
        and returns a string of HTML that will be inserted within the\n  view's tag.
        Most typically in Ember this function will be a compiled\n  `Ember.Handlebars`
        template.\n\n  ```javascript\n  AView = Ember.View.extend({\n    template:
        Ember.Handlebars.compile('I am the template')\n  });\n  ```\n\n  Will result
        in view instances with an HTML representation of:\n\n  ```html\n  <div id=\"ember1\"
        class=\"ember-view\">I am the template</div>\n  ```\n\n  Within an Ember application
        is more common to define a Handlebars templates as\n  part of a page:\n\n
        \ ```html\n  <script type='text/x-handlebars' data-template-name='some-template'>\n
        \   Hello\n  </script>\n  ```\n\n  And associate it by name using a view's
        `templateName` property:\n\n  ```javascript\n  AView = Ember.View.extend({\n
        \   templateName: 'some-template'\n  });\n  ```\n\n  Using a value for `templateName`
        that does not have a Handlebars template\n  with a matching `data-template-name`
        attribute will throw an error.\n\n  For views classes that may have a template
        later defined (e.g. as the block\n  portion of a `{{view}}` Handlebars helper
        call in another template or in\n  a subclass), you can provide a `defaultTemplate`
        property set to compiled\n  template function. If a template is not later
        provided for the view instance\n  the `defaultTemplate` value will be used:\n\n
        \ ```javascript\n  AView = Ember.View.extend({\n    defaultTemplate: Ember.Handlebars.compile('I
        was the default'),\n    template: null,\n    templateName: null\n  });\n  ```\n\n
        \ Will result in instances with an HTML representation of:\n\n  ```html\n
        \ <div id=\"ember1\" class=\"ember-view\">I was the default</div>\n  ```\n\n
        \ If a `template` or `templateName` is provided it will take precedence over\n
        \ `defaultTemplate`:\n\n  ```javascript\n  AView = Ember.View.extend({\n    defaultTemplate:
        Ember.Handlebars.compile('I was the default')\n  });\n\n  aView = AView.create({\n
        \   template: Ember.Handlebars.compile('I was the template, not default')\n
        \ });\n  ```\n\n  Will result in the following HTML representation when rendered:\n\n
        \ ```html\n  <div id=\"ember1\" class=\"ember-view\">I was the template, not
        default</div>\n  ```\n\n  ## View Context\n\n  The default context of the
        compiled template is the view's controller:\n\n  ```javascript\n  AView =
        Ember.View.extend({\n    template: Ember.Handlebars.compile('Hello {{excitedGreeting}}')\n
        \ });\n\n  aController = Ember.Object.create({\n    firstName: 'Barry',\n
        \   excitedGreeting: function() {\n      return this.get(\"content.firstName\")
        + \"!!!\"\n    }.property()\n  });\n\n  aView = AView.create({\n    controller:
        aController,\n  });\n  ```\n\n  Will result in an HTML representation of:\n\n
        \ ```html\n  <div id=\"ember1\" class=\"ember-view\">Hello Barry!!!</div>\n
        \ ```\n\n  A context can also be explicitly supplied through the view's `context`\n
        \ property. If the view has neither `context` nor `controller` properties,
        the\n  `parentView`'s context will be used.\n\n  ## Layouts\n\n  Views can
        have a secondary template that wraps their main template. Like\n  primary
        templates, layouts can be any function that  accepts an optional\n  context
        parameter and returns a string of HTML that will be inserted inside\n  view's
        tag. Views whose HTML element is self closing (e.g. `<input />`)\n  cannot
        have a layout and this property will be ignored.\n\n  Most typically in Ember
        a layout will be a compiled `Ember.Handlebars`\n  template.\n\n  A view's
        layout can be set directly with the `layout` property or reference\n  an existing
        Handlebars template by name with the `layoutName` property.\n\n  A template
        used as a layout must contain a single use of the Handlebars\n  `{{yield}}`
        helper. The HTML contents of a view's rendered `template` will be\n  inserted
        at this location:\n\n  ```javascript\n  AViewWithLayout = Ember.View.extend({\n
        \   layout: Ember.Handlebars.compile(\"<div class='my-decorative-class'>{{yield}}</div>\")\n
        \   template: Ember.Handlebars.compile(\"I got wrapped\"),\n  });\n  ```\n\n
        \ Will result in view instances with an HTML representation of:\n\n  ```html\n
        \ <div id=\"ember1\" class=\"ember-view\">\n    <div class=\"my-decorative-class\">\n
        \     I got wrapped\n    </div>\n  </div>\n  ```\n\n  See [Ember.Handlebars.helpers.yield](/api/classes/Ember.Handlebars.helpers.html#method_yield)\n
        \ for more information.\n\n  ## Responding to Browser Events\n\n  Views can
        respond to user-initiated events in one of three ways: method\n  implementation,
        through an event manager, and through `{{action}}` helper use\n  in their
        template or layout.\n\n  ### Method Implementation\n\n  Views can respond
        to user-initiated events by implementing a method that\n  matches the event
        name. A `jQuery.Event` object will be passed as the\n  argument to this method.\n\n
        \ ```javascript\n  AView = Ember.View.extend({\n    click: function(event)
        {\n      // will be called when when an instance's\n      // rendered element
        is clicked\n    }\n  });\n  ```\n\n  ### Event Managers\n\n  Views can define
        an object as their `eventManager` property. This object can\n  then implement
        methods that match the desired event names. Matching events\n  that occur
        on the view's rendered HTML or the rendered HTML of any of its DOM\n  descendants
        will trigger this method. A `jQuery.Event` object will be passed\n  as the
        first argument to the method and an  `Ember.View` object as the\n  second.
        The `Ember.View` will be the view whose rendered HTML was interacted\n  with.
        This may be the view with the `eventManager` property or one of its\n  descendent
        views.\n\n  ```javascript\n  AView = Ember.View.extend({\n    eventManager:
        Ember.Object.create({\n      doubleClick: function(event, view) {\n        //
        will be called when when an instance's\n        // rendered element or any
        rendering\n        // of this views's descendent\n        // elements is clicked\n
        \     }\n    })\n  });\n  ```\n\n  An event defined for an event manager takes
        precedence over events of the\n  same name handled through methods on the
        view.\n\n  ```javascript\n  AView = Ember.View.extend({\n    mouseEnter: function(event)
        {\n      // will never trigger.\n    },\n    eventManager: Ember.Object.create({\n
        \     mouseEnter: function(event, view) {\n        // takes precedence over
        AView#mouseEnter\n      }\n    })\n  });\n  ```\n\n  Similarly a view's event
        manager will take precedence for events of any views\n  rendered as a descendent.
        A method name that matches an event name will not\n  be called if the view
        instance was rendered inside the HTML representation of\n  a view that has
        an `eventManager` property defined that handles events of the\n  name. Events
        not handled by the event manager will still trigger method calls\n  on the
        descendent.\n\n  ```javascript\n  OuterView = Ember.View.extend({\n    template:
        Ember.Handlebars.compile(\"outer {{#view InnerView}}inner{{/view}} outer\"),\n
        \   eventManager: Ember.Object.create({\n      mouseEnter: function(event,
        view) {\n        // view might be instance of either\n        // OuterView
        or InnerView depending on\n        // where on the page the user interaction
        occured\n      }\n    })\n  });\n\n  InnerView = Ember.View.extend({\n    click:
        function(event) {\n      // will be called if rendered inside\n      // an
        OuterView because OuterView's\n      // eventManager doesn't handle click
        events\n    },\n    mouseEnter: function(event) {\n      // will never be
        called if rendered inside\n      // an OuterView.\n    }\n  });\n  ```\n\n
        \ ### Handlebars `{{action}}` Helper\n\n  See [Handlebars.helpers.action](/api/classes/Ember.Handlebars.helpers.html#method_action).\n\n
        \ ### Event Names\n\n  All of the event handling approaches described above
        respond to the same set\n  of events. The names of the built-in events are
        listed below. (The hash of\n  built-in events exists in `Ember.EventDispatcher`.)
        Additional, custom events\n  can be registered by using `Ember.Application.customEvents`.\n\n
        \ Touch events:\n\n  * `touchStart`\n  * `touchMove`\n  * `touchEnd`\n  *
        `touchCancel`\n\n  Keyboard events\n\n  * `keyDown`\n  * `keyUp`\n  * `keyPress`\n\n
        \ Mouse events\n\n  * `mouseDown`\n  * `mouseUp`\n  * `contextMenu`\n  * `click`\n
        \ * `doubleClick`\n  * `mouseMove`\n  * `focusIn`\n  * `focusOut`\n  * `mouseEnter`\n
        \ * `mouseLeave`\n\n  Form events:\n\n  * `submit`\n  * `change`\n  * `focusIn`\n
        \ * `focusOut`\n  * `input`\n\n  HTML5 drag and drop events:\n\n  * `dragStart`\n
        \ * `drag`\n  * `dragEnter`\n  * `dragLeave`\n  * `drop`\n  * `dragEnd`\n\n
        \ ## Handlebars `{{view}}` Helper\n\n  Other `Ember.View` instances can be
        included as part of a view's template by\n  using the `{{view}}` Handlebars
        helper. See [Ember.Handlebars.helpers.view](/api/classes/Ember.Handlebars.helpers.html#method_view)\n
        \ for additional information.\n\n  @class View\n  @namespace Ember\n  @extends
        Ember.CoreView\n*/\nEmber.View = Ember.CoreView.extend(\n/** @scope Ember.View.prototype
        */ {\n\n  concatenatedProperties: ['classNames', 'classNameBindings', 'attributeBindings'],\n\n
        \ /**\n    @property isView\n    @type Boolean\n    @default true\n    @final\n
        \ */\n  isView: true,\n\n  // ..........................................................\n
        \ // TEMPLATE SUPPORT\n  //\n\n  /**\n    The name of the template to lookup
        if no template is provided.\n\n    `Ember.View` will look for a template with
        this name in this view's\n    `templates` object. By default, this will be
        a global object\n    shared in `Ember.TEMPLATES`.\n\n    @property templateName\n
        \   @type String\n    @default null\n  */\n  templateName: null,\n\n  /**\n
        \   The name of the layout to lookup if no layout is provided.\n\n    `Ember.View`
        will look for a template with this name in this view's\n    `templates` object.
        By default, this will be a global object\n    shared in `Ember.TEMPLATES`.\n\n
        \   @property layoutName\n    @type String\n    @default null\n  */\n  layoutName:
        null,\n\n  /**\n    The hash in which to look for `templateName`.\n\n    @property
        templates\n    @type Ember.Object\n    @default Ember.TEMPLATES\n  */\n  templates:
        Ember.TEMPLATES,\n\n  /**\n    The template used to render the view. This
        should be a function that\n    accepts an optional context parameter and returns
        a string of HTML that\n    will be inserted into the DOM relative to its parent
        view.\n\n    In general, you should set the `templateName` property instead
        of setting\n    the template yourself.\n\n    @property template\n    @type
        Function\n  */\n  template: Ember.computed(function(key, value) {\n    if
        (value !== undefined) { return value; }\n\n    var templateName = get(this,
        'templateName'),\n        template = this.templateForName(templateName, 'template');\n\n
        \   Ember.assert(\"You specified the templateName \" + templateName + \" for
        \" + this + \", but it did not exist.\", !templateName || template);\n\n    return
        template || get(this, 'defaultTemplate');\n  }).property('templateName'),\n\n
        \ /**\n    The controller managing this view. If this property is set, it
        will be\n    made available for use by the template.\n\n    @property controller\n
        \   @type Object\n  */\n  controller: Ember.computed(function(key) {\n    var
        parentView = get(this, '_parentView');\n    return parentView ? get(parentView,
        'controller') : null;\n  }).property('_parentView'),\n\n  /**\n    A view
        may contain a layout. A layout is a regular template but\n    supersedes the
        `template` property during rendering. It is the\n    responsibility of the
        layout template to retrieve the `template`\n    property from the view (or
        alternatively, call `Handlebars.helpers.yield`,\n    `{{yield}}`) to render
        it in the correct location.\n\n    This is useful for a view that has a shared
        wrapper, but which delegates\n    the rendering of the contents of the wrapper
        to the `template` property\n    on a subclass.\n\n    @property layout\n    @type
        Function\n  */\n  layout: Ember.computed(function(key) {\n    var layoutName
        = get(this, 'layoutName'),\n        layout = this.templateForName(layoutName,
        'layout');\n\n    Ember.assert(\"You specified the layoutName \" + layoutName
        + \" for \" + this + \", but it did not exist.\", !layoutName || layout);\n\n
        \   return layout || get(this, 'defaultLayout');\n  }).property('layoutName'),\n\n
        \ _yield: function(context, options) {\n    var template = get(this, 'template');\n
        \   if (template) { template(context, options); }\n  },\n\n  templateForName:
        function(name, type) {\n    if (!name) { return; }\n    Ember.assert(\"templateNames
        are not allowed to contain periods: \"+name, name.indexOf('.') === -1);\n\n
        \   // the defaultContainer is deprecated\n    var container = this.container
        || (Ember.Container && Ember.Container.defaultContainer);\n    return container
        && container.lookup('template:' + name);\n  },\n\n  /**\n    The object from
        which templates should access properties.\n\n    This object will be passed
        to the template function each time the render\n    method is called, but it
        is up to the individual function to decide what\n    to do with it.\n\n    By
        default, this will be the view's controller.\n\n    @property context\n    @type
        Object\n  */\n  context: Ember.computed(function(key, value) {\n    if (arguments.length
        === 2) {\n      set(this, '_context', value);\n      return value;\n    }
        else {\n      return get(this, '_context');\n    }\n  }).volatile(),\n\n  /**\n
        \   @private\n\n    Private copy of the view's template context. This can
        be set directly\n    by Handlebars without triggering the observer that causes
        the view\n    to be re-rendered.\n\n    The context of a view is looked up
        as follows:\n\n    1. Supplied context (usually by Handlebars)\n    2. Specified
        controller\n    3. `parentView`'s context (for a child of a ContainerView)\n\n
        \   The code in Handlebars that overrides the `_context` property first\n
        \   checks to see whether the view has a specified controller. This is\n    something
        of a hack and should be revisited.\n\n    @property _context\n  */\n  _context:
        Ember.computed(function(key) {\n    var parentView, controller;\n\n    if
        (controller = get(this, 'controller')) {\n      return controller;\n    }\n\n
        \   parentView = this._parentView;\n    if (parentView) {\n      return get(parentView,
        '_context');\n    }\n\n    return null;\n  }),\n\n  /**\n    @private\n\n
        \   If a value that affects template rendering changes, the view should be\n
        \   re-rendered to reflect the new value.\n\n    @method _contextDidChange\n
        \ */\n  _contextDidChange: Ember.observer(function() {\n    this.rerender();\n
        \ }, 'context'),\n\n  /**\n    If `false`, the view will appear hidden in
        DOM.\n\n    @property isVisible\n    @type Boolean\n    @default null\n  */\n
        \ isVisible: true,\n\n  /**\n    @private\n\n    Array of child views. You
        should never edit this array directly.\n    Instead, use `appendChild` and
        `removeFromParent`.\n\n    @property childViews\n    @type Array\n    @default
        []\n  */\n  childViews: childViewsProperty,\n\n  _childViews: EMPTY_ARRAY,\n\n
        \ // When it's a virtual view, we need to notify the parent that their\n  //
        childViews will change.\n  _childViewsWillChange: Ember.beforeObserver(function()
        {\n    if (this.isVirtual) {\n      var parentView = get(this, 'parentView');\n
        \     if (parentView) { Ember.propertyWillChange(parentView, 'childViews');
        }\n    }\n  }, 'childViews'),\n\n  // When it's a virtual view, we need to
        notify the parent that their\n  // childViews did change.\n  _childViewsDidChange:
        Ember.observer(function() {\n    if (this.isVirtual) {\n      var parentView
        = get(this, 'parentView');\n      if (parentView) { Ember.propertyDidChange(parentView,
        'childViews'); }\n    }\n  }, 'childViews'),\n\n  /**\n    Return the nearest
        ancestor that is an instance of the provided\n    class.\n\n    @property
        nearestInstanceOf\n    @param {Class} klass Subclass of Ember.View (or Ember.View
        itself)\n    @return Ember.View\n    @deprecated\n  */\n  nearestInstanceOf:
        function(klass) {\n    Ember.deprecate(\"nearestInstanceOf is deprecated and
        will be removed from future releases. Use nearestOfType.\");\n    var view
        = get(this, 'parentView');\n\n    while (view) {\n      if (view instanceof
        klass) { return view; }\n      view = get(view, 'parentView');\n    }\n  },\n\n
        \ /**\n    Return the nearest ancestor that is an instance of the provided\n
        \   class or mixin.\n\n    @property nearestOfType\n    @param {Class,Mixin}
        klass Subclass of Ember.View (or Ember.View itself),\n           or an instance
        of Ember.Mixin.\n    @return Ember.View\n  */\n  nearestOfType: function(klass)
        {\n    var view = get(this, 'parentView'),\n        isOfType = klass instanceof
        Ember.Mixin ?\n                   function(view) { return klass.detect(view);
        } :\n                   function(view) { return klass.detect(view.constructor);
        };\n\n    while (view) {\n      if (isOfType(view)) { return view; }\n      view
        = get(view, 'parentView');\n    }\n  },\n\n  /**\n    Return the nearest ancestor
        that has a given property.\n\n    @property nearestWithProperty\n    @param
        {String} property A property name\n    @return Ember.View\n  */\n  nearestWithProperty:
        function(property) {\n    var view = get(this, 'parentView');\n\n    while
        (view) {\n      if (property in view) { return view; }\n      view = get(view,
        'parentView');\n    }\n  },\n\n  /**\n    Return the nearest ancestor whose
        parent is an instance of\n    `klass`.\n\n    @property nearestChildOf\n    @param
        {Class} klass Subclass of Ember.View (or Ember.View itself)\n    @return Ember.View\n
        \ */\n  nearestChildOf: function(klass) {\n    var view = get(this, 'parentView');\n\n
        \   while (view) {\n      if (get(view, 'parentView') instanceof klass) {
        return view; }\n      view = get(view, 'parentView');\n    }\n  },\n\n  /**\n
        \   @private\n\n    When the parent view changes, recursively invalidate `controller`\n\n
        \   @method _parentViewDidChange\n  */\n  _parentViewDidChange: Ember.observer(function()
        {\n    if (this.isDestroying) { return; }\n\n    this.trigger('parentViewDidChange');\n\n
        \   if (get(this, 'parentView.controller') && !get(this, 'controller')) {\n
        \     this.notifyPropertyChange('controller');\n    }\n  }, '_parentView'),\n\n
        \ _controllerDidChange: Ember.observer(function() {\n    if (this.isDestroying)
        { return; }\n\n    this.rerender();\n\n    this.forEachChildView(function(view)
        {\n      view.propertyDidChange('controller');\n    });\n  }, 'controller'),\n\n
        \ cloneKeywords: function() {\n    var templateData = get(this, 'templateData');\n\n
        \   var keywords = templateData ? Ember.copy(templateData.keywords) : {};\n
        \   set(keywords, 'view', get(this, 'concreteView'));\n    set(keywords, '_view',
        this);\n    set(keywords, 'controller', get(this, 'controller'));\n\n    return
        keywords;\n  },\n\n  /**\n    Called on your view when it should push strings
        of HTML into a\n    `Ember.RenderBuffer`. Most users will want to override
        the `template`\n    or `templateName` properties instead of this method.\n\n
        \   By default, `Ember.View` will look for a function in the `template`\n
        \   property and invoke it with the value of `context`. The value of\n    `context`
        will be the view's controller unless you override it.\n\n    @method render\n
        \   @param {Ember.RenderBuffer} buffer The render buffer\n  */\n  render:
        function(buffer) {\n    // If this view has a layout, it is the responsibility
        of the\n    // the layout to render the view's template. Otherwise, render
        the template\n    // directly.\n    var template = get(this, 'layout') ||
        get(this, 'template');\n\n    if (template) {\n      var context = get(this,
        'context');\n      var keywords = this.cloneKeywords();\n      var output;\n\n
        \     var data = {\n        view: this,\n        buffer: buffer,\n        isRenderData:
        true,\n        keywords: keywords,\n        insideGroup: get(this, 'templateData.insideGroup')\n
        \     };\n\n      // Invoke the template with the provided template context,
        which\n      // is the view's controller by default. A hash of data is also
        passed that provides\n      // the template with access to the view and render
        buffer.\n\n      Ember.assert('template must be a function. Did you mean to
        call Ember.Handlebars.compile(\"...\") or specify templateName instead?',
        typeof template === 'function');\n      // The template should write directly
        to the render buffer instead\n      // of returning a string.\n      output
        = template(context, { data: data });\n\n      // If the template returned
        a string instead of writing to the buffer,\n      // push the string onto
        the buffer.\n      if (output !== undefined) { buffer.push(output); }\n    }\n
        \ },\n\n  /**\n    Renders the view again. This will work regardless of whether
        the\n    view is already in the DOM or not. If the view is in the DOM, the\n
        \   rendering process will be deferred to give bindings a chance\n    to synchronize.\n\n
        \   If children were added during the rendering process using `appendChild`,\n
        \   `rerender` will remove them, because they will be added again\n    if
        needed by the next `render`.\n\n    In general, if the display of your view
        changes, you should modify\n    the DOM element directly instead of manually
        calling `rerender`, which can\n    be slow.\n\n    @method rerender\n  */\n
        \ rerender: function() {\n    return this.currentState.rerender(this);\n  },\n\n
        \ clearRenderedChildren: function() {\n    var lengthBefore = this.lengthBeforeRender,\n
        \       lengthAfter  = this.lengthAfterRender;\n\n    // If there were child
        views created during the last call to render(),\n    // remove them under
        the assumption that they will be re-created when\n    // we re-render.\n\n
        \   // VIEW-TODO: Unit test this path.\n    var childViews = this._childViews;\n
        \   for (var i=lengthAfter-1; i>=lengthBefore; i--) {\n      if (childViews[i])
        { childViews[i].destroy(); }\n    }\n  },\n\n  /**\n    @private\n\n    Iterates
        over the view's `classNameBindings` array, inserts the value\n    of the specified
        property into the `classNames` array, then creates an\n    observer to update
        the view's element if the bound property ever changes\n    in the future.\n\n
        \   @method _applyClassNameBindings\n  */\n  _applyClassNameBindings: function(classBindings)
        {\n    var classNames = this.classNames,\n    elem, newClass, dasherizedClass;\n\n
        \   // Loop through all of the configured bindings. These will be either\n
        \   // property names ('isUrgent') or property paths relative to the view\n
        \   // ('content.isUrgent')\n    a_forEach(classBindings, function(binding)
        {\n\n      // Variable in which the old class value is saved. The observer
        function\n      // closes over this variable, so it knows which string to
        remove when\n      // the property changes.\n      var oldClass;\n      //
        Extract just the property name from bindings like 'foo:bar'\n      var parsedPath
        = Ember.View._parsePropertyPath(binding);\n\n      // Set up an observer on
        the context. If the property changes, toggle the\n      // class name.\n      var
        observer = function() {\n        // Get the current value of the property\n
        \       newClass = this._classStringForProperty(binding);\n        elem =
        this.$();\n\n        // If we had previously added a class to the element,
        remove it.\n        if (oldClass) {\n          elem.removeClass(oldClass);\n
        \         // Also remove from classNames so that if the view gets rerendered,\n
        \         // the class doesn't get added back to the DOM.\n          classNames.removeObject(oldClass);\n
        \       }\n\n        // If necessary, add a new class. Make sure we keep track
        of it so\n        // it can be removed in the future.\n        if (newClass)
        {\n          elem.addClass(newClass);\n          oldClass = newClass;\n        }
        else {\n          oldClass = null;\n        }\n      };\n\n      // Get the
        class name for the property at its current value\n      dasherizedClass =
        this._classStringForProperty(binding);\n\n      if (dasherizedClass) {\n        //
        Ensure that it gets into the classNames array\n        // so it is displayed
        when we render.\n        a_addObject(classNames, dasherizedClass);\n\n        //
        Save a reference to the class name so we can remove it\n        // if the
        observer fires. Remember that this variable has\n        // been closed over
        by the observer.\n        oldClass = dasherizedClass;\n      }\n\n      this.registerObserver(this,
        parsedPath.path, observer);\n      // Remove className so when the view is
        rerendered,\n      // the className is added based on binding reevaluation\n
        \     this.one('willClearRender', function() {\n        if (oldClass) {\n
        \         classNames.removeObject(oldClass);\n          oldClass = null;\n
        \       }\n      });\n\n    }, this);\n  },\n\n  /**\n    @private\n\n    Iterates
        through the view's attribute bindings, sets up observers for each,\n    then
        applies the current value of the attributes to the passed render buffer.\n\n
        \   @method _applyAttributeBindings\n    @param {Ember.RenderBuffer} buffer\n
        \ */\n  _applyAttributeBindings: function(buffer, attributeBindings) {\n    var
        attributeValue, elem;\n\n    a_forEach(attributeBindings, function(binding)
        {\n      var split = binding.split(':'),\n          property = split[0],\n
        \         attributeName = split[1] || property;\n\n      // Create an observer
        to add/remove/change the attribute if the\n      // JavaScript property changes.\n
        \     var observer = function() {\n        elem = this.$();\n\n        attributeValue
        = get(this, property);\n\n        Ember.View.applyAttributeBindings(elem,
        attributeName, attributeValue);\n      };\n\n      this.registerObserver(this,
        property, observer);\n\n      // Determine the current value and add it to
        the render buffer\n      // if necessary.\n      attributeValue = get(this,
        property);\n      Ember.View.applyAttributeBindings(buffer, attributeName,
        attributeValue);\n    }, this);\n  },\n\n  /**\n    @private\n\n    Given
        a property name, returns a dasherized version of that\n    property name if
        the property evaluates to a non-falsy value.\n\n    For example, if the view
        has property `isUrgent` that evaluates to true,\n    passing `isUrgent` to
        this method will return `\"is-urgent\"`.\n\n    @method _classStringForProperty\n
        \   @param property\n  */\n  _classStringForProperty: function(property) {\n
        \   var parsedPath = Ember.View._parsePropertyPath(property);\n    var path
        = parsedPath.path;\n\n    var val = get(this, path);\n    if (val === undefined
        && Ember.isGlobalPath(path)) {\n      val = get(Ember.lookup, path);\n    }\n\n
        \   return Ember.View._classStringForValue(path, val, parsedPath.className,
        parsedPath.falsyClassName);\n  },\n\n  // ..........................................................\n
        \ // ELEMENT SUPPORT\n  //\n\n  /**\n    Returns the current DOM element for
        the view.\n\n    @property element\n    @type DOMElement\n  */\n  element:
        Ember.computed(function(key, value) {\n    if (value !== undefined) {\n      return
        this.currentState.setElement(this, value);\n    } else {\n      return this.currentState.getElement(this);\n
        \   }\n  }).property('_parentView'),\n\n  /**\n    Returns a jQuery object
        for this view's element. If you pass in a selector\n    string, this method
        will return a jQuery object, using the current element\n    as its buffer.\n\n
        \   For example, calling `view.$('li')` will return a jQuery object containing\n
        \   all of the `li` elements inside the DOM element of this view.\n\n    @method
        $\n    @param {String} [selector] a jQuery-compatible selector string\n    @return
        {jQuery} the jQuery object for the DOM node\n  */\n  $: function(sel) {\n
        \   return this.currentState.$(this, sel);\n  },\n\n  mutateChildViews: function(callback)
        {\n    var childViews = this._childViews,\n        idx = childViews.length,\n
        \       view;\n\n    while(--idx >= 0) {\n      view = childViews[idx];\n
        \     callback(this, view, idx);\n    }\n\n    return this;\n  },\n\n  forEachChildView:
        function(callback) {\n    var childViews = this._childViews;\n\n    if (!childViews)
        { return this; }\n\n    var len = childViews.length,\n        view, idx;\n\n
        \   for (idx = 0; idx < len; idx++) {\n      view = childViews[idx];\n      callback(view);\n
        \   }\n\n    return this;\n  },\n\n  /**\n    Appends the view's element to
        the specified parent element.\n\n    If the view does not have an HTML representation
        yet, `createElement()`\n    will be called automatically.\n\n    Note that
        this method just schedules the view to be appended; the DOM\n    element will
        not be appended to the given element until all bindings have\n    finished
        synchronizing.\n\n    This is not typically a function that you will need
        to call directly when\n    building your application. You might consider using
        `Ember.ContainerView`\n    instead. If you do need to use `appendTo`, be sure
        that the target element\n    you are providing is associated with an `Ember.Application`
        and does not\n    have an ancestor element that is associated with an Ember
        view.\n\n    @method appendTo\n    @param {String|DOMElement|jQuery} A selector,
        element, HTML string, or jQuery object\n    @return {Ember.View} receiver\n
        \ */\n  appendTo: function(target) {\n    // Schedule the DOM element to be
        created and appended to the given\n    // element after bindings have synchronized.\n
        \   this._insertElementLater(function() {\n      Ember.assert(\"You tried
        to append to (\" + target + \") but that isn't in the DOM\", Ember.$(target).length
        > 0);\n      Ember.assert(\"You cannot append to an existing Ember.View. Consider
        using Ember.ContainerView instead.\", !Ember.$(target).is('.ember-view') &&
        !Ember.$(target).parents().is('.ember-view'));\n      this.$().appendTo(target);\n
        \   });\n\n    return this;\n  },\n\n  /**\n    Replaces the content of the
        specified parent element with this view's\n    element. If the view does not
        have an HTML representation yet,\n    `createElement()` will be called automatically.\n\n
        \   Note that this method just schedules the view to be appended; the DOM\n
        \   element will not be appended to the given element until all bindings have\n
        \   finished synchronizing\n\n    @method replaceIn\n    @param {String|DOMElement|jQuery}
        A selector, element, HTML string, or jQuery object\n    @return {Ember.View}
        received\n  */\n  replaceIn: function(target) {\n    Ember.assert(\"You tried
        to replace in (\" + target + \") but that isn't in the DOM\", Ember.$(target).length
        > 0);\n    Ember.assert(\"You cannot replace an existing Ember.View. Consider
        using Ember.ContainerView instead.\", !Ember.$(target).is('.ember-view') &&
        !Ember.$(target).parents().is('.ember-view'));\n\n    this._insertElementLater(function()
        {\n      Ember.$(target).empty();\n      this.$().appendTo(target);\n    });\n\n
        \   return this;\n  },\n\n  /**\n    @private\n\n    Schedules a DOM operation
        to occur during the next render phase. This\n    ensures that all bindings
        have finished synchronizing before the view is\n    rendered.\n\n    To use,
        pass a function that performs a DOM operation.\n\n    Before your function
        is called, this view and all child views will receive\n    the `willInsertElement`
        event. After your function is invoked, this view\n    and all of its child
        views will receive the `didInsertElement` event.\n\n    ```javascript\n    view._insertElementLater(function()
        {\n      this.createElement();\n      this.$().appendTo('body');\n    });\n
        \   ```\n\n    @method _insertElementLater\n    @param {Function} fn the function
        that inserts the element into the DOM\n  */\n  _insertElementLater: function(fn)
        {\n    this._scheduledInsert = Ember.run.scheduleOnce('render', this, '_insertElement',
        fn);\n  },\n\n  _insertElement: function (fn) {\n    this._scheduledInsert
        = null;\n    this.currentState.insertElement(this, fn);\n  },\n\n  /**\n    Appends
        the view's element to the document body. If the view does\n    not have an
        HTML representation yet, `createElement()` will be called\n    automatically.\n\n
        \   If your application uses the `rootElement` property, you must append\n
        \   the view within that element. Rendering views outside of the `rootElement`\n
        \   is not supported.\n\n    Note that this method just schedules the view
        to be appended; the DOM\n    element will not be appended to the document
        body until all bindings have\n    finished synchronizing.\n\n    @method append\n
        \   @return {Ember.View} receiver\n  */\n  append: function() {\n    return
        this.appendTo(document.body);\n  },\n\n  /**\n    Removes the view's element
        from the element to which it is attached.\n\n    @method remove\n    @return
        {Ember.View} receiver\n  */\n  remove: function() {\n    // What we should
        really do here is wait until the end of the run loop\n    // to determine
        if the element has been re-appended to a different\n    // element.\n    //
        In the interim, we will just re-render if that happens. It is more\n    //
        important than elements get garbage collected.\n    if (!this.removedFromDOM)
        { this.destroyElement(); }\n    this.invokeRecursively(function(view) {\n
        \     if (view.clearRenderedChildren) { view.clearRenderedChildren(); }\n
        \   });\n  },\n\n  elementId: null,\n\n  /**\n    Attempts to discover the
        element in the parent element. The default\n    implementation looks for an
        element with an ID of `elementId` (or the\n    view's guid if `elementId`
        is null). You can override this method to\n    provide your own form of lookup.
        For example, if you want to discover your\n    element using a CSS class name
        instead of an ID.\n\n    @method findElementInParentElement\n    @param {DOMElement}
        parentElement The parent's DOM element\n    @return {DOMElement} The discovered
        element\n  */\n  findElementInParentElement: function(parentElem) {\n    var
        id = \"#\" + this.elementId;\n    return Ember.$(id)[0] || Ember.$(id, parentElem)[0];\n
        \ },\n\n  /**\n    Creates a DOM representation of the view and all of its\n
        \   child views by recursively calling the `render()` method.\n\n    After
        the element has been created, `didInsertElement` will\n    be called on this
        view and all of its child views.\n\n    @method createElement\n    @return
        {Ember.View} receiver\n  */\n  createElement: function() {\n    if (get(this,
        'element')) { return this; }\n\n    var buffer = this.renderToBuffer();\n
        \   set(this, 'element', buffer.element());\n\n    return this;\n  },\n\n
        \ /**\n    Called when a view is going to insert an element into the DOM.\n\n
        \   @event willInsertElement\n  */\n  willInsertElement: Ember.K,\n\n  /**\n
        \   Called when the element of the view has been inserted into the DOM\n    or
        after the view was re-rendered. Override this function to do any\n    set
        up that requires an element in the document body.\n\n    @event didInsertElement\n
        \ */\n  didInsertElement: Ember.K,\n\n  /**\n    Called when the view is about
        to rerender, but before anything has\n    been torn down. This is a good opportunity
        to tear down any manual\n    observers you have installed based on the DOM
        state\n\n    @event willClearRender\n  */\n  willClearRender: Ember.K,\n\n
        \ /**\n    @private\n\n    Run this callback on the current view (unless includeSelf
        is false) and recursively on child views.\n\n    @method invokeRecursively\n
        \   @param fn {Function}\n    @param includeSelf (optional, default true)\n
        \ */\n  invokeRecursively: function(fn, includeSelf) {\n    var childViews
        = (includeSelf === false) ? this._childViews : [this];\n    var currentViews,
        view, currentChildViews;\n\n    while (childViews.length) {\n      currentViews
        = childViews.slice();\n      childViews = [];\n\n      for (var i=0, l=currentViews.length;
        i<l; i++) {\n        view = currentViews[i];\n        currentChildViews =
        view._childViews ? view._childViews.slice(0) : null;\n        fn(view);\n
        \       if (currentChildViews) {\n          childViews.push.apply(childViews,
        currentChildViews);\n        }\n      }\n    }\n  },\n\n  triggerRecursively:
        function(eventName) {\n    var childViews = [this], currentViews, view, currentChildViews;\n\n
        \   while (childViews.length) {\n      currentViews = childViews.slice();\n
        \     childViews = [];\n\n      for (var i=0, l=currentViews.length; i<l;
        i++) {\n        view = currentViews[i];\n        currentChildViews = view._childViews
        ? view._childViews.slice(0) : null;\n        if (view.trigger) { view.trigger(eventName);
        }\n        if (currentChildViews) {\n          childViews.push.apply(childViews,
        currentChildViews);\n        }\n\n      }\n    }\n  },\n\n  viewHierarchyCollection:
        function() {\n    var currentView, viewCollection = new ViewCollection([this]);\n\n
        \   for (var i = 0; i < viewCollection.length; i++) {\n      currentView =
        viewCollection.objectAt(i);\n      if (currentView._childViews) {\n        viewCollection.push.apply(viewCollection,
        currentView._childViews);\n      }\n    }\n\n    return viewCollection;\n
        \ },\n\n  /**\n    Destroys any existing element along with the element for
        any child views\n    as well. If the view does not currently have a element,
        then this method\n    will do nothing.\n\n    If you implement `willDestroyElement()`
        on your view, then this method will\n    be invoked on your view before your
        element is destroyed to give you a\n    chance to clean up any event handlers,
        etc.\n\n    If you write a `willDestroyElement()` handler, you can assume
        that your\n    `didInsertElement()` handler was called earlier for the same
        element.\n\n    You should not call or override this method yourself, but
        you may\n    want to implement the above callbacks.\n\n    @method destroyElement\n
        \   @return {Ember.View} receiver\n  */\n  destroyElement: function() {\n
        \   return this.currentState.destroyElement(this);\n  },\n\n  /**\n    Called
        when the element of the view is going to be destroyed. Override\n    this
        function to do any teardown that requires an element, like removing\n    event
        listeners.\n\n    @event willDestroyElement\n  */\n  willDestroyElement: Ember.K,\n\n
        \ /**\n    @private\n\n    Triggers the `willDestroyElement` event (which
        invokes the\n    `willDestroyElement()` method if it exists) on this view
        and all child\n    views.\n\n    Before triggering `willDestroyElement`, it
        first triggers the\n    `willClearRender` event recursively.\n\n    @method
        _notifyWillDestroyElement\n  */\n  _notifyWillDestroyElement: function() {\n
        \   var viewCollection = this.viewHierarchyCollection();\n    viewCollection.trigger('willClearRender');\n
        \   viewCollection.trigger('willDestroyElement');\n    return viewCollection;\n
        \ },\n\n  /**\n    @private\n\n    If this view's element changes, we need
        to invalidate the caches of our\n    child views so that we do not retain
        references to DOM elements that are\n    no longer needed.\n\n    @method
        _elementDidChange\n  */\n  _elementDidChange: Ember.observer(function() {\n
        \   this.forEachChildView(function(view) {\n      delete meta(view).cache.element;\n
        \   });\n  }, 'element'),\n\n  /**\n    Called when the parentView property
        has changed.\n\n    @event parentViewDidChange\n  */\n  parentViewDidChange:
        Ember.K,\n\n  instrumentName: 'view',\n\n  instrumentDetails: function(hash)
        {\n    hash.template = get(this, 'templateName');\n    this._super(hash);\n
        \ },\n\n  _renderToBuffer: function(parentBuffer, bufferOperation) {\n    this.lengthBeforeRender
        = this._childViews.length;\n    var buffer = this._super(parentBuffer, bufferOperation);\n
        \   this.lengthAfterRender = this._childViews.length;\n\n    return buffer;\n
        \ },\n\n  renderToBufferIfNeeded: function (buffer) {\n    return this.currentState.renderToBufferIfNeeded(this,
        buffer);\n  },\n\n  beforeRender: function(buffer) {\n    this.applyAttributesToBuffer(buffer);\n
        \   buffer.pushOpeningTag();\n  },\n\n  afterRender: function(buffer) {\n
        \   buffer.pushClosingTag();\n  },\n\n  applyAttributesToBuffer: function(buffer)
        {\n    // Creates observers for all registered class name and attribute bindings,\n
        \   // then adds them to the element.\n    var classNameBindings = get(this,
        'classNameBindings');\n    if (classNameBindings.length) {\n      this._applyClassNameBindings(classNameBindings);\n
        \   }\n\n    // Pass the render buffer so the method can apply attributes
        directly.\n    // This isn't needed for class name bindings because they use
        the\n    // existing classNames infrastructure.\n    var attributeBindings
        = get(this, 'attributeBindings');\n    if (attributeBindings.length) {\n      this._applyAttributeBindings(buffer,
        attributeBindings);\n    }\n\n    buffer.setClasses(this.classNames);\n    buffer.id(this.elementId);\n\n
        \   var role = get(this, 'ariaRole');\n    if (role) {\n      buffer.attr('role',
        role);\n    }\n\n    if (get(this, 'isVisible') === false) {\n      buffer.style('display',
        'none');\n    }\n  },\n\n  // ..........................................................\n
        \ // STANDARD RENDER PROPERTIES\n  //\n\n  /**\n    Tag name for the view's
        outer element. The tag name is only used when an\n    element is first created.
        If you change the `tagName` for an element, you\n    must destroy and recreate
        the view element.\n\n    By default, the render buffer will use a `<div>`
        tag for views.\n\n    @property tagName\n    @type String\n    @default null\n
        \ */\n\n  // We leave this null by default so we can tell the difference between\n
        \ // the default case and a user-specified tag.\n  tagName: null,\n\n  /**\n
        \   The WAI-ARIA role of the control represented by this view. For example,
        a\n    button may have a role of type 'button', or a pane may have a role
        of\n    type 'alertdialog'. This property is used by assistive software to
        help\n    visually challenged users navigate rich web applications.\n\n    The
        full list of valid WAI-ARIA roles is available at:\n    [http://www.w3.org/TR/wai-aria/roles#roles_categorization](http://www.w3.org/TR/wai-aria/roles#roles_categorization)\n\n
        \   @property ariaRole\n    @type String\n    @default null\n  */\n  ariaRole:
        null,\n\n  /**\n    Standard CSS class names to apply to the view's outer
        element. This\n    property automatically inherits any class names defined
        by the view's\n    superclasses as well.\n\n    @property classNames\n    @type
        Array\n    @default ['ember-view']\n  */\n  classNames: ['ember-view'],\n\n
        \ /**\n    A list of properties of the view to apply as class names. If the
        property\n    is a string value, the value of that string will be applied
        as a class\n    name.\n\n    ```javascript\n    // Applies the 'high' class
        to the view element\n    Ember.View.extend({\n      classNameBindings: ['priority']\n
        \     priority: 'high'\n    });\n    ```\n\n    If the value of the property
        is a Boolean, the name of that property is\n    added as a dasherized class
        name.\n\n    ```javascript\n    // Applies the 'is-urgent' class to the view
        element\n    Ember.View.extend({\n      classNameBindings: ['isUrgent']\n
        \     isUrgent: true\n    });\n    ```\n\n    If you would prefer to use a
        custom value instead of the dasherized\n    property name, you can pass a
        binding like this:\n\n    ```javascript\n    // Applies the 'urgent' class
        to the view element\n    Ember.View.extend({\n      classNameBindings: ['isUrgent:urgent']\n
        \     isUrgent: true\n    });\n    ```\n\n    This list of properties is inherited
        from the view's superclasses as well.\n\n    @property classNameBindings\n
        \   @type Array\n    @default []\n  */\n  classNameBindings: EMPTY_ARRAY,\n\n
        \ /**\n    A list of properties of the view to apply as attributes. If the
        property is\n    a string value, the value of that string will be applied
        as the attribute.\n\n    ```javascript\n    // Applies the type attribute
        to the element\n    // with the value \"button\", like <div type=\"button\">\n
        \   Ember.View.extend({\n      attributeBindings: ['type'],\n      type: 'button'\n
        \   });\n    ```\n\n    If the value of the property is a Boolean, the name
        of that property is\n    added as an attribute.\n\n    ```javascript\n    //
        Renders something like <div enabled=\"enabled\">\n    Ember.View.extend({\n
        \     attributeBindings: ['enabled'],\n      enabled: true\n    });\n    ```\n\n
        \   @property attributeBindings\n  */\n  attributeBindings: EMPTY_ARRAY,\n\n
        \ // .......................................................\n  // CORE DISPLAY
        METHODS\n  //\n\n  /**\n    @private\n\n    Setup a view, but do not finish
        waking it up.\n    - configure `childViews`\n    - register the view with
        the global views hash, which is used for event\n      dispatch\n\n    @method
        init\n  */\n  init: function() {\n    this.elementId = this.elementId || guidFor(this);\n\n
        \   this._super();\n\n    // setup child views. be sure to clone the child
        views array first\n    this._childViews = this._childViews.slice();\n\n    Ember.assert(\"Only
        arrays are allowed for 'classNameBindings'\", Ember.typeOf(this.classNameBindings)
        === 'array');\n    this.classNameBindings = Ember.A(this.classNameBindings.slice());\n\n
        \   Ember.assert(\"Only arrays are allowed for 'classNames'\", Ember.typeOf(this.classNames)
        === 'array');\n    this.classNames = Ember.A(this.classNames.slice());\n  },\n\n
        \ appendChild: function(view, options) {\n    return this.currentState.appendChild(this,
        view, options);\n  },\n\n  /**\n    Removes the child view from the parent
        view.\n\n    @method removeChild\n    @param {Ember.View} view\n    @return
        {Ember.View} receiver\n  */\n  removeChild: function(view) {\n    // If we're
        destroying, the entire subtree will be\n    // freed, and the DOM will be
        handled separately,\n    // so no need to mess with childViews.\n    if (this.isDestroying)
        { return; }\n\n    // update parent node\n    set(view, '_parentView', null);\n\n
        \   // remove view from childViews array.\n    var childViews = this._childViews;\n\n
        \   Ember.EnumerableUtils.removeObject(childViews, view);\n\n    this.propertyDidChange('childViews');
        // HUH?! what happened to will change?\n\n    return this;\n  },\n\n  /**\n
        \   Removes all children from the `parentView`.\n\n    @method removeAllChildren\n
        \   @return {Ember.View} receiver\n  */\n  removeAllChildren: function() {\n
        \   return this.mutateChildViews(function(parentView, view) {\n      parentView.removeChild(view);\n
        \   });\n  },\n\n  destroyAllChildren: function() {\n    return this.mutateChildViews(function(parentView,
        view) {\n      view.destroy();\n    });\n  },\n\n  /**\n    Removes the view
        from its `parentView`, if one is found. Otherwise\n    does nothing.\n\n    @method
        removeFromParent\n    @return {Ember.View} receiver\n  */\n  removeFromParent:
        function() {\n    var parent = this._parentView;\n\n    // Remove DOM element
        from parent\n    this.remove();\n\n    if (parent) { parent.removeChild(this);
        }\n    return this;\n  },\n\n  /**\n    You must call `destroy` on a view
        to destroy the view (and all of its\n    child views). This will remove the
        view from any parent node, then make\n    sure that the DOM element managed
        by the view can be released by the\n    memory manager.\n\n    @method destroy\n
        \ */\n  destroy: function() {\n    var childViews = this._childViews,\n        //
        get parentView before calling super because it'll be destroyed\n        nonVirtualParentView
        = get(this, 'parentView'),\n        viewName = this.viewName,\n        childLen,
        i;\n\n    if (!this._super()) { return; }\n\n    childLen = childViews.length;\n
        \   for (i=childLen-1; i>=0; i--) {\n      childViews[i].removedFromDOM =
        true;\n    }\n\n    // remove from non-virtual parent view if viewName was
        specified\n    if (viewName && nonVirtualParentView) {\n      nonVirtualParentView.set(viewName,
        null);\n    }\n\n    childLen = childViews.length;\n    for (i=childLen-1;
        i>=0; i--) {\n      childViews[i].destroy();\n    }\n\n    return this;\n
        \ },\n\n  /**\n    Instantiates a view to be added to the childViews array
        during view\n    initialization. You generally will not call this method directly
        unless\n    you are overriding `createChildViews()`. Note that this method
        will\n    automatically configure the correct settings on the new view instance
        to\n    act as a child of the parent.\n\n    @method createChildView\n    @param
        {Class|String} viewClass\n    @param {Hash} [attrs] Attributes to add\n    @return
        {Ember.View} new instance\n  */\n  createChildView: function(view, attrs)
        {\n    if (!view) {\n      throw new TypeError(\"createChildViews first argument
        must exist\");\n    }\n\n    if (view.isView && view._parentView === this
        && view.container === this.container) {\n      return view;\n    }\n\n    attrs
        = attrs || {};\n    attrs._parentView = this;\n\n    if (Ember.CoreView.detect(view))
        {\n      attrs.templateData = attrs.templateData || get(this, 'templateData');\n\n
        \     attrs.container = this.container;\n      view = view.create(attrs);\n\n
        \     // don't set the property on a virtual view, as they are invisible to\n
        \     // consumers of the view API\n      if (view.viewName) {\n        set(get(this,
        'concreteView'), view.viewName, view);\n      }\n    } else if ('string' ===
        typeof view) {\n      var fullName = 'view:' + view;\n      var View = this.container.lookupFactory(fullName);\n\n
        \     Ember.assert(\"Could not find view: '\" + fullName + \"'\", !!View);\n\n
        \     attrs.templateData = get(this, 'templateData');\n      view = View.create(attrs);\n
        \   } else {\n      Ember.assert('You must pass instance or subclass of View',
        view.isView);\n      attrs.container = this.container;\n\n      if (!get(view,
        'templateData')) {\n        attrs.templateData = get(this, 'templateData');\n
        \     }\n\n      Ember.setProperties(view, attrs);\n\n    }\n\n    return
        view;\n  },\n\n  becameVisible: Ember.K,\n  becameHidden: Ember.K,\n\n  /**\n
        \   @private\n\n    When the view's `isVisible` property changes, toggle the
        visibility\n    element of the actual DOM element.\n\n    @method _isVisibleDidChange\n
        \ */\n  _isVisibleDidChange: Ember.observer(function() {\n    var $el = this.$();\n
        \   if (!$el) { return; }\n\n    var isVisible = get(this, 'isVisible');\n\n
        \   $el.toggle(isVisible);\n\n    if (this._isAncestorHidden()) { return;
        }\n\n    if (isVisible) {\n      this._notifyBecameVisible();\n    } else
        {\n      this._notifyBecameHidden();\n    }\n  }, 'isVisible'),\n\n  _notifyBecameVisible:
        function() {\n    this.trigger('becameVisible');\n\n    this.forEachChildView(function(view)
        {\n      var isVisible = get(view, 'isVisible');\n\n      if (isVisible ||
        isVisible === null) {\n        view._notifyBecameVisible();\n      }\n    });\n
        \ },\n\n  _notifyBecameHidden: function() {\n    this.trigger('becameHidden');\n
        \   this.forEachChildView(function(view) {\n      var isVisible = get(view,
        'isVisible');\n\n      if (isVisible || isVisible === null) {\n        view._notifyBecameHidden();\n
        \     }\n    });\n  },\n\n  _isAncestorHidden: function() {\n    var parent
        = get(this, 'parentView');\n\n    while (parent) {\n      if (get(parent,
        'isVisible') === false) { return true; }\n\n      parent = get(parent, 'parentView');\n
        \   }\n\n    return false;\n  },\n\n  clearBuffer: function() {\n    this.invokeRecursively(function(view)
        {\n      view.buffer = null;\n    });\n  },\n\n  transitionTo: function(state,
        children) {\n    var priorState = this.currentState,\n        currentState
        = this.currentState = this.states[state];\n    this.state = state;\n\n    if
        (priorState && priorState.exit) { priorState.exit(this); }\n    if (currentState.enter)
        { currentState.enter(this); }\n    if (state === 'inDOM') { delete Ember.meta(this).cache.element;
        }\n\n    if (children !== false) {\n      this.forEachChildView(function(view)
        {\n        view.transitionTo(state);\n      });\n    }\n  },\n\n  // .......................................................\n
        \ // EVENT HANDLING\n  //\n\n  /**\n    @private\n\n    Handle events from
        `Ember.EventDispatcher`\n\n    @method handleEvent\n    @param eventName {String}\n
        \   @param evt {Event}\n  */\n  handleEvent: function(eventName, evt) {\n
        \   return this.currentState.handleEvent(this, eventName, evt);\n  },\n\n
        \ registerObserver: function(root, path, target, observer) {\n    if (!observer
        && 'function' === typeof target) {\n      observer = target;\n      target
        = null;\n    }\n\n    if (!root || typeof root !== 'object') {\n      return;\n
        \   }\n\n    var view = this,\n        stateCheckedObserver = function() {\n
        \         view.currentState.invokeObserver(this, observer);\n        },\n
        \       scheduledObserver = function() {\n          Ember.run.scheduleOnce('render',
        this, stateCheckedObserver);\n        };\n\n    Ember.addObserver(root, path,
        target, scheduledObserver);\n\n    this.one('willClearRender', function()
        {\n      Ember.removeObserver(root, path, target, scheduledObserver);\n    });\n
        \ }\n\n});\n\n/*\n  Describe how the specified actions should behave in the
        various\n  states that a view can exist in. Possible states:\n\n  * preRender:
        when a view is first instantiated, and after its\n    element was destroyed,
        it is in the preRender state\n  * inBuffer: once a view has been rendered,
        but before it has\n    been inserted into the DOM, it is in the inBuffer state\n
        \ * inDOM: once a view has been inserted into the DOM it is in\n    the inDOM
        state. A view spends the vast majority of its\n    existence in this state.\n
        \ * destroyed: once a view has been destroyed (using the destroy\n    method),
        it is in this state. No further actions can be invoked\n    on a destroyed
        view.\n*/\n\n  // in the destroyed state, everything is illegal\n\n  // before
        rendering has begun, all legal manipulations are noops.\n\n  // inside the
        buffer, legal manipulations are done on the buffer\n\n  // once the view has
        been inserted into the DOM, legal manipulations\n  // are done on the DOM
        element.\n\nfunction notifyMutationListeners() {\n  Ember.run.once(Ember.View,
        'notifyMutationListeners');\n}\n\nvar DOMManager = {\n  prepend: function(view,
        html) {\n    view.$().prepend(html);\n    notifyMutationListeners();\n  },\n\n
        \ after: function(view, html) {\n    view.$().after(html);\n    notifyMutationListeners();\n
        \ },\n\n  html: function(view, html) {\n    view.$().html(html);\n    notifyMutationListeners();\n
        \ },\n\n  replace: function(view) {\n    var element = get(view, 'element');\n\n
        \   set(view, 'element', null);\n\n    view._insertElementLater(function()
        {\n      Ember.$(element).replaceWith(get(view, 'element'));\n      notifyMutationListeners();\n
        \   });\n  },\n\n  remove: function(view) {\n    view.$().remove();\n    notifyMutationListeners();\n
        \ },\n\n  empty: function(view) {\n    view.$().empty();\n    notifyMutationListeners();\n
        \ }\n};\n\nEmber.View.reopen({\n  domManager: DOMManager\n});\n\nEmber.View.reopenClass({\n\n
        \ /**\n    @private\n\n    Parse a path and return an object which holds the
        parsed properties.\n\n    For example a path like \"content.isEnabled:enabled:disabled\"
        will return the\n    following object:\n\n    ```javascript\n    {\n      path:
        \"content.isEnabled\",\n      className: \"enabled\",\n      falsyClassName:
        \"disabled\",\n      classNames: \":enabled:disabled\"\n    }\n    ```\n\n
        \   @method _parsePropertyPath\n    @static\n  */\n  _parsePropertyPath: function(path)
        {\n    var split = path.split(':'),\n        propertyPath = split[0],\n        classNames
        = \"\",\n        className,\n        falsyClassName;\n\n    // check if the
        property is defined as prop:class or prop:trueClass:falseClass\n    if (split.length
        > 1) {\n      className = split[1];\n      if (split.length === 3) { falsyClassName
        = split[2]; }\n\n      classNames = ':' + className;\n      if (falsyClassName)
        { classNames += \":\" + falsyClassName; }\n    }\n\n    return {\n      path:
        propertyPath,\n      classNames: classNames,\n      className: (className
        === '') ? undefined : className,\n      falsyClassName: falsyClassName\n    };\n
        \ },\n\n  /**\n    @private\n\n    Get the class name for a given value, based
        on the path, optional\n    `className` and optional `falsyClassName`.\n\n
        \   - if a `className` or `falsyClassName` has been specified:\n      - if
        the value is truthy and `className` has been specified,\n        `className`
        is returned\n      - if the value is falsy and `falsyClassName` has been specified,\n
        \       `falsyClassName` is returned\n      - otherwise `null` is returned\n
        \   - if the value is `true`, the dasherized last part of the supplied path\n
        \     is returned\n    - if the value is not `false`, `undefined` or `null`,
        the `value`\n      is returned\n    - if none of the above rules apply, `null`
        is returned\n\n    @method _classStringForValue\n    @param path\n    @param
        val\n    @param className\n    @param falsyClassName\n    @static\n  */\n
        \ _classStringForValue: function(path, val, className, falsyClassName) {\n
        \   // When using the colon syntax, evaluate the truthiness or falsiness\n
        \   // of the value to determine which className to return\n    if (className
        || falsyClassName) {\n      if (className && !!val) {\n        return className;\n\n
        \     } else if (falsyClassName && !val) {\n        return falsyClassName;\n\n
        \     } else {\n        return null;\n      }\n\n    // If value is a Boolean
        and true, return the dasherized property\n    // name.\n    } else if (val
        === true) {\n      // Normalize property path to be suitable for use\n      //
        as a class name. For exaple, content.foo.barBaz\n      // becomes bar-baz.\n
        \     var parts = path.split('.');\n      return Ember.String.dasherize(parts[parts.length-1]);\n\n
        \   // If the value is not false, undefined, or null, return the current\n
        \   // value of the property.\n    } else if (val !== false && val != null)
        {\n      return val;\n\n    // Nothing to display. Return null so that the
        old class is removed\n    // but no new class is added.\n    } else {\n      return
        null;\n    }\n  }\n});\n\nvar mutation = Ember.Object.extend(Ember.Evented).create();\n\nEmber.View.addMutationListener
        = function(callback) {\n  mutation.on('change', callback);\n};\n\nEmber.View.removeMutationListener
        = function(callback) {\n  mutation.off('change', callback);\n};\n\nEmber.View.notifyMutationListeners
        = function() {\n  mutation.trigger('change');\n};\n\n/**\n  Global views hash\n\n
        \ @property views\n  @static\n  @type Hash\n*/\nEmber.View.views = {};\n\n//
        If someone overrides the child views computed property when\n// defining their
        class, we want to be able to process the user's\n// supplied childViews and
        then restore the original computed property\n// at view initialization time.
        This happens in Ember.ContainerView's init\n// method.\nEmber.View.childViewsProperty
        = childViewsProperty;\n\nEmber.View.applyAttributeBindings = function(elem,
        name, value) {\n  var type = Ember.typeOf(value);\n\n  // if this changes,
        also change the logic in ember-handlebars/lib/helpers/binding.js\n  if (name
        !== 'value' && (type === 'string' || (type === 'number' && !isNaN(value))))
        {\n    if (value !== elem.attr(name)) {\n      elem.attr(name, value);\n    }\n
        \ } else if (name === 'value' || type === 'boolean') {\n    // We can't set
        properties to undefined or null\n    if (Ember.isNone(value)) { value = '';
        }\n\n    if (value !== elem.prop(name)) {\n      // value and booleans should
        always be properties\n      elem.prop(name, value);\n    }\n  } else if (!value)
        {\n    elem.removeAttr(name);\n  }\n};\n\nEmber.View.states = states;\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-views\n*/\n\nvar get = Ember.get,
        set = Ember.set;\n\nEmber.View.states._default = {\n  // appendChild is only
        legal while rendering the buffer.\n  appendChild: function() {\n    throw
        \"You can't use appendChild outside of the rendering process\";\n  },\n\n
        \ $: function() {\n    return undefined;\n  },\n\n  getElement: function()
        {\n    return null;\n  },\n\n  // Handle events from `Ember.EventDispatcher`\n
        \ handleEvent: function() {\n    return true; // continue event propagation\n
        \ },\n\n  destroyElement: function(view) {\n    set(view, 'element', null);\n
        \   if (view._scheduledInsert) {\n      Ember.run.cancel(view._scheduledInsert);\n
        \     view._scheduledInsert = null;\n    }\n    return view;\n  },\n\n  renderToBufferIfNeeded:
        function () {\n    return false;\n  },\n\n  rerender: Ember.K,\n  invokeObserver:
        Ember.K\n};\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule
        ember-views\n*/\n\nvar preRender = Ember.View.states.preRender = Ember.create(Ember.View.states._default);\n\nEmber.merge(preRender,
        {\n  // a view leaves the preRender state once its element has been\n  //
        created (createElement).\n  insertElement: function(view, fn) {\n    view.createElement();\n
        \   var viewCollection = view.viewHierarchyCollection();\n\n    viewCollection.trigger('willInsertElement');\n\n
        \   fn.call(view);\n\n    // We transition to `inDOM` if the element exists
        in the DOM\n    var element = view.get('element');\n    while (element = element.parentNode)
        {\n      if (element === document) {\n        viewCollection.transitionTo('inDOM',
        false);\n        viewCollection.trigger('didInsertElement');\n      }\n    }\n\n
        \ },\n\n  renderToBufferIfNeeded: function(view, buffer) {\n    view.renderToBuffer(buffer);\n
        \   return true;\n  },\n\n  empty: Ember.K,\n\n  setElement: function(view,
        value) {\n    if (value !== null) {\n      view.transitionTo('hasElement');\n
        \   }\n    return value;\n  }\n});\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-views\n*/\n\nvar get = Ember.get, set = Ember.set;\n\nvar
        inBuffer = Ember.View.states.inBuffer = Ember.create(Ember.View.states._default);\n\nEmber.merge(inBuffer,
        {\n  $: function(view, sel) {\n    // if we don't have an element yet, someone
        calling this.$() is\n    // trying to update an element that isn't in the
        DOM. Instead,\n    // rerender the view to allow the render method to reflect
        the\n    // changes.\n    view.rerender();\n    return Ember.$();\n  },\n\n
        \ // when a view is rendered in a buffer, rerendering it simply\n  // replaces
        the existing buffer with a new one\n  rerender: function(view) {\n    throw
        new Ember.Error(\"Something you did caused a view to re-render after it rendered
        but before it was inserted into the DOM.\");\n  },\n\n  // when a view is
        rendered in a buffer, appending a child\n  // view will render that view and
        append the resulting\n  // buffer into its buffer.\n  appendChild: function(view,
        childView, options) {\n    var buffer = view.buffer, _childViews = view._childViews;\n\n
        \   childView = view.createChildView(childView, options);\n    if (!_childViews.length)
        { _childViews = view._childViews = _childViews.slice(); }\n    _childViews.push(childView);\n\n
        \   childView.renderToBuffer(buffer);\n\n    view.propertyDidChange('childViews');\n\n
        \   return childView;\n  },\n\n  // when a view is rendered in a buffer, destroying
        the\n  // element will simply destroy the buffer and put the\n  // state back
        into the preRender state.\n  destroyElement: function(view) {\n    view.clearBuffer();\n
        \   var viewCollection = view._notifyWillDestroyElement();\n    viewCollection.transitionTo('preRender',
        false);\n\n    return view;\n  },\n\n  empty: function() {\n    Ember.assert(\"Emptying
        a view in the inBuffer state is not allowed and should not happen under normal
        circumstances. Most likely there is a bug in your application. This may be
        due to excessive property change notifications.\");\n  },\n\n  renderToBufferIfNeeded:
        function (view, buffer) {\n    return false;\n  },\n\n  // It should be impossible
        for a rendered view to be scheduled for\n  // insertion.\n  insertElement:
        function() {\n    throw \"You can't insert an element that has already been
        rendered\";\n  },\n\n  setElement: function(view, value) {\n    if (value
        === null) {\n      view.transitionTo('preRender');\n    } else {\n      view.clearBuffer();\n
        \     view.transitionTo('hasElement');\n    }\n\n    return value;\n  },\n\n
        \ invokeObserver: function(target, observer) {\n    observer.call(target);\n
        \ }\n});\n\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule ember-views\n*/\n\nvar
        get = Ember.get, set = Ember.set;\n\nvar hasElement = Ember.View.states.hasElement
        = Ember.create(Ember.View.states._default);\n\nEmber.merge(hasElement, {\n
        \ $: function(view, sel) {\n    var elem = get(view, 'element');\n    return
        sel ? Ember.$(sel, elem) : Ember.$(elem);\n  },\n\n  getElement: function(view)
        {\n    var parent = get(view, 'parentView');\n    if (parent) { parent = get(parent,
        'element'); }\n    if (parent) { return view.findElementInParentElement(parent);
        }\n    return Ember.$(\"#\" + get(view, 'elementId'))[0];\n  },\n\n  setElement:
        function(view, value) {\n    if (value === null) {\n      view.transitionTo('preRender');\n
        \   } else {\n      throw \"You cannot set an element to a non-null value
        when the element is already in the DOM.\";\n    }\n\n    return value;\n  },\n\n
        \ // once the view has been inserted into the DOM, rerendering is\n  // deferred
        to allow bindings to synchronize.\n  rerender: function(view) {\n    view.triggerRecursively('willClearRender');\n\n
        \   view.clearRenderedChildren();\n\n    view.domManager.replace(view);\n
        \   return view;\n  },\n\n  // once the view is already in the DOM, destroying
        it removes it\n  // from the DOM, nukes its element, and puts it back into
        the\n  // preRender state if inDOM.\n\n  destroyElement: function(view) {\n
        \   view._notifyWillDestroyElement();\n    view.domManager.remove(view);\n
        \   set(view, 'element', null);\n    if (view._scheduledInsert) {\n      Ember.run.cancel(view._scheduledInsert);\n
        \     view._scheduledInsert = null;\n    }\n    return view;\n  },\n\n  empty:
        function(view) {\n    var _childViews = view._childViews, len, idx;\n    if
        (_childViews) {\n      len = _childViews.length;\n      for (idx = 0; idx
        < len; idx++) {\n        _childViews[idx]._notifyWillDestroyElement();\n      }\n
        \   }\n    view.domManager.empty(view);\n  },\n\n  // Handle events from `Ember.EventDispatcher`\n
        \ handleEvent: function(view, eventName, evt) {\n    if (view.has(eventName))
        {\n      // Handler should be able to re-dispatch events, so we don't\n      //
        preventDefault or stopPropagation.\n      return view.trigger(eventName, evt);\n
        \   } else {\n      return true; // continue event propagation\n    }\n  },\n\n
        \ invokeObserver: function(target, observer) {\n    observer.call(target);\n
        \ }\n});\n\nvar inDOM = Ember.View.states.inDOM = Ember.create(hasElement);\n\nEmber.merge(inDOM,
        {\n  enter: function(view) {\n    // Register the view for event handling.
        This hash is used by\n    // Ember.EventDispatcher to dispatch incoming events.\n
        \   if (!view.isVirtual) {\n      Ember.assert(\"Attempted to register a view
        with an id already in use: \"+view.elementId, !Ember.View.views[view.elementId]);\n
        \     Ember.View.views[view.elementId] = view;\n    }\n\n    view.addBeforeObserver('elementId',
        function() {\n      throw new Ember.Error(\"Changing a view's elementId after
        creation is not allowed\");\n    });\n  },\n\n  exit: function(view) {\n    if
        (!this.isVirtual) delete Ember.View.views[view.elementId];\n  },\n\n  insertElement:
        function(view, fn) {\n    throw \"You can't insert an element into the DOM
        that has already been inserted\";\n  }\n});\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-views\n*/\n\nvar destroyingError = \"You can't call
        %@ on a view being destroyed\", fmt = Ember.String.fmt;\n\nvar destroying
        = Ember.View.states.destroying = Ember.create(Ember.View.states._default);\n\nEmber.merge(destroying,
        {\n  appendChild: function() {\n    throw fmt(destroyingError, ['appendChild']);\n
        \ },\n  rerender: function() {\n    throw fmt(destroyingError, ['rerender']);\n
        \ },\n  destroyElement: function() {\n    throw fmt(destroyingError, ['destroyElement']);\n
        \ },\n  empty: function() {\n    throw fmt(destroyingError, ['empty']);\n
        \ },\n\n  setElement: function() {\n    throw fmt(destroyingError, [\"set('element',
        ...)\"]);\n  },\n\n  renderToBufferIfNeeded: function() {\n    return false;\n
        \ },\n\n  // Since element insertion is scheduled, don't do anything if\n
        \ // the view has been destroyed between scheduling and execution\n  insertElement:
        Ember.K\n});\n\n\n})();\n\n\n\n(function() {\nEmber.View.cloneStates = function(from)
        {\n  var into = {};\n\n  into._default = {};\n  into.preRender = Ember.create(into._default);\n
        \ into.destroying = Ember.create(into._default);\n  into.inBuffer = Ember.create(into._default);\n
        \ into.hasElement = Ember.create(into._default);\n  into.inDOM = Ember.create(into.hasElement);\n\n
        \ for (var stateName in from) {\n    if (!from.hasOwnProperty(stateName))
        { continue; }\n    Ember.merge(into[stateName], from[stateName]);\n  }\n\n
        \ return into;\n};\n\n})();\n\n\n\n(function() {\nvar states = Ember.View.cloneStates(Ember.View.states);\n\n/**\n@module
        ember\n@submodule ember-views\n*/\n\nvar get = Ember.get, set = Ember.set;\nvar
        forEach = Ember.EnumerableUtils.forEach;\nvar ViewCollection = Ember._ViewCollection;\n\n/**\n
        \ A `ContainerView` is an `Ember.View` subclass that implements `Ember.MutableArray`\n
        \ allowing programatic management of its child views.\n\n  ## Setting Initial
        Child Views\n\n  The initial array of child views can be set in one of two
        ways. You can\n  provide a `childViews` property at creation time that contains
        instance of\n  `Ember.View`:\n\n  ```javascript\n  aContainer = Ember.ContainerView.create({\n
        \   childViews: [Ember.View.create(), Ember.View.create()]\n  });\n  ```\n\n
        \ You can also provide a list of property names whose values are instances
        of\n  `Ember.View`:\n\n  ```javascript\n  aContainer = Ember.ContainerView.create({\n
        \   childViews: ['aView', 'bView', 'cView'],\n    aView: Ember.View.create(),\n
        \   bView: Ember.View.create(),\n    cView: Ember.View.create()\n  });\n  ```\n\n
        \ The two strategies can be combined:\n\n  ```javascript\n  aContainer = Ember.ContainerView.create({\n
        \   childViews: ['aView', Ember.View.create()],\n    aView: Ember.View.create()\n
        \ });\n  ```\n\n  Each child view's rendering will be inserted into the container's
        rendered\n  HTML in the same order as its position in the `childViews` property.\n\n
        \ ## Adding and Removing Child Views\n\n  The container view implements `Ember.MutableArray`
        allowing programatic management of its child views.\n\n  To remove a view,
        pass that view into a `removeObject` call on the container view.\n\n  Given
        an empty `<body>` the following code\n\n  ```javascript\n  aContainer = Ember.ContainerView.create({\n
        \   classNames: ['the-container'],\n    childViews: ['aView', 'bView'],\n
        \   aView: Ember.View.create({\n      template: Ember.Handlebars.compile(\"A\")\n
        \   }),\n    bView: Ember.View.create({\n      template: Ember.Handlebars.compile(\"B\")\n
        \   })\n  });\n\n  aContainer.appendTo('body');\n  ```\n\n  Results in the
        HTML\n\n  ```html\n  <div class=\"ember-view the-container\">\n    <div class=\"ember-view\">A</div>\n
        \   <div class=\"ember-view\">B</div>\n  </div>\n  ```\n\n  Removing a view\n\n
        \ ```javascript\n  aContainer.toArray();  // [aContainer.aView, aContainer.bView]\n
        \ aContainer.removeObject(aContainer.get('bView'));\n  aContainer.toArray();
        \ // [aContainer.aView]\n  ```\n\n  Will result in the following HTML\n\n
        \ ```html\n  <div class=\"ember-view the-container\">\n    <div class=\"ember-view\">A</div>\n
        \ </div>\n  ```\n\n  Similarly, adding a child view is accomplished by adding
        `Ember.View` instances to the\n  container view.\n\n  Given an empty `<body>`
        the following code\n\n  ```javascript\n  aContainer = Ember.ContainerView.create({\n
        \   classNames: ['the-container'],\n    childViews: ['aView', 'bView'],\n
        \   aView: Ember.View.create({\n      template: Ember.Handlebars.compile(\"A\")\n
        \   }),\n    bView: Ember.View.create({\n      template: Ember.Handlebars.compile(\"B\")\n
        \   })\n  });\n\n  aContainer.appendTo('body');\n  ```\n\n  Results in the
        HTML\n\n  ```html\n  <div class=\"ember-view the-container\">\n    <div class=\"ember-view\">A</div>\n
        \   <div class=\"ember-view\">B</div>\n  </div>\n  ```\n\n  Adding a view\n\n
        \ ```javascript\n  AnotherViewClass = Ember.View.extend({\n    template: Ember.Handlebars.compile(\"Another
        view\")\n  });\n\n  aContainer.toArray();  // [aContainer.aView, aContainer.bView]\n
        \ aContainer.pushObject(AnotherViewClass.create());\n  aContainer.toArray();
        // [aContainer.aView, aContainer.bView, <AnotherViewClass instance>]\n  ```\n\n
        \ Will result in the following HTML\n\n  ```html\n  <div class=\"ember-view
        the-container\">\n    <div class=\"ember-view\">A</div>\n    <div class=\"ember-view\">B</div>\n
        \   <div class=\"ember-view\">Another view</div>\n  </div>\n  ```\n\n  ##
        Templates and Layout\n\n  A `template`, `templateName`, `defaultTemplate`,
        `layout`, `layoutName` or\n  `defaultLayout` property on a container view
        will not result in the template\n  or layout being rendered. The HTML contents
        of a `Ember.ContainerView`'s DOM\n  representation will only be the rendered
        HTML of its child views.\n\n  @class ContainerView\n  @namespace Ember\n  @extends
        Ember.View\n*/\nEmber.ContainerView = Ember.View.extend(Ember.MutableArray,
        {\n  states: states,\n\n  init: function() {\n    this._super();\n\n    var
        childViews = get(this, 'childViews');\n\n    // redefine view's childViews
        property that was obliterated\n    Ember.defineProperty(this, 'childViews',
        Ember.View.childViewsProperty);\n\n    var _childViews = this._childViews;\n\n
        \   forEach(childViews, function(viewName, idx) {\n      var view;\n\n      if
        ('string' === typeof viewName) {\n        view = get(this, viewName);\n        view
        = this.createChildView(view);\n        set(this, viewName, view);\n      }
        else {\n        view = this.createChildView(viewName);\n      }\n\n      _childViews[idx]
        = view;\n    }, this);\n\n    var currentView = get(this, 'currentView');\n
        \   if (currentView) {\n      if (!_childViews.length) { _childViews = this._childViews
        = this._childViews.slice(); }\n      _childViews.push(this.createChildView(currentView));\n
        \   }\n  },\n\n  replace: function(idx, removedCount, addedViews) {\n    var
        addedCount = addedViews ? get(addedViews, 'length') : 0;\n    var self = this;\n
        \   Ember.assert(\"You can't add a child to a container that is already a
        child of another view\", Ember.A(addedViews).every(function(item) { return
        !get(item, '_parentView') || get(item, '_parentView') === self; }));\n\n    this.arrayContentWillChange(idx,
        removedCount, addedCount);\n    this.childViewsWillChange(this._childViews,
        idx, removedCount);\n\n    if (addedCount === 0) {\n      this._childViews.splice(idx,
        removedCount) ;\n    } else {\n      var args = [idx, removedCount].concat(addedViews);\n
        \     if (addedViews.length && !this._childViews.length) { this._childViews
        = this._childViews.slice(); }\n      this._childViews.splice.apply(this._childViews,
        args);\n    }\n\n    this.arrayContentDidChange(idx, removedCount, addedCount);\n
        \   this.childViewsDidChange(this._childViews, idx, removedCount, addedCount);\n\n
        \   return this;\n  },\n\n  objectAt: function(idx) {\n    return this._childViews[idx];\n
        \ },\n\n  length: Ember.computed(function () {\n    return this._childViews.length;\n
        \ }).volatile(),\n\n  /**\n    @private\n\n    Instructs each child view to
        render to the passed render buffer.\n\n    @method render\n    @param {Ember.RenderBuffer}
        buffer the buffer to render to\n  */\n  render: function(buffer) {\n    this.forEachChildView(function(view)
        {\n      view.renderToBuffer(buffer);\n    });\n  },\n\n  instrumentName:
        'container',\n\n  /**\n    @private\n\n    When a child view is removed, destroy
        its element so that\n    it is removed from the DOM.\n\n    The array observer
        that triggers this action is set up in the\n    `renderToBuffer` method.\n\n
        \   @method childViewsWillChange\n    @param {Ember.Array} views the child
        views array before mutation\n    @param {Number} start the start position
        of the mutation\n    @param {Number} removed the number of child views removed\n
        \ **/\n  childViewsWillChange: function(views, start, removed) {\n    this.propertyWillChange('childViews');\n\n
        \   if (removed > 0) {\n      var changedViews = views.slice(start, start+removed);\n
        \     // transition to preRender before clearing parentView\n      this.currentState.childViewsWillChange(this,
        views, start, removed);\n      this.initializeViews(changedViews, null, null);\n
        \   }\n  },\n\n  removeChild: function(child) {\n    this.removeObject(child);\n
        \   return this;\n  },\n\n  /**\n    @private\n\n    When a child view is
        added, make sure the DOM gets updated appropriately.\n\n    If the view has
        already rendered an element, we tell the child view to\n    create an element
        and insert it into the DOM. If the enclosing container\n    view has already
        written to a buffer, but not yet converted that buffer\n    into an element,
        we insert the string representation of the child into the\n    appropriate
        place in the buffer.\n\n    @method childViewsDidChange\n    @param {Ember.Array}
        views the array of child views afte the mutation has occurred\n    @param
        {Number} start the start position of the mutation\n    @param {Number} removed
        the number of child views removed\n    @param {Number} the number of child
        views added\n  */\n  childViewsDidChange: function(views, start, removed,
        added) {\n    if (added > 0) {\n      var changedViews = views.slice(start,
        start+added);\n      this.initializeViews(changedViews, this, get(this, 'templateData'));\n
        \     this.currentState.childViewsDidChange(this, views, start, added);\n
        \   }\n    this.propertyDidChange('childViews');\n  },\n\n  initializeViews:
        function(views, parentView, templateData) {\n    forEach(views, function(view)
        {\n      set(view, '_parentView', parentView);\n\n      if (!view.container
        && parentView) {\n        set(view, 'container', parentView.container);\n
        \     }\n\n      if (!get(view, 'templateData')) {\n        set(view, 'templateData',
        templateData);\n      }\n    });\n  },\n\n  currentView: null,\n\n  _currentViewWillChange:
        Ember.beforeObserver(function() {\n    var currentView = get(this, 'currentView');\n
        \   if (currentView) {\n      currentView.destroy();\n    }\n  }, 'currentView'),\n\n
        \ _currentViewDidChange: Ember.observer(function() {\n    var currentView
        = get(this, 'currentView');\n    if (currentView) {\n      Ember.assert(\"You
        tried to set a current view that already has a parent. Make sure you don't
        have multiple outlets in the same view.\", !get(currentView, '_parentView'));\n
        \     this.pushObject(currentView);\n    }\n  }, 'currentView'),\n\n  _ensureChildrenAreInDOM:
        function () {\n    this.currentState.ensureChildrenAreInDOM(this);\n  }\n});\n\nEmber.merge(states._default,
        {\n  childViewsWillChange: Ember.K,\n  childViewsDidChange: Ember.K,\n  ensureChildrenAreInDOM:
        Ember.K\n});\n\nEmber.merge(states.inBuffer, {\n  childViewsDidChange: function(parentView,
        views, start, added) {\n    throw new Ember.Error('You cannot modify child
        views while in the inBuffer state');\n  }\n});\n\nEmber.merge(states.hasElement,
        {\n  childViewsWillChange: function(view, views, start, removed) {\n    for
        (var i=start; i<start+removed; i++) {\n      views[i].remove();\n    }\n  },\n\n
        \ childViewsDidChange: function(view, views, start, added) {\n    Ember.run.scheduleOnce('render',
        view, '_ensureChildrenAreInDOM');\n  },\n\n  ensureChildrenAreInDOM: function(view)
        {\n    var childViews = view._childViews, i, len, childView, previous, buffer,
        viewCollection = new ViewCollection();\n\n    for (i = 0, len = childViews.length;
        i < len; i++) {\n      childView = childViews[i];\n\n      if (!buffer) {
        buffer = Ember.RenderBuffer(); buffer._hasElement = false; }\n\n      if (childView.renderToBufferIfNeeded(buffer))
        {\n        viewCollection.push(childView);\n      } else if (viewCollection.length)
        {\n        insertViewCollection(view, viewCollection, previous, buffer);\n
        \       buffer = null;\n        previous = childView;\n        viewCollection.clear();\n
        \     } else {\n        previous = childView;\n      }\n    }\n\n    if (viewCollection.length)
        {\n      insertViewCollection(view, viewCollection, previous, buffer);\n    }\n
        \ }\n});\n\nfunction insertViewCollection(view, viewCollection, previous,
        buffer) {\n  viewCollection.triggerRecursively('willInsertElement');\n\n  if
        (previous) {\n    previous.domManager.after(previous, buffer.string());\n
        \ } else {\n    view.domManager.prepend(view, buffer.string());\n  }\n\n  viewCollection.forEach(function(v)
        {\n    v.transitionTo('inDOM');\n    v.propertyDidChange('element');\n    v.triggerRecursively('didInsertElement');\n
        \ });\n}\n\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule ember-views\n*/\n\nvar
        get = Ember.get, set = Ember.set, fmt = Ember.String.fmt;\n\n/**\n  `Ember.CollectionView`
        is an `Ember.View` descendent responsible for managing\n  a collection (an
        array or array-like object) by maintaining a child view object\n  and associated
        DOM representation for each item in the array and ensuring\n  that child views
        and their associated rendered HTML are updated when items in\n  the array
        are added, removed, or replaced.\n\n  ## Setting content\n\n  The managed
        collection of objects is referenced as the `Ember.CollectionView`\n  instance's
        `content` property.\n\n  ```javascript\n  someItemsView = Ember.CollectionView.create({\n
        \   content: ['A', 'B','C']\n  })\n  ```\n\n  The view for each item in the
        collection will have its `content` property set\n  to the item.\n\n  ## Specifying
        itemViewClass\n\n  By default the view class for each item in the managed
        collection will be an\n  instance of `Ember.View`. You can supply a different
        class by setting the\n  `CollectionView`'s `itemViewClass` property.\n\n  Given
        an empty `<body>` and the following code:\n\n  ```javascript\n  someItemsView
        = Ember.CollectionView.create({\n    classNames: ['a-collection'],\n    content:
        ['A','B','C'],\n    itemViewClass: Ember.View.extend({\n      template: Ember.Handlebars.compile(\"the
        letter: {{view.content}}\")\n    })\n  });\n\n  someItemsView.appendTo('body');\n
        \ ```\n\n  Will result in the following HTML structure\n\n  ```html\n  <div
        class=\"ember-view a-collection\">\n    <div class=\"ember-view\">the letter:
        A</div>\n    <div class=\"ember-view\">the letter: B</div>\n    <div class=\"ember-view\">the
        letter: C</div>\n  </div>\n  ```\n\n  ## Automatic matching of parent/child
        tagNames\n\n  Setting the `tagName` property of a `CollectionView` to any
        of\n  \"ul\", \"ol\", \"table\", \"thead\", \"tbody\", \"tfoot\", \"tr\",
        or \"select\" will result\n  in the item views receiving an appropriately
        matched `tagName` property.\n\n  Given an empty `<body>` and the following
        code:\n\n  ```javascript\n  anUndorderedListView = Ember.CollectionView.create({\n
        \   tagName: 'ul',\n    content: ['A','B','C'],\n    itemViewClass: Ember.View.extend({\n
        \     template: Ember.Handlebars.compile(\"the letter: {{view.content}}\")\n
        \   })\n  });\n\n  anUndorderedListView.appendTo('body');\n  ```\n\n  Will
        result in the following HTML structure\n\n  ```html\n  <ul class=\"ember-view
        a-collection\">\n    <li class=\"ember-view\">the letter: A</li>\n    <li
        class=\"ember-view\">the letter: B</li>\n    <li class=\"ember-view\">the
        letter: C</li>\n  </ul>\n  ```\n\n  Additional `tagName` pairs can be provided
        by adding to\n  `Ember.CollectionView.CONTAINER_MAP `\n\n  ```javascript\n
        \ Ember.CollectionView.CONTAINER_MAP['article'] = 'section'\n  ```\n\n  ##
        Programatic creation of child views\n\n  For cases where additional customization
        beyond the use of a single\n  `itemViewClass` or `tagName` matching is required
        CollectionView's\n  `createChildView` method can be overidden:\n\n  ```javascript\n
        \ CustomCollectionView = Ember.CollectionView.extend({\n    createChildView:
        function(viewClass, attrs) {\n      if (attrs.content.kind == 'album') {\n
        \       viewClass = App.AlbumView;\n      } else {\n        viewClass = App.SongView;\n
        \     }\n      return this._super(viewClass, attrs);\n    }\n  });\n  ```\n\n
        \ ## Empty View\n\n  You can provide an `Ember.View` subclass to the `Ember.CollectionView`\n
        \ instance as its `emptyView` property. If the `content` property of a\n  `CollectionView`
        is set to `null` or an empty array, an instance of this view\n  will be the
        `CollectionView`s only child.\n\n  ```javascript\n  aListWithNothing = Ember.CollectionView.create({\n
        \   classNames: ['nothing']\n    content: null,\n    emptyView: Ember.View.extend({\n
        \     template: Ember.Handlebars.compile(\"The collection is empty\")\n    })\n
        \ });\n\n  aListWithNothing.appendTo('body');\n  ```\n\n  Will result in the
        following HTML structure\n\n  ```html\n  <div class=\"ember-view nothing\">\n
        \   <div class=\"ember-view\">\n      The collection is empty\n    </div>\n
        \ </div>\n  ```\n\n  ## Adding and Removing items\n\n  The `childViews` property
        of a `CollectionView` should not be directly\n  manipulated. Instead, add,
        remove, replace items from its `content` property.\n  This will trigger appropriate
        changes to its rendered HTML.\n\n\n  @class CollectionView\n  @namespace Ember\n
        \ @extends Ember.ContainerView\n  @since Ember 0.9\n*/\nEmber.CollectionView
        = Ember.ContainerView.extend(/** @scope Ember.CollectionView.prototype */
        {\n\n  /**\n    A list of items to be displayed by the `Ember.CollectionView`.\n\n
        \   @property content\n    @type Ember.Array\n    @default null\n  */\n  content:
        null,\n\n  /**\n    @private\n\n    This provides metadata about what kind
        of empty view class this\n    collection would like if it is being instantiated
        from another\n    system (like Handlebars)\n\n    @property emptyViewClass\n
        \ */\n  emptyViewClass: Ember.View,\n\n  /**\n    An optional view to display
        if content is set to an empty array.\n\n    @property emptyView\n    @type
        Ember.View\n    @default null\n  */\n  emptyView: null,\n\n  /**\n    @property
        itemViewClass\n    @type Ember.View\n    @default Ember.View\n  */\n  itemViewClass:
        Ember.View,\n\n  /**\n    Setup a CollectionView\n\n    @method init\n  */\n
        \ init: function() {\n    var ret = this._super();\n    this._contentDidChange();\n
        \   return ret;\n  },\n\n  /**\n    @private\n\n    Invoked when the content
        property is about to change. Notifies observers that the\n    entire array
        content will change.\n\n    @method _contentWillChange\n  */\n  _contentWillChange:
        Ember.beforeObserver(function() {\n    var content = this.get('content');\n\n
        \   if (content) { content.removeArrayObserver(this); }\n    var len = content
        ? get(content, 'length') : 0;\n    this.arrayWillChange(content, 0, len);\n
        \ }, 'content'),\n\n  /**\n    @private\n\n    Check to make sure that the
        content has changed, and if so,\n    update the children directly. This is
        always scheduled\n    asynchronously, to allow the element to be created before\n
        \   bindings have synchronized and vice versa.\n\n    @method _contentDidChange\n
        \ */\n  _contentDidChange: Ember.observer(function() {\n    var content =
        get(this, 'content');\n\n    if (content) {\n      this._assertArrayLike(content);\n
        \     content.addArrayObserver(this);\n    }\n\n    var len = content ? get(content,
        'length') : 0;\n    this.arrayDidChange(content, 0, null, len);\n  }, 'content'),\n\n
        \ /**\n    @private\n\n    Ensure that the content implements Ember.Array\n\n
        \   @method _assertArrayLike\n  */\n  _assertArrayLike: function(content)
        {\n    Ember.assert(fmt(\"an Ember.CollectionView's content must implement
        Ember.Array. You passed %@\", [content]), Ember.Array.detect(content));\n
        \ },\n\n  /**\n    Removes the content and content observers.\n\n    @method
        destroy\n  */\n  destroy: function() {\n    if (!this._super()) { return;
        }\n\n    var content = get(this, 'content');\n    if (content) { content.removeArrayObserver(this);
        }\n\n    if (this._createdEmptyView) {\n      this._createdEmptyView.destroy();\n
        \   }\n\n    return this;\n  },\n\n  /**\n    Called when a mutation to the
        underlying content array will occur.\n\n    This method will remove any views
        that are no longer in the underlying\n    content array.\n\n    Invokes whenever
        the content array itself will change.\n\n    @method arrayWillChange\n    @param
        {Array} content the managed collection of objects\n    @param {Number} start
        the index at which the changes will occurr\n    @param {Number} removed number
        of object to be removed from content\n  */\n  arrayWillChange: function(content,
        start, removedCount) {\n    // If the contents were empty before and this
        template collection has an\n    // empty view remove it now.\n    var emptyView
        = get(this, 'emptyView');\n    if (emptyView && emptyView instanceof Ember.View)
        {\n      emptyView.removeFromParent();\n    }\n\n    // Loop through child
        views that correspond with the removed items.\n    // Note that we loop from
        the end of the array to the beginning because\n    // we are mutating it as
        we go.\n    var childViews = this._childViews, childView, idx, len;\n\n    len
        = this._childViews.length;\n\n    var removingAll = removedCount === len;\n\n
        \   if (removingAll) {\n      this.currentState.empty(this);\n      this.invokeRecursively(function(view)
        {\n        view.removedFromDOM = true;\n      }, false);\n    }\n\n    for
        (idx = start + removedCount - 1; idx >= start; idx--) {\n      childView =
        childViews[idx];\n      childView.destroy();\n    }\n  },\n\n  /**\n    Called
        when a mutation to the underlying content array occurs.\n\n    This method
        will replay that mutation against the views that compose the\n    `Ember.CollectionView`,
        ensuring that the view reflects the model.\n\n    This array observer is added
        in `contentDidChange`.\n\n    @method arrayDidChange\n    @param {Array} content
        the managed collection of objects\n    @param {Number} start the index at
        which the changes occurred\n    @param {Number} removed number of object removed
        from content\n    @param {Number} added number of object added to content\n
        \ */\n  arrayDidChange: function(content, start, removed, added) {\n    var
        addedViews = [], view, item, idx, len, itemViewClass,\n      emptyView;\n\n
        \   len = content ? get(content, 'length') : 0;\n\n    if (len) {\n      itemViewClass
        = get(this, 'itemViewClass');\n\n      if ('string' === typeof itemViewClass)
        {\n        itemViewClass = get(itemViewClass) || itemViewClass;\n      }\n\n
        \     Ember.assert(fmt(\"itemViewClass must be a subclass of Ember.View, not
        %@\", [itemViewClass]), 'string' === typeof itemViewClass || Ember.View.detect(itemViewClass));\n\n
        \     for (idx = start; idx < start+added; idx++) {\n        item = content.objectAt(idx);\n\n
        \       view = this.createChildView(itemViewClass, {\n          content: item,\n
        \         contentIndex: idx\n        });\n\n        addedViews.push(view);\n
        \     }\n    } else {\n      emptyView = get(this, 'emptyView');\n\n      if
        (!emptyView) { return; }\n\n      if ('string' === typeof emptyView) {\n        emptyView
        = get(emptyView) || emptyView;\n      }\n\n      emptyView = this.createChildView(emptyView);\n
        \     addedViews.push(emptyView);\n      set(this, 'emptyView', emptyView);\n\n
        \     if (Ember.CoreView.detect(emptyView)) {\n        this._createdEmptyView
        = emptyView;\n      }\n    }\n\n    this.replace(start, 0, addedViews);\n
        \ },\n\n  /**\n    Instantiates a view to be added to the childViews array
        during view\n    initialization. You generally will not call this method directly
        unless\n    you are overriding `createChildViews()`. Note that this method
        will\n    automatically configure the correct settings on the new view instance
        to\n    act as a child of the parent.\n\n    The tag name for the view will
        be set to the tagName of the viewClass\n    passed in.\n\n    @method createChildView\n
        \   @param {Class} viewClass\n    @param {Hash} [attrs] Attributes to add\n
        \   @return {Ember.View} new instance\n  */\n  createChildView: function(view,
        attrs) {\n    view = this._super(view, attrs);\n\n    var itemTagName = get(view,
        'tagName');\n\n    if (itemTagName === null || itemTagName === undefined)
        {\n      itemTagName = Ember.CollectionView.CONTAINER_MAP[get(this, 'tagName')];\n
        \     set(view, 'tagName', itemTagName);\n    }\n\n    return view;\n  }\n});\n\n/**\n
        \ A map of parent tags to their default child tags. You can add\n  additional
        parent tags if you want collection views that use\n  a particular parent tag
        to default to a child tag.\n\n  @property CONTAINER_MAP\n  @type Hash\n  @static\n
        \ @final\n*/\nEmber.CollectionView.CONTAINER_MAP = {\n  ul: 'li',\n  ol: 'li',\n
        \ table: 'tr',\n  thead: 'tr',\n  tbody: 'tr',\n  tfoot: 'tr',\n  tr: 'td',\n
        \ select: 'option'\n};\n\n})();\n\n\n\n(function() {\nvar get = Ember.get,
        set = Ember.set, isNone = Ember.isNone,\n    a_slice = Array.prototype.slice;\n\n\n/**\n@module
        ember\n@submodule ember-views\n*/\n\n/**\n  An `Ember.Component` is a view
        that is completely\n  isolated. Property access in its templates go\n  to
        the view object and actions are targeted at\n  the view object. There is no
        access to the\n  surrounding context or outer controller; all\n  contextual
        information is passed in.\n\n  The easiest way to create an `Ember.Component`
        is via\n  a template. If you name a template\n  `components/my-foo`, you will
        be able to use\n  `{{my-foo}}` in other templates, which will make\n  an instance
        of the isolated component.\n\n  ```html\n  {{app-profile person=currentUser}}\n
        \ ```\n\n  ```html\n  <!-- app-profile template -->\n  <h1>{{person.title}}</h1>\n
        \ <img {{bind-attr src=person.avatar}}>\n  <p class='signature'>{{person.signature}}</p>\n
        \ ```\n\n  You can also use `yield` inside a template to\n  include the **contents**
        of the custom tag:\n\n  ```html\n  {{#app-profile person=currentUser}}\n    <p>Admin
        mode</p>\n  {{/app-profile}}\n  ```\n\n  ```html\n  <!-- app-profile template
        -->\n  <h1>{{person.title}}</h1>\n  {{yield}} <!-- block contents -->\n  ```\n\n
        \ If you want to customize the component, in order to\n  handle events or
        actions, you implement a subclass\n  of `Ember.Component` named after the
        name of the\n  component. Note that `Component` needs to be appended to the
        name of\n  your subclass like `AppProfileComponent`.\n\n  For example, you
        could implement the action\n  `hello` for the `app-profile` component:\n\n
        \ ```javascript\n  App.AppProfileComponent = Ember.Component.extend({\n    actions:
        {\n      hello: function(name) {\n        console.log(\"Hello\", name);\n
        \     }\n    }\n  });\n  ```\n\n  And then use it in the component's template:\n\n
        \ ```html\n  <!-- app-profile template -->\n\n  <h1>{{person.title}}</h1>\n
        \ {{yield}} <!-- block contents -->\n\n  <button {{action 'hello' person.name}}>\n
        \   Say Hello to {{person.name}}\n  </button>\n  ```\n\n  Components must
        have a `-` in their name to avoid\n  conflicts with built-in controls that
        wrap HTML\n  elements. This is consistent with the same\n  requirement in
        web components.\n\n  @class Component\n  @namespace Ember\n  @extends Ember.View\n*/\nEmber.Component
        = Ember.View.extend(Ember.TargetActionSupport, {\n  init: function() {\n    this._super();\n
        \   set(this, 'context', this);\n    set(this, 'controller', this);\n  },\n\n
        \ // during render, isolate keywords\n  cloneKeywords: function() {\n    return
        {\n      view: this,\n      controller: this\n    };\n  },\n\n  _yield: function(context,
        options) {\n    var view = options.data.view,\n        parentView = this._parentView,\n
        \       template = get(this, 'template');\n\n    if (template) {\n      Ember.assert(\"A
        Component must have a parent view in order to yield.\", parentView);\n\n      view.appendChild(Ember.View,
        {\n        isVirtual: true,\n        tagName: '',\n        _contextView: parentView,\n
        \       template: template,\n        context: get(parentView, 'context'),\n
        \       controller: get(parentView, 'controller'),\n        templateData:
        { keywords: parentView.cloneKeywords() }\n      });\n    }\n  },\n\n  /**\n
        \   If the component is currently inserted into the DOM of a parent view,
        this\n    property will point to the controller of the parent view.\n\n    @property
        targetObject\n    @type Ember.Controller\n    @default null\n  */\n  targetObject:
        Ember.computed(function(key) {\n    var parentView = get(this, '_parentView');\n
        \   return parentView ? get(parentView, 'controller') : null;\n  }).property('_parentView'),\n\n
        \ /**\n    Sends an action to component's controller. A component inherits
        its\n    controller from the context in which it is used.\n\n    By default,
        calling `sendAction()` will send an action with the name\n    of the component's
        `action` property.\n\n    For example, if the component had a property `action`
        with the value\n    `\"addItem\"`, calling `sendAction()` would send the `addItem`
        action\n    to the component's controller.\n\n    If you provide the `action`
        argument to `sendAction()`, that key will\n    be used to look up the action
        name.\n\n    For example, if the component had a property `playing` with the
        value\n    `didStartPlaying`, calling `sendAction('playing')` would send the\n
        \   `didStartPlaying` action to the component's controller.\n\n    Whether
        or not you are using the default action or a named action, if\n    the action
        name is not defined on the component, calling `sendAction()`\n    does not
        have any effect.\n\n    For example, if you call `sendAction()` on a component
        that does not have\n    an `action` property defined, no action will be sent
        to the controller,\n    nor will an exception be raised.\n\n    You can send
        a context object with the action by supplying the `context`\n    argument.
        The context will be supplied as the first argument in the\n    target's action
        method. Example:\n\n    ```javascript\n    App.MyTreeComponent = Ember.Component.extend({\n
        \     click: function() {\n        this.sendAction('didClickTreeNode', this.get('node'));\n
        \     }\n    });\n\n    App.CategoriesController = Ember.Controller.extend({\n
        \     actions: {\n        didClickCategory: function(category) {\n          //Do
        something with the node/category that was clicked\n        }\n      }\n    });\n
        \   ```\n\n    ```handlebars\n    {{! categories.hbs}}\n    {{my-tree didClickTreeNode='didClickCategory'}}\n
        \   ```\n\n    @method sendAction\n    @param [action] {String} the action
        to trigger\n    @param [context] {*} a context to send with the action\n  */\n
        \ sendAction: function(action) {\n    var actionName,\n        contexts =
        a_slice.call(arguments, 1);\n\n    // Send the default action\n    if (action
        === undefined) {\n      actionName = get(this, 'action');\n      Ember.assert(\"The
        default action was triggered on the component \" + this.toString() + \", but
        the action name (\" + actionName + \") was not a string.\", isNone(actionName)
        || typeof actionName === 'string');\n    } else {\n      actionName = get(this,
        action);\n      Ember.assert(\"The \" + action + \" action was triggered on
        the component \" + this.toString() + \", but the action name (\" + actionName
        + \") was not a string.\", isNone(actionName) || typeof actionName === 'string');\n
        \   }\n\n    // If no action name for that action could be found, just abort.\n
        \   if (actionName === undefined) { return; }\n\n    this.triggerAction({\n
        \     action: actionName,\n      actionContext: contexts\n    });\n  }\n});\n\n})();\n\n\n\n(function()
        {\n\n})();\n\n\n\n(function() {\n/**\n`Ember.ViewTargetActionSupport` is a
        mixin that can be included in a\nview class to add a `triggerAction` method
        with semantics similar to\nthe Handlebars `{{action}}` helper. It provides
        intelligent defaults\nfor the action's target: the view's controller; and
        the context that is\nsent with the action: the view's context.\n\nNote: In
        normal Ember usage, the `{{action}}` helper is usually the best\nchoice. This
        mixin is most often useful when you are doing more complex\nevent handling
        in custom View subclasses.\n\nFor example:\n\n```javascript\nApp.SaveButtonView
        = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  action: 'save',\n
        \ click: function() {\n    this.triggerAction(); // Sends the `save` action,
        along with the current context\n                          // to the current
        controller\n  }\n});\n```\n\nThe `action` can be provided as properties of
        an optional object argument\nto `triggerAction` as well.\n\n```javascript\nApp.SaveButtonView
        = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  click: function()
        {\n    this.triggerAction({\n      action: 'save'\n    }); // Sends the `save`
        action, along with the current context\n        // to the current controller\n
        \ }\n});\n```\n\n@class ViewTargetActionSupport\n@namespace Ember\n@extends
        Ember.TargetActionSupport\n*/\nEmber.ViewTargetActionSupport = Ember.Mixin.create(Ember.TargetActionSupport,
        {\n  /**\n  @property target\n  */\n  target: Ember.computed.alias('controller'),\n
        \ /**\n  @property actionContext\n  */\n  actionContext: Ember.computed.alias('context')\n});\n\n})();\n\n\n\n(function()
        {\n\n})();\n\n\n\n(function() {\n/**\nEmber Views\n\n@module ember\n@submodule
        ember-views\n@requires ember-runtime\n@main ember-views\n*/\n\n})();\n\n(function()
        {\ndefine(\"metamorph\",\n  [],\n  function() {\n    \"use strict\";\n    //
        ==========================================================================\n
        \   // Project:   metamorph\n    // Copyright: ©2011 My Company Inc. All rights
        reserved.\n    // ==========================================================================\n\n
        \   var K = function() {},\n        guid = 0,\n        document = this.document,\n
        \       disableRange = ('undefined' === typeof ENV ? {} : ENV).DISABLE_RANGE_API,\n\n
        \       // Feature-detect the W3C range API, the extended check is for IE9
        which only partially supports ranges\n        supportsRange = (!disableRange)
        && document && ('createRange' in document) && (typeof Range !== 'undefined')
        && Range.prototype.createContextualFragment,\n\n        // Internet Explorer
        prior to 9 does not allow setting innerHTML if the first element\n        //
        is a \"zero-scope\" element. This problem can be worked around by making\n
        \       // the first node an invisible text node. We, like Modernizr, use
        &shy;\n        needsShy = document && (function() {\n          var testEl
        = document.createElement('div');\n          testEl.innerHTML = \"<div></div>\";\n
        \         testEl.firstChild.innerHTML = \"<script></script>\";\n          return
        testEl.firstChild.innerHTML === '';\n        })(),\n\n\n        // IE 8 (and
        likely earlier) likes to move whitespace preceeding\n        // a script tag
        to appear after it. This means that we can\n        // accidentally remove
        whitespace when updating a morph.\n        movesWhitespace = document && (function()
        {\n          var testEl = document.createElement('div');\n          testEl.innerHTML
        = \"Test: <script type='text/x-placeholder'></script>Value\";\n          return
        testEl.childNodes[0].nodeValue === 'Test:' &&\n                  testEl.childNodes[2].nodeValue
        === ' Value';\n        })();\n\n    // Constructor that supports either Metamorph('foo')
        or new\n    // Metamorph('foo');\n    //\n    // Takes a string of HTML as
        the argument.\n\n    var Metamorph = function(html) {\n      var self;\n\n
        \     if (this instanceof Metamorph) {\n        self = this;\n      } else
        {\n        self = new K();\n      }\n\n      self.innerHTML = html;\n      var
        myGuid = 'metamorph-'+(guid++);\n      self.start = myGuid + '-start';\n      self.end
        = myGuid + '-end';\n\n      return self;\n    };\n\n    K.prototype = Metamorph.prototype;\n\n
        \   var rangeFor, htmlFunc, removeFunc, outerHTMLFunc, appendToFunc, afterFunc,
        prependFunc, startTagFunc, endTagFunc;\n\n    outerHTMLFunc = function() {\n
        \     return this.startTag() + this.innerHTML + this.endTag();\n    };\n\n
        \   startTagFunc = function() {\n      /*\n       * We replace chevron by
        its hex code in order to prevent escaping problems.\n       * Check this thread
        for more explaination:\n       * http://stackoverflow.com/questions/8231048/why-use-x3c-instead-of-when-generating-html-from-javascript\n
        \      */\n      return \"<script id='\" + this.start + \"' type='text/x-placeholder'>\\x3C/script>\";\n
        \   };\n\n    endTagFunc = function() {\n      /*\n       * We replace chevron
        by its hex code in order to prevent escaping problems.\n       * Check this
        thread for more explaination:\n       * http://stackoverflow.com/questions/8231048/why-use-x3c-instead-of-when-generating-html-from-javascript\n
        \      */\n      return \"<script id='\" + this.end + \"' type='text/x-placeholder'>\\x3C/script>\";\n
        \   };\n\n    // If we have the W3C range API, this process is relatively
        straight forward.\n    if (supportsRange) {\n\n      // Get a range for the
        current morph. Optionally include the starting and\n      // ending placeholders.\n
        \     rangeFor = function(morph, outerToo) {\n        var range = document.createRange();\n
        \       var before = document.getElementById(morph.start);\n        var after
        = document.getElementById(morph.end);\n\n        if (outerToo) {\n          range.setStartBefore(before);\n
        \         range.setEndAfter(after);\n        } else {\n          range.setStartAfter(before);\n
        \         range.setEndBefore(after);\n        }\n\n        return range;\n
        \     };\n\n      htmlFunc = function(html, outerToo) {\n        // get a
        range for the current metamorph object\n        var range = rangeFor(this,
        outerToo);\n\n        // delete the contents of the range, which will be the\n
        \       // nodes between the starting and ending placeholder.\n        range.deleteContents();\n\n
        \       // create a new document fragment for the HTML\n        var fragment
        = range.createContextualFragment(html);\n\n        // insert the fragment
        into the range\n        range.insertNode(fragment);\n      };\n\n      /**\n
        \     * @public\n      * \n      * Remove this object (including starting
        and ending\n      * placeholders).\n      *\n      * @method remove\n      */\n
        \     removeFunc = function() {\n        // get a range for the current metamorph
        object including\n        // the starting and ending placeholders.\n        var
        range = rangeFor(this, true);\n\n        // delete the entire range.\n        range.deleteContents();\n
        \     };\n\n      appendToFunc = function(node) {\n        var range = document.createRange();\n
        \       range.setStart(node);\n        range.collapse(false);\n        var
        frag = range.createContextualFragment(this.outerHTML());\n        node.appendChild(frag);\n
        \     };\n\n      afterFunc = function(html) {\n        var range = document.createRange();\n
        \       var after = document.getElementById(this.end);\n\n        range.setStartAfter(after);\n
        \       range.setEndAfter(after);\n\n        var fragment = range.createContextualFragment(html);\n
        \       range.insertNode(fragment);\n      };\n\n      prependFunc = function(html)
        {\n        var range = document.createRange();\n        var start = document.getElementById(this.start);\n\n
        \       range.setStartAfter(start);\n        range.setEndAfter(start);\n\n
        \       var fragment = range.createContextualFragment(html);\n        range.insertNode(fragment);\n
        \     };\n\n    } else {\n      /*\n       * This code is mostly taken from
        jQuery, with one exception. In jQuery's case, we\n       * have some HTML
        and we need to figure out how to convert it into some nodes.\n       *\n       *
        In this case, jQuery needs to scan the HTML looking for an opening tag and
        use\n       * that as the key for the wrap map. In our case, we know the parent
        node, and\n       * can use its type as the key for the wrap map.\n       **/\n
        \     var wrapMap = {\n        select: [ 1, \"<select multiple='multiple'>\",
        \"</select>\" ],\n        fieldset: [ 1, \"<fieldset>\", \"</fieldset>\" ],\n
        \       table: [ 1, \"<table>\", \"</table>\" ],\n        tbody: [ 2, \"<table><tbody>\",
        \"</tbody></table>\" ],\n        tr: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"
        ],\n        colgroup: [ 2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\"
        ],\n        map: [ 1, \"<map>\", \"</map>\" ],\n        _default: [ 0, \"\",
        \"\" ]\n      };\n\n      var findChildById = function(element, id) {\n        if
        (element.getAttribute('id') === id) { return element; }\n\n        var len
        = element.childNodes.length, idx, node, found;\n        for (idx=0; idx<len;
        idx++) {\n          node = element.childNodes[idx];\n          found = node.nodeType
        === 1 && findChildById(node, id);\n          if (found) { return found; }\n
        \       }\n      };\n\n      var setInnerHTML = function(element, html) {\n
        \       var matches = [];\n        if (movesWhitespace) {\n          // Right
        now we only check for script tags with ids with the\n          // goal of
        targeting morphs.\n          html = html.replace(/(\\s+)(<script id='([^']+)')/g,
        function(match, spaces, tag, id) {\n            matches.push([id, spaces]);\n
        \           return tag;\n          });\n        }\n\n        element.innerHTML
        = html;\n\n        // If we have to do any whitespace adjustments do them
        now\n        if (matches.length > 0) {\n          var len = matches.length,
        idx;\n          for (idx=0; idx<len; idx++) {\n            var script = findChildById(element,
        matches[idx][0]),\n                node = document.createTextNode(matches[idx][1]);\n
        \           script.parentNode.insertBefore(node, script);\n          }\n        }\n
        \     };\n\n      /*\n       * Given a parent node and some HTML, generate
        a set of nodes. Return the first\n       * node, which will allow us to traverse
        the rest using nextSibling.\n       *\n       * We need to do this because
        innerHTML in IE does not really parse the nodes.\n       */\n      var firstNodeFor
        = function(parentNode, html) {\n        var arr = wrapMap[parentNode.tagName.toLowerCase()]
        || wrapMap._default;\n        var depth = arr[0], start = arr[1], end = arr[2];\n\n
        \       if (needsShy) { html = '&shy;'+html; }\n\n        var element = document.createElement('div');\n\n
        \       setInnerHTML(element, start + html + end);\n\n        for (var i=0;
        i<=depth; i++) {\n          element = element.firstChild;\n        }\n\n        //
        Look for &shy; to remove it.\n        if (needsShy) {\n          var shyElement
        = element;\n\n          // Sometimes we get nameless elements with the shy
        inside\n          while (shyElement.nodeType === 1 && !shyElement.nodeName)
        {\n            shyElement = shyElement.firstChild;\n          }\n\n          //
        At this point it's the actual unicode character.\n          if (shyElement.nodeType
        === 3 && shyElement.nodeValue.charAt(0) === \"\\u00AD\") {\n            shyElement.nodeValue
        = shyElement.nodeValue.slice(1);\n          }\n        }\n\n        return
        element;\n      };\n\n      /*\n       * In some cases, Internet Explorer
        can create an anonymous node in\n       * the hierarchy with no tagName. You
        can create this scenario via:\n       *\n       *     div = document.createElement(\"div\");\n
        \      *     div.innerHTML = \"<table>&shy<script></script><tr><td>hi</td></tr></table>\";\n
        \      *     div.firstChild.firstChild.tagName //=> \"\"\n       *\n       *
        If our script markers are inside such a node, we need to find that\n       *
        node and use *it* as the marker.\n       */\n      var realNode = function(start)
        {\n        while (start.parentNode.tagName === \"\") {\n          start =
        start.parentNode;\n        }\n\n        return start;\n      };\n\n      /*\n
        \      * When automatically adding a tbody, Internet Explorer inserts the\n
        \      * tbody immediately before the first <tr>. Other browsers create it\n
        \      * before the first node, no matter what.\n       *\n       * This means
        the the following code:\n       *\n       *     div = document.createElement(\"div\");\n
        \      *     div.innerHTML = \"<table><script id='first'></script><tr><td>hi</td></tr><script
        id='last'></script></table>\n       *\n       * Generates the following DOM
        in IE:\n       *\n       *     + div\n       *       + table\n       *         -
        script id='first'\n       *         + tbody\n       *           + tr\n       *
        \            + td\n       *               - \"hi\"\n       *           - script
        id='last'\n       *\n       * Which means that the two script tags, even though
        they were\n       * inserted at the same point in the hierarchy in the original\n
        \      * HTML, now have different parents.\n       *\n       * This code reparents
        the first script tag by making it the tbody's\n       * first child.\n       *\n
        \      */\n      var fixParentage = function(start, end) {\n        if (start.parentNode
        !== end.parentNode) {\n          end.parentNode.insertBefore(start, end.parentNode.firstChild);\n
        \       }\n      };\n\n      htmlFunc = function(html, outerToo) {\n        //
        get the real starting node. see realNode for details.\n        var start =
        realNode(document.getElementById(this.start));\n        var end = document.getElementById(this.end);\n
        \       var parentNode = end.parentNode;\n        var node, nextSibling, last;\n\n
        \       // make sure that the start and end nodes share the same\n        //
        parent. If not, fix it.\n        fixParentage(start, end);\n\n        // remove
        all of the nodes after the starting placeholder and\n        // before the
        ending placeholder.\n        node = start.nextSibling;\n        while (node)
        {\n          nextSibling = node.nextSibling;\n          last = node === end;\n\n
        \         // if this is the last node, and we want to remove it as well,\n
        \         // set the `end` node to the next sibling. This is because\n          //
        for the rest of the function, we insert the new nodes\n          // before
        the end (note that insertBefore(node, null) is\n          // the same as appendChild(node)).\n
        \         //\n          // if we do not want to remove it, just break.\n          if
        (last) {\n            if (outerToo) { end = node.nextSibling; } else { break;
        }\n          }\n\n          node.parentNode.removeChild(node);\n\n          //
        if this is the last node and we didn't break before\n          // (because
        we wanted to remove the outer nodes), break\n          // now.\n          if
        (last) { break; }\n\n          node = nextSibling;\n        }\n\n        //
        get the first node for the HTML string, even in cases like\n        // tables
        and lists where a simple innerHTML on a div would\n        // swallow some
        of the content.\n        node = firstNodeFor(start.parentNode, html);\n\n
        \       // copy the nodes for the HTML between the starting and ending\n        //
        placeholder.\n        while (node) {\n          nextSibling = node.nextSibling;\n
        \         parentNode.insertBefore(node, end);\n          node = nextSibling;\n
        \       }\n      };\n\n      // remove the nodes in the DOM representing this
        metamorph.\n      //\n      // this includes the starting and ending placeholders.\n
        \     removeFunc = function() {\n        var start = realNode(document.getElementById(this.start));\n
        \       var end = document.getElementById(this.end);\n\n        this.html('');\n
        \       start.parentNode.removeChild(start);\n        end.parentNode.removeChild(end);\n
        \     };\n\n      appendToFunc = function(parentNode) {\n        var node
        = firstNodeFor(parentNode, this.outerHTML());\n        var nextSibling;\n\n
        \       while (node) {\n          nextSibling = node.nextSibling;\n          parentNode.appendChild(node);\n
        \         node = nextSibling;\n        }\n      };\n\n      afterFunc = function(html)
        {\n        // get the real starting node. see realNode for details.\n        var
        end = document.getElementById(this.end);\n        var insertBefore = end.nextSibling;\n
        \       var parentNode = end.parentNode;\n        var nextSibling;\n        var
        node;\n\n        // get the first node for the HTML string, even in cases
        like\n        // tables and lists where a simple innerHTML on a div would\n
        \       // swallow some of the content.\n        node = firstNodeFor(parentNode,
        html);\n\n        // copy the nodes for the HTML between the starting and
        ending\n        // placeholder.\n        while (node) {\n          nextSibling
        = node.nextSibling;\n          parentNode.insertBefore(node, insertBefore);\n
        \         node = nextSibling;\n        }\n      };\n\n      prependFunc =
        function(html) {\n        var start = document.getElementById(this.start);\n
        \       var parentNode = start.parentNode;\n        var nextSibling;\n        var
        node;\n\n        node = firstNodeFor(parentNode, html);\n        var insertBefore
        = start.nextSibling;\n\n        while (node) {\n          nextSibling = node.nextSibling;\n
        \         parentNode.insertBefore(node, insertBefore);\n          node = nextSibling;\n
        \       }\n      };\n    }\n\n    Metamorph.prototype.html = function(html)
        {\n      this.checkRemoved();\n      if (html === undefined) { return this.innerHTML;
        }\n\n      htmlFunc.call(this, html);\n\n      this.innerHTML = html;\n    };\n\n
        \   Metamorph.prototype.replaceWith = function(html) {\n      this.checkRemoved();\n
        \     htmlFunc.call(this, html, true);\n    };\n\n    Metamorph.prototype.remove
        = removeFunc;\n    Metamorph.prototype.outerHTML = outerHTMLFunc;\n    Metamorph.prototype.appendTo
        = appendToFunc;\n    Metamorph.prototype.after = afterFunc;\n    Metamorph.prototype.prepend
        = prependFunc;\n    Metamorph.prototype.startTag = startTagFunc;\n    Metamorph.prototype.endTag
        = endTagFunc;\n\n    Metamorph.prototype.isRemoved = function() {\n      var
        before = document.getElementById(this.start);\n      var after = document.getElementById(this.end);\n\n
        \     return !before || !after;\n    };\n\n    Metamorph.prototype.checkRemoved
        = function() {\n      if (this.isRemoved()) {\n        throw new Error(\"Cannot
        perform operations on a Metamorph that is not in the DOM.\");\n      }\n    };\n\n
        \   return Metamorph;\n  });\n\n})();\n\n(function() {\n/**\n@module ember\n@submodule
        ember-handlebars-compiler\n*/\n\n// Eliminate dependency on any Ember to simplify
        precompilation workflow\nvar objectCreate = Object.create || function(parent)
        {\n  function F() {}\n  F.prototype = parent;\n  return new F();\n};\n\nvar
        Handlebars = this.Handlebars || (Ember.imports && Ember.imports.Handlebars);\nif
        (!Handlebars && typeof require === 'function') {\n  Handlebars = require('handlebars');\n}\n\nEmber.assert(\"Ember
        Handlebars requires Handlebars version 1.0.0. Include a SCRIPT tag in the
        HTML HEAD linking to the Handlebars file before you link to Ember.\", Handlebars);\nEmber.assert(\"Ember
        Handlebars requires Handlebars version 1.0.0, COMPILER_REVISION expected:
        4, got: \" +  Handlebars.COMPILER_REVISION + \" - Please note: Builds of master
        may have other COMPILER_REVISION values.\", Handlebars.COMPILER_REVISION ===
        4);\n\n/**\n  Prepares the Handlebars templating library for use inside Ember's
        view\n  system.\n\n  The `Ember.Handlebars` object is the standard Handlebars
        library, extended to\n  use Ember's `get()` method instead of direct property
        access, which allows\n  computed properties to be used inside templates.\n\n
        \ To create an `Ember.Handlebars` template, call `Ember.Handlebars.compile()`.\n
        \ This will return a function that can be used by `Ember.View` for rendering.\n\n
        \ @class Handlebars\n  @namespace Ember\n*/\nEmber.Handlebars = objectCreate(Handlebars);\n\n/**\n
        \ Register a bound helper or custom view helper.\n\n  ## Simple bound helper
        example\n\n  ```javascript\n  Ember.Handlebars.helper('capitalize', function(value)
        {\n    return value.toUpperCase();\n  });\n  ```\n\n  The above bound helper
        can be used inside of templates as follows:\n\n  ```handlebars\n  {{capitalize
        name}}\n  ```\n\n  In this case, when the `name` property of the template's
        context changes,\n  the rendered value of the helper will update to reflect
        this change.\n\n  For more examples of bound helpers, see documentation for\n
        \ `Ember.Handlebars.registerBoundHelper`.\n\n  ## Custom view helper example\n\n
        \ Assuming a view subclass named `App.CalendarView` were defined, a helper\n
        \ for rendering instances of this view could be registered as follows:\n\n
        \ ```javascript\n  Ember.Handlebars.helper('calendar', App.CalendarView):\n
        \ ```\n\n  The above bound helper can be used inside of templates as follows:\n\n
        \ ```handlebars\n  {{calendar}}\n  ```\n\n  Which is functionally equivalent
        to:\n\n  ```handlebars\n  {{view App.CalendarView}}\n  ```\n\n  Options in
        the helper will be passed to the view in exactly the same\n  manner as with
        the `view` helper.\n\n  @method helper\n  @for Ember.Handlebars\n  @param
        {String} name\n  @param {Function|Ember.View} function or view class constructor\n
        \ @param {String} dependentKeys*\n*/\nEmber.Handlebars.helper = function(name,
        value) {\n  Ember.assert(\"You tried to register a component named '\" + name
        + \"', but component names must include a '-'\", !Ember.Component.detect(value)
        || name.match(/-/));\n\n  if (Ember.View.detect(value)) {\n    Ember.Handlebars.registerHelper(name,
        function(options) {\n      Ember.assert(\"You can only pass attributes (such
        as name=value) not bare values to a helper for a View\", arguments.length
        < 2);\n      return Ember.Handlebars.helpers.view.call(this, value, options);\n
        \   });\n  } else {\n    Ember.Handlebars.registerBoundHelper.apply(null,
        arguments);\n  }\n};\n\n/**\n@class helpers\n@namespace Ember.Handlebars\n*/\nEmber.Handlebars.helpers
        = objectCreate(Handlebars.helpers);\n\n/**\n  Override the the opcode compiler
        and JavaScript compiler for Handlebars.\n\n  @class Compiler\n  @namespace
        Ember.Handlebars\n  @private\n  @constructor\n*/\nEmber.Handlebars.Compiler
        = function() {};\n\n// Handlebars.Compiler doesn't exist in runtime-only\nif
        (Handlebars.Compiler) {\n  Ember.Handlebars.Compiler.prototype = objectCreate(Handlebars.Compiler.prototype);\n}\n\nEmber.Handlebars.Compiler.prototype.compiler
        = Ember.Handlebars.Compiler;\n\n/**\n  @class JavaScriptCompiler\n  @namespace
        Ember.Handlebars\n  @private\n  @constructor\n*/\nEmber.Handlebars.JavaScriptCompiler
        = function() {};\n\n// Handlebars.JavaScriptCompiler doesn't exist in runtime-only\nif
        (Handlebars.JavaScriptCompiler) {\n  Ember.Handlebars.JavaScriptCompiler.prototype
        = objectCreate(Handlebars.JavaScriptCompiler.prototype);\n  Ember.Handlebars.JavaScriptCompiler.prototype.compiler
        = Ember.Handlebars.JavaScriptCompiler;\n}\n\n\nEmber.Handlebars.JavaScriptCompiler.prototype.namespace
        = \"Ember.Handlebars\";\n\nEmber.Handlebars.JavaScriptCompiler.prototype.initializeBuffer
        = function() {\n  return \"''\";\n};\n\n/**\n  @private\n\n  Override the
        default buffer for Ember Handlebars. By default, Handlebars\n  creates an
        empty String at the beginning of each invocation and appends to\n  it. Ember's
        Handlebars overrides this to append to a single shared buffer.\n\n  @method
        appendToBuffer\n  @param string {String}\n*/\nEmber.Handlebars.JavaScriptCompiler.prototype.appendToBuffer
        = function(string) {\n  return \"data.buffer.push(\"+string+\");\";\n};\n\nvar
        prefix = \"ember\" + (+new Date()), incr = 1;\n\n/**\n  @private\n\n  Rewrite
        simple mustaches from `{{foo}}` to `{{bind \"foo\"}}`. This means that\n  all
        simple mustaches in Ember's Handlebars will also set up an observer to\n  keep
        the DOM up to date when the underlying property changes.\n\n  @method mustache\n
        \ @for Ember.Handlebars.Compiler\n  @param mustache\n*/\nEmber.Handlebars.Compiler.prototype.mustache
        = function(mustache) {\n  if (mustache.isHelper && mustache.id.string ===
        'control') {\n    mustache.hash = mustache.hash || new Handlebars.AST.HashNode([]);\n
        \   mustache.hash.pairs.push([\"controlID\", new Handlebars.AST.StringNode(prefix
        + incr++)]);\n  } else if (mustache.params.length || mustache.hash) {\n    //
        no changes required\n  } else {\n    var id = new Handlebars.AST.IdNode([{
        part: '_triageMustache' }]);\n\n    // Update the mustache node to include
        a hash value indicating whether the original node\n    // was escaped. This
        will allow us to properly escape values when the underlying value\n    //
        changes and we need to re-render the value.\n    if (!mustache.escaped) {\n
        \     mustache.hash = mustache.hash || new Handlebars.AST.HashNode([]);\n
        \     mustache.hash.pairs.push([\"unescaped\", new Handlebars.AST.StringNode(\"true\")]);\n
        \   }\n    mustache = new Handlebars.AST.MustacheNode([id].concat([mustache.id]),
        mustache.hash, !mustache.escaped);\n  }\n\n  return Handlebars.Compiler.prototype.mustache.call(this,
        mustache);\n};\n\n/**\n  Used for precompilation of Ember Handlebars templates.
        This will not be used\n  during normal app execution.\n\n  @method precompile\n
        \ @for Ember.Handlebars\n  @static\n  @param {String} string The template
        to precompile\n*/\nEmber.Handlebars.precompile = function(string) {\n  var
        ast = Handlebars.parse(string);\n\n  var options = {\n    knownHelpers: {\n
        \     action: true,\n      unbound: true,\n      bindAttr: true,\n      template:
        true,\n      view: true,\n      _triageMustache: true\n    },\n    data: true,\n
        \   stringParams: true\n  };\n\n  var environment = new Ember.Handlebars.Compiler().compile(ast,
        options);\n  return new Ember.Handlebars.JavaScriptCompiler().compile(environment,
        options, undefined, true);\n};\n\n// We don't support this for Handlebars
        runtime-only\nif (Handlebars.compile) {\n  /**\n    The entry point for Ember
        Handlebars. This replaces the default\n    `Handlebars.compile` and turns
        on template-local data and String\n    parameters.\n\n    @method compile\n
        \   @for Ember.Handlebars\n    @static\n    @param {String} string The template
        to compile\n    @return {Function}\n  */\n  Ember.Handlebars.compile = function(string)
        {\n    var ast = Handlebars.parse(string);\n    var options = { data: true,
        stringParams: true };\n    var environment = new Ember.Handlebars.Compiler().compile(ast,
        options);\n    var templateSpec = new Ember.Handlebars.JavaScriptCompiler().compile(environment,
        options, undefined, true);\n\n    var template = Ember.Handlebars.template(templateSpec);\n
        \   template.isMethod = false; //Make sure we don't wrap templates with ._super\n\n
        \   return template;\n  };\n}\n\n\n})();\n\n(function() {\nvar slice = Array.prototype.slice;\n\n/**\n
        \ @private\n\n  If a path starts with a reserved keyword, returns the root\n
        \ that should be used.\n\n  @method normalizePath\n  @for Ember\n  @param
        root {Object}\n  @param path {String}\n  @param data {Hash}\n*/\nvar normalizePath
        = Ember.Handlebars.normalizePath = function(root, path, data) {\n  var keywords
        = (data && data.keywords) || {},\n      keyword, isKeyword;\n\n  // Get the
        first segment of the path. For example, if the\n  // path is \"foo.bar.baz\",
        returns \"foo\".\n  keyword = path.split('.', 1)[0];\n\n  // Test to see if
        the first path is a keyword that has been\n  // passed along in the view's
        data hash. If so, we will treat\n  // that object as the new root.\n  if (keywords.hasOwnProperty(keyword))
        {\n    // Look up the value in the template's data hash.\n    root = keywords[keyword];\n
        \   isKeyword = true;\n\n    // Handle cases where the entire path is the
        reserved\n    // word. In that case, return the object itself.\n    if (path
        === keyword) {\n      path = '';\n    } else {\n      // Strip the keyword
        from the path and look up\n      // the remainder from the newly found root.\n
        \     path = path.substr(keyword.length+1);\n    }\n  }\n\n  return { root:
        root, path: path, isKeyword: isKeyword };\n};\n\n\n/**\n  Lookup both on root
        and on window. If the path starts with\n  a keyword, the corresponding object
        will be looked up in the\n  template's data hash and used to resolve the path.\n\n
        \ @method get\n  @for Ember.Handlebars\n  @param {Object} root The object
        to look up the property on\n  @param {String} path The path to be lookedup\n
        \ @param {Object} options The template's option hash\n*/\nvar handlebarsGet
        = Ember.Handlebars.get = function(root, path, options) {\n  var data = options
        && options.data,\n      normalizedPath = normalizePath(root, path, data),\n
        \     value;\n\n  // In cases where the path begins with a keyword, change
        the\n  // root to the value represented by that keyword, and ensure\n  //
        the path is relative to it.\n  root = normalizedPath.root;\n  path = normalizedPath.path;\n\n
        \ value = Ember.get(root, path);\n\n  // If the path starts with a capital
        letter, look it up on Ember.lookup,\n  // which defaults to the `window` object
        in browsers.\n  if (value === undefined && root !== Ember.lookup && Ember.isGlobalPath(path))
        {\n    value = Ember.get(Ember.lookup, path);\n  }\n  return value;\n};\nEmber.Handlebars.getPath
        = Ember.deprecateFunc('`Ember.Handlebars.getPath` has been changed to `Ember.Handlebars.get`
        for consistency.', Ember.Handlebars.get);\n\nEmber.Handlebars.resolveParams
        = function(context, params, options) {\n  var resolvedParams = [], types =
        options.types, param, type;\n\n  for (var i=0, l=params.length; i<l; i++)
        {\n    param = params[i];\n    type = types[i];\n\n    if (type === 'ID')
        {\n      resolvedParams.push(handlebarsGet(context, param, options));\n    }
        else {\n      resolvedParams.push(param);\n    }\n  }\n\n  return resolvedParams;\n};\n\nEmber.Handlebars.resolveHash
        = function(context, hash, options) {\n  var resolvedHash = {}, types = options.hashTypes,
        type;\n\n  for (var key in hash) {\n    if (!hash.hasOwnProperty(key)) { continue;
        }\n\n    type = types[key];\n\n    if (type === 'ID') {\n      resolvedHash[key]
        = handlebarsGet(context, hash[key], options);\n    } else {\n      resolvedHash[key]
        = hash[key];\n    }\n  }\n\n  return resolvedHash;\n};\n\n/**\n  @private\n\n
        \ Registers a helper in Handlebars that will be called if no property with
        the\n  given name can be found on the current context object, and no helper
        with\n  that name is registered.\n\n  This throws an exception with a more
        helpful error message so the user can\n  track down where the problem is happening.\n\n
        \ @method helperMissing\n  @for Ember.Handlebars.helpers\n  @param {String}
        path\n  @param {Hash} options\n*/\nEmber.Handlebars.registerHelper('helperMissing',
        function(path, options) {\n  var error, view = \"\";\n\n  error = \"%@ Handlebars
        error: Could not find property '%@' on object %@.\";\n  if (options.data)
        {\n    view = options.data.view;\n  }\n  throw new Ember.Error(Ember.String.fmt(error,
        [view, path, this]));\n});\n\n/**\n  Register a bound handlebars helper. Bound
        helpers behave similarly to regular\n  handlebars helpers, with the added
        ability to re-render when the underlying data\n  changes.\n\n  ## Simple example\n\n
        \ ```javascript\n  Ember.Handlebars.registerBoundHelper('capitalize', function(value)
        {\n    return value.toUpperCase();\n  });\n  ```\n\n  The above bound helper
        can be used inside of templates as follows:\n\n  ```handlebars\n  {{capitalize
        name}}\n  ```\n\n  In this case, when the `name` property of the template's
        context changes,\n  the rendered value of the helper will update to reflect
        this change.\n\n  ## Example with options\n\n  Like normal handlebars helpers,
        bound helpers have access to the options\n  passed into the helper call.\n\n
        \ ```javascript\n  Ember.Handlebars.registerBoundHelper('repeat', function(value,
        options) {\n    var count = options.hash.count;\n    var a = [];\n    while(a.length
        < count) {\n        a.push(value);\n    }\n    return a.join('');\n  });\n
        \ ```\n\n  This helper could be used in a template as follows:\n\n  ```handlebars\n
        \ {{repeat text count=3}}\n  ```\n\n  ## Example with bound options\n\n  Bound
        hash options are also supported. Example:\n\n  ```handlebars\n  {{repeat text
        countBinding=\"numRepeats\"}}\n  ```\n\n  In this example, count will be bound
        to the value of\n  the `numRepeats` property on the context. If that property\n
        \ changes, the helper will be re-rendered.\n\n  ## Example with extra dependencies\n\n
        \ The `Ember.Handlebars.registerBoundHelper` method takes a variable length\n
        \ third parameter which indicates extra dependencies on the passed in value.\n
        \ This allows the handlebars helper to update when these dependencies change.\n\n
        \ ```javascript\n  Ember.Handlebars.registerBoundHelper('capitalizeName',
        function(value) {\n    return value.get('name').toUpperCase();\n  }, 'name');\n
        \ ```\n\n  ## Example with multiple bound properties\n\n  `Ember.Handlebars.registerBoundHelper`
        supports binding to\n  multiple properties, e.g.:\n\n  ```javascript\n  Ember.Handlebars.registerBoundHelper('concatenate',
        function() {\n    var values = Array.prototype.slice.call(arguments, 0, -1);\n
        \   return values.join('||');\n  });\n  ```\n\n  Which allows for template
        syntax such as `{{concatenate prop1 prop2}}` or\n  `{{concatenate prop1 prop2
        prop3}}`. If any of the properties change,\n  the helpr will re-render.  Note
        that dependency keys cannot be\n  using in conjunction with multi-property
        helpers, since it is ambiguous\n  which property the dependent keys would
        belong to.\n\n  ## Use with unbound helper\n\n  The `{{unbound}}` helper can
        be used with bound helper invocations\n  to render them in their unbound form,
        e.g.\n\n  ```handlebars\n  {{unbound capitalize name}}\n  ```\n\n  In this
        example, if the name property changes, the helper\n  will not re-render.\n\n
        \ ## Use with blocks not supported\n\n  Bound helpers do not support use with
        Handlebars blocks or\n  the addition of child views of any kind.\n\n  @method
        registerBoundHelper\n  @for Ember.Handlebars\n  @param {String} name\n  @param
        {Function} function\n  @param {String} dependentKeys*\n*/\nEmber.Handlebars.registerBoundHelper
        = function(name, fn) {\n  var dependentKeys = slice.call(arguments, 2);\n\n
        \ function helper() {\n    var properties = slice.call(arguments, 0, -1),\n
        \     numProperties = properties.length,\n      options = arguments[arguments.length
        - 1],\n      normalizedProperties = [],\n      types = options.types,\n      data
        = options.data,\n      hash = options.hash,\n      view = data.view,\n      contexts
        = options.contexts,\n      currentContext = (contexts && contexts.length)
        ? contexts[0] : this,\n      prefixPathForDependentKeys = '',\n      loc,
        len, hashOption,\n      boundOption, property,\n      normalizedValue = Ember._SimpleHandlebarsView.prototype.normalizedValue;\n\n
        \   Ember.assert(\"registerBoundHelper-generated helpers do not support use
        with Handlebars blocks.\", !options.fn);\n\n    // Detect bound options (e.g.
        countBinding=\"otherCount\")\n    var boundOptions = hash.boundOptions = {};\n
        \   for (hashOption in hash) {\n      if (Ember.IS_BINDING.test(hashOption))
        {\n        // Lop off 'Binding' suffix.\n        boundOptions[hashOption.slice(0,
        -7)] = hash[hashOption];\n      }\n    }\n\n    // Expose property names on
        data.properties object.\n    var watchedProperties = [];\n    data.properties
        = [];\n    for (loc = 0; loc < numProperties; ++loc) {\n      data.properties.push(properties[loc]);\n
        \     if (types[loc] === 'ID') {\n        var normalizedProp = normalizePath(currentContext,
        properties[loc], data);\n        normalizedProperties.push(normalizedProp);\n
        \       watchedProperties.push(normalizedProp);\n      } else {\n        normalizedProperties.push(null);\n
        \     }\n    }\n\n    // Handle case when helper invocation is preceded by
        `unbound`, e.g.\n    // {{unbound myHelper foo}}\n    if (data.isUnbound)
        {\n      return evaluateUnboundHelper(this, fn, normalizedProperties, options);\n
        \   }\n\n    var bindView = new Ember._SimpleHandlebarsView(null, null, !options.hash.unescaped,
        options.data);\n\n    // Override SimpleHandlebarsView's method for generating
        the view's content.\n    bindView.normalizedValue = function() {\n      var
        args = [], boundOption;\n\n      // Copy over bound hash options.\n      for
        (boundOption in boundOptions) {\n        if (!boundOptions.hasOwnProperty(boundOption))
        { continue; }\n        property = normalizePath(currentContext, boundOptions[boundOption],
        data);\n        bindView.path = property.path;\n        bindView.pathRoot
        = property.root;\n        hash[boundOption] = normalizedValue.call(bindView);\n
        \     }\n\n      for (loc = 0; loc < numProperties; ++loc) {\n        property
        = normalizedProperties[loc];\n        if (property) {\n          bindView.path
        = property.path;\n          bindView.pathRoot = property.root;\n          args.push(normalizedValue.call(bindView));\n
        \       } else {\n          args.push(properties[loc]);\n        }\n      }\n
        \     args.push(options);\n\n      // Run the supplied helper function.\n
        \     return fn.apply(currentContext, args);\n    };\n\n    view.appendChild(bindView);\n\n
        \   // Assemble list of watched properties that'll re-render this helper.\n
        \   for (boundOption in boundOptions) {\n      if (boundOptions.hasOwnProperty(boundOption))
        {\n        watchedProperties.push(normalizePath(currentContext, boundOptions[boundOption],
        data));\n      }\n    }\n\n    // Observe each property.\n    for (loc = 0,
        len = watchedProperties.length; loc < len; ++loc) {\n      property = watchedProperties[loc];\n
        \     view.registerObserver(property.root, property.path, bindView, bindView.rerender);\n
        \   }\n\n    if (types[0] !== 'ID' || normalizedProperties.length === 0) {\n
        \     return;\n    }\n\n    // Add dependent key observers to the first param\n
        \   var normalized = normalizedProperties[0],\n        pathRoot = normalized.root,\n
        \       path = normalized.path;\n\n    if(!Ember.isEmpty(path)) {\n      prefixPathForDependentKeys
        = path + '.';\n    }\n    for (var i=0, l=dependentKeys.length; i<l; i++)
        {\n      view.registerObserver(pathRoot, prefixPathForDependentKeys + dependentKeys[i],
        bindView, bindView.rerender);\n    }\n  }\n\n  helper._rawFunction = fn;\n
        \ Ember.Handlebars.registerHelper(name, helper);\n};\n\n/**\n  @private\n\n
        \ Renders the unbound form of an otherwise bound helper function.\n\n  @method
        evaluateUnboundHelper\n  @param {Function} fn\n  @param {Object} context\n
        \ @param {Array} normalizedProperties\n  @param {String} options\n*/\nfunction
        evaluateUnboundHelper(context, fn, normalizedProperties, options) {\n  var
        args = [], hash = options.hash, boundOptions = hash.boundOptions, loc, len,
        property, boundOption;\n\n  for (boundOption in boundOptions) {\n    if (!boundOptions.hasOwnProperty(boundOption))
        { continue; }\n    hash[boundOption] = Ember.Handlebars.get(context, boundOptions[boundOption],
        options);\n  }\n\n  for(loc = 0, len = normalizedProperties.length; loc <
        len; ++loc) {\n    property = normalizedProperties[loc];\n    args.push(Ember.Handlebars.get(property.root,
        property.path, options));\n  }\n  args.push(options);\n  return fn.apply(context,
        args);\n}\n\n/**\n  @private\n\n  Overrides Handlebars.template so that we
        can distinguish\n  user-created, top-level templates from inner contexts.\n\n
        \ @method template\n  @for Ember.Handlebars\n  @param {String} template spec\n*/\nEmber.Handlebars.template
        = function(spec) {\n  var t = Handlebars.template(spec);\n  t.isTop = true;\n
        \ return t;\n};\n\n})();\n\n\n\n(function() {\n/**\n  Mark a string as safe
        for unescaped output with Handlebars. If you\n  return HTML from a Handlebars
        helper, use this function to\n  ensure Handlebars does not escape the HTML.\n\n
        \ ```javascript\n  Ember.String.htmlSafe('<div>someString</div>')\n  ```\n\n
        \ @method htmlSafe\n  @for Ember.String\n  @static\n  @return {Handlebars.SafeString}
        a string that will not be html escaped by Handlebars\n*/\nEmber.String.htmlSafe
        = function(str) {\n  return new Handlebars.SafeString(str);\n};\n\nvar htmlSafe
        = Ember.String.htmlSafe;\n\nif (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.String)
        {\n\n  /**\n    Mark a string as being safe for unescaped output with Handlebars.\n\n
        \   ```javascript\n    '<div>someString</div>'.htmlSafe()\n    ```\n\n    See
        [Ember.String.htmlSafe](/api/classes/Ember.String.html#method_htmlSafe).\n\n
        \   @method htmlSafe\n    @for String\n    @return {Handlebars.SafeString}
        a string that will not be html escaped by Handlebars\n  */\n  String.prototype.htmlSafe
        = function() {\n    return htmlSafe(this);\n  };\n}\n\n})();\n\n\n\n(function()
        {\nEmber.Handlebars.resolvePaths = function(options) {\n  var ret = [],\n
        \     contexts = options.contexts,\n      roots = options.roots,\n      data
        = options.data;\n\n  for (var i=0, l=contexts.length; i<l; i++) {\n    ret.push(
        Ember.Handlebars.get(roots[i], contexts[i], { data: data }) );\n  }\n\n  return
        ret;\n};\n\n})();\n\n\n\n(function() {\n/*jshint newcap:false*/\n/**\n@module
        ember\n@submodule ember-handlebars\n*/\n\nvar set = Ember.set, get = Ember.get;\nvar
        Metamorph = requireModule('metamorph');\n\nfunction notifyMutationListeners()
        {\n  Ember.run.once(Ember.View, 'notifyMutationListeners');\n}\n\n// DOMManager
        should just abstract dom manipulation between jquery and metamorph\nvar DOMManager
        = {\n  remove: function(view) {\n    view.morph.remove();\n    notifyMutationListeners();\n
        \ },\n\n  prepend: function(view, html) {\n    view.morph.prepend(html);\n
        \   notifyMutationListeners();\n  },\n\n  after: function(view, html) {\n
        \   view.morph.after(html);\n    notifyMutationListeners();\n  },\n\n  html:
        function(view, html) {\n    view.morph.html(html);\n    notifyMutationListeners();\n
        \ },\n\n  // This is messed up.\n  replace: function(view) {\n    var morph
        = view.morph;\n\n    view.transitionTo('preRender');\n\n    Ember.run.schedule('render',
        this, function() {\n      if (view.isDestroying) { return; }\n\n      view.clearRenderedChildren();\n
        \     var buffer = view.renderToBuffer();\n\n      view.invokeRecursively(function(view)
        {\n        view.propertyWillChange('element');\n      });\n      view.triggerRecursively('willInsertElement');\n\n
        \     morph.replaceWith(buffer.string());\n      view.transitionTo('inDOM');\n\n
        \     view.invokeRecursively(function(view) {\n        view.propertyDidChange('element');\n
        \     });\n      view.triggerRecursively('didInsertElement');\n\n      notifyMutationListeners();\n
        \   });\n  },\n\n  empty: function(view) {\n    view.morph.html(\"\");\n    notifyMutationListeners();\n
        \ }\n};\n\n// The `morph` and `outerHTML` properties are internal only\n//
        and not observable.\n\n/**\n  @class _Metamorph\n  @namespace Ember\n  @private\n*/\nEmber._Metamorph
        = Ember.Mixin.create({\n  isVirtual: true,\n  tagName: '',\n\n  instrumentName:
        'metamorph',\n\n  init: function() {\n    this._super();\n    this.morph =
        Metamorph();\n    Ember.deprecate('Supplying a tagName to Metamorph views
        is unreliable and is deprecated. You may be setting the tagName on a Handlebars
        helper that creates a Metamorph.', !this.tagName);\n  },\n\n  beforeRender:
        function(buffer) {\n    buffer.push(this.morph.startTag());\n    buffer.pushOpeningTag();\n
        \ },\n\n  afterRender: function(buffer) {\n    buffer.pushClosingTag();\n
        \   buffer.push(this.morph.endTag());\n  },\n\n  createElement: function()
        {\n    var buffer = this.renderToBuffer();\n    this.outerHTML = buffer.string();\n
        \   this.clearBuffer();\n  },\n\n  domManager: DOMManager\n});\n\n/**\n  @class
        _MetamorphView\n  @namespace Ember\n  @extends Ember.View\n  @uses Ember._Metamorph\n
        \ @private\n*/\nEmber._MetamorphView = Ember.View.extend(Ember._Metamorph);\n\n/**\n
        \ @class _SimpleMetamorphView\n  @namespace Ember\n  @extends Ember.CoreView\n
        \ @uses Ember._Metamorph\n  @private\n*/\nEmber._SimpleMetamorphView = Ember.CoreView.extend(Ember._Metamorph);\n\n\n})();\n\n\n\n(function()
        {\n/*globals Handlebars */\n/*jshint newcap:false*/\n/**\n@module ember\n@submodule
        ember-handlebars\n*/\n\nvar get = Ember.get, set = Ember.set, handlebarsGet
        = Ember.Handlebars.get;\nvar Metamorph = requireModule('metamorph');\nfunction
        SimpleHandlebarsView(path, pathRoot, isEscaped, templateData) {\n  this.path
        = path;\n  this.pathRoot = pathRoot;\n  this.isEscaped = isEscaped;\n  this.templateData
        = templateData;\n\n  this.morph = Metamorph();\n  this.state = 'preRender';\n
        \ this.updateId = null;\n  this._parentView = null;\n  this.buffer = null;\n}\n\nEmber._SimpleHandlebarsView
        = SimpleHandlebarsView;\n\nSimpleHandlebarsView.prototype = {\n  isVirtual:
        true,\n  isView: true,\n\n  destroy: function () {\n    if (this.updateId)
        {\n      Ember.run.cancel(this.updateId);\n      this.updateId = null;\n    }\n
        \   if (this._parentView) {\n      this._parentView.removeChild(this);\n    }\n
        \   this.morph = null;\n    this.state = 'destroyed';\n  },\n\n  propertyWillChange:
        Ember.K,\n\n  propertyDidChange: Ember.K,\n\n  normalizedValue: function()
        {\n    var path = this.path,\n        pathRoot = this.pathRoot,\n        result,
        templateData;\n\n    // Use the pathRoot as the result if no path is provided.
        This\n    // happens if the path is `this`, which gets normalized into\n    //
        a `pathRoot` of the current Handlebars context and a path\n    // of `''`.\n
        \   if (path === '') {\n      result = pathRoot;\n    } else {\n      templateData
        = this.templateData;\n      result = handlebarsGet(pathRoot, path, { data:
        templateData });\n    }\n\n    return result;\n  },\n\n  renderToBuffer: function(buffer)
        {\n    var string = '';\n\n    string += this.morph.startTag();\n    string
        += this.render();\n    string += this.morph.endTag();\n\n    buffer.push(string);\n
        \ },\n\n  render: function() {\n    // If not invoked via a triple-mustache
        ({{{foo}}}), escape\n    // the content of the template.\n    var escape =
        this.isEscaped;\n    var result = this.normalizedValue();\n\n    if (result
        === null || result === undefined) {\n      result = \"\";\n    } else if (!(result
        instanceof Handlebars.SafeString)) {\n      result = String(result);\n    }\n\n
        \   if (escape) { result = Handlebars.Utils.escapeExpression(result); }\n
        \   return result;\n  },\n\n  rerender: function() {\n    switch(this.state)
        {\n      case 'preRender':\n      case 'destroyed':\n        break;\n      case
        'inBuffer':\n        throw new Ember.Error(\"Something you did tried to replace
        an {{expression}} before it was inserted into the DOM.\");\n      case 'hasElement':\n
        \     case 'inDOM':\n        this.updateId = Ember.run.scheduleOnce('render',
        this, 'update');\n        break;\n    }\n\n    return this;\n  },\n\n  update:
        function () {\n    this.updateId = null;\n    this.morph.html(this.render());\n
        \ },\n\n  transitionTo: function(state) {\n    this.state = state;\n  }\n};\n\nvar
        states = Ember.View.cloneStates(Ember.View.states), merge = Ember.merge;\n\nmerge(states._default,
        {\n  rerenderIfNeeded: Ember.K\n});\n\nmerge(states.inDOM, {\n  rerenderIfNeeded:
        function(view) {\n    if (view.normalizedValue() !== view._lastNormalizedValue)
        {\n      view.rerender();\n    }\n  }\n});\n\n/**\n  `Ember._HandlebarsBoundView`
        is a private view created by the Handlebars\n  `{{bind}}` helpers that is
        used to keep track of bound properties.\n\n  Every time a property is bound
        using a `{{mustache}}`, an anonymous subclass\n  of `Ember._HandlebarsBoundView`
        is created with the appropriate sub-template\n  and context set up. When the
        associated property changes, just the template\n  for this view will re-render.\n\n
        \ @class _HandlebarsBoundView\n  @namespace Ember\n  @extends Ember._MetamorphView\n
        \ @private\n*/\nEmber._HandlebarsBoundView = Ember._MetamorphView.extend({\n
        \ instrumentName: 'boundHandlebars',\n  states: states,\n\n  /**\n    The
        function used to determine if the `displayTemplate` or\n    `inverseTemplate`
        should be rendered. This should be a function that takes\n    a value and
        returns a Boolean.\n\n    @property shouldDisplayFunc\n    @type Function\n
        \   @default null\n  */\n  shouldDisplayFunc: null,\n\n  /**\n    Whether
        the template rendered by this view gets passed the context object\n    of
        its parent template, or gets passed the value of retrieving `path`\n    from
        the `pathRoot`.\n\n    For example, this is true when using the `{{#if}}`
        helper, because the\n    template inside the helper should look up properties
        relative to the same\n    object as outside the block. This would be `false`
        when used with `{{#with\n    foo}}` because the template should receive the
        object found by evaluating\n    `foo`.\n\n    @property preserveContext\n
        \   @type Boolean\n    @default false\n  */\n  preserveContext: false,\n\n
        \ /**\n    If `preserveContext` is true, this is the object that will be used\n
        \   to render the template.\n\n    @property previousContext\n    @type Object\n
        \ */\n  previousContext: null,\n\n  /**\n    The template to render when `shouldDisplayFunc`
        evaluates to `true`.\n\n    @property displayTemplate\n    @type Function\n
        \   @default null\n  */\n  displayTemplate: null,\n\n  /**\n    The template
        to render when `shouldDisplayFunc` evaluates to `false`.\n\n    @property
        inverseTemplate\n    @type Function\n    @default null\n  */\n  inverseTemplate:
        null,\n\n\n  /**\n    The path to look up on `pathRoot` that is passed to\n
        \   `shouldDisplayFunc` to determine which template to render.\n\n    In addition,
        if `preserveContext` is `false,` the object at this path will\n    be passed
        to the template when rendering.\n\n    @property path\n    @type String\n
        \   @default null\n  */\n  path: null,\n\n  /**\n    The object from which
        the `path` will be looked up. Sometimes this is the\n    same as the `previousContext`,
        but in cases where this view has been\n    generated for paths that start
        with a keyword such as `view` or\n    `controller`, the path root will be
        that resolved object.\n\n    @property pathRoot\n    @type Object\n  */\n
        \ pathRoot: null,\n\n  normalizedValue: function() {\n    var path = get(this,
        'path'),\n        pathRoot  = get(this, 'pathRoot'),\n        valueNormalizer
        = get(this, 'valueNormalizerFunc'),\n        result, templateData;\n\n    //
        Use the pathRoot as the result if no path is provided. This\n    // happens
        if the path is `this`, which gets normalized into\n    // a `pathRoot` of
        the current Handlebars context and a path\n    // of `''`.\n    if (path ===
        '') {\n      result = pathRoot;\n    } else {\n      templateData = get(this,
        'templateData');\n      result = handlebarsGet(pathRoot, path, { data: templateData
        });\n    }\n\n    return valueNormalizer ? valueNormalizer(result) : result;\n
        \ },\n\n  rerenderIfNeeded: function() {\n    this.currentState.rerenderIfNeeded(this);\n
        \ },\n\n  /**\n    Determines which template to invoke, sets up the correct
        state based on\n    that logic, then invokes the default `Ember.View` `render`
        implementation.\n\n    This method will first look up the `path` key on `pathRoot`,\n
        \   then pass that value to the `shouldDisplayFunc` function. If that returns\n
        \   `true,` the `displayTemplate` function will be rendered to DOM. Otherwise,\n
        \   `inverseTemplate`, if specified, will be rendered.\n\n    For example,
        if this `Ember._HandlebarsBoundView` represented the `{{#with\n    foo}}`
        helper, it would look up the `foo` property of its context, and\n    `shouldDisplayFunc`
        would always return true. The object found by looking\n    up `foo` would
        be passed to `displayTemplate`.\n\n    @method render\n    @param {Ember.RenderBuffer}
        buffer\n  */\n  render: function(buffer) {\n    // If not invoked via a triple-mustache
        ({{{foo}}}), escape\n    // the content of the template.\n    var escape =
        get(this, 'isEscaped');\n\n    var shouldDisplay = get(this, 'shouldDisplayFunc'),\n
        \       preserveContext = get(this, 'preserveContext'),\n        context =
        get(this, 'previousContext');\n\n    var inverseTemplate = get(this, 'inverseTemplate'),\n
        \       displayTemplate = get(this, 'displayTemplate');\n\n    var result
        = this.normalizedValue();\n    this._lastNormalizedValue = result;\n\n    //
        First, test the conditional to see if we should\n    // render the template
        or not.\n    if (shouldDisplay(result)) {\n      set(this, 'template', displayTemplate);\n\n
        \     // If we are preserving the context (for example, if this\n      //
        is an #if block, call the template with the same object.\n      if (preserveContext)
        {\n        set(this, '_context', context);\n      } else {\n      // Otherwise,
        determine if this is a block bind or not.\n      // If so, pass the specified
        object to the template\n        if (displayTemplate) {\n          set(this,
        '_context', result);\n        } else {\n        // This is not a bind block,
        just push the result of the\n        // expression to the render context and
        return.\n          if (result === null || result === undefined) {\n            result
        = \"\";\n          } else if (!(result instanceof Handlebars.SafeString))
        {\n            result = String(result);\n          }\n\n          if (escape)
        { result = Handlebars.Utils.escapeExpression(result); }\n          buffer.push(result);\n
        \         return;\n        }\n      }\n    } else if (inverseTemplate) {\n
        \     set(this, 'template', inverseTemplate);\n\n      if (preserveContext)
        {\n        set(this, '_context', context);\n      } else {\n        set(this,
        '_context', result);\n      }\n    } else {\n      set(this, 'template', function()
        { return ''; });\n    }\n\n    return this._super(buffer);\n  }\n});\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-handlebars\n*/\n\nvar get = Ember.get,
        set = Ember.set, fmt = Ember.String.fmt;\nvar handlebarsGet = Ember.Handlebars.get,
        normalizePath = Ember.Handlebars.normalizePath;\nvar forEach = Ember.ArrayPolyfills.forEach;\n\nvar
        EmberHandlebars = Ember.Handlebars, helpers = EmberHandlebars.helpers;\n\nfunction
        exists(value) {\n  return !Ember.isNone(value);\n}\n\n// Binds a property
        into the DOM. This will create a hook in DOM that the\n// KVO system will
        look for and update if the property changes.\nfunction bind(property, options,
        preserveContext, shouldDisplay, valueNormalizer, childProperties) {\n  var
        data = options.data,\n      fn = options.fn,\n      inverse = options.inverse,\n
        \     view = data.view,\n      currentContext = this,\n      normalized, observer,
        i;\n\n  normalized = normalizePath(currentContext, property, data);\n\n  //
        Set up observers for observable objects\n  if ('object' === typeof this) {\n
        \   if (data.insideGroup) {\n      observer = function() {\n        Ember.run.once(view,
        'rerender');\n      };\n\n      var template, context, result = handlebarsGet(currentContext,
        property, options);\n\n      result = valueNormalizer ? valueNormalizer(result)
        : result;\n\n      context = preserveContext ? currentContext : result;\n
        \     if (shouldDisplay(result)) {\n        template = fn;\n      } else if
        (inverse) {\n        template = inverse;\n      }\n\n      template(context,
        { data: options.data });\n    } else {\n      // Create the view that will
        wrap the output of this template/property\n      // and add it to the nearest
        view's childViews array.\n      // See the documentation of Ember._HandlebarsBoundView
        for more.\n      var bindView = view.createChildView(Ember._HandlebarsBoundView,
        {\n        preserveContext: preserveContext,\n        shouldDisplayFunc: shouldDisplay,\n
        \       valueNormalizerFunc: valueNormalizer,\n        displayTemplate: fn,\n
        \       inverseTemplate: inverse,\n        path: property,\n        pathRoot:
        currentContext,\n        previousContext: currentContext,\n        isEscaped:
        !options.hash.unescaped,\n        templateData: options.data\n      });\n\n
        \     view.appendChild(bindView);\n\n      observer = function() {\n        Ember.run.scheduleOnce('render',
        bindView, 'rerenderIfNeeded');\n      };\n    }\n\n    // Observes the given
        property on the context and\n    // tells the Ember._HandlebarsBoundView to
        re-render. If property\n    // is an empty string, we are printing the current
        context\n    // object ({{this}}) so updating it is not our responsibility.\n
        \   if (normalized.path !== '') {\n      view.registerObserver(normalized.root,
        normalized.path, observer);\n      if (childProperties) {\n        for (i=0;
        i<childProperties.length; i++) {\n          view.registerObserver(normalized.root,
        normalized.path+'.'+childProperties[i], observer);\n        }\n      }\n    }\n
        \ } else {\n    // The object is not observable, so just render it out and\n
        \   // be done with it.\n    data.buffer.push(handlebarsGet(currentContext,
        property, options));\n  }\n}\n\nfunction simpleBind(currentContext, property,
        options) {\n  var data = options.data,\n      view = data.view,\n      normalized,
        observer, pathRoot, output;\n\n  normalized = normalizePath(currentContext,
        property, data);\n  pathRoot = normalized.root;\n\n  // Set up observers for
        observable objects\n  if (pathRoot && ('object' === typeof pathRoot)) {\n
        \   if (data.insideGroup) {\n      observer = function() {\n        Ember.run.once(view,
        'rerender');\n      };\n\n      var result = handlebarsGet(currentContext,
        property, options);\n      if (result === null || result === undefined) {
        result = \"\"; }\n      data.buffer.push(result);\n    } else {\n      var
        bindView = new Ember._SimpleHandlebarsView(\n        property, currentContext,
        !options.hash.unescaped, options.data\n      );\n\n      bindView._parentView
        = view;\n      view.appendChild(bindView);\n\n      observer = function()
        {\n        Ember.run.scheduleOnce('render', bindView, 'rerender');\n      };\n
        \   }\n\n    // Observes the given property on the context and\n    // tells
        the Ember._HandlebarsBoundView to re-render. If property\n    // is an empty
        string, we are printing the current context\n    // object ({{this}}) so updating
        it is not our responsibility.\n    if (normalized.path !== '') {\n      view.registerObserver(normalized.root,
        normalized.path, observer);\n    }\n  } else {\n    // The object is not observable,
        so just render it out and\n    // be done with it.\n    output = handlebarsGet(currentContext,
        property, options);\n    data.buffer.push((output === null || typeof output
        === 'undefined') ? '' : output);\n  }\n}\n\n/**\n  @private\n\n  '_triageMustache'
        is used internally select between a binding and helper for\n  the given context.
        Until this point, it would be hard to determine if the\n  mustache is a property
        reference or a regular helper reference. This triage\n  helper resolves that.\n\n
        \ This would not be typically invoked by directly.\n\n  @method _triageMustache\n
        \ @for Ember.Handlebars.helpers\n  @param {String} property Property/helperID
        to triage\n  @param {Function} fn Context to provide for rendering\n  @return
        {String} HTML string\n*/\nEmberHandlebars.registerHelper('_triageMustache',
        function(property, fn) {\n  Ember.assert(\"You cannot pass more than one argument
        to the _triageMustache helper\", arguments.length <= 2);\n  if (helpers[property])
        {\n    return helpers[property].call(this, fn);\n  }\n  else {\n    return
        helpers.bind.apply(this, arguments);\n  }\n});\n\n/**\n  @private\n\n  `bind`
        can be used to display a value, then update that value if it\n  changes. For
        example, if you wanted to print the `title` property of\n  `content`:\n\n
        \ ```handlebars\n  {{bind \"content.title\"}}\n  ```\n\n  This will return
        the `title` property as a string, then create a new observer\n  at the specified
        path. If it changes, it will update the value in DOM. Note\n  that if you
        need to support IE7 and IE8 you must modify the model objects\n  properties
        using `Ember.get()` and `Ember.set()` for this to work as it\n  relies on
        Ember's KVO system. For all other browsers this will be handled for\n  you
        automatically.\n\n  @method bind\n  @for Ember.Handlebars.helpers\n  @param
        {String} property Property to bind\n  @param {Function} fn Context to provide
        for rendering\n  @return {String} HTML string\n*/\nEmberHandlebars.registerHelper('bind',
        function(property, options) {\n  Ember.assert(\"You cannot pass more than
        one argument to the bind helper\", arguments.length <= 2);\n\n  var context
        = (options.contexts && options.contexts.length) ? options.contexts[0] : this;\n\n
        \ if (!options.fn) {\n    return simpleBind(context, property, options);\n
        \ }\n\n  return bind.call(context, property, options, false, exists);\n});\n\n/**\n
        \ @private\n\n  Use the `boundIf` helper to create a conditional that re-evaluates\n
        \ whenever the truthiness of the bound value changes.\n\n  ```handlebars\n
        \ {{#boundIf \"content.shouldDisplayTitle\"}}\n    {{content.title}}\n  {{/boundIf}}\n
        \ ```\n\n  @method boundIf\n  @for Ember.Handlebars.helpers\n  @param {String}
        property Property to bind\n  @param {Function} fn Context to provide for rendering\n
        \ @return {String} HTML string\n*/\nEmberHandlebars.registerHelper('boundIf',
        function(property, fn) {\n  var context = (fn.contexts && fn.contexts.length)
        ? fn.contexts[0] : this;\n  var func = function(result) {\n    var truthy
        = result && get(result, 'isTruthy');\n    if (typeof truthy === 'boolean')
        { return truthy; }\n\n    if (Ember.isArray(result)) {\n      return get(result,
        'length') !== 0;\n    } else {\n      return !!result;\n    }\n  };\n\n  return
        bind.call(context, property, fn, true, func, func, ['isTruthy', 'length']);\n});\n\n/**\n
        \ @method with\n  @for Ember.Handlebars.helpers\n  @param {Function} context\n
        \ @param {Hash} options\n  @return {String} HTML string\n*/\nEmberHandlebars.registerHelper('with',
        function(context, options) {\n  if (arguments.length === 4) {\n    var keywordName,
        path, rootPath, normalized;\n\n    Ember.assert(\"If you pass more than one
        argument to the with helper, it must be in the form #with foo as bar\", arguments[1]
        === \"as\");\n    options = arguments[3];\n    keywordName = arguments[2];\n
        \   path = arguments[0];\n\n    Ember.assert(\"You must pass a block to the
        with helper\", options.fn && options.fn !== Handlebars.VM.noop);\n\n    if
        (Ember.isGlobalPath(path)) {\n      Ember.bind(options.data.keywords, keywordName,
        path);\n    } else {\n      normalized = normalizePath(this, path, options.data);\n
        \     path = normalized.path;\n      rootPath = normalized.root;\n\n      //
        This is a workaround for the fact that you cannot bind separate objects\n
        \     // together. When we implement that functionality, we should use it
        here.\n      var contextKey = Ember.$.expando + Ember.guidFor(rootPath);\n
        \     options.data.keywords[contextKey] = rootPath;\n\n      // if the path
        is '' (\"this\"), just bind directly to the current context\n      var contextPath
        = path ? contextKey + '.' + path : contextKey;\n      Ember.bind(options.data.keywords,
        keywordName, contextPath);\n    }\n\n    return bind.call(this, path, options,
        true, exists);\n  } else {\n    Ember.assert(\"You must pass exactly one argument
        to the with helper\", arguments.length === 2);\n    Ember.assert(\"You must
        pass a block to the with helper\", options.fn && options.fn !== Handlebars.VM.noop);\n
        \   return helpers.bind.call(options.contexts[0], context, options);\n  }\n});\n\n\n/**\n
        \ See [boundIf](/api/classes/Ember.Handlebars.helpers.html#method_boundIf)\n\n
        \ @method if\n  @for Ember.Handlebars.helpers\n  @param {Function} context\n
        \ @param {Hash} options\n  @return {String} HTML string\n*/\nEmberHandlebars.registerHelper('if',
        function(context, options) {\n  Ember.assert(\"You must pass exactly one argument
        to the if helper\", arguments.length === 2);\n  Ember.assert(\"You must pass
        a block to the if helper\", options.fn && options.fn !== Handlebars.VM.noop);\n\n
        \ return helpers.boundIf.call(options.contexts[0], context, options);\n});\n\n/**\n
        \ @method unless\n  @for Ember.Handlebars.helpers\n  @param {Function} context\n
        \ @param {Hash} options\n  @return {String} HTML string\n*/\nEmberHandlebars.registerHelper('unless',
        function(context, options) {\n  Ember.assert(\"You must pass exactly one argument
        to the unless helper\", arguments.length === 2);\n  Ember.assert(\"You must
        pass a block to the unless helper\", options.fn && options.fn !== Handlebars.VM.noop);\n\n
        \ var fn = options.fn, inverse = options.inverse;\n\n  options.fn = inverse;\n
        \ options.inverse = fn;\n\n  return helpers.boundIf.call(options.contexts[0],
        context, options);\n});\n\n/**\n  `bind-attr` allows you to create a binding
        between DOM element attributes and\n  Ember objects. For example:\n\n  ```handlebars\n
        \ <img {{bind-attr src=\"imageUrl\" alt=\"imageTitle\"}}>\n  ```\n\n  The
        above handlebars template will fill the `<img>`'s `src` attribute will\n  the
        value of the property referenced with `\"imageUrl\"` and its `alt`\n  attribute
        with the value of the property referenced with `\"imageTitle\"`.\n\n  If the
        rendering context of this template is the following object:\n\n  ```javascript\n
        \ {\n    imageUrl: 'http://lolcats.info/haz-a-funny',\n    imageTitle: 'A
        humorous image of a cat'\n  }\n  ```\n\n  The resulting HTML output will be:\n\n
        \ ```html\n  <img src=\"http://lolcats.info/haz-a-funny\" alt=\"A humorous
        image of a cat\">\n  ```\n\n  `bind-attr` cannot redeclare existing DOM element
        attributes. The use of `src`\n  in the following `bind-attr` example will
        be ignored and the hard coded value\n  of `src=\"/failwhale.gif\"` will take
        precedence:\n\n  ```handlebars\n  <img src=\"/failwhale.gif\" {{bind-attr
        src=\"imageUrl\" alt=\"imageTitle\"}}>\n  ```\n\n  ### `bind-attr` and the
        `class` attribute\n\n  `bind-attr` supports a special syntax for handling
        a number of cases unique\n  to the `class` DOM element attribute. The `class`
        attribute combines\n  multiple discreet values into a single attribute as
        a space-delimited\n  list of strings. Each string can be:\n\n  * a string
        return value of an object's property.\n  * a boolean return value of an object's
        property\n  * a hard-coded value\n\n  A string return value works identically
        to other uses of `bind-attr`. The\n  return value of the property will become
        the value of the attribute. For\n  example, the following view and template:\n\n
        \ ```javascript\n    AView = Ember.View.extend({\n      someProperty: function()
        {\n        return \"aValue\";\n      }.property()\n    })\n  ```\n\n  ```handlebars\n
        \ <img {{bind-attr class=\"view.someProperty}}>\n  ```\n\n  Result in the
        following rendered output:\n\n  ```html\n  <img class=\"aValue\">\n  ```\n\n
        \ A boolean return value will insert a specified class name if the property\n
        \ returns `true` and remove the class name if the property returns `false`.\n\n
        \ A class name is provided via the syntax\n  `somePropertyName:class-name-if-true`.\n\n
        \ ```javascript\n  AView = Ember.View.extend({\n    someBool: true\n  })\n
        \ ```\n\n  ```handlebars\n  <img {{bind-attr class=\"view.someBool:class-name-if-true\"}}>\n
        \ ```\n\n  Result in the following rendered output:\n\n  ```html\n  <img class=\"class-name-if-true\">\n
        \ ```\n\n  An additional section of the binding can be provided if you want
        to\n  replace the existing class instead of removing it when the boolean\n
        \ value changes:\n\n  ```handlebars\n  <img {{bind-attr class=\"view.someBool:class-name-if-true:class-name-if-false\"}}>\n
        \ ```\n\n  A hard-coded value can be used by prepending `:` to the desired\n
        \ class name: `:class-name-to-always-apply`.\n\n  ```handlebars\n  <img {{bind-attr
        class=\":class-name-to-always-apply\"}}>\n  ```\n\n  Results in the following
        rendered output:\n\n  ```html\n  <img class=\"class-name-to-always-apply\">\n
        \ ```\n\n  All three strategies - string return value, boolean return value,
        and\n  hard-coded value – can be combined in a single declaration:\n\n  ```handlebars\n
        \ <img {{bind-attr class=\":class-name-to-always-apply view.someBool:class-name-if-true
        view.someProperty\"}}>\n  ```\n\n  @method bind-attr\n  @for Ember.Handlebars.helpers\n
        \ @param {Hash} options\n  @return {String} HTML string\n*/\nEmberHandlebars.registerHelper('bind-attr',
        function(options) {\n\n  var attrs = options.hash;\n\n  Ember.assert(\"You
        must specify at least one hash argument to bind-attr\", !!Ember.keys(attrs).length);\n\n
        \ var view = options.data.view;\n  var ret = [];\n  var ctx = this;\n\n  //
        Generate a unique id for this element. This will be added as a\n  // data
        attribute to the element so it can be looked up when\n  // the bound property
        changes.\n  var dataId = ++Ember.uuid;\n\n  // Handle classes differently,
        as we can bind multiple classes\n  var classBindings = attrs['class'];\n  if
        (classBindings != null) {\n    var classResults = EmberHandlebars.bindClasses(this,
        classBindings, view, dataId, options);\n\n    ret.push('class=\"' + Handlebars.Utils.escapeExpression(classResults.join('
        ')) + '\"');\n    delete attrs['class'];\n  }\n\n  var attrKeys = Ember.keys(attrs);\n\n
        \ // For each attribute passed, create an observer and emit the\n  // current
        value of the property as an attribute.\n  forEach.call(attrKeys, function(attr)
        {\n    var path = attrs[attr],\n        normalized;\n\n    Ember.assert(fmt(\"You
        must provide an expression as the value of bound attribute. You specified:
        %@=%@\", [attr, path]), typeof path === 'string');\n\n    normalized = normalizePath(ctx,
        path, options.data);\n\n    var value = (path === 'this') ? normalized.root
        : handlebarsGet(ctx, path, options),\n        type = Ember.typeOf(value);\n\n
        \   Ember.assert(fmt(\"Attributes must be numbers, strings or booleans, not
        %@\", [value]), value === null || value === undefined || type === 'number'
        || type === 'string' || type === 'boolean');\n\n    var observer, invoker;\n\n
        \   observer = function observer() {\n      var result = handlebarsGet(ctx,
        path, options);\n\n      Ember.assert(fmt(\"Attributes must be numbers, strings
        or booleans, not %@\", [result]), result === null || result === undefined
        || typeof result === 'number' || typeof result === 'string' || typeof result
        === 'boolean');\n\n      var elem = view.$(\"[data-bindattr-\" + dataId +
        \"='\" + dataId + \"']\");\n\n      // If we aren't able to find the element,
        it means the element\n      // to which we were bound has been removed from
        the view.\n      // In that case, we can assume the template has been re-rendered\n
        \     // and we need to clean up the observer.\n      if (!elem || elem.length
        === 0) {\n        Ember.removeObserver(normalized.root, normalized.path, invoker);\n
        \       return;\n      }\n\n      Ember.View.applyAttributeBindings(elem,
        attr, result);\n    };\n\n    // Add an observer to the view for when the
        property changes.\n    // When the observer fires, find the element using
        the\n    // unique data id and update the attribute to the new value.\n    //
        Note: don't add observer when path is 'this' or path\n    // is whole keyword
        e.g. {{#each x in list}} ... {{bind-attr attr=\"x\"}}\n    if (path !== 'this'
        && !(normalized.isKeyword && normalized.path === '' )) {\n      view.registerObserver(normalized.root,
        normalized.path, observer);\n    }\n\n    // if this changes, also change
        the logic in ember-views/lib/views/view.js\n    if ((type === 'string' ||
        (type === 'number' && !isNaN(value)))) {\n      ret.push(attr + '=\"' + Handlebars.Utils.escapeExpression(value)
        + '\"');\n    } else if (value && type === 'boolean') {\n      // The developer
        controls the attr name, so it should always be safe\n      ret.push(attr +
        '=\"' + attr + '\"');\n    }\n  }, this);\n\n  // Add the unique identifier\n
        \ // NOTE: We use all lower-case since Firefox has problems with mixed case
        in SVG\n  ret.push('data-bindattr-' + dataId + '=\"' + dataId + '\"');\n  return
        new EmberHandlebars.SafeString(ret.join(' '));\n});\n\n/**\n  See `bind-attr`\n\n
        \ @method bindAttr\n  @for Ember.Handlebars.helpers\n  @deprecated\n  @param
        {Function} context\n  @param {Hash} options\n  @return {String} HTML string\n*/\nEmberHandlebars.registerHelper('bindAttr',
        EmberHandlebars.helpers['bind-attr']);\n\n/**\n  @private\n\n  Helper that,
        given a space-separated string of property paths and a context,\n  returns
        an array of class names. Calling this method also has the side\n  effect of
        setting up observers at those property paths, such that if they\n  change,
        the correct class name will be reapplied to the DOM element.\n\n  For example,
        if you pass the string \"fooBar\", it will first look up the\n  \"fooBar\"
        value of the context. If that value is true, it will add the\n  \"foo-bar\"
        class to the current element (i.e., the dasherized form of\n  \"fooBar\").
        If the value is a string, it will add that string as the class.\n  Otherwise,
        it will not add any new class name.\n\n  @method bindClasses\n  @for Ember.Handlebars\n
        \ @param {Ember.Object} context The context from which to lookup properties\n
        \ @param {String} classBindings A string, space-separated, of class bindings\n
        \   to use\n  @param {Ember.View} view The view in which observers should
        look for the\n    element to update\n  @param {Srting} bindAttrId Optional
        bindAttr id used to lookup elements\n  @return {Array} An array of class names
        to add\n*/\nEmberHandlebars.bindClasses = function(context, classBindings,
        view, bindAttrId, options) {\n  var ret = [], newClass, value, elem;\n\n  //
        Helper method to retrieve the property from the context and\n  // determine
        which class string to return, based on whether it is\n  // a Boolean or not.\n
        \ var classStringForPath = function(root, parsedPath, options) {\n    var
        val,\n        path = parsedPath.path;\n\n    if (path === 'this') {\n      val
        = root;\n    } else if (path === '') {\n      val = true;\n    } else {\n
        \     val = handlebarsGet(root, path, options);\n    }\n\n    return Ember.View._classStringForValue(path,
        val, parsedPath.className, parsedPath.falsyClassName);\n  };\n\n  // For each
        property passed, loop through and setup\n  // an observer.\n  forEach.call(classBindings.split('
        '), function(binding) {\n\n    // Variable in which the old class value is
        saved. The observer function\n    // closes over this variable, so it knows
        which string to remove when\n    // the property changes.\n    var oldClass;\n\n
        \   var observer, invoker;\n\n    var parsedPath = Ember.View._parsePropertyPath(binding),\n
        \       path = parsedPath.path,\n        pathRoot = context,\n        normalized;\n\n
        \   if (path !== '' && path !== 'this') {\n      normalized = normalizePath(context,
        path, options.data);\n\n      pathRoot = normalized.root;\n      path = normalized.path;\n
        \   }\n\n    // Set up an observer on the context. If the property changes,
        toggle the\n    // class name.\n    observer = function() {\n      // Get
        the current value of the property\n      newClass = classStringForPath(context,
        parsedPath, options);\n      elem = bindAttrId ? view.$(\"[data-bindattr-\"
        + bindAttrId + \"='\" + bindAttrId + \"']\") : view.$();\n\n      // If we
        can't find the element anymore, a parent template has been\n      // re-rendered
        and we've been nuked. Remove the observer.\n      if (!elem || elem.length
        === 0) {\n        Ember.removeObserver(pathRoot, path, invoker);\n      }
        else {\n        // If we had previously added a class to the element, remove
        it.\n        if (oldClass) {\n          elem.removeClass(oldClass);\n        }\n\n
        \       // If necessary, add a new class. Make sure we keep track of it so\n
        \       // it can be removed in the future.\n        if (newClass) {\n          elem.addClass(newClass);\n
        \         oldClass = newClass;\n        } else {\n          oldClass = null;\n
        \       }\n      }\n    };\n\n    if (path !== '' && path !== 'this') {\n
        \     view.registerObserver(pathRoot, path, observer);\n    }\n\n    // We've
        already setup the observer; now we just need to figure out the\n    // correct
        behavior right now on the first pass through.\n    value = classStringForPath(context,
        parsedPath, options);\n\n    if (value) {\n      ret.push(value);\n\n      //
        Make sure we save the current value so that it can be removed if the\n      //
        observer fires.\n      oldClass = value;\n    }\n  });\n\n  return ret;\n};\n\n\n})();\n\n\n\n(function()
        {\n/*globals Handlebars */\n\n// TODO: Don't require the entire module\n/**\n@module
        ember\n@submodule ember-handlebars\n*/\n\nvar get = Ember.get, set = Ember.set;\nvar
        EmberHandlebars = Ember.Handlebars;\nvar LOWERCASE_A_Z = /^[a-z]/;\nvar VIEW_PREFIX
        = /^view\\./;\n\nfunction makeBindings(thisContext, options) {\n  var hash
        = options.hash,\n      hashType = options.hashTypes;\n\n  for (var prop in
        hash) {\n    if (hashType[prop] === 'ID') {\n\n      var value = hash[prop];\n\n
        \     if (Ember.IS_BINDING.test(prop)) {\n        Ember.warn(\"You're attempting
        to render a view by passing \" + prop + \"=\" + value + \" to a view helper,
        but this syntax is ambiguous. You should either surround \" + value + \" in
        quotes or remove `Binding` from \" + prop + \".\");\n      } else {\n        hash[prop
        + 'Binding'] = value;\n        hashType[prop + 'Binding'] = 'STRING';\n        delete
        hash[prop];\n        delete hashType[prop];\n      }\n    }\n  }\n\n  if (hash.hasOwnProperty('idBinding'))
        {\n    // id can't be bound, so just perform one-time lookup.\n    hash.id
        = EmberHandlebars.get(thisContext, hash.idBinding, options);\n    hashType.id
        = 'STRING';\n    delete hash.idBinding;\n    delete hashType.idBinding;\n
        \ }\n}\n\nEmberHandlebars.ViewHelper = Ember.Object.create({\n\n  propertiesFromHTMLOptions:
        function(options, thisContext) {\n    var hash = options.hash, data = options.data;\n
        \   var extensions = {},\n        classes = hash['class'],\n        dup =
        false;\n\n    if (hash.id) {\n      extensions.elementId = hash.id;\n      dup
        = true;\n    }\n\n    if (hash.tag) {\n      extensions.tagName = hash.tag;\n
        \     dup = true;\n    }\n\n    if (classes) {\n      classes = classes.split('
        ');\n      extensions.classNames = classes;\n      dup = true;\n    }\n\n
        \   if (hash.classBinding) {\n      extensions.classNameBindings = hash.classBinding.split('
        ');\n      dup = true;\n    }\n\n    if (hash.classNameBindings) {\n      if
        (extensions.classNameBindings === undefined) extensions.classNameBindings
        = [];\n      extensions.classNameBindings = extensions.classNameBindings.concat(hash.classNameBindings.split('
        '));\n      dup = true;\n    }\n\n    if (hash.attributeBindings) {\n      Ember.assert(\"Setting
        'attributeBindings' via Handlebars is not allowed. Please subclass Ember.View
        and set it there instead.\");\n      extensions.attributeBindings = null;\n
        \     dup = true;\n    }\n\n    if (dup) {\n      hash = Ember.$.extend({},
        hash);\n      delete hash.id;\n      delete hash.tag;\n      delete hash['class'];\n
        \     delete hash.classBinding;\n    }\n\n    // Set the proper context for
        all bindings passed to the helper. This applies to regular attribute bindings\n
        \   // as well as class name bindings. If the bindings are local, make them
        relative to the current context\n    // instead of the view.\n    var path;\n\n
        \   // Evaluate the context of regular attribute bindings:\n    for (var prop
        in hash) {\n      if (!hash.hasOwnProperty(prop)) { continue; }\n\n      //
        Test if the property ends in \"Binding\"\n      if (Ember.IS_BINDING.test(prop)
        && typeof hash[prop] === 'string') {\n        path = this.contextualizeBindingPath(hash[prop],
        data);\n        if (path) { hash[prop] = path; }\n      }\n    }\n\n    //
        Evaluate the context of class name bindings:\n    if (extensions.classNameBindings)
        {\n      for (var b in extensions.classNameBindings) {\n        var full =
        extensions.classNameBindings[b];\n        if (typeof full === 'string') {\n
        \         // Contextualize the path of classNameBinding so this:\n          //\n
        \         //     classNameBinding=\"isGreen:green\"\n          //\n          //
        is converted to this:\n          //\n          //     classNameBinding=\"_parentView.context.isGreen:green\"\n
        \         var parsedPath = Ember.View._parsePropertyPath(full);\n          path
        = this.contextualizeBindingPath(parsedPath.path, data);\n          if (path)
        { extensions.classNameBindings[b] = path + parsedPath.classNames; }\n        }\n
        \     }\n    }\n\n    return Ember.$.extend(hash, extensions);\n  },\n\n  //
        Transform bindings from the current context to a context that can be evaluated
        within the view.\n  // Returns null if the path shouldn't be changed.\n  //\n
        \ // TODO: consider the addition of a prefix that would allow this method
        to return `path`.\n  contextualizeBindingPath: function(path, data) {\n    var
        normalized = Ember.Handlebars.normalizePath(null, path, data);\n    if (normalized.isKeyword)
        {\n      return 'templateData.keywords.' + path;\n    } else if (Ember.isGlobalPath(path))
        {\n      return null;\n    } else if (path === 'this') {\n      return '_parentView.context';\n
        \   } else {\n      return '_parentView.context.' + path;\n    }\n  },\n\n
        \ helper: function(thisContext, path, options) {\n    var data = options.data,\n
        \       fn = options.fn,\n        newView;\n\n    makeBindings(thisContext,
        options);\n\n    if ('string' === typeof path) {\n\n      // TODO: this is
        a lame conditional, this should likely change\n      // but something along
        these lines will likely need to be added\n      // as deprecation warnings\n
        \     //\n      if (options.types[0] === 'STRING' && LOWERCASE_A_Z.test(path)
        && !VIEW_PREFIX.test(path)) {\n        Ember.assert(\"View requires a container\",
        !!data.view.container);\n        newView = data.view.container.lookupFactory('view:'
        + path);\n      } else {\n        newView = EmberHandlebars.get(thisContext,
        path, options);\n      }\n\n      Ember.assert(\"Unable to find view at path
        '\" + path + \"'\", !!newView);\n    } else {\n      newView = path;\n    }\n\n
        \   Ember.assert(Ember.String.fmt('You must pass a view to the #view helper,
        not %@ (%@)', [path, newView]), Ember.View.detect(newView) || Ember.View.detectInstance(newView));\n\n
        \   var viewOptions = this.propertiesFromHTMLOptions(options, thisContext);\n
        \   var currentView = data.view;\n    viewOptions.templateData = data;\n    var
        newViewProto = newView.proto ? newView.proto() : newView;\n\n    if (fn) {\n
        \     Ember.assert(\"You cannot provide a template block if you also specified
        a templateName\", !get(viewOptions, 'templateName') && !get(newViewProto,
        'templateName'));\n      viewOptions.template = fn;\n    }\n\n    // We only
        want to override the `_context` computed property if there is\n    // no specified
        controller. See View#_context for more information.\n    if (!newViewProto.controller
        && !newViewProto.controllerBinding && !viewOptions.controller && !viewOptions.controllerBinding)
        {\n      viewOptions._context = thisContext;\n    }\n\n    currentView.appendChild(newView,
        viewOptions);\n  }\n});\n\n/**\n  `{{view}}` inserts a new instance of `Ember.View`
        into a template passing its\n  options to the `Ember.View`'s `create` method
        and using the supplied block as\n  the view's own template.\n\n  An empty
        `<body>` and the following template:\n\n  ```handlebars\n  A span:\n  {{#view
        tagName=\"span\"}}\n    hello.\n  {{/view}}\n  ```\n\n  Will result in HTML
        structure:\n\n  ```html\n  <body>\n    <!-- Note: the handlebars template
        script\n         also results in a rendered Ember.View\n         which is
        the outer <div> here -->\n\n    <div class=\"ember-view\">\n      A span:\n
        \     <span id=\"ember1\" class=\"ember-view\">\n        Hello.\n      </span>\n
        \   </div>\n  </body>\n  ```\n\n  ### `parentView` setting\n\n  The `parentView`
        property of the new `Ember.View` instance created through\n  `{{view}}` will
        be set to the `Ember.View` instance of the template where\n  `{{view}}` was
        called.\n\n  ```javascript\n  aView = Ember.View.create({\n    template: Ember.Handlebars.compile(\"{{#view}}
        my parent: {{parentView.elementId}} {{/view}}\")\n  });\n\n  aView.appendTo('body');\n
        \ ```\n\n  Will result in HTML structure:\n\n  ```html\n  <div id=\"ember1\"
        class=\"ember-view\">\n    <div id=\"ember2\" class=\"ember-view\">\n      my
        parent: ember1\n    </div>\n  </div>\n  ```\n\n  ### Setting CSS id and class
        attributes\n\n  The HTML `id` attribute can be set on the `{{view}}`'s resulting
        element with\n  the `id` option. This option will _not_ be passed to `Ember.View.create`.\n\n
        \ ```handlebars\n  {{#view tagName=\"span\" id=\"a-custom-id\"}}\n    hello.\n
        \ {{/view}}\n  ```\n\n  Results in the following HTML structure:\n\n  ```html\n
        \ <div class=\"ember-view\">\n    <span id=\"a-custom-id\" class=\"ember-view\">\n
        \     hello.\n    </span>\n  </div>\n  ```\n\n  The HTML `class` attribute
        can be set on the `{{view}}`'s resulting element\n  with the `class` or `classNameBindings`
        options. The `class` option will\n  directly set the CSS `class` attribute
        and will not be passed to\n  `Ember.View.create`. `classNameBindings` will
        be passed to `create` and use\n  `Ember.View`'s class name binding functionality:\n\n
        \ ```handlebars\n  {{#view tagName=\"span\" class=\"a-custom-class\"}}\n    hello.\n
        \ {{/view}}\n  ```\n\n  Results in the following HTML structure:\n\n  ```html\n
        \ <div class=\"ember-view\">\n    <span id=\"ember2\" class=\"ember-view a-custom-class\">\n
        \     hello.\n    </span>\n  </div>\n  ```\n\n  ### Supplying a different
        view class\n\n  `{{view}}` can take an optional first argument before its
        supplied options to\n  specify a path to a custom view class.\n\n  ```handlebars\n
        \ {{#view \"MyApp.CustomView\"}}\n    hello.\n  {{/view}}\n  ```\n\n  The
        first argument can also be a relative path accessible from the current\n  context.\n\n
        \ ```javascript\n  MyApp = Ember.Application.create({});\n  MyApp.OuterView
        = Ember.View.extend({\n    innerViewClass: Ember.View.extend({\n      classNames:
        ['a-custom-view-class-as-property']\n    }),\n    template: Ember.Handlebars.compile('{{#view
        \"view.innerViewClass\"}} hi {{/view}}')\n  });\n\n  MyApp.OuterView.create().appendTo('body');\n
        \ ```\n\n  Will result in the following HTML:\n\n  ```html\n  <div id=\"ember1\"
        class=\"ember-view\">\n    <div id=\"ember2\" class=\"ember-view a-custom-view-class-as-property\">\n
        \     hi\n    </div>\n  </div>\n  ```\n\n  ### Blockless use\n\n  If you supply
        a custom `Ember.View` subclass that specifies its own template\n  or provide
        a `templateName` option to `{{view}}` it can be used without\n  supplying
        a block. Attempts to use both a `templateName` option and supply a\n  block
        will throw an error.\n\n  ```handlebars\n  {{view \"MyApp.ViewWithATemplateDefined\"}}\n
        \ ```\n\n  ### `viewName` property\n\n  You can supply a `viewName` option
        to `{{view}}`. The `Ember.View` instance\n  will be referenced as a property
        of its parent view by this name.\n\n  ```javascript\n  aView = Ember.View.create({\n
        \   template: Ember.Handlebars.compile('{{#view viewName=\"aChildByName\"}}
        hi {{/view}}')\n  });\n\n  aView.appendTo('body');\n  aView.get('aChildByName')
        // the instance of Ember.View created by {{view}} helper\n  ```\n\n  @method
        view\n  @for Ember.Handlebars.helpers\n  @param {String} path\n  @param {Hash}
        options\n  @return {String} HTML string\n*/\nEmberHandlebars.registerHelper('view',
        function(path, options) {\n  Ember.assert(\"The view helper only takes a single
        argument\", arguments.length <= 2);\n\n  // If no path is provided, treat
        path param as options.\n  if (path && path.data && path.data.isRenderData)
        {\n    options = path;\n    path = \"Ember.View\";\n  }\n\n  return EmberHandlebars.ViewHelper.helper(this,
        path, options);\n});\n\n\n})();\n\n\n\n(function() {\n/*globals Handlebars
        */\n\n// TODO: Don't require all of this module\n/**\n@module ember\n@submodule
        ember-handlebars\n*/\n\nvar get = Ember.get, handlebarsGet = Ember.Handlebars.get,
        fmt = Ember.String.fmt;\n\n/**\n  `{{collection}}` is a `Ember.Handlebars`
        helper for adding instances of\n  `Ember.CollectionView` to a template. See
        [Ember.CollectionView](/api/classes/Ember.CollectionView.html)\n   for additional
        information on how a `CollectionView` functions.\n\n  `{{collection}}`'s primary
        use is as a block helper with a `contentBinding`\n  option pointing towards
        an `Ember.Array`-compatible object. An `Ember.View`\n  instance will be created
        for each item in its `content` property. Each view\n  will have its own `content`
        property set to the appropriate item in the\n  collection.\n\n  The provided
        block will be applied as the template for each item's view.\n\n  Given an
        empty `<body>` the following template:\n\n  ```handlebars\n  {{#collection
        contentBinding=\"App.items\"}}\n    Hi {{view.content.name}}\n  {{/collection}}\n
        \ ```\n\n  And the following application code\n\n  ```javascript\n  App =
        Ember.Application.create()\n  App.items = [\n    Ember.Object.create({name:
        'Dave'}),\n    Ember.Object.create({name: 'Mary'}),\n    Ember.Object.create({name:
        'Sara'})\n  ]\n  ```\n\n  Will result in the HTML structure below\n\n  ```html\n
        \ <div class=\"ember-view\">\n    <div class=\"ember-view\">Hi Dave</div>\n
        \   <div class=\"ember-view\">Hi Mary</div>\n    <div class=\"ember-view\">Hi
        Sara</div>\n  </div>\n  ```\n\n  ### Blockless Use\n\n  If you provide an
        `itemViewClass` option that has its own `template` you can\n  omit the block.\n\n
        \ The following template:\n\n  ```handlebars\n  {{collection contentBinding=\"App.items\"
        itemViewClass=\"App.AnItemView\"}}\n  ```\n\n  And application code\n\n  ```javascript\n
        \ App = Ember.Application.create();\n  App.items = [\n    Ember.Object.create({name:
        'Dave'}),\n    Ember.Object.create({name: 'Mary'}),\n    Ember.Object.create({name:
        'Sara'})\n  ];\n\n  App.AnItemView = Ember.View.extend({\n    template: Ember.Handlebars.compile(\"Greetings
        {{view.content.name}}\")\n  });\n  ```\n\n  Will result in the HTML structure
        below\n\n  ```html\n  <div class=\"ember-view\">\n    <div class=\"ember-view\">Greetings
        Dave</div>\n    <div class=\"ember-view\">Greetings Mary</div>\n    <div class=\"ember-view\">Greetings
        Sara</div>\n  </div>\n  ```\n\n  ### Specifying a CollectionView subclass\n\n
        \ By default the `{{collection}}` helper will create an instance of\n  `Ember.CollectionView`.
        You can supply a `Ember.CollectionView` subclass to\n  the helper by passing
        it as the first argument:\n\n  ```handlebars\n  {{#collection App.MyCustomCollectionClass
        contentBinding=\"App.items\"}}\n    Hi {{view.content.name}}\n  {{/collection}}\n
        \ ```\n\n  ### Forwarded `item.*`-named Options\n\n  As with the `{{view}}`,
        helper options passed to the `{{collection}}` will be\n  set on the resulting
        `Ember.CollectionView` as properties. Additionally,\n  options prefixed with
        `item` will be applied to the views rendered for each\n  item (note the camelcasing):\n\n
        \ ```handlebars\n  {{#collection contentBinding=\"App.items\"\n                itemTagName=\"p\"\n
        \               itemClassNames=\"greeting\"}}\n    Howdy {{view.content.name}}\n
        \ {{/collection}}\n  ```\n\n  Will result in the following HTML structure:\n\n
        \ ```html\n  <div class=\"ember-view\">\n    <p class=\"ember-view greeting\">Howdy
        Dave</p>\n    <p class=\"ember-view greeting\">Howdy Mary</p>\n    <p class=\"ember-view
        greeting\">Howdy Sara</p>\n  </div>\n  ```\n\n  @method collection\n  @for
        Ember.Handlebars.helpers\n  @param {String} path\n  @param {Hash} options\n
        \ @return {String} HTML string\n  @deprecated Use `{{each}}` helper instead.\n*/\nEmber.Handlebars.registerHelper('collection',
        function(path, options) {\n  Ember.deprecate(\"Using the {{collection}} helper
        without specifying a class has been deprecated as the {{each}} helper now
        supports the same functionality.\", path !== 'collection');\n\n  // If no
        path is provided, treat path param as options.\n  if (path && path.data &&
        path.data.isRenderData) {\n    options = path;\n    path = undefined;\n    Ember.assert(\"You
        cannot pass more than one argument to the collection helper\", arguments.length
        === 1);\n  } else {\n    Ember.assert(\"You cannot pass more than one argument
        to the collection helper\", arguments.length === 2);\n  }\n\n  var fn = options.fn;\n
        \ var data = options.data;\n  var inverse = options.inverse;\n  var view =
        options.data.view;\n\n  // If passed a path string, convert that into an object.\n
        \ // Otherwise, just default to the standard class.\n  var collectionClass;\n
        \ collectionClass = path ? handlebarsGet(this, path, options) : Ember.CollectionView;\n
        \ Ember.assert(fmt(\"%@ #collection: Could not find collection class %@\",
        [data.view, path]), !!collectionClass);\n\n  var hash = options.hash, itemHash
        = {}, match;\n\n  // Extract item view class if provided else default to the
        standard class\n  var collectionPrototype = collectionClass.proto(),\n      itemViewClass;\n\n
        \ if (hash.itemView) {\n    var controller = data.keywords.controller;\n    Ember.assert('You
        specified an itemView, but the current context has no container to look the
        itemView up in. This probably means that you created a view manually, instead
        of through the container. Instead, use container.lookup(\"view:viewName\"),
        which will properly instantiate your view.', controller && controller.container);\n
        \   var container = controller.container;\n    itemViewClass = container.resolve('view:'
        + Ember.String.camelize(hash.itemView));\n    Ember.assert('You specified
        the itemView ' + hash.itemView + \", but it was not found at \" + container.describe(\"view:\"
        + hash.itemView) + \" (and it was not registered in the container)\", !!itemViewClass);\n
        \ } else if (hash.itemViewClass) {\n    itemViewClass = handlebarsGet(collectionPrototype,
        hash.itemViewClass, options);\n  } else {\n    itemViewClass = collectionPrototype.itemViewClass;\n
        \ }\n\n  Ember.assert(fmt(\"%@ #collection: Could not find itemViewClass %@\",
        [data.view, itemViewClass]), !!itemViewClass);\n\n  delete hash.itemViewClass;\n
        \ delete hash.itemView;\n\n  // Go through options passed to the {{collection}}
        helper and extract options\n  // that configure item views instead of the
        collection itself.\n  for (var prop in hash) {\n    if (hash.hasOwnProperty(prop))
        {\n      match = prop.match(/^item(.)(.*)$/);\n\n      if (match && prop !==
        'itemController') {\n        // Convert itemShouldFoo -> shouldFoo\n        itemHash[match[1].toLowerCase()
        + match[2]] = hash[prop];\n        // Delete from hash as this will end up
        getting passed to the\n        // {{view}} helper method.\n        delete
        hash[prop];\n      }\n    }\n  }\n\n  if (fn) {\n    itemHash.template = fn;\n
        \   delete options.fn;\n  }\n\n  var emptyViewClass;\n  if (inverse && inverse
        !== Handlebars.VM.noop) {\n    emptyViewClass = get(collectionPrototype, 'emptyViewClass');\n
        \   emptyViewClass = emptyViewClass.extend({\n          template: inverse,\n
        \         tagName: itemHash.tagName\n    });\n  } else if (hash.emptyViewClass)
        {\n    emptyViewClass = handlebarsGet(this, hash.emptyViewClass, options);\n
        \ }\n  if (emptyViewClass) { hash.emptyView = emptyViewClass; }\n\n  if (!hash.keyword)
        {\n    itemHash._context = Ember.computed.alias('content');\n  }\n\n  var
        viewOptions = Ember.Handlebars.ViewHelper.propertiesFromHTMLOptions({ data:
        data, hash: itemHash }, this);\n  hash.itemViewClass = itemViewClass.extend(viewOptions);\n\n
        \ return Ember.Handlebars.helpers.view.call(this, collectionClass, options);\n});\n\n\n})();\n\n\n\n(function()
        {\n/*globals Handlebars */\n/**\n@module ember\n@submodule ember-handlebars\n*/\n\nvar
        handlebarsGet = Ember.Handlebars.get;\n\n/**\n  `unbound` allows you to output
        a property without binding. *Important:* The\n  output will not be updated
        if the property changes. Use with caution.\n\n  ```handlebars\n  <div>{{unbound
        somePropertyThatDoesntChange}}</div>\n  ```\n\n  `unbound` can also be used
        in conjunction with a bound helper to\n  render it in its unbound form:\n\n
        \ ```handlebars\n  <div>{{unbound helperName somePropertyThatDoesntChange}}</div>\n
        \ ```\n\n  @method unbound\n  @for Ember.Handlebars.helpers\n  @param {String}
        property\n  @return {String} HTML string\n*/\nEmber.Handlebars.registerHelper('unbound',
        function(property, fn) {\n  var options = arguments[arguments.length - 1],
        helper, context, out;\n\n  if (arguments.length > 2) {\n    // Unbound helper
        call.\n    options.data.isUnbound = true;\n    helper = Ember.Handlebars.helpers[arguments[0]]
        || Ember.Handlebars.helperMissing;\n    out = helper.apply(this, Array.prototype.slice.call(arguments,
        1));\n    delete options.data.isUnbound;\n    return out;\n  }\n\n  context
        = (fn.contexts && fn.contexts.length) ? fn.contexts[0] : this;\n  return handlebarsGet(context,
        property, fn);\n});\n\n})();\n\n\n\n(function() {\n/*jshint debug:true*/\n/**\n@module
        ember\n@submodule ember-handlebars\n*/\n\nvar handlebarsGet = Ember.Handlebars.get,
        normalizePath = Ember.Handlebars.normalizePath;\n\n/**\n  `log` allows you
        to output the value of a variable in the current rendering\n  context.\n\n
        \ ```handlebars\n  {{log myVariable}}\n  ```\n\n  @method log\n  @for Ember.Handlebars.helpers\n
        \ @param {String} property\n*/\nEmber.Handlebars.registerHelper('log', function(property,
        options) {\n  var context = (options.contexts && options.contexts.length)
        ? options.contexts[0] : this,\n      normalized = normalizePath(context, property,
        options.data),\n      pathRoot = normalized.root,\n      path = normalized.path,\n
        \     value = (path === 'this') ? pathRoot : handlebarsGet(pathRoot, path,
        options);\n  Ember.Logger.log(value);\n});\n\n/**\n  Execute the `debugger`
        statement in the current context.\n\n  ```handlebars\n  {{debugger}}\n  ```\n\n
        \ @method debugger\n  @for Ember.Handlebars.helpers\n  @param {String} property\n*/\nEmber.Handlebars.registerHelper('debugger',
        function(options) {\n  debugger;\n});\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-handlebars\n*/\n\nvar get = Ember.get, set = Ember.set;\n\nEmber.Handlebars.EachView
        = Ember.CollectionView.extend(Ember._Metamorph, {\n  init: function() {\n
        \   var itemController = get(this, 'itemController');\n    var binding;\n\n
        \   if (itemController) {\n      var controller = get(this, 'controller.container').lookupFactory('controller:array').create({\n
        \       parentController: get(this, 'controller'),\n        itemController:
        itemController,\n        target: get(this, 'controller'),\n        _eachView:
        this\n      });\n\n      this.disableContentObservers(function() {\n        set(this,
        'content', controller);\n        binding = new Ember.Binding('content', '_eachView.dataSource').oneWay();\n
        \       binding.connect(controller);\n      });\n\n      set(this, '_arrayController',
        controller);\n    } else {\n      this.disableContentObservers(function()
        {\n        binding = new Ember.Binding('content', 'dataSource').oneWay();\n
        \       binding.connect(this);\n      });\n    }\n\n    return this._super();\n
        \ },\n\n  _assertArrayLike: function(content) {\n    Ember.assert(\"The value
        that #each loops over must be an Array. You passed \" + content.constructor
        + \", but it should have been an ArrayController\", !Ember.ControllerMixin.detect(content)
        || (content && content.isGenerated) || content instanceof Ember.ArrayController);\n
        \   Ember.assert(\"The value that #each loops over must be an Array. You passed
        \" + ((Ember.ControllerMixin.detect(content) && content.get('model') !== undefined)
        ? (\"\" + content.get('model') + \" (wrapped in \" + content + \")\") : (\"\"
        + content)), Ember.Array.detect(content));\n  },\n\n  disableContentObservers:
        function(callback) {\n    Ember.removeBeforeObserver(this, 'content', null,
        '_contentWillChange');\n    Ember.removeObserver(this, 'content', null, '_contentDidChange');\n\n
        \   callback.call(this);\n\n    Ember.addBeforeObserver(this, 'content', null,
        '_contentWillChange');\n    Ember.addObserver(this, 'content', null, '_contentDidChange');\n
        \ },\n\n  itemViewClass: Ember._MetamorphView,\n  emptyViewClass: Ember._MetamorphView,\n\n
        \ createChildView: function(view, attrs) {\n    view = this._super(view, attrs);\n\n
        \   // At the moment, if a container view subclass wants\n    // to insert
        keywords, it is responsible for cloning\n    // the keywords hash. This will
        be fixed momentarily.\n    var keyword = get(this, 'keyword');\n    var content
        = get(view, 'content');\n\n    if (keyword) {\n      var data = get(view,
        'templateData');\n\n      data = Ember.copy(data);\n      data.keywords =
        view.cloneKeywords();\n      set(view, 'templateData', data);\n\n      //
        In this case, we do not bind, because the `content` of\n      // a #each item
        cannot change.\n      data.keywords[keyword] = content;\n    }\n\n    // If
        {{#each}} is looping over an array of controllers,\n    // point each child
        view at their respective controller.\n    if (content && get(content, 'isController'))
        {\n      set(view, 'controller', content);\n    }\n\n    return view;\n  },\n\n
        \ destroy: function() {\n    if (!this._super()) { return; }\n\n    var arrayController
        = get(this, '_arrayController');\n\n    if (arrayController) {\n      arrayController.destroy();\n
        \   }\n\n    return this;\n  }\n});\n\nvar GroupedEach = Ember.Handlebars.GroupedEach
        = function(context, path, options) {\n  var self = this,\n      normalized
        = Ember.Handlebars.normalizePath(context, path, options.data);\n\n  this.context
        = context;\n  this.path = path;\n  this.options = options;\n  this.template
        = options.fn;\n  this.containingView = options.data.view;\n  this.normalizedRoot
        = normalized.root;\n  this.normalizedPath = normalized.path;\n  this.content
        = this.lookupContent();\n\n  this.addContentObservers();\n  this.addArrayObservers();\n\n
        \ this.containingView.on('willClearRender', function() {\n    self.destroy();\n
        \ });\n};\n\nGroupedEach.prototype = {\n  contentWillChange: function() {\n
        \   this.removeArrayObservers();\n  },\n\n  contentDidChange: function() {\n
        \   this.content = this.lookupContent();\n    this.addArrayObservers();\n
        \   this.rerenderContainingView();\n  },\n\n  contentArrayWillChange: Ember.K,\n\n
        \ contentArrayDidChange: function() {\n    this.rerenderContainingView();\n
        \ },\n\n  lookupContent: function() {\n    return Ember.Handlebars.get(this.normalizedRoot,
        this.normalizedPath, this.options);\n  },\n\n  addArrayObservers: function()
        {\n    if (!this.content) { return; }\n\n    this.content.addArrayObserver(this,
        {\n      willChange: 'contentArrayWillChange',\n      didChange: 'contentArrayDidChange'\n
        \   });\n  },\n\n  removeArrayObservers: function() {\n    if (!this.content)
        { return; }\n\n    this.content.removeArrayObserver(this, {\n      willChange:
        'contentArrayWillChange',\n      didChange: 'contentArrayDidChange'\n    });\n
        \ },\n\n  addContentObservers: function() {\n    Ember.addBeforeObserver(this.normalizedRoot,
        this.normalizedPath, this, this.contentWillChange);\n    Ember.addObserver(this.normalizedRoot,
        this.normalizedPath, this, this.contentDidChange);\n  },\n\n  removeContentObservers:
        function() {\n    Ember.removeBeforeObserver(this.normalizedRoot, this.normalizedPath,
        this.contentWillChange);\n    Ember.removeObserver(this.normalizedRoot, this.normalizedPath,
        this.contentDidChange);\n  },\n\n  render: function() {\n    if (!this.content)
        { return; }\n\n    var content = this.content,\n        contentLength = get(content,
        'length'),\n        data = this.options.data,\n        template = this.template;\n\n
        \   data.insideEach = true;\n    for (var i = 0; i < contentLength; i++) {\n
        \     template(content.objectAt(i), { data: data });\n    }\n  },\n\n  rerenderContainingView:
        function() {\n    var self = this;\n    Ember.run.scheduleOnce('render', this,
        function() {\n      // It's possible it's been destroyed after we enqueued
        a re-render call.\n      if (!self.destroyed) {\n        self.containingView.rerender();\n
        \     }\n    });\n  },\n\n  destroy: function() {\n    this.removeContentObservers();\n
        \   if (this.content) {\n      this.removeArrayObservers();\n    }\n    this.destroyed
        = true;\n  }\n};\n\n/**\n  The `{{#each}}` helper loops over elements in a
        collection, rendering its\n  block once for each item. It is an extension
        of the base Handlebars `{{#each}}`\n  helper:\n\n  ```javascript\n  Developers
        = [{name: 'Yehuda'},{name: 'Tom'}, {name: 'Paul'}];\n  ```\n\n  ```handlebars\n
        \ {{#each Developers}}\n    {{name}}\n  {{/each}}\n  ```\n\n  `{{each}}` supports
        an alternative syntax with element naming:\n\n  ```handlebars\n  {{#each person
        in Developers}}\n    {{person.name}}\n  {{/each}}\n  ```\n\n  When looping
        over objects that do not have properties, `{{this}}` can be used\n  to render
        the object:\n\n  ```javascript\n  DeveloperNames = ['Yehuda', 'Tom', 'Paul']\n
        \ ```\n\n  ```handlebars\n  {{#each DeveloperNames}}\n    {{this}}\n  {{/each}}\n
        \ ```\n  ### {{else}} condition\n  `{{#each}}` can have a matching `{{else}}`.
        The contents of this block will render\n  if the collection is empty.\n\n
        \ ```\n  {{#each person in Developers}}\n    {{person.name}}\n  {{else}}\n
        \   <p>Sorry, nobody is available for this task.</p>\n  {{/each}}\n  ```\n
        \ ### Specifying a View class for items\n  If you provide an `itemViewClass`
        option that references a view class\n  with its own `template` you can omit
        the block.\n\n  The following template:\n\n  ```handlebars\n  {{#view App.MyView
        }}\n    {{each view.items itemViewClass=\"App.AnItemView\"}}\n  {{/view}}\n
        \ ```\n\n  And application code\n\n  ```javascript\n  App = Ember.Application.create({\n
        \   MyView: Ember.View.extend({\n      items: [\n        Ember.Object.create({name:
        'Dave'}),\n        Ember.Object.create({name: 'Mary'}),\n        Ember.Object.create({name:
        'Sara'})\n      ]\n    })\n  });\n\n  App.AnItemView = Ember.View.extend({\n
        \   template: Ember.Handlebars.compile(\"Greetings {{name}}\")\n  });\n  ```\n\n
        \ Will result in the HTML structure below\n\n  ```html\n  <div class=\"ember-view\">\n
        \   <div class=\"ember-view\">Greetings Dave</div>\n    <div class=\"ember-view\">Greetings
        Mary</div>\n    <div class=\"ember-view\">Greetings Sara</div>\n  </div>\n
        \ ```\n\n  If an `itemViewClass` is defined on the helper, and therefore the
        helper is not\n  being used as a block, an `emptyViewClass` can also be provided
        optionally.\n  The `emptyViewClass` will match the behavior of the `{{else}}`
        condition\n  described above. That is, the `emptyViewClass` will render if
        the collection\n  is empty.\n\n  ### Representing each item with a Controller.\n
        \ By default the controller lookup within an `{{#each}}` block will be\n  the
        controller of the template where the `{{#each}}` was used. If each\n  item
        needs to be presented by a custom controller you can provide a\n  `itemController`
        option which references a controller by lookup name.\n  Each item in the loop
        will be wrapped in an instance of this controller\n  and the item itself will
        be set to the `content` property of that controller.\n\n  This is useful in
        cases where properties of model objects need transformation\n  or synthesis
        for display:\n\n  ```javascript\n  App.DeveloperController = Ember.ObjectController.extend({\n
        \   isAvailableForHire: function() {\n      return !this.get('content.isEmployed')
        && this.get('content.isSeekingWork');\n    }.property('isEmployed', 'isSeekingWork')\n
        \ })\n  ```\n\n  ```handlebars\n  {{#each person in developers itemController=\"developer\"}}\n
        \   {{person.name}} {{#if person.isAvailableForHire}}Hire me!{{/if}}\n  {{/each}}\n
        \ ```\n\n  Each itemController will receive a reference to the current controller
        as\n  a `parentController` property.\n\n  ### (Experimental) Grouped Each\n\n
        \ When used in conjunction with the experimental [group helper](https://github.com/emberjs/group-helper),\n
        \ you can inform Handlebars to re-render an entire group of items instead
        of\n  re-rendering them one at a time (in the event that they are changed
        en masse\n  or an item is added/removed).\n\n  ```handlebars\n  {{#group}}\n
        \   {{#each people}}\n      {{firstName}} {{lastName}}\n    {{/each}}\n  {{/group}}\n
        \ ```\n\n  This can be faster than the normal way that Handlebars re-renders
        items\n  in some cases.\n\n  If for some reason you have a group with more
        than one `#each`, you can make\n  one of the collections be updated in normal
        (non-grouped) fashion by setting\n  the option `groupedRows=true` (counter-intuitive,
        I know).\n\n  For example,\n\n  ```handlebars\n  {{dealershipName}}\n\n  {{#group}}\n
        \   {{#each dealers}}\n      {{firstName}} {{lastName}}\n    {{/each}}\n\n
        \   {{#each car in cars groupedRows=true}}\n      {{car.make}} {{car.model}}
        {{car.color}}\n    {{/each}}\n  {{/group}}\n  ```\n  Any change to `dealershipName`
        or the `dealers` collection will cause the\n  entire group to be re-rendered.
        However, changes to the `cars` collection\n  will be re-rendered individually
        (as normal).\n\n  Note that `group` behavior is also disabled by specifying
        an `itemViewClass`.\n\n  @method each\n  @for Ember.Handlebars.helpers\n  @param
        [name] {String} name for item (used with `in`)\n  @param [path] {String} path\n
        \ @param [options] {Object} Handlebars key/value pairs of options\n  @param
        [options.itemViewClass] {String} a path to a view class used for each item\n
        \ @param [options.itemController] {String} name of a controller to be created
        for each item\n  @param [options.groupedRows] {boolean} enable normal item-by-item
        rendering when inside a `#group` helper\n*/\nEmber.Handlebars.registerHelper('each',
        function(path, options) {\n  if (arguments.length === 4) {\n    Ember.assert(\"If
        you pass more than one argument to the each helper, it must be in the form
        #each foo in bar\", arguments[1] === \"in\");\n\n    var keywordName = arguments[0];\n\n
        \   options = arguments[3];\n    path = arguments[2];\n    if (path === '')
        { path = \"this\"; }\n\n    options.hash.keyword = keywordName;\n  }\n\n  if
        (arguments.length === 1) {\n    options = path;\n    path = 'this';\n  }\n\n
        \ options.hash.dataSourceBinding = path;\n  // Set up emptyView as a metamorph
        with no tag\n  //options.hash.emptyViewClass = Ember._MetamorphView;\n\n  if
        (options.data.insideGroup && !options.hash.groupedRows && !options.hash.itemViewClass)
        {\n    new Ember.Handlebars.GroupedEach(this, path, options).render();\n  }
        else {\n    return Ember.Handlebars.helpers.collection.call(this, 'Ember.Handlebars.EachView',
        options);\n  }\n});\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule
        ember-handlebars\n*/\n\n/**\n  `template` allows you to render a template
        from inside another template.\n  This allows you to re-use the same template
        in multiple places. For example:\n\n  ```html\n  <script type=\"text/x-handlebars\"
        data-template-name=\"logged_in_user\">\n    {{#with loggedInUser}}\n      Last
        Login: {{lastLogin}}\n      User Info: {{template \"user_info\"}}\n    {{/with}}\n
        \ </script>\n  ```\n\n  ```html\n  <script type=\"text/x-handlebars\" data-template-name=\"user_info\">\n
        \   Name: <em>{{name}}</em>\n    Karma: <em>{{karma}}</em>\n  </script>\n
        \ ```\n\n  ```handlebars\n  {{#if isUser}}\n    {{template \"user_info\"}}\n
        \ {{else}}\n    {{template \"unlogged_user_info\"}}\n  {{/if}}\n  ```\n\n
        \ This helper looks for templates in the global `Ember.TEMPLATES` hash. If
        you\n  add `<script>` tags to your page with the `data-template-name` attribute
        set,\n  they will be compiled and placed in this hash automatically.\n\n  You
        can also manually register templates by adding them to the hash:\n\n  ```javascript\n
        \ Ember.TEMPLATES[\"my_cool_template\"] = Ember.Handlebars.compile('<b>{{user}}</b>');\n
        \ ```\n\n  @deprecated\n  @method template\n  @for Ember.Handlebars.helpers\n
        \ @param {String} templateName the template to render\n*/\n\nEmber.Handlebars.registerHelper('template',
        function(name, options) {\n  Ember.deprecate(\"The `template` helper has been
        deprecated in favor of the `partial` helper. Please use `partial` instead,
        which will work the same way.\");\n  return Ember.Handlebars.helpers.partial.apply(this,
        arguments);\n});\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule
        ember-handlebars\n*/\n\n/**\n  `partial` renders a template directly using
        the current context.\n  If needed the context can be set using the `{{#with
        foo}}` helper.\n\n  ```html\n  <script type=\"text/x-handlebars\" data-template-name=\"header_bar\">\n
        \   {{#with currentUser}}\n      {{partial user_info}}\n    {{/with}}\n  </script>\n
        \ ```\n\n  The `data-template-name` attribute of a partial template\n  is
        prefixed with an underscore.\n\n  ```html\n  <script type=\"text/x-handlebars\"
        data-template-name=\"_user_info\">\n    <span>Hello {{username}}!</span>\n
        \ </script>\n  ```\n\n  @method partial\n  @for Ember.Handlebars.helpers\n
        \ @param {String} partialName the name of the template to render minus the
        leading underscore\n*/\n\nEmber.Handlebars.registerHelper('partial', function(name,
        options) {\n  var nameParts = name.split(\"/\"),\n      lastPart = nameParts[nameParts.length
        - 1];\n\n  nameParts[nameParts.length - 1] = \"_\" + lastPart;\n\n  var view
        = options.data.view,\n      underscoredName = nameParts.join(\"/\"),\n      template
        = view.templateForName(underscoredName),\n      deprecatedTemplate = !template
        && view.templateForName(name);\n\n  Ember.assert(\"Unable to find partial
        with name '\"+name+\"'.\", template || deprecatedTemplate);\n\n  template
        = template || deprecatedTemplate;\n\n  template(this, { data: options.data
        });\n});\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule ember-handlebars\n*/\n\nvar
        get = Ember.get, set = Ember.set;\n\n/**\n  `{{yield}}` denotes an area of
        a template that will be rendered inside\n  of another template. It has two
        main uses:\n\n  ### Use with `layout`\n  When used in a Handlebars template
        that is assigned to an `Ember.View`\n  instance's `layout` property Ember
        will render the layout template first,\n  inserting the view's own rendered
        output at the `{{yield}}` location.\n\n  An empty `<body>` and the following
        application code:\n\n  ```javascript\n  AView = Ember.View.extend({\n    classNames:
        ['a-view-with-layout'],\n    layout: Ember.Handlebars.compile('<div class=\"wrapper\">{{yield}}</div>'),\n
        \   template: Ember.Handlebars.compile('<span>I am wrapped</span>')\n  });\n\n
        \ aView = AView.create();\n  aView.appendTo('body');\n  ```\n\n  Will result
        in the following HTML output:\n\n  ```html\n  <body>\n    <div class='ember-view
        a-view-with-layout'>\n      <div class=\"wrapper\">\n        <span>I am wrapped</span>\n
        \     </div>\n    </div>\n  </body>\n  ```\n\n  The `yield` helper cannot
        be used outside of a template assigned to an\n  `Ember.View`'s `layout` property
        and will throw an error if attempted.\n\n  ```javascript\n  BView = Ember.View.extend({\n
        \   classNames: ['a-view-with-layout'],\n    template: Ember.Handlebars.compile('{{yield}}')\n
        \ });\n\n  bView = BView.create();\n  bView.appendTo('body');\n\n  // throws\n
        \ // Uncaught Error: assertion failed:\n  // You called yield in a template
        that was not a layout\n  ```\n\n  ### Use with Ember.Component\n  When designing
        components `{{yield}}` is used to denote where, inside the component's\n  template,
        an optional block passed to the component should render:\n\n  ```handlebars\n
        \ <!-- application.hbs -->\n  {{#labeled-textfield value=someProperty}}\n
        \   First name:\n  {{/labeled-textfield}}\n  ```\n\n  ```handlebars\n  <!--
        components/labeled-textfield.hbs -->\n  <label>\n    {{yield}} {{input value=value}}\n
        \ </label>\n  ```\n\n  Result:\n\n  ```html\n  <label>\n    First name: <input
        type=\"text\" />\n  <label>\n  ```\n\n  @method yield\n  @for Ember.Handlebars.helpers\n
        \ @param {Hash} options\n  @return {String} HTML string\n*/\nEmber.Handlebars.registerHelper('yield',
        function(options) {\n  var view = options.data.view;\n\n  while (view && !get(view,
        'layout')) {\n    if (view._contextView) {\n      view = view._contextView;\n
        \   } else {\n      view = get(view, 'parentView');\n    }\n  }\n\n  Ember.assert(\"You
        called yield in a template that was not a layout\", !!view);\n\n  view._yield(this,
        options);\n});\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule
        ember-handlebars\n*/\n\n/**\n  `loc` looks up the string in the localized
        strings hash.\n  This is a convenient way to localize text. For example:\n\n
        \ ```html\n  <script type=\"text/x-handlebars\" data-template-name=\"home\">\n
        \   {{loc \"welcome\"}}\n  </script>\n  ```\n\n  Take note that `\"welcome\"`
        is a string and not an object\n  reference.\n\n  @method loc\n  @for Ember.Handlebars.helpers\n
        \ @param {String} str The string to format\n*/\n\nEmber.Handlebars.registerHelper('loc',
        function(str) {\n  return Ember.String.loc(str);\n});\n\n})();\n\n\n\n(function()
        {\n\n})();\n\n\n\n(function() {\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-handlebars\n*/\n\nvar set = Ember.set, get = Ember.get;\n\n/**\n
        \ The internal class used to create text inputs when the `{{input}}`\n  helper
        is used with `type` of `checkbox`.\n\n  See Handlebars.helpers.input for usage
        details.\n\n  ## Direct manipulation of `checked`\n\n  The `checked` attribute
        of an `Ember.Checkbox` object should always be set\n  through the Ember object
        or by interacting with its rendered element\n  representation via the mouse,
        keyboard, or touch. Updating the value of the\n  checkbox via jQuery will
        result in the checked value of the object and its\n  element losing synchronization.\n\n
        \ ## Layout and LayoutName properties\n\n  Because HTML `input` elements are
        self closing `layout` and `layoutName`\n  properties will not be applied.
        See [Ember.View](/api/classes/Ember.View.html)'s\n  layout section for more
        information.\n\n  @class Checkbox\n  @namespace Ember\n  @extends Ember.View\n*/\nEmber.Checkbox
        = Ember.View.extend({\n  classNames: ['ember-checkbox'],\n\n  tagName: 'input',\n\n
        \ attributeBindings: ['type', 'checked', 'indeterminate', 'disabled', 'tabindex',
        'name'],\n\n  type: \"checkbox\",\n  checked: false,\n  disabled: false,\n
        \ indeterminate: false,\n\n  init: function() {\n    this._super();\n    this.on(\"change\",
        this, this._updateElementValue);\n  },\n\n  didInsertElement: function() {\n
        \   this._super();\n    this.get('element').indeterminate = !!this.get('indeterminate');\n
        \ },\n\n  _updateElementValue: function() {\n    set(this, 'checked', this.$().prop('checked'));\n
        \ }\n});\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule ember-handlebars\n*/\n\nvar
        get = Ember.get, set = Ember.set;\n\n/**\n  Shared mixin used by `Ember.TextField`
        and `Ember.TextArea`.\n\n  @class TextSupport\n  @namespace Ember\n  @private\n*/\nEmber.TextSupport
        = Ember.Mixin.create({\n  value: \"\",\n\n  attributeBindings: ['placeholder',
        'disabled', 'maxlength', 'tabindex'],\n  placeholder: null,\n  disabled: false,\n
        \ maxlength: null,\n\n  init: function() {\n    this._super();\n    this.on(\"focusOut\",
        this, this._elementValueDidChange);\n    this.on(\"change\", this, this._elementValueDidChange);\n
        \   this.on(\"paste\", this, this._elementValueDidChange);\n    this.on(\"cut\",
        this, this._elementValueDidChange);\n    this.on(\"input\", this, this._elementValueDidChange);\n
        \   this.on(\"keyUp\", this, this.interpretKeyEvents);\n  },\n\n  /**\n    The
        action to be sent when the user presses the return key.\n\n    This is similar
        to the `{{action}}` helper, but is fired when\n    the user presses the return
        key when editing a text field, and sends\n    the value of the field as the
        context.\n\n    @property action\n    @type String\n    @default null\n  */\n
        \ action: null,\n\n  /**\n    The event that should send the action.\n\n    Options
        are:\n\n    * `enter`: the user pressed enter\n    * `keyPress`: the user
        pressed a key\n\n    @property onEvent\n    @type String\n    @default enter\n
        \ */\n  onEvent: 'enter',\n\n  /**\n    Whether they `keyUp` event that triggers
        an `action` to be sent continues\n    propagating to other views.\n\n    By
        default, when the user presses the return key on their keyboard and\n    the
        text field has an `action` set, the action will be sent to the view's\n    controller
        and the key event will stop propagating.\n\n    If you would like parent views
        to receive the `keyUp` event even after an\n    action has been dispatched,
        set `bubbles` to true.\n\n    @property bubbles\n    @type Boolean\n    @default
        false\n  */\n  bubbles: false,\n\n  interpretKeyEvents: function(event) {\n
        \   var map = Ember.TextSupport.KEY_EVENTS;\n    var method = map[event.keyCode];\n\n
        \   this._elementValueDidChange();\n    if (method) { return this[method](event);
        }\n  },\n\n  _elementValueDidChange: function() {\n    set(this, 'value',
        this.$().val());\n  },\n\n  /**\n    The action to be sent when the user inserts
        a new line.\n\n    Called by the `Ember.TextSupport` mixin on keyUp if keycode
        matches 13.\n    Uses sendAction to send the `enter` action to the controller.\n\n
        \   @method insertNewline\n    @param {Event} event\n  */\n  insertNewline:
        function(event) {\n    sendAction('enter', this, event);\n    sendAction('insert-newline',
        this, event);\n  },\n\n  /**\n    Called when the user hits escape.\n\n    Called
        by the `Ember.TextSupport` mixin on keyUp if keycode matches 27.\n    Uses
        sendAction to send the `escape-press` action to the controller.\n\n    @method
        cancel\n    @param {Event} event\n  */\n  cancel: function(event) {\n    sendAction('escape-press',
        this, event);\n  },\n\n  /**\n    Called when the text area is focused.\n\n
        \   @method focusIn\n    @param {Event} event\n  */\n  focusIn: function(event)
        {\n    sendAction('focus-in', this, event);\n  },\n\n  /**\n    Called when
        the text area is blurred.\n\n    @method focusOut\n    @param {Event} event\n
        \ */\n  focusOut: function(event) {\n    sendAction('focus-out', this, event);\n
        \ },\n\n  /**\n    The action to be sent when the user presses a key. Enabled
        by setting\n    the `onEvent` property to `keyPress`.\n\n    Uses sendAction
        to send the `keyPress` action to the controller.\n\n    @method keyPress\n
        \   @param {Event} event\n  */\n  keyPress: function(event) {\n    sendAction('key-press',
        this, event);\n  }\n\n});\n\nEmber.TextSupport.KEY_EVENTS = {\n  13: 'insertNewline',\n
        \ 27: 'cancel'\n};\n\n// In principle, this shouldn't be necessary, but the
        legacy\n// sectionAction semantics for TextField are different from\n// the
        component semantics so this method normalizes them.\nfunction sendAction(eventName,
        view, event) {\n  var action = get(view, eventName),\n      on = get(view,
        'onEvent'),\n      value = get(view, 'value');\n\n  // back-compat support
        for keyPress as an event name even though\n  // it's also a method name that
        consumes the event (and therefore\n  // incompatible with sendAction semantics).\n
        \ if (on === eventName || (on === 'keyPress' && eventName === 'key-press'))
        {\n    view.sendAction('action', value);\n  }\n\n  view.sendAction(eventName,
        value);\n\n  if (action || on === eventName) {\n    if(!get(view, 'bubbles'))
        {\n      event.stopPropagation();\n    }\n  }\n}\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-handlebars\n*/\n\nvar get = Ember.get,
        set = Ember.set;\n\n/**\n\n  The internal class used to create text inputs
        when the `{{input}}`\n  helper is used with `type` of `text`.\n\n  See [handlebars.helpers.input](api/classes/Ember.Handlebars.helpers.html#method_input)
        \ for usage details.\n\n  ## Layout and LayoutName properties\n\n  Because
        HTML `input` elements are self closing `layout` and `layoutName`\n  properties
        will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\n  layout
        section for more information.\n\n  @class TextField\n  @namespace Ember\n
        \ @extends Ember.Component\n  @uses Ember.TextSupport\n*/\nEmber.TextField
        = Ember.Component.extend(Ember.TextSupport,\n  /** @scope Ember.TextField.prototype
        */ {\n\n  classNames: ['ember-text-field'],\n  tagName: \"input\",\n  attributeBindings:
        ['type', 'value', 'size', 'pattern', 'name'],\n\n  /**\n    The `value` attribute
        of the input element. As the user inputs text, this\n    property is updated
        live.\n\n    @property value\n    @type String\n    @default \"\"\n  */\n
        \ value: \"\",\n\n  /**\n    The `type` attribute of the input element.\n\n
        \   @property type\n    @type String\n    @default \"text\"\n  */\n  type:
        \"text\",\n\n  /**\n    The `size` of the text field in characters.\n\n    @property
        size\n    @type String\n    @default null\n  */\n  size: null,\n\n  /**\n
        \   The `pattern` the pattern attribute of input element.\n\n    @property
        pattern\n    @type String\n    @default null\n  */\n  pattern: null\n});\n\n})();\n\n\n\n(function()
        {\n/*\n@module ember\n@submodule ember-handlebars\n*/\n\nvar get = Ember.get,
        set = Ember.set;\n\n/*\n  @class Button\n  @namespace Ember\n  @extends Ember.View\n
        \ @uses Ember.TargetActionSupport\n  @deprecated\n*/\nEmber.Button = Ember.View.extend(Ember.TargetActionSupport,
        {\n  classNames: ['ember-button'],\n  classNameBindings: ['isActive'],\n\n
        \ tagName: 'button',\n\n  propagateEvents: false,\n\n  attributeBindings:
        ['type', 'disabled', 'href', 'tabindex'],\n\n  /*\n    @private\n\n    Overrides
        `TargetActionSupport`'s `targetObject` computed\n    property to use Handlebars-specific
        path resolution.\n\n    @property targetObject\n  */\n  targetObject: Ember.computed(function()
        {\n    var target = get(this, 'target'),\n        root = get(this, 'context'),\n
        \       data = get(this, 'templateData');\n\n    if (typeof target !== 'string')
        { return target; }\n\n    return Ember.Handlebars.get(root, target, { data:
        data });\n  }).property('target'),\n\n  // Defaults to 'button' if tagName
        is 'input' or 'button'\n  type: Ember.computed(function(key) {\n    var tagName
        = this.tagName;\n    if (tagName === 'input' || tagName === 'button') { return
        'button'; }\n  }),\n\n  disabled: false,\n\n  // Allow 'a' tags to act like
        buttons\n  href: Ember.computed(function() {\n    return this.tagName ===
        'a' ? '#' : null;\n  }),\n\n  mouseDown: function() {\n    if (!get(this,
        'disabled')) {\n      set(this, 'isActive', true);\n      this._mouseDown
        = true;\n      this._mouseEntered = true;\n    }\n    return get(this, 'propagateEvents');\n
        \ },\n\n  mouseLeave: function() {\n    if (this._mouseDown) {\n      set(this,
        'isActive', false);\n      this._mouseEntered = false;\n    }\n  },\n\n  mouseEnter:
        function() {\n    if (this._mouseDown) {\n      set(this, 'isActive', true);\n
        \     this._mouseEntered = true;\n    }\n  },\n\n  mouseUp: function(event)
        {\n    if (get(this, 'isActive')) {\n      // Actually invoke the button's
        target and action.\n      // This method comes from the Ember.TargetActionSupport
        mixin.\n      this.triggerAction();\n      set(this, 'isActive', false);\n
        \   }\n\n    this._mouseDown = false;\n    this._mouseEntered = false;\n    return
        get(this, 'propagateEvents');\n  },\n\n  keyDown: function(event) {\n    //
        Handle space or enter\n    if (event.keyCode === 13 || event.keyCode === 32)
        {\n      this.mouseDown();\n    }\n  },\n\n  keyUp: function(event) {\n    //
        Handle space or enter\n    if (event.keyCode === 13 || event.keyCode === 32)
        {\n      this.mouseUp();\n    }\n  },\n\n  // TODO: Handle proper touch behavior.
        Including should make inactive when\n  // finger moves more than 20x outside
        of the edge of the button (vs mouse\n  // which goes inactive as soon as mouse
        goes out of edges.)\n\n  touchStart: function(touch) {\n    return this.mouseDown(touch);\n
        \ },\n\n  touchEnd: function(touch) {\n    return this.mouseUp(touch);\n  },\n\n
        \ init: function() {\n    Ember.deprecate(\"Ember.Button is deprecated and
        will be removed from future releases. Consider using the `{{action}}` helper.\");\n
        \   this._super();\n  }\n});\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule
        ember-handlebars\n*/\n\nvar get = Ember.get, set = Ember.set;\n\n/**\n  The
        internal class used to create textarea element when the `{{textarea}}`\n  helper
        is used.\n\n  See [handlebars.helpers.textarea](/api/classes/Ember.Handlebars.helpers.html#method_textarea)
        \ for usage details.\n\n  ## Layout and LayoutName properties\n\n  Because
        HTML `textarea` elements do not contain inner HTML the `layout` and\n  `layoutName`
        properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\n
        \ layout section for more information.\n\n  @class TextArea\n  @namespace
        Ember\n  @extends Ember.Component\n  @uses Ember.TextSupport\n*/\nEmber.TextArea
        = Ember.Component.extend(Ember.TextSupport, {\n  classNames: ['ember-text-area'],\n\n
        \ tagName: \"textarea\",\n  attributeBindings: ['rows', 'cols', 'name'],\n
        \ rows: null,\n  cols: null,\n\n  _updateElementValue: Ember.observer(function()
        {\n    // We do this check so cursor position doesn't get affected in IE\n
        \   var value = get(this, 'value'),\n        $el = this.$();\n    if ($el
        && value !== $el.val()) {\n      $el.val(value);\n    }\n  }, 'value'),\n\n
        \ init: function() {\n    this._super();\n    this.on(\"didInsertElement\",
        this, this._updateElementValue);\n  }\n\n});\n\n})();\n\n\n\n(function() {\n/*jshint
        eqeqeq:false */\n\n/**\n@module ember\n@submodule ember-handlebars\n*/\n\nvar
        set = Ember.set,\n    get = Ember.get,\n    indexOf = Ember.EnumerableUtils.indexOf,\n
        \   indexesOf = Ember.EnumerableUtils.indexesOf,\n    forEach = Ember.EnumerableUtils.forEach,\n
        \   replace = Ember.EnumerableUtils.replace,\n    isArray = Ember.isArray,\n
        \   precompileTemplate = Ember.Handlebars.compile;\n\nEmber.SelectOption =
        Ember.View.extend({\n  tagName: 'option',\n  attributeBindings: ['value',
        'selected'],\n\n  defaultTemplate: function(context, options) {\n    options
        = { data: options.data, hash: {} };\n    Ember.Handlebars.helpers.bind.call(context,
        \"view.label\", options);\n  },\n\n  init: function() {\n    this.labelPathDidChange();\n
        \   this.valuePathDidChange();\n\n    this._super();\n  },\n\n  selected:
        Ember.computed(function() {\n    var content = get(this, 'content'),\n        selection
        = get(this, 'parentView.selection');\n    if (get(this, 'parentView.multiple'))
        {\n      return selection && indexOf(selection, content.valueOf()) > -1;\n
        \   } else {\n      // Primitives get passed through bindings as objects...
        since\n      // `new Number(4) !== 4`, we use `==` below\n      return content
        == selection;\n    }\n  }).property('content', 'parentView.selection'),\n\n
        \ labelPathDidChange: Ember.observer(function() {\n    var labelPath = get(this,
        'parentView.optionLabelPath');\n\n    if (!labelPath) { return; }\n\n    Ember.defineProperty(this,
        'label', Ember.computed(function() {\n      return get(this, labelPath);\n
        \   }).property(labelPath));\n  }, 'parentView.optionLabelPath'),\n\n  valuePathDidChange:
        Ember.observer(function() {\n    var valuePath = get(this, 'parentView.optionValuePath');\n\n
        \   if (!valuePath) { return; }\n\n    Ember.defineProperty(this, 'value',
        Ember.computed(function() {\n      return get(this, valuePath);\n    }).property(valuePath));\n
        \ }, 'parentView.optionValuePath')\n});\n\nEmber.SelectOptgroup = Ember.CollectionView.extend({\n
        \ tagName: 'optgroup',\n  attributeBindings: ['label'],\n\n  selectionBinding:
        'parentView.selection',\n  multipleBinding: 'parentView.multiple',\n  optionLabelPathBinding:
        'parentView.optionLabelPath',\n  optionValuePathBinding: 'parentView.optionValuePath',\n\n
        \ itemViewClassBinding: 'parentView.optionView'\n});\n\n/**\n  The `Ember.Select`
        view class renders a\n  [select](https://developer.mozilla.org/en/HTML/Element/select)
        HTML element,\n  allowing the user to choose from a list of options.\n\n  The
        text and `value` property of each `<option>` element within the\n  `<select>`
        element are populated from the objects in the `Element.Select`'s\n  `content`
        property. The underlying data object of the selected `<option>` is\n  stored
        in the `Element.Select`'s `value` property.\n\n  ## The Content Property (array
        of strings)\n\n  The simplest version of an `Ember.Select` takes an array
        of strings as its\n  `content` property. The string will be used as both the
        `value` property and\n  the inner text of each `<option>` element inside the
        rendered `<select>`.\n\n  Example:\n\n  ```javascript\n  App.ApplicationController
        = Ember.Controller.extend({\n    names: [\"Yehuda\", \"Tom\"]\n  });\n  ```\n\n
        \ ```handlebars\n  {{view Ember.Select content=names}}\n  ```\n\n  Would result
        in the following HTML:\n\n  ```html\n  <select class=\"ember-select\">\n    <option
        value=\"Yehuda\">Yehuda</option>\n    <option value=\"Tom\">Tom</option>\n
        \ </select>\n  ```\n\n  You can control which `<option>` is selected through
        the `Ember.Select`'s\n  `value` property:\n\n  ```javascript\n  App.ApplicationController
        = Ember.Controller.extend({\n    selectedName: 'Tom',\n    names: [\"Yehuda\",
        \"Tom\"]\n  });\n  ```\n\n  ```handlebars\n  {{view Ember.Select\n         content=names\n
        \        value=selectedName\n  }}\n  ```\n\n  Would result in the following
        HTML with the `<option>` for 'Tom' selected:\n\n  ```html\n  <select class=\"ember-select\">\n
        \   <option value=\"Yehuda\">Yehuda</option>\n    <option value=\"Tom\" selected=\"selected\">Tom</option>\n
        \ </select>\n  ```\n\n  A user interacting with the rendered `<select>` to
        choose \"Yehuda\" would\n  update the value of `selectedName` to \"Yehuda\".\n\n
        \ ## The Content Property (array of Objects)\n\n  An `Ember.Select` can also
        take an array of JavaScript or Ember objects as\n  its `content` property.\n\n
        \ When using objects you need to tell the `Ember.Select` which property should\n
        \ be accessed on each object to supply the `value` attribute of the `<option>`\n
        \ and which property should be used to supply the element text.\n\n  The `optionValuePath`
        option is used to specify the path on each object to\n  the desired property
        for the `value` attribute. The `optionLabelPath`\n  specifies the path on
        each object to the desired property for the\n  element's text. Both paths
        must reference each object itself as `content`:\n\n  ```javascript\n  App.ApplicationController
        = Ember.Controller.extend({\n    programmers: [\n      {firstName: \"Yehuda\",
        id: 1},\n      {firstName: \"Tom\",    id: 2}\n    ]\n  });\n  ```\n\n  ```handlebars\n
        \ {{view Ember.Select\n         content=programmers\n         optionValuePath=\"content.id\"\n
        \        optionLabelPath=\"content.firstName\"}}\n  ```\n\n  Would result
        in the following HTML:\n\n  ```html\n  <select class=\"ember-select\">\n    <option
        value=\"1\">Yehuda</option>\n    <option value=\"2\">Tom</option>\n  </select>\n
        \ ```\n\n  The `value` attribute of the selected `<option>` within an `Ember.Select`\n
        \ can be bound to a property on another object:\n\n  ```javascript\n  App.ApplicationController
        = Ember.Controller.extend({\n    programmers: [\n      {firstName: \"Yehuda\",
        id: 1},\n      {firstName: \"Tom\",    id: 2}\n    ],\n    currentProgrammer:
        {\n      id: 2\n    }\n  });\n  ```\n\n  ```handlebars\n  {{view Ember.Select\n
        \        content=programmers\n         optionValuePath=\"content.id\"\n         optionLabelPath=\"content.firstName\"\n
        \        value=currentProgrammer.id}}\n  ```\n\n  Would result in the following
        HTML with a selected option:\n\n  ```html\n  <select class=\"ember-select\">\n
        \   <option value=\"1\">Yehuda</option>\n    <option value=\"2\" selected=\"selected\">Tom</option>\n
        \ </select>\n  ```\n\n  Interacting with the rendered element by selecting
        the first option\n  ('Yehuda') will update the `id` of `currentProgrammer`\n
        \ to match the `value` property of the newly selected `<option>`.\n\n  Alternatively,
        you can control selection through the underlying objects\n  used to render
        each object by binding the `selection` option. When the selected\n  `<option>`
        is changed, the property path provided to `selection`\n  will be updated to
        match the content object of the rendered `<option>`\n  element:\n\n  ```javascript\n
        \ App.ApplicationController = Ember.Controller.extend({\n    selectedPerson:
        null,\n    programmers: [\n      {firstName: \"Yehuda\", id: 1},\n      {firstName:
        \"Tom\",    id: 2}\n    ]\n  });\n  ```\n\n  ```handlebars\n  {{view Ember.Select\n
        \        content=programmers\n         optionValuePath=\"content.id\"\n         optionLabelPath=\"content.firstName\"\n
        \        selection=selectedPerson}}\n  ```\n\n  Would result in the following
        HTML with a selected option:\n\n  ```html\n  <select class=\"ember-select\">\n
        \   <option value=\"1\">Yehuda</option>\n    <option value=\"2\" selected=\"selected\">Tom</option>\n
        \ </select>\n  ```\n\n  Interacting with the rendered element by selecting
        the first option\n  ('Yehuda') will update the `selectedPerson` to match the
        object of\n  the newly selected `<option>`. In this case it is the first object\n
        \ in the `programmers`\n\n  ## Supplying a Prompt\n\n  A `null` value for
        the `Ember.Select`'s `value` or `selection` property\n  results in there being
        no `<option>` with a `selected` attribute:\n\n  ```javascript\n  App.ApplicationController
        = Ember.Controller.extend({\n    selectedProgrammer: null,\n    programmers:
        [\n      \"Yehuda\",\n      \"Tom\"\n    ]\n  });\n  ```\n\n  ``` handlebars\n
        \ {{view Ember.Select\n         content=programmers\n         value=selectedProgrammer\n
        \ }}\n  ```\n\n  Would result in the following HTML:\n\n  ```html\n  <select
        class=\"ember-select\">\n    <option value=\"Yehuda\">Yehuda</option>\n    <option
        value=\"Tom\">Tom</option>\n  </select>\n  ```\n\n  Although `selectedProgrammer`
        is `null` and no `<option>`\n  has a `selected` attribute the rendered HTML
        will display the\n  first item as though it were selected. You can supply
        a string\n  value for the `Ember.Select` to display when there is no selection\n
        \ with the `prompt` option:\n\n  ```javascript\n  App.ApplicationController
        = Ember.Controller.extend({\n    selectedProgrammer: null,\n    programmers:
        [\n      \"Yehuda\",\n      \"Tom\"\n    ]\n  });\n  ```\n\n  ```handlebars\n
        \ {{view Ember.Select\n         content=programmers\n         value=selectedProgrammer\n
        \        prompt=\"Please select a name\"\n  }}\n  ```\n\n  Would result in
        the following HTML:\n\n  ```html\n  <select class=\"ember-select\">\n    <option>Please
        select a name</option>\n    <option value=\"Yehuda\">Yehuda</option>\n    <option
        value=\"Tom\">Tom</option>\n  </select>\n  ```\n\n  @class Select\n  @namespace
        Ember\n  @extends Ember.View\n*/\nEmber.Select = Ember.View.extend(\n  /**
        @scope Ember.Select.prototype */ {\n\n  tagName: 'select',\n  classNames:
        ['ember-select'],\n  defaultTemplate: Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data)
        {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers);
        data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, escapeExpression=this.escapeExpression,
        self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', hashTypes,
        hashContexts;\n  data.buffer.push(\"<option value=\\\"\\\">\");\n  hashTypes
        = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0,
        \"view.prompt\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n
        \ data.buffer.push(\"</option>\");\n  return buffer;\n  }\n\nfunction program3(depth0,data)
        {\n  \n  var stack1, hashTypes, hashContexts;\n  hashTypes = {};\n  hashContexts
        = {};\n  stack1 = helpers.each.call(depth0, \"view.groupedContent\", {hash:{},inverse:self.noop,fn:self.program(4,
        program4, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n
        \ if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  else { data.buffer.push('');
        }\n  }\nfunction program4(depth0,data) {\n  \n  var hashContexts, hashTypes;\n
        \ hashContexts = {'content': depth0,'label': depth0};\n  hashTypes = {'content':
        \"ID\",'label': \"ID\"};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0,
        \"view.groupView\", {hash:{\n    'content': (\"content\"),\n    'label': (\"label\")\n
        \ },contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n
        \ }\n\nfunction program6(depth0,data) {\n  \n  var stack1, hashTypes, hashContexts;\n
        \ hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0,
        \"view.content\", {hash:{},inverse:self.noop,fn:self.program(7, program7,
        data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n
        \ if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  else { data.buffer.push('');
        }\n  }\nfunction program7(depth0,data) {\n  \n  var hashContexts, hashTypes;\n
        \ hashContexts = {'content': depth0};\n  hashTypes = {'content': \"ID\"};\n
        \ data.buffer.push(escapeExpression(helpers.view.call(depth0, \"view.optionView\",
        {hash:{\n    'content': (\"\")\n  },contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n
        \ }\n\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0,
        \"view.prompt\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n
        \ if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  hashTypes =
        {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"view.optionGroupPath\",
        {hash:{},inverse:self.program(6, program6, data),fn:self.program(3, program3,
        data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n
        \ if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  return buffer;\n
        \ \n}),\n  attributeBindings: ['multiple', 'disabled', 'tabindex', 'name'],\n\n
        \ /**\n    The `multiple` attribute of the select element. Indicates whether
        multiple\n    options can be selected.\n\n    @property multiple\n    @type
        Boolean\n    @default false\n  */\n  multiple: false,\n\n  /**\n    The `disabled`
        attribute of the select element. Indicates whether\n    the element is disabled
        from interactions.\n\n    @property disabled\n    @type Boolean\n    @default
        false\n  */\n  disabled: false,\n\n  /**\n    The list of options.\n\n    If
        `optionLabelPath` and `optionValuePath` are not overridden, this should\n
        \   be a list of strings, which will serve simultaneously as labels and values.\n\n
        \   Otherwise, this should be a list of objects. For instance:\n\n    ```javascript\n
        \   Ember.Select.create({\n      content: Ember.A([\n          { id: 1, firstName:
        'Yehuda' },\n          { id: 2, firstName: 'Tom' }\n        ]),\n      optionLabelPath:
        'content.firstName',\n      optionValuePath: 'content.id'\n    });\n    ```\n\n
        \   @property content\n    @type Array\n    @default null\n  */\n  content:
        null,\n\n  /**\n    When `multiple` is `false`, the element of `content` that
        is currently\n    selected, if any.\n\n    When `multiple` is `true`, an array
        of such elements.\n\n    @property selection\n    @type Object or Array\n
        \   @default null\n  */\n  selection: null,\n\n  /**\n    In single selection
        mode (when `multiple` is `false`), value can be used to\n    get the current
        selection's value or set the selection by it's value.\n\n    It is not currently
        supported in multiple selection mode.\n\n    @property value\n    @type String\n
        \   @default null\n  */\n  value: Ember.computed(function(key, value) {\n
        \   if (arguments.length === 2) { return value; }\n    var valuePath = get(this,
        'optionValuePath').replace(/^content\\.?/, '');\n    return valuePath ? get(this,
        'selection.' + valuePath) : get(this, 'selection');\n  }).property('selection'),\n\n
        \ /**\n    If given, a top-most dummy option will be rendered to serve as
        a user\n    prompt.\n\n    @property prompt\n    @type String\n    @default
        null\n  */\n  prompt: null,\n\n  /**\n    The path of the option labels. See
        [content](/api/classes/Ember.Select.html#property_content).\n\n    @property
        optionLabelPath\n    @type String\n    @default 'content'\n  */\n  optionLabelPath:
        'content',\n\n  /**\n    The path of the option values. See [content](/api/classes/Ember.Select.html#property_content).\n\n
        \   @property optionValuePath\n    @type String\n    @default 'content'\n
        \ */\n  optionValuePath: 'content',\n\n  /**\n    The path of the option group.\n
        \   When this property is used, `content` should be sorted by `optionGroupPath`.\n\n
        \   @property optionGroupPath\n    @type String\n    @default null\n  */\n
        \ optionGroupPath: null,\n\n  /**\n    The view class for optgroup.\n\n    @property
        groupView\n    @type Ember.View\n    @default Ember.SelectOptgroup\n  */\n
        \ groupView: Ember.SelectOptgroup,\n\n  groupedContent: Ember.computed(function()
        {\n    var groupPath = get(this, 'optionGroupPath');\n    var groupedContent
        = Ember.A();\n    var content = get(this, 'content') || [];\n\n    forEach(content,
        function(item) {\n      var label = get(item, groupPath);\n\n      if (get(groupedContent,
        'lastObject.label') !== label) {\n        groupedContent.pushObject({\n          label:
        label,\n          content: Ember.A()\n        });\n      }\n\n      get(groupedContent,
        'lastObject.content').push(item);\n    });\n\n    return groupedContent;\n
        \ }).property('optionGroupPath', 'content.@each'),\n\n  /**\n    The view
        class for option.\n\n    @property optionView\n    @type Ember.View\n    @default
        Ember.SelectOption\n  */\n  optionView: Ember.SelectOption,\n\n  _change:
        function() {\n    if (get(this, 'multiple')) {\n      this._changeMultiple();\n
        \   } else {\n      this._changeSingle();\n    }\n  },\n\n  selectionDidChange:
        Ember.observer(function() {\n    var selection = get(this, 'selection');\n
        \   if (get(this, 'multiple')) {\n      if (!isArray(selection)) {\n        set(this,
        'selection', Ember.A([selection]));\n        return;\n      }\n      this._selectionDidChangeMultiple();\n
        \   } else {\n      this._selectionDidChangeSingle();\n    }\n  }, 'selection.@each'),\n\n
        \ valueDidChange: Ember.observer(function() {\n    var content = get(this,
        'content'),\n        value = get(this, 'value'),\n        valuePath = get(this,
        'optionValuePath').replace(/^content\\.?/, ''),\n        selectedValue = (valuePath
        ? get(this, 'selection.' + valuePath) : get(this, 'selection')),\n        selection;\n\n
        \   if (value !== selectedValue) {\n      selection = content ? content.find(function(obj)
        {\n        return value === (valuePath ? get(obj, valuePath) : obj);\n      })
        : null;\n\n      this.set('selection', selection);\n    }\n  }, 'value'),\n\n\n
        \ _triggerChange: function() {\n    var selection = get(this, 'selection');\n
        \   var value = get(this, 'value');\n\n    if (!Ember.isNone(selection)) {
        this.selectionDidChange(); }\n    if (!Ember.isNone(value)) { this.valueDidChange();
        }\n\n    this._change();\n  },\n\n  _changeSingle: function() {\n    var selectedIndex
        = this.$()[0].selectedIndex,\n        content = get(this, 'content'),\n        prompt
        = get(this, 'prompt');\n\n    if (!content || !get(content, 'length')) { return;
        }\n    if (prompt && selectedIndex === 0) { set(this, 'selection', null);
        return; }\n\n    if (prompt) { selectedIndex -= 1; }\n    set(this, 'selection',
        content.objectAt(selectedIndex));\n  },\n\n\n  _changeMultiple: function()
        {\n    var options = this.$('option:selected'),\n        prompt = get(this,
        'prompt'),\n        offset = prompt ? 1 : 0,\n        content = get(this,
        'content'),\n        selection = get(this, 'selection');\n\n    if (!content)
        { return; }\n    if (options) {\n      var selectedIndexes = options.map(function()
        {\n        return this.index - offset;\n      }).toArray();\n      var newSelection
        = content.objectsAt(selectedIndexes);\n\n      if (isArray(selection)) {\n
        \       replace(selection, 0, get(selection, 'length'), newSelection);\n      }
        else {\n        set(this, 'selection', newSelection);\n      }\n    }\n  },\n\n
        \ _selectionDidChangeSingle: function() {\n    var el = this.get('element');\n
        \   if (!el) { return; }\n\n    var content = get(this, 'content'),\n        selection
        = get(this, 'selection'),\n        selectionIndex = content ? indexOf(content,
        selection) : -1,\n        prompt = get(this, 'prompt');\n\n    if (prompt)
        { selectionIndex += 1; }\n    if (el) { el.selectedIndex = selectionIndex;
        }\n  },\n\n  _selectionDidChangeMultiple: function() {\n    var content =
        get(this, 'content'),\n        selection = get(this, 'selection'),\n        selectedIndexes
        = content ? indexesOf(content, selection) : [-1],\n        prompt = get(this,
        'prompt'),\n        offset = prompt ? 1 : 0,\n        options = this.$('option'),\n
        \       adjusted;\n\n    if (options) {\n      options.each(function() {\n
        \       adjusted = this.index > -1 ? this.index - offset : -1;\n        this.selected
        = indexOf(selectedIndexes, adjusted) > -1;\n      });\n    }\n  },\n\n  init:
        function() {\n    this._super();\n    this.on(\"didInsertElement\", this,
        this._triggerChange);\n    this.on(\"change\", this, this._change);\n  }\n});\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-handlebars-compiler\n*/\n\n/**\n\n
        \ The `{{input}}` helper inserts an HTML `<input>` tag into the template,\n
        \ with a `type` value of either `text` or `checkbox`. If no `type` is provided,\n
        \ `text` will be the default value applied. The attributes of `{{input}}`\n
        \ match those of the native HTML tag as closely as possible for these two
        types.\n\n  ## Use as text field\n  An `{{input}}` with no `type` or a `type`
        of `text` will render an HTML text input.\n  The following HTML attributes
        can be set via the helper:\n\n* `value`\n* `size`\n* `name`\n* `pattern`\n*
        `placeholder`\n* `disabled`\n* `maxlength`\n* `tabindex`\n\n\n  When set to
        a quoted string, these values will be directly applied to the HTML\n  element.
        When left unquoted, these values will be bound to a property on the\n  template's
        current rendering context (most typically a controller instance).\n\n  ##
        Unbound:\n\n  ```handlebars\n  {{input value=\"http://www.facebook.com\"}}\n
        \ ```\n\n\n  ```html\n  <input type=\"text\" value=\"http://www.facebook.com\"/>\n
        \ ```\n\n  ## Bound:\n\n  ```javascript\n  App.ApplicationController = Ember.Controller.extend({\n
        \   firstName: \"Stanley\",\n    entryNotAllowed: true\n  });\n  ```\n\n\n
        \ ```handlebars\n  {{input type=\"text\" value=firstName disabled=entryNotAllowed
        size=\"50\"}}\n  ```\n\n\n  ```html\n  <input type=\"text\" value=\"Stanley\"
        disabled=\"disabled\" size=\"50\"/>\n  ```\n\n  ## Extension\n\n  Internally,
        `{{input type=\"text\"}}` creates an instance of `Ember.TextField`, passing\n
        \ arguments from the helper to `Ember.TextField`'s `create` method. You can
        extend the\n  capablilties of text inputs in your applications by reopening
        this class. For example,\n  if you are deploying to browsers where the `required`
        attribute is used, you\n  can add this to the `TextField`'s `attributeBindings`
        property:\n\n  ```javascript\n  Ember.TextField.reopen({\n    attributeBindings:
        ['required']\n  });\n  ```\n\n  Keep in mind when writing `Ember.TextField`
        subclasses that `Ember.TextField`\n  itself extends `Ember.Component`, meaning
        that it does NOT inherit\n  the `controller` of the parent view.\n\n  See
        more about [Ember components](api/classes/Ember.Component.html)\n\n\n  ##
        Use as checkbox\n\n  An `{{input}}` with a `type` of `checkbox` will render
        an HTML checkbox input.\n  The following HTML attributes can be set via the
        helper:\n\n* `checked`\n* `disabled`\n* `tabindex`\n* `indeterminate`\n* `name`\n\n
        \ When set to a quoted string, these values will be directly applied to the
        HTML\n  element. When left unquoted, these values will be bound to a property
        on the\n  template's current rendering context (most typically a controller
        instance).\n\n  ## Unbound:\n\n  ```handlebars\n  {{input type=\"checkbox\"
        name=\"isAdmin\"}}\n  ```\n\n  ```html\n  <input type=\"checkbox\" name=\"isAdmin\"
        />\n  ```\n\n  ## Bound:\n\n  ```javascript\n  App.ApplicationController =
        Ember.Controller.extend({\n    isAdmin: true\n  });\n  ```\n\n\n  ```handlebars\n
        \ {{input type=\"checkbox\" checked=isAdmin }}\n  ```\n\n\n  ```html\n  <input
        type=\"checkbox\" checked=\"checked\" />\n  ```\n\n  ## Extension\n\n  Internally,
        `{{input type=\"checkbox\"}}` creates an instance of `Ember.Checkbox`, passing\n
        \ arguments from the helper to `Ember.Checkbox`'s `create` method. You can
        extend the\n  capablilties of checkbox inputs in your applications by reopening
        this class. For example,\n  if you wanted to add a css class to all checkboxes
        in your application:\n\n  ```javascript\n  Ember.Checkbox.reopen({\n    classNames:
        ['my-app-checkbox']\n  });\n  ```\n\n\n  @method input\n  @for Ember.Handlebars.helpers\n
        \ @param {Hash} options\n*/\nEmber.Handlebars.registerHelper('input', function(options)
        {\n  Ember.assert('You can only pass attributes to the `input` helper, not
        arguments', arguments.length < 2);\n\n  var hash = options.hash,\n      types
        = options.hashTypes,\n      inputType = hash.type,\n      onEvent = hash.on;\n\n
        \ delete hash.type;\n  delete hash.on;\n\n  if (inputType === 'checkbox')
        {\n    return Ember.Handlebars.helpers.view.call(this, Ember.Checkbox, options);\n
        \ } else {\n    if (inputType) { hash.type = inputType; }\n    hash.onEvent
        = onEvent || 'enter';\n    return Ember.Handlebars.helpers.view.call(this,
        Ember.TextField, options);\n  }\n});\n\n/**\n  `{{textarea}}` inserts a new
        instance of `<textarea>` tag into the template.\n  The attributes of `{{textarea}}`
        match those of the native HTML tags as\n  closely as possible.\n\n  The following
        HTML attributes can be set:\n\n    * `value`\n    * `name`\n    * `rows`\n
        \   * `cols`\n    * `placeholder`\n    * `disabled`\n    * `maxlength`\n    *
        `tabindex`\n\n  When set to a quoted string, these value will be directly
        applied to the HTML\n  element. When left unquoted, these values will be bound
        to a property on the\n  template's current rendering context (most typically
        a controller instance).\n\n  Unbound:\n\n  ```handlebars\n  {{textarea value=\"Lots
        of static text that ISN'T bound\"}}\n  ```\n\n  Would result in the following
        HTML:\n\n  ```html\n  <textarea class=\"ember-text-area\">\n    Lots of static
        text that ISN'T bound\n  </textarea>\n  ```\n\n  Bound:\n\n  In the following
        example, the `writtenWords` property on `App.ApplicationController`\n  will
        be updated live as the user types 'Lots of text that IS bound' into\n  the
        text area of their browser's window.\n\n  ```javascript\n  App.ApplicationController
        = Ember.Controller.extend({\n    writtenWords: \"Lots of text that IS bound\"\n
        \ });\n  ```\n\n  ```handlebars\n  {{textarea value=writtenWords}}\n  ```\n\n
        \  Would result in the following HTML:\n\n  ```html\n  <textarea class=\"ember-text-area\">\n
        \   Lots of text that IS bound\n  </textarea>\n  ```\n\n  If you wanted a
        one way binding between the text area and a div tag\n  somewhere else on your
        screen, you could use `Ember.computed.oneWay`:\n\n  ```javascript\n  App.ApplicationController
        = Ember.Controller.extend({\n    writtenWords: \"Lots of text that IS bound\",\n
        \   outputWrittenWords: Ember.computed.oneWay(\"writtenWords\")\n  });\n  ```\n\n
        \ ```handlebars\n  {{textarea value=writtenWords}}\n\n  <div>\n    {{outputWrittenWords}}\n
        \ </div>\n  ```\n\n  Would result in the following HTML:\n\n  ```html\n  <textarea
        class=\"ember-text-area\">\n    Lots of text that IS bound\n  </textarea>\n\n
        \ <-- the following div will be updated in real time as you type -->\n\n  <div>\n
        \   Lots of text that IS bound\n  </div>\n  ```\n\n  Finally, this example
        really shows the power and ease of Ember when two\n  properties are bound
        to eachother via `Ember.computed.alias`. Type into\n  either text area box
        and they'll both stay in sync. Note that\n  `Ember.computed.alias` costs more
        in terms of performance, so only use it when\n  your really binding in both
        directions:\n\n  ```javascript\n  App.ApplicationController = Ember.Controller.extend({\n
        \   writtenWords: \"Lots of text that IS bound\",\n    twoWayWrittenWords:
        Ember.computed.alias(\"writtenWords\")\n  });\n  ```\n\n  ```handlebars\n
        \ {{textarea value=writtenWords}}\n  {{textarea value=twoWayWrittenWords}}\n
        \ ```\n\n  ```html\n  <textarea id=\"ember1\" class=\"ember-text-area\">\n
        \   Lots of text that IS bound\n  </textarea>\n\n  <-- both updated in real
        time -->\n\n  <textarea id=\"ember2\" class=\"ember-text-area\">\n    Lots
        of text that IS bound\n  </textarea>\n  ```\n\n  ## Extension\n\n  Internally,
        `{{textarea}}` creates an instance of `Ember.TextArea`, passing\n  arguments
        from the helper to `Ember.TextArea`'s `create` method. You can\n  extend the
        capabilities of text areas in your application by reopening this\n  class.
        For example, if you are deploying to browsers where the `required`\n  attribute
        is used, you can globally add support for the `required` attribute\n  on all
        {{textarea}}'s' in your app by reopening `Ember.TextArea` or\n  `Ember.TextSupport`
        and adding it to the `attributeBindings` concatenated\n  property:\n\n  ```javascript\n
        \ Ember.TextArea.reopen({\n    attributeBindings: ['required']\n  });\n  ```\n\n
        \ Keep in mind when writing `Ember.TextArea` subclasses that `Ember.TextArea`\n
        \ itself extends `Ember.Component`, meaning that it does NOT inherit\n  the
        `controller` of the parent view.\n\n  See more about [Ember components](api/classes/Ember.Component.html)\n\n
        \ @method textarea\n  @for Ember.Handlebars.helpers\n  @param {Hash} options\n*/\nEmber.Handlebars.registerHelper('textarea',
        function(options) {\n  Ember.assert('You can only pass attributes to the `textarea`
        helper, not arguments', arguments.length < 2);\n\n  var hash = options.hash,\n
        \     types = options.hashTypes;\n\n  return Ember.Handlebars.helpers.view.call(this,
        Ember.TextArea, options);\n});\n\n})();\n\n\n\n(function() {\n/*globals Handlebars
        */\n/**\n@module ember\n@submodule ember-handlebars\n*/\n\n/**\n  @private\n\n
        \ Find templates stored in the head tag as script tags and make them available\n
        \ to `Ember.CoreView` in the global `Ember.TEMPLATES` object. This will be
        run\n  as as jQuery DOM-ready callback.\n\n  Script tags with `text/x-handlebars`
        will be compiled\n  with Ember's Handlebars and are suitable for use as a
        view's template.\n  Those with type `text/x-raw-handlebars` will be compiled
        with regular\n  Handlebars and are suitable for use in views' computed properties.\n\n
        \ @method bootstrap\n  @for Ember.Handlebars\n  @static\n  @param ctx\n*/\nEmber.Handlebars.bootstrap
        = function(ctx) {\n  var selectors = 'script[type=\"text/x-handlebars\"],
        script[type=\"text/x-raw-handlebars\"]';\n\n  Ember.$(selectors, ctx)\n    .each(function()
        {\n    // Get a reference to the script tag\n    var script = Ember.$(this);\n\n
        \   var compile = (script.attr('type') === 'text/x-raw-handlebars') ?\n                  Ember.$.proxy(Handlebars.compile,
        Handlebars) :\n                  Ember.$.proxy(Ember.Handlebars.compile, Ember.Handlebars),\n
        \     // Get the name of the script, used by Ember.View's templateName property.\n
        \     // First look for data-template-name attribute, then fall back to its\n
        \     // id if no name is found.\n      templateName = script.attr('data-template-name')
        || script.attr('id') || 'application',\n      template = compile(script.html());\n\n
        \   // Check if template of same name already exists\n    if (Ember.TEMPLATES[templateName]
        !== undefined) {\n      throw new Ember.Error('Template named \"' + templateName
        \ + '\" already exists.');\n    }\n\n    // For templates which have a name,
        we save them and then remove them from the DOM\n    Ember.TEMPLATES[templateName]
        = template;\n\n    // Remove script tag from DOM\n    script.remove();\n  });\n};\n\nfunction
        bootstrap() {\n  Ember.Handlebars.bootstrap( Ember.$(document) );\n}\n\nfunction
        registerComponents(container) {\n  var templates = Ember.TEMPLATES, match;\n
        \ if (!templates) { return; }\n\n  for (var prop in templates) {\n    if (match
        = prop.match(/^components\\/(.*)$/)) {\n      registerComponent(container,
        match[1]);\n    }\n  }\n}\n\n\nfunction registerComponent(container, name)
        {\n  Ember.assert(\"You provided a template named 'components/\" + name +
        \"', but custom components must include a '-'\", name.match(/-/));\n\n  var
        fullName = 'component:' + name;\n\n  container.injection(fullName, 'layout',
        'template:components/' + name);\n\n  var Component = container.lookupFactory(fullName);\n\n
        \ if (!Component) {\n    container.register(fullName, Ember.Component);\n
        \   Component = container.lookupFactory(fullName);\n  }\n\n  Ember.Handlebars.helper(name,
        Component);\n}\n\n/*\n  We tie this to application.load to ensure that we've
        at least\n  attempted to bootstrap at the point that the application is loaded.\n\n
        \ We also tie this to document ready since we're guaranteed that all\n  the
        inline templates are present at this point.\n\n  There's no harm to running
        this twice, since we remove the templates\n  from the DOM after processing.\n*/\n\nEmber.onLoad('Ember.Application',
        function(Application) {\n  Application.initializer({\n    name: 'domTemplates',\n
        \   initialize: bootstrap\n  });\n\n  Application.initializer({\n    name:
        'registerComponents',\n    after: 'domTemplates',\n    initialize: registerComponents\n
        \ });\n});\n\n})();\n\n\n\n(function() {\n/**\nEmber Handlebars\n\n@module
        ember\n@submodule ember-handlebars\n@requires ember-views\n*/\n\nEmber.runLoadHooks('Ember.Handlebars',
        Ember.Handlebars);\n\n})();\n\n(function() {\ndefine(\"route-recognizer\",\n
        \ [],\n  function() {\n    \"use strict\";\n    var specials = [\n      '/',
        '.', '*', '+', '?', '|',\n      '(', ')', '[', ']', '{', '}', '\\\\'\n    ];\n\n
        \   var escapeRegex = new RegExp('(\\\\' + specials.join('|\\\\') + ')', 'g');\n\n
        \   // A Segment represents a segment in the original route description.\n
        \   // Each Segment type provides an `eachChar` and `regex` method.\n    //\n
        \   // The `eachChar` method invokes the callback with one or more character\n
        \   // specifications. A character specification consumes one or more input\n
        \   // characters.\n    //\n    // The `regex` method returns a regex fragment
        for the segment. If the\n    // segment is a dynamic of star segment, the
        regex fragment also includes\n    // a capture.\n    //\n    // A character
        specification contains:\n    //\n    // * `validChars`: a String with a list
        of all valid characters, or\n    // * `invalidChars`: a String with a list
        of all invalid characters\n    // * `repeat`: true if the character specification
        can repeat\n\n    function StaticSegment(string) { this.string = string; }\n
        \   StaticSegment.prototype = {\n      eachChar: function(callback) {\n        var
        string = this.string, char;\n\n        for (var i=0, l=string.length; i<l;
        i++) {\n          char = string.charAt(i);\n          callback({ validChars:
        char });\n        }\n      },\n\n      regex: function() {\n        return
        this.string.replace(escapeRegex, '\\\\$1');\n      },\n\n      generate: function()
        {\n        return this.string;\n      }\n    };\n\n    function DynamicSegment(name)
        { this.name = name; }\n    DynamicSegment.prototype = {\n      eachChar: function(callback)
        {\n        callback({ invalidChars: \"/\", repeat: true });\n      },\n\n
        \     regex: function() {\n        return \"([^/]+)\";\n      },\n\n      generate:
        function(params) {\n        return params[this.name];\n      }\n    };\n\n
        \   function StarSegment(name) { this.name = name; }\n    StarSegment.prototype
        = {\n      eachChar: function(callback) {\n        callback({ invalidChars:
        \"\", repeat: true });\n      },\n\n      regex: function() {\n        return
        \"(.+)\";\n      },\n\n      generate: function(params) {\n        return
        params[this.name];\n      }\n    };\n\n    function EpsilonSegment() {}\n
        \   EpsilonSegment.prototype = {\n      eachChar: function() {},\n      regex:
        function() { return \"\"; },\n      generate: function() { return \"\"; }\n
        \   };\n\n    function parse(route, names, types) {\n      // normalize route
        as not starting with a \"/\". Recognition will\n      // also normalize.\n
        \     if (route.charAt(0) === \"/\") { route = route.substr(1); }\n\n      var
        segments = route.split(\"/\"), results = [];\n\n      for (var i=0, l=segments.length;
        i<l; i++) {\n        var segment = segments[i], match;\n\n        if (match
        = segment.match(/^:([^\\/]+)$/)) {\n          results.push(new DynamicSegment(match[1]));\n
        \         names.push(match[1]);\n          types.dynamics++;\n        } else
        if (match = segment.match(/^\\*([^\\/]+)$/)) {\n          results.push(new
        StarSegment(match[1]));\n          names.push(match[1]);\n          types.stars++;\n
        \       } else if (segment === \"\") {\n          results.push(new EpsilonSegment());\n
        \       } else {\n          results.push(new StaticSegment(segment));\n          types.statics++;\n
        \       }\n      }\n\n      return results;\n    }\n\n    // A State has a
        character specification and (`charSpec`) and a list of possible\n    // subsequent
        states (`nextStates`).\n    //\n    // If a State is an accepting state, it
        will also have several additional\n    // properties:\n    //\n    // * `regex`:
        A regular expression that is used to extract parameters from paths\n    //
        \  that reached this accepting state.\n    // * `handlers`: Information on
        how to convert the list of captures into calls\n    //   to registered handlers
        with the specified parameters\n    // * `types`: How many static, dynamic
        or star segments in this route. Used to\n    //   decide which route to use
        if multiple registered routes match a path.\n    //\n    // Currently, State
        is implemented naively by looping over `nextStates` and\n    // comparing
        a character specification against a character. A more efficient\n    // implementation
        would use a hash of keys pointing at one or more next states.\n\n    function
        State(charSpec) {\n      this.charSpec = charSpec;\n      this.nextStates
        = [];\n    }\n\n    State.prototype = {\n      get: function(charSpec) {\n
        \       var nextStates = this.nextStates;\n\n        for (var i=0, l=nextStates.length;
        i<l; i++) {\n          var child = nextStates[i];\n\n          var isEqual
        = child.charSpec.validChars === charSpec.validChars;\n          isEqual =
        isEqual && child.charSpec.invalidChars === charSpec.invalidChars;\n\n          if
        (isEqual) { return child; }\n        }\n      },\n\n      put: function(charSpec)
        {\n        var state;\n\n        // If the character specification already
        exists in a child of the current\n        // state, just return that state.\n
        \       if (state = this.get(charSpec)) { return state; }\n\n        // Make
        a new state for the character spec\n        state = new State(charSpec);\n\n
        \       // Insert the new state as a child of the current state\n        this.nextStates.push(state);\n\n
        \       // If this character specification repeats, insert the new state as
        a child\n        // of itself. Note that this will not trigger an infinite
        loop because each\n        // transition during recognition consumes a character.\n
        \       if (charSpec.repeat) {\n          state.nextStates.push(state);\n
        \       }\n\n        // Return the new state\n        return state;\n      },\n\n
        \     // Find a list of child states matching the next character\n      match:
        function(char) {\n        // DEBUG \"Processing `\" + char + \"`:\"\n        var
        nextStates = this.nextStates,\n            child, charSpec, chars;\n\n        //
        DEBUG \"  \" + debugState(this)\n        var returned = [];\n\n        for
        (var i=0, l=nextStates.length; i<l; i++) {\n          child = nextStates[i];\n\n
        \         charSpec = child.charSpec;\n\n          if (typeof (chars = charSpec.validChars)
        !== 'undefined') {\n            if (chars.indexOf(char) !== -1) { returned.push(child);
        }\n          } else if (typeof (chars = charSpec.invalidChars) !== 'undefined')
        {\n            if (chars.indexOf(char) === -1) { returned.push(child); }\n
        \         }\n        }\n\n        return returned;\n      }\n\n      /** IF
        DEBUG\n      , debug: function() {\n        var charSpec = this.charSpec,\n
        \           debug = \"[\",\n            chars = charSpec.validChars || charSpec.invalidChars;\n\n
        \       if (charSpec.invalidChars) { debug += \"^\"; }\n        debug += chars;\n
        \       debug += \"]\";\n\n        if (charSpec.repeat) { debug += \"+\";
        }\n\n        return debug;\n      }\n      END IF **/\n    };\n\n    /** IF
        DEBUG\n    function debug(log) {\n      console.log(log);\n    }\n\n    function
        debugState(state) {\n      return state.nextStates.map(function(n) {\n        if
        (n.nextStates.length === 0) { return \"( \" + n.debug() + \" [accepting] )\";
        }\n        return \"( \" + n.debug() + \" <then> \" + n.nextStates.map(function(s)
        { return s.debug() }).join(\" or \") + \" )\";\n      }).join(\", \")\n    }\n
        \   END IF **/\n\n    // This is a somewhat naive strategy, but should work
        in a lot of cases\n    // A better strategy would properly resolve /posts/:id/new
        and /posts/edit/:id\n    function sortSolutions(states) {\n      return states.sort(function(a,
        b) {\n        if (a.types.stars !== b.types.stars) { return a.types.stars
        - b.types.stars; }\n        if (a.types.dynamics !== b.types.dynamics) { return
        a.types.dynamics - b.types.dynamics; }\n        if (a.types.statics !== b.types.statics)
        { return a.types.statics - b.types.statics; }\n\n        return 0;\n      });\n
        \   }\n\n    function recognizeChar(states, char) {\n      var nextStates
        = [];\n\n      for (var i=0, l=states.length; i<l; i++) {\n        var state
        = states[i];\n\n        nextStates = nextStates.concat(state.match(char));\n
        \     }\n\n      return nextStates;\n    }\n\n    function findHandler(state,
        path) {\n      var handlers = state.handlers, regex = state.regex;\n      var
        captures = path.match(regex), currentCapture = 1;\n      var result = [];\n\n
        \     for (var i=0, l=handlers.length; i<l; i++) {\n        var handler =
        handlers[i], names = handler.names, params = {};\n\n        for (var j=0,
        m=names.length; j<m; j++) {\n          params[names[j]] = captures[currentCapture++];\n
        \       }\n\n        result.push({ handler: handler.handler, params: params,
        isDynamic: !!names.length });\n      }\n\n      return result;\n    }\n\n
        \   function addSegment(currentState, segment) {\n      segment.eachChar(function(char)
        {\n        var state;\n\n        currentState = currentState.put(char);\n
        \     });\n\n      return currentState;\n    }\n\n    // The main interface\n\n
        \   var RouteRecognizer = function() {\n      this.rootState = new State();\n
        \     this.names = {};\n    };\n\n\n    RouteRecognizer.prototype = {\n      add:
        function(routes, options) {\n        var currentState = this.rootState, regex
        = \"^\",\n            types = { statics: 0, dynamics: 0, stars: 0 },\n            handlers
        = [], allSegments = [], name;\n\n        var isEmpty = true;\n\n        for
        (var i=0, l=routes.length; i<l; i++) {\n          var route = routes[i], names
        = [];\n\n          var segments = parse(route.path, names, types);\n\n          allSegments
        = allSegments.concat(segments);\n\n          for (var j=0, m=segments.length;
        j<m; j++) {\n            var segment = segments[j];\n\n            if (segment
        instanceof EpsilonSegment) { continue; }\n\n            isEmpty = false;\n\n
        \           // Add a \"/\" for the new segment\n            currentState =
        currentState.put({ validChars: \"/\" });\n            regex += \"/\";\n\n
        \           // Add a representation of the segment to the NFA and regex\n
        \           currentState = addSegment(currentState, segment);\n            regex
        += segment.regex();\n          }\n\n          handlers.push({ handler: route.handler,
        names: names });\n        }\n\n        if (isEmpty) {\n          currentState
        = currentState.put({ validChars: \"/\" });\n          regex += \"/\";\n        }\n\n
        \       currentState.handlers = handlers;\n        currentState.regex = new
        RegExp(regex + \"$\");\n        currentState.types = types;\n\n        if
        (name = options && options.as) {\n          this.names[name] = {\n            segments:
        allSegments,\n            handlers: handlers\n          };\n        }\n      },\n\n
        \     handlersFor: function(name) {\n        var route = this.names[name],
        result = [];\n        if (!route) { throw new Error(\"There is no route named
        \" + name); }\n\n        for (var i=0, l=route.handlers.length; i<l; i++)
        {\n          result.push(route.handlers[i]);\n        }\n\n        return
        result;\n      },\n\n      hasRoute: function(name) {\n        return !!this.names[name];\n
        \     },\n\n      generate: function(name, params) {\n        var route =
        this.names[name], output = \"\";\n        if (!route) { throw new Error(\"There
        is no route named \" + name); }\n\n        var segments = route.segments;\n\n
        \       for (var i=0, l=segments.length; i<l; i++) {\n          var segment
        = segments[i];\n\n          if (segment instanceof EpsilonSegment) { continue;
        }\n\n          output += \"/\";\n          output += segment.generate(params);\n
        \       }\n\n        if (output.charAt(0) !== '/') { output = '/' + output;
        }\n\n        return output;\n      },\n\n      recognize: function(path) {\n
        \       var states = [ this.rootState ],\n            pathLen, i, l;\n\n        //
        DEBUG GROUP path\n\n        if (path.charAt(0) !== \"/\") { path = \"/\" +
        path; }\n\n        pathLen = path.length;\n        if (pathLen > 1 && path.charAt(pathLen
        - 1) === \"/\") {\n          path = path.substr(0, pathLen - 1);\n        }\n\n
        \       for (i=0, l=path.length; i<l; i++) {\n          states = recognizeChar(states,
        path.charAt(i));\n          if (!states.length) { break; }\n        }\n\n
        \       // END DEBUG GROUP\n\n        var solutions = [];\n        for (i=0,
        l=states.length; i<l; i++) {\n          if (states[i].handlers) { solutions.push(states[i]);
        }\n        }\n\n        states = sortSolutions(solutions);\n\n        var
        state = solutions[0];\n\n        if (state && state.handlers) {\n          return
        findHandler(state, path);\n        }\n      }\n    };\n\n    function Target(path,
        matcher, delegate) {\n      this.path = path;\n      this.matcher = matcher;\n
        \     this.delegate = delegate;\n    }\n\n    Target.prototype = {\n      to:
        function(target, callback) {\n        var delegate = this.delegate;\n\n        if
        (delegate && delegate.willAddRoute) {\n          target = delegate.willAddRoute(this.matcher.target,
        target);\n        }\n\n        this.matcher.add(this.path, target);\n\n        if
        (callback) {\n          if (callback.length === 0) { throw new Error(\"You
        must have an argument in the function passed to `to`\"); }\n          this.matcher.addChild(this.path,
        target, callback, this.delegate);\n        }\n      }\n    };\n\n    function
        Matcher(target) {\n      this.routes = {};\n      this.children = {};\n      this.target
        = target;\n    }\n\n    Matcher.prototype = {\n      add: function(path, handler)
        {\n        this.routes[path] = handler;\n      },\n\n      addChild: function(path,
        target, callback, delegate) {\n        var matcher = new Matcher(target);\n
        \       this.children[path] = matcher;\n\n        var match = generateMatch(path,
        matcher, delegate);\n\n        if (delegate && delegate.contextEntered) {\n
        \         delegate.contextEntered(target, match);\n        }\n\n        callback(match);\n
        \     }\n    };\n\n    function generateMatch(startingPath, matcher, delegate)
        {\n      return function(path, nestedCallback) {\n        var fullPath = startingPath
        + path;\n\n        if (nestedCallback) {\n          nestedCallback(generateMatch(fullPath,
        matcher, delegate));\n        } else {\n          return new Target(startingPath
        + path, matcher, delegate);\n        }\n      };\n    }\n\n    function addRoute(routeArray,
        path, handler) {\n      var len = 0;\n      for (var i=0, l=routeArray.length;
        i<l; i++) {\n        len += routeArray[i].path.length;\n      }\n\n      path
        = path.substr(len);\n      routeArray.push({ path: path, handler: handler
        });\n    }\n\n    function eachRoute(baseRoute, matcher, callback, binding)
        {\n      var routes = matcher.routes;\n\n      for (var path in routes) {\n
        \       if (routes.hasOwnProperty(path)) {\n          var routeArray = baseRoute.slice();\n
        \         addRoute(routeArray, path, routes[path]);\n\n          if (matcher.children[path])
        {\n            eachRoute(routeArray, matcher.children[path], callback, binding);\n
        \         } else {\n            callback.call(binding, routeArray);\n          }\n
        \       }\n      }\n    }\n\n    RouteRecognizer.prototype.map = function(callback,
        addRouteCallback) {\n      var matcher = new Matcher();\n\n      callback(generateMatch(\"\",
        matcher, this.delegate));\n\n      eachRoute([], matcher, function(route)
        {\n        if (addRouteCallback) { addRouteCallback(this, route); }\n        else
        { this.add(route); }\n      }, this);\n    };\n    return RouteRecognizer;\n
        \ });\n\n})();\n\n\n\n(function() {\ndefine(\"router\",\n  [\"route-recognizer\",\"rsvp\"],\n
        \ function(RouteRecognizer, RSVP) {\n    \"use strict\";\n    /**\n      @private\n\n
        \     This file references several internal structures:\n\n      ## `RecognizedHandler`\n\n
        \     * `{String} handler`: A handler name\n      * `{Object} params`: A hash
        of recognized parameters\n\n      ## `HandlerInfo`\n\n      * `{Boolean} isDynamic`:
        whether a handler has any dynamic segments\n      * `{String} name`: the name
        of a handler\n      * `{Object} handler`: a handler object\n      * `{Object}
        context`: the active context for the handler\n    */\n\n\n    var slice =
        Array.prototype.slice;\n\n\n\n    /**\n      @private\n\n      A Transition
        is a thennable (a promise-like object) that represents\n      an attempt to
        transition to another route. It can be aborted, either\n      explicitly via
        `abort` or by attempting another transition while a\n      previous one is
        still underway. An aborted transition can also\n      be `retry()`d later.\n
        \    */\n\n    function Transition(router, promise) {\n      this.router =
        router;\n      this.promise = promise;\n      this.data = {};\n      this.resolvedModels
        = {};\n      this.providedModels = {};\n      this.providedModelsArray = [];\n
        \     this.sequence = ++Transition.currentSequence;\n      this.params = {};\n
        \   }\n\n    Transition.currentSequence = 0;\n\n    Transition.prototype =
        {\n      targetName: null,\n      urlMethod: 'update',\n      providedModels:
        null,\n      resolvedModels: null,\n      params: null,\n\n      /**\n        The
        Transition's internal promise. Calling `.then` on this property\n        is
        that same as calling `.then` on the Transition object itself, but\n        this
        property is exposed for when you want to pass around a\n        Transition's
        promise, but not the Transition object itself, since\n        Transition object
        can be externally `abort`ed, while the promise\n        cannot.\n       */\n
        \     promise: null,\n\n      /**\n        Custom state can be stored on a
        Transition's `data` object.\n        This can be useful for decorating a Transition
        within an earlier\n        hook and shared with a later hook. Properties set
        on `data` will\n        be copied to new transitions generated by calling
        `retry` on this\n        transition.\n       */\n      data: null,\n\n      /**\n
        \       A standard promise hook that resolves if the transition\n        succeeds
        and rejects if it fails/redirects/aborts.\n\n        Forwards to the internal
        `promise` property which you can\n        use in situations where you want
        to pass around a thennable,\n        but not the Transition itself.\n\n        @param
        {Function} success\n        @param {Function} failure\n       */\n      then:
        function(success, failure) {\n        return this.promise.then(success, failure);\n
        \     },\n\n      /**\n        Aborts the Transition. Note you can also implicitly
        abort a transition\n        by initiating another transition while a previous
        one is underway.\n       */\n      abort: function() {\n        if (this.isAborted)
        { return this; }\n        log(this.router, this.sequence, this.targetName
        + \": transition was aborted\");\n        this.isAborted = true;\n        this.router.activeTransition
        = null;\n        return this;\n      },\n\n      /**\n        Retries a previously-aborted
        transition (making sure to abort the\n        transition if it's still active).
        Returns a new transition that\n        represents the new attempt to transition.\n
        \      */\n      retry: function() {\n        this.abort();\n\n        var
        recogHandlers = this.router.recognizer.handlersFor(this.targetName),\n            newTransition
        = performTransition(this.router, recogHandlers, this.providedModelsArray,
        this.params, this.data);\n\n        return newTransition;\n      },\n\n      /**\n
        \       Sets the URL-changing method to be employed at the end of a\n        successful
        transition. By default, a new Transition will just\n        use `updateURL`,
        but passing 'replace' to this method will\n        cause the URL to update
        using 'replaceWith' instead. Omitting\n        a parameter will disable the
        URL change, allowing for transitions\n        that don't update the URL at
        completion (this is also used for\n        handleURL, since the URL has already
        changed before the\n        transition took place).\n\n        @param {String}
        method the type of URL-changing method to use\n          at the end of a transition.
        Accepted values are 'replace',\n          falsy values, or any other non-falsy
        value (which is\n          interpreted as an updateURL transition).\n\n        @return
        {Transition} this transition\n       */\n      method: function(method) {\n
        \       this.urlMethod = method;\n        return this;\n      }\n    };\n\n
        \   function Router() {\n      this.recognizer = new RouteRecognizer();\n
        \   }\n\n\n\n    /**\n      Promise reject reasons passed to promise rejection\n
        \     handlers for failed transitions.\n     */\n    Router.UnrecognizedURLError
        = function(message) {\n      this.message = (message || \"UnrecognizedURLError\");\n
        \     this.name = \"UnrecognizedURLError\";\n    };\n\n    Router.TransitionAborted
        = function(message) {\n      this.message = (message || \"TransitionAborted\");\n
        \     this.name = \"TransitionAborted\";\n    };\n\n    function errorTransition(router,
        reason) {\n      return new Transition(router, RSVP.reject(reason));\n    }\n\n\n
        \   Router.prototype = {\n      /**\n        The main entry point into the
        router. The API is essentially\n        the same as the `map` method in `route-recognizer`.\n\n
        \       This method extracts the String handler at the last `.to()`\n        call
        and uses it as the name of the whole route.\n\n        @param {Function} callback\n
        \     */\n      map: function(callback) {\n        this.recognizer.delegate
        = this.delegate;\n\n        this.recognizer.map(callback, function(recognizer,
        route) {\n          var lastHandler = route[route.length - 1].handler;\n          var
        args = [route, { as: lastHandler }];\n          recognizer.add.apply(recognizer,
        args);\n        });\n      },\n\n      hasRoute: function(route) {\n        return
        this.recognizer.hasRoute(route);\n      },\n\n      /**\n        Clears the
        current and target route handlers and triggers exit\n        on each of them
        starting at the leaf and traversing up through\n        its ancestors.\n      */\n
        \     reset: function() {\n        eachHandler(this.currentHandlerInfos ||
        [], function(handlerInfo) {\n          var handler = handlerInfo.handler;\n
        \         if (handler.exit) {\n            handler.exit();\n          }\n
        \       });\n        this.currentHandlerInfos = null;\n        this.targetHandlerInfos
        = null;\n      },\n\n      activeTransition: null,\n\n      /**\n        var
        handler = handlerInfo.handler;\n        The entry point for handling a change
        to the URL (usually\n        via the back and forward button).\n\n        Returns
        an Array of handlers and the parameters associated\n        with those parameters.\n\n
        \       @param {String} url a URL to process\n\n        @return {Array} an
        Array of `[handler, parameter]` tuples\n      */\n      handleURL: function(url)
        {\n        // Perform a URL-based transition, but don't change\n        //
        the URL afterward, since it already happened.\n        var args = slice.call(arguments);\n
        \       if (url.charAt(0) !== '/') { args[0] = '/' + url; }\n        return
        doTransition(this, args).method(null);\n      },\n\n      /**\n        Hook
        point for updating the URL.\n\n        @param {String} url a URL to update
        to\n      */\n      updateURL: function() {\n        throw new Error(\"updateURL
        is not implemented\");\n      },\n\n      /**\n        Hook point for replacing
        the current URL, i.e. with replaceState\n\n        By default this behaves
        the same as `updateURL`\n\n        @param {String} url a URL to update to\n
        \     */\n      replaceURL: function(url) {\n        this.updateURL(url);\n
        \     },\n\n      /**\n        Transition into the specified named route.\n\n
        \       If necessary, trigger the exit callback on any handlers\n        that
        are no longer represented by the target route.\n\n        @param {String}
        name the name of the route\n      */\n      transitionTo: function(name) {\n
        \       return doTransition(this, arguments);\n      },\n\n      /**\n        Identical
        to `transitionTo` except that the current URL will be replaced\n        if
        possible.\n\n        This method is intended primarily for use with `replaceState`.\n\n
        \       @param {String} name the name of the route\n      */\n      replaceWith:
        function(name) {\n        return doTransition(this, arguments).method('replace');\n
        \     },\n\n      /**\n        @private\n\n        This method takes a handler
        name and a list of contexts and returns\n        a serialized parameter hash
        suitable to pass to `recognizer.generate()`.\n\n        @param {String} handlerName\n
        \       @param {Array[Object]} contexts\n        @return {Object} a serialized
        parameter hash\n      */\n      paramsForHandler: function(handlerName, contexts)
        {\n        return paramsForHandler(this, handlerName, slice.call(arguments,
        1));\n      },\n\n      /**\n        Take a named route and context objects
        and generate a\n        URL.\n\n        @param {String} name the name of the
        route to generate\n          a URL for\n        @param {...Object} objects
        a list of objects to serialize\n\n        @return {String} a URL\n      */\n
        \     generate: function(handlerName) {\n        var params = paramsForHandler(this,
        handlerName, slice.call(arguments, 1));\n        return this.recognizer.generate(handlerName,
        params);\n      },\n\n      isActive: function(handlerName) {\n        var
        contexts = slice.call(arguments, 1);\n\n        var targetHandlerInfos = this.targetHandlerInfos,\n
        \           found = false, names, object, handlerInfo, handlerObj;\n\n        if
        (!targetHandlerInfos) { return false; }\n\n        var recogHandlers = this.recognizer.handlersFor(targetHandlerInfos[targetHandlerInfos.length
        - 1].name);\n\n        for (var i=targetHandlerInfos.length-1; i>=0; i--)
        {\n          handlerInfo = targetHandlerInfos[i];\n          if (handlerInfo.name
        === handlerName) { found = true; }\n\n          if (found) {\n            if
        (contexts.length === 0) { break; }\n\n            if (handlerInfo.isDynamic)
        {\n              object = contexts.pop();\n\n              if (isParam(object))
        {\n                var recogHandler = recogHandlers[i], name = recogHandler.names[0];\n
        \               if (\"\" + object !== this.currentParams[name]) { return false;
        }\n              } else if (handlerInfo.context !== object) {\n                return
        false;\n              }\n            }\n          }\n        }\n\n        return
        contexts.length === 0 && found;\n      },\n\n      trigger: function(name)
        {\n        var args = slice.call(arguments);\n        trigger(this, this.currentHandlerInfos,
        false, args);\n      },\n\n      /**\n        Hook point for logging transition
        status updates.\n\n        @param {String} message The message to log.\n      */\n
        \     log: null\n    };\n\n    /**\n      @private\n\n      Used internally
        for both URL and named transition to determine\n      a shared pivot parent
        route and other data necessary to perform\n      a transition.\n     */\n
        \   function getMatchPoint(router, handlers, objects, inputParams) {\n\n      var
        matchPoint = handlers.length,\n          providedModels = {}, i,\n          currentHandlerInfos
        = router.currentHandlerInfos || [],\n          params = {},\n          oldParams
        = router.currentParams || {},\n          activeTransition = router.activeTransition,\n
        \         handlerParams = {},\n          obj;\n\n      objects = slice.call(objects);\n
        \     merge(params, inputParams);\n\n      for (i = handlers.length - 1; i
        >= 0; i--) {\n        var handlerObj = handlers[i],\n            handlerName
        = handlerObj.handler,\n            oldHandlerInfo = currentHandlerInfos[i],\n
        \           hasChanged = false;\n\n        // Check if handler names have
        changed.\n        if (!oldHandlerInfo || oldHandlerInfo.name !== handlerObj.handler)
        { hasChanged = true; }\n\n        if (handlerObj.isDynamic) {\n          //
        URL transition.\n\n          if (obj = getMatchPointObject(objects, handlerName,
        activeTransition, true, params)) {\n            hasChanged = true;\n            providedModels[handlerName]
        = obj;\n          } else {\n            handlerParams[handlerName] = {};\n
        \           for (var prop in handlerObj.params) {\n              if (!handlerObj.params.hasOwnProperty(prop))
        { continue; }\n              var newParam = handlerObj.params[prop];\n              if
        (oldParams[prop] !== newParam) { hasChanged = true; }\n              handlerParams[handlerName][prop]
        = params[prop] = newParam;\n            }\n          }\n        } else if
        (handlerObj.hasOwnProperty('names')) {\n          // Named transition.\n\n
        \         if (objects.length) { hasChanged = true; }\n\n          if (obj
        = getMatchPointObject(objects, handlerName, activeTransition, handlerObj.names[0],
        params)) {\n            providedModels[handlerName] = obj;\n          } else
        {\n            var names = handlerObj.names;\n            handlerParams[handlerName]
        = {};\n            for (var j = 0, len = names.length; j < len; ++j) {\n              var
        name = names[j];\n              handlerParams[handlerName][name] = params[name]
        = params[name] || oldParams[name];\n            }\n          }\n        }\n\n
        \       if (hasChanged) { matchPoint = i; }\n      }\n\n      if (objects.length
        > 0) {\n        throw new Error(\"More context objects were passed than there
        are dynamic segments for the route: \" + handlers[handlers.length - 1].handler);\n
        \     }\n\n      return { matchPoint: matchPoint, providedModels: providedModels,
        params: params, handlerParams: handlerParams };\n    }\n\n    function getMatchPointObject(objects,
        handlerName, activeTransition, paramName, params) {\n\n      if (objects.length
        && paramName) {\n\n        var object = objects.pop();\n\n        // If provided
        object is string or number, treat as param.\n        if (isParam(object))
        {\n          params[paramName] = object.toString();\n        } else {\n          return
        object;\n        }\n      } else if (activeTransition) {\n        // Use model
        from previous transition attempt, preferably the resolved one.\n        return
        activeTransition.resolvedModels[handlerName] ||\n               (paramName
        && activeTransition.providedModels[handlerName]);\n      }\n    }\n\n    function
        isParam(object) {\n      return (typeof object === \"string\" || object instanceof
        String || !isNaN(object));\n    }\n\n    /**\n      @private\n\n      This
        method takes a handler name and a list of contexts and returns\n      a serialized
        parameter hash suitable to pass to `recognizer.generate()`.\n\n      @param
        {Router} router\n      @param {String} handlerName\n      @param {Array[Object]}
        objects\n      @return {Object} a serialized parameter hash\n    */\n    function
        paramsForHandler(router, handlerName, objects) {\n\n      var handlers = router.recognizer.handlersFor(handlerName),\n
        \         params = {},\n          matchPoint = getMatchPoint(router, handlers,
        objects).matchPoint,\n          object, handlerObj, handler, names, i;\n\n
        \     for (i=0; i<handlers.length; i++) {\n        handlerObj = handlers[i];\n
        \       handler = router.getHandler(handlerObj.handler);\n        names =
        handlerObj.names;\n\n        // If it's a dynamic segment\n        if (names.length)
        {\n          // If we have objects, use them\n          if (i >= matchPoint)
        {\n            object = objects.shift();\n          // Otherwise use existing
        context\n          } else {\n            object = handler.context;\n          }\n\n
        \         // Serialize to generate params\n          merge(params, serialize(handler,
        object, names));\n        }\n      }\n      return params;\n    }\n\n    function
        merge(hash, other) {\n      for (var prop in other) {\n        if (other.hasOwnProperty(prop))
        { hash[prop] = other[prop]; }\n      }\n    }\n\n    /**\n      @private\n
        \   */\n    function createNamedTransition(router, args) {\n      var handlers
        = router.recognizer.handlersFor(args[0]);\n\n      log(router, \"Attempting
        transition to \" + args[0]);\n\n      return performTransition(router, handlers,
        slice.call(args, 1), router.currentParams);\n    }\n\n    /**\n      @private\n
        \   */\n    function createURLTransition(router, url) {\n\n      var results
        = router.recognizer.recognize(url),\n          currentHandlerInfos = router.currentHandlerInfos;\n\n
        \     log(router, \"Attempting URL transition to \" + url);\n\n      if (!results)
        {\n        return errorTransition(router, new Router.UnrecognizedURLError(url));\n
        \     }\n\n      return performTransition(router, results, [], {});\n    }\n\n\n
        \   /**\n      @private\n\n      Takes an Array of `HandlerInfo`s, figures
        out which ones are\n      exiting, entering, or changing contexts, and calls
        the\n      proper handler hooks.\n\n      For example, consider the following
        tree of handlers. Each handler is\n      followed by the URL segment it handles.\n\n
        \     ```\n      |~index (\"/\")\n      | |~posts (\"/posts\")\n      | |
        |-showPost (\"/:id\")\n      | | |-newPost (\"/new\")\n      | | |-editPost
        (\"/edit\")\n      | |~about (\"/about/:id\")\n      ```\n\n      Consider
        the following transitions:\n\n      1. A URL transition to `/posts/1`.\n         1.
        Triggers the `*model` callbacks on the\n            `index`, `posts`, and
        `showPost` handlers\n         2. Triggers the `enter` callback on the same\n
        \        3. Triggers the `setup` callback on the same\n      2. A direct transition
        to `newPost`\n         1. Triggers the `exit` callback on `showPost`\n         2.
        Triggers the `enter` callback on `newPost`\n         3. Triggers the `setup`
        callback on `newPost`\n      3. A direct transition to `about` with a specified\n
        \        context object\n         1. Triggers the `exit` callback on `newPost`\n
        \           and `posts`\n         2. Triggers the `serialize` callback on
        `about`\n         3. Triggers the `enter` callback on `about`\n         4.
        Triggers the `setup` callback on `about`\n\n      @param {Transition} transition\n
        \     @param {Array[HandlerInfo]} handlerInfos\n    */\n    function setupContexts(transition,
        handlerInfos) {\n      var router = transition.router,\n          partition
        = partitionHandlers(router.currentHandlerInfos || [], handlerInfos);\n\n      router.targetHandlerInfos
        = handlerInfos;\n\n      eachHandler(partition.exited, function(handlerInfo)
        {\n        var handler = handlerInfo.handler;\n        delete handler.context;\n
        \       if (handler.exit) { handler.exit(); }\n      });\n\n      var currentHandlerInfos
        = partition.unchanged.slice();\n      router.currentHandlerInfos = currentHandlerInfos;\n\n
        \     eachHandler(partition.updatedContext, function(handlerInfo) {\n        handlerEnteredOrUpdated(transition,
        currentHandlerInfos, handlerInfo, false);\n      });\n\n      eachHandler(partition.entered,
        function(handlerInfo) {\n        handlerEnteredOrUpdated(transition, currentHandlerInfos,
        handlerInfo, true);\n      });\n    }\n\n    /**\n      @private\n\n      Helper
        method used by setupContexts. Handles errors or redirects\n      that may
        happen in enter/setup.\n    */\n    function handlerEnteredOrUpdated(transition,
        currentHandlerInfos, handlerInfo, enter) {\n      var handler = handlerInfo.handler,\n
        \         context = handlerInfo.context;\n\n      try {\n        if (enter
        && handler.enter) { handler.enter(); }\n        checkAbort(transition);\n\n
        \       setContext(handler, context);\n\n        if (handler.setup) { handler.setup(context);
        }\n        checkAbort(transition);\n      } catch(e) {\n        if (!(e instanceof
        Router.TransitionAborted)) {\n          // Trigger the `error` event starting
        from this failed handler.\n          trigger(transition.router, currentHandlerInfos.concat(handlerInfo),
        true, ['error', e, transition]);\n        }\n\n        // Propagate the error
        so that the transition promise will reject.\n        throw e;\n      }\n\n
        \     currentHandlerInfos.push(handlerInfo);\n    }\n\n\n    /**\n      @private\n\n
        \     Iterates over an array of `HandlerInfo`s, passing the handler\n      and
        context into the callback.\n\n      @param {Array[HandlerInfo]} handlerInfos\n
        \     @param {Function(Object, Object)} callback\n    */\n    function eachHandler(handlerInfos,
        callback) {\n      for (var i=0, l=handlerInfos.length; i<l; i++) {\n        callback(handlerInfos[i]);\n
        \     }\n    }\n\n    /**\n      @private\n\n      This function is called
        when transitioning from one URL to\n      another to determine which handlers
        are not longer active,\n      which handlers are newly active, and which handlers
        remain\n      active but have their context changed.\n\n      Take a list
        of old handlers and new handlers and partition\n      them into four buckets:\n\n
        \     * unchanged: the handler was active in both the old and\n        new
        URL, and its context remains the same\n      * updated context: the handler
        was active in both the\n        old and new URL, but its context changed.
        The handler's\n        `setup` method, if any, will be called with the new\n
        \       context.\n      * exited: the handler was active in the old URL, but
        is\n        no longer active.\n      * entered: the handler was not active
        in the old URL, but\n        is now active.\n\n      The PartitionedHandlers
        structure has four fields:\n\n      * `updatedContext`: a list of `HandlerInfo`
        objects that\n        represent handlers that remain active but have a changed\n
        \       context\n      * `entered`: a list of `HandlerInfo` objects that represent\n
        \       handlers that are newly active\n      * `exited`: a list of `HandlerInfo`
        objects that are no\n        longer active.\n      * `unchanged`: a list of
        `HanderInfo` objects that remain active.\n\n      @param {Array[HandlerInfo]}
        oldHandlers a list of the handler\n        information for the previous URL
        (or `[]` if this is the\n        first handled transition)\n      @param {Array[HandlerInfo]}
        newHandlers a list of the handler\n        information for the new URL\n\n
        \     @return {Partition}\n    */\n    function partitionHandlers(oldHandlers,
        newHandlers) {\n      var handlers = {\n            updatedContext: [],\n
        \           exited: [],\n            entered: [],\n            unchanged:
        []\n          };\n\n      var handlerChanged, contextChanged, i, l;\n\n      for
        (i=0, l=newHandlers.length; i<l; i++) {\n        var oldHandler = oldHandlers[i],
        newHandler = newHandlers[i];\n\n        if (!oldHandler || oldHandler.handler
        !== newHandler.handler) {\n          handlerChanged = true;\n        }\n\n
        \       if (handlerChanged) {\n          handlers.entered.push(newHandler);\n
        \         if (oldHandler) { handlers.exited.unshift(oldHandler); }\n        }
        else if (contextChanged || oldHandler.context !== newHandler.context) {\n
        \         contextChanged = true;\n          handlers.updatedContext.push(newHandler);\n
        \       } else {\n          handlers.unchanged.push(oldHandler);\n        }\n
        \     }\n\n      for (i=newHandlers.length, l=oldHandlers.length; i<l; i++)
        {\n        handlers.exited.unshift(oldHandlers[i]);\n      }\n\n      return
        handlers;\n    }\n\n    function trigger(router, handlerInfos, ignoreFailure,
        args) {\n      if (router.triggerEvent) {\n        router.triggerEvent(handlerInfos,
        ignoreFailure, args);\n        return;\n      }\n\n      var name = args.shift();\n\n
        \     if (!handlerInfos) {\n        if (ignoreFailure) { return; }\n        throw
        new Error(\"Could not trigger event '\" + name + \"'. There are no active
        handlers\");\n      }\n\n      var eventWasHandled = false;\n\n      for (var
        i=handlerInfos.length-1; i>=0; i--) {\n        var handlerInfo = handlerInfos[i],\n
        \           handler = handlerInfo.handler;\n\n        if (handler.events &&
        handler.events[name]) {\n          if (handler.events[name].apply(handler,
        args) === true) {\n            eventWasHandled = true;\n          } else {\n
        \           return;\n          }\n        }\n      }\n\n      if (!eventWasHandled
        && !ignoreFailure) {\n        throw new Error(\"Nothing handled the event
        '\" + name + \"'.\");\n      }\n    }\n\n    function setContext(handler,
        context) {\n      handler.context = context;\n      if (handler.contextDidChange)
        { handler.contextDidChange(); }\n    }\n\n    /**\n      @private\n\n      Creates,
        begins, and returns a Transition.\n     */\n    function performTransition(router,
        recogHandlers, providedModelsArray, params, data) {\n\n      var matchPointResults
        = getMatchPoint(router, recogHandlers, providedModelsArray, params),\n          targetName
        = recogHandlers[recogHandlers.length - 1].handler,\n          wasTransitioning
        = false,\n          currentHandlerInfos = router.currentHandlerInfos;\n\n
        \     // Check if there's already a transition underway.\n      if (router.activeTransition)
        {\n        if (transitionsIdentical(router.activeTransition, targetName, providedModelsArray))
        {\n          return router.activeTransition;\n        }\n        router.activeTransition.abort();\n
        \       wasTransitioning = true;\n      }\n\n      var deferred = RSVP.defer(),\n
        \         transition = new Transition(router, deferred.promise);\n\n      transition.targetName
        = targetName;\n      transition.providedModels = matchPointResults.providedModels;\n
        \     transition.providedModelsArray = providedModelsArray;\n      transition.params
        = matchPointResults.params;\n      transition.data = data || {};\n      router.activeTransition
        = transition;\n\n      var handlerInfos = generateHandlerInfos(router, recogHandlers);\n\n
        \     // Fire 'willTransition' event on current handlers, but don't fire it\n
        \     // if a transition was already underway.\n      if (!wasTransitioning)
        {\n        trigger(router, currentHandlerInfos, true, ['willTransition', transition]);\n
        \     }\n\n      log(router, transition.sequence, \"Beginning validation for
        transition to \" + transition.targetName);\n      validateEntry(transition,
        handlerInfos, 0, matchPointResults.matchPoint, matchPointResults.handlerParams)\n
        \                  .then(transitionSuccess, transitionFailure);\n\n      return
        transition;\n\n      function transitionSuccess() {\n        checkAbort(transition);\n\n
        \       try {\n          log(router, transition.sequence, \"Validation succeeded,
        finalizing transition;\");\n\n          // Don't overwrite contexts / update
        URL if this was a noop transition.\n          if (!currentHandlerInfos ||
        !currentHandlerInfos.length ||\n              !router.recognizer.hasRoute(currentHandlerInfos[currentHandlerInfos.length
        - 1].name) ||\n              currentHandlerInfos.length !== matchPointResults.matchPoint)
        {\n            finalizeTransition(transition, handlerInfos);\n          }\n\n
        \         if (router.didTransition) {\n            router.didTransition(handlerInfos);\n
        \         }\n\n          log(router, transition.sequence, \"TRANSITION COMPLETE.\");\n\n
        \         // Resolve with the final handler.\n          deferred.resolve(handlerInfos[handlerInfos.length
        - 1].handler);\n        } catch(e) {\n          deferred.reject(e);\n        }\n\n
        \       // Don't nullify if another transition is underway (meaning\n        //
        there was a transition initiated with enter/setup).\n        if (!transition.isAborted)
        {\n          router.activeTransition = null;\n        }\n      }\n\n      function
        transitionFailure(reason) {\n        deferred.reject(reason);\n      }\n    }\n\n
        \   /**\n      @private\n\n      Accepts handlers in Recognizer format, either
        returned from\n      recognize() or handlersFor(), and returns unified\n      `HandlerInfo`s.\n
        \    */\n    function generateHandlerInfos(router, recogHandlers) {\n      var
        handlerInfos = [];\n      for (var i = 0, len = recogHandlers.length; i <
        len; ++i) {\n        var handlerObj = recogHandlers[i],\n            isDynamic
        = handlerObj.isDynamic || (handlerObj.names && handlerObj.names.length);\n\n
        \       handlerInfos.push({\n          isDynamic: !!isDynamic,\n          name:
        handlerObj.handler,\n          handler: router.getHandler(handlerObj.handler)\n
        \       });\n      }\n      return handlerInfos;\n    }\n\n    /**\n      @private\n
        \    */\n    function transitionsIdentical(oldTransition, targetName, providedModelsArray)
        {\n\n      if (oldTransition.targetName !== targetName) { return false; }\n\n
        \     var oldModels = oldTransition.providedModelsArray;\n      if (oldModels.length
        !== providedModelsArray.length) { return false; }\n\n      for (var i = 0,
        len = oldModels.length; i < len; ++i) {\n        if (oldModels[i] !== providedModelsArray[i])
        { return false; }\n      }\n      return true;\n    }\n\n    /**\n      @private\n\n
        \     Updates the URL (if necessary) and calls `setupContexts`\n      to update
        the router's array of `currentHandlerInfos`.\n     */\n    function finalizeTransition(transition,
        handlerInfos) {\n\n      var router = transition.router,\n          seq =
        transition.sequence,\n          handlerName = handlerInfos[handlerInfos.length
        - 1].name;\n\n      // Collect params for URL.\n      var objects = [], providedModels
        = transition.providedModelsArray.slice();\n      for (var i = handlerInfos.length
        - 1; i>=0; --i) {\n        var handlerInfo = handlerInfos[i];\n        if
        (handlerInfo.isDynamic) {\n          var providedModel = providedModels.pop();\n
        \         objects.unshift(isParam(providedModel) ? providedModel.toString()
        : handlerInfo.context);\n        }\n      }\n\n      var params = paramsForHandler(router,
        handlerName, objects);\n\n      router.currentParams = params;\n\n      var
        urlMethod = transition.urlMethod;\n      if (urlMethod) {\n        var url
        = router.recognizer.generate(handlerName, params);\n\n        if (urlMethod
        === 'replace') {\n          router.replaceURL(url);\n        } else {\n          //
        Assume everything else is just a URL update for now.\n          router.updateURL(url);\n
        \       }\n      }\n\n      setupContexts(transition, handlerInfos);\n    }\n\n
        \   /**\n      @private\n\n      Internal function used to construct the chain
        of promises used\n      to validate a transition. Wraps calls to `beforeModel`,
        `model`,\n      and `afterModel` in promises, and checks for redirects/aborts\n
        \     between each.\n     */\n    function validateEntry(transition, handlerInfos,
        index, matchPoint, handlerParams) {\n\n      if (index === handlerInfos.length)
        {\n        // No more contexts to resolve.\n        return RSVP.resolve(transition.resolvedModels);\n
        \     }\n\n      var router = transition.router,\n          handlerInfo =
        handlerInfos[index],\n          handler = handlerInfo.handler,\n          handlerName
        = handlerInfo.name,\n          seq = transition.sequence;\n\n      if (index
        < matchPoint) {\n        log(router, seq, handlerName + \": using context
        from already-active handler\");\n\n        // We're before the match point,
        so don't run any hooks,\n        // just use the already resolved context
        from the handler.\n        transition.resolvedModels[handlerInfo.name] =\n
        \         transition.providedModels[handlerInfo.name] ||\n          handlerInfo.handler.context;\n
        \       return proceed();\n      }\n\n      return RSVP.resolve().then(handleAbort)\n
        \                          .then(beforeModel)\n                           .then(handleAbort)\n
        \                          .then(model)\n                           .then(handleAbort)\n
        \                          .then(afterModel)\n                           .then(handleAbort)\n
        \                          .then(null, handleError)\n                           .then(proceed);\n\n
        \     function handleAbort(result) {\n        if (transition.isAborted) {\n
        \         log(transition.router, transition.sequence, \"detected abort.\");\n
        \         return RSVP.reject(new Router.TransitionAborted());\n        }\n\n
        \       return result;\n      }\n\n      function handleError(reason) {\n
        \       if (reason instanceof Router.TransitionAborted) {\n          // if
        the transition was aborted and *no additional* error was thrown,\n          //
        reject with the Router.TransitionAborted instance\n          return RSVP.reject(reason);\n
        \       }\n\n        // otherwise, we're here because of a different error\n
        \       transition.abort();\n\n        log(router, seq, handlerName + \":
        handling error: \" + reason);\n\n        // An error was thrown / promise
        rejected, so fire an\n        // `error` event from this handler info up to
        root.\n        trigger(router, handlerInfos.slice(0, index + 1), true, ['error',
        reason, transition]);\n\n        // Propagate the original error.\n        return
        RSVP.reject(reason);\n      }\n\n      function beforeModel() {\n\n        log(router,
        seq, handlerName + \": calling beforeModel hook\");\n\n        var p = handler.beforeModel
        && handler.beforeModel(transition);\n        return (p instanceof Transition)
        ? null : p;\n      }\n\n      function model() {\n        log(router, seq,
        handlerName + \": resolving model\");\n\n        var p = getModel(handlerInfo,
        transition, handlerParams[handlerName], index >= matchPoint);\n        return
        (p instanceof Transition) ? null : p;\n      }\n\n      function afterModel(context)
        {\n\n        log(router, seq, handlerName + \": calling afterModel hook\");\n\n
        \       // Pass the context and resolved parent contexts to afterModel, but
        we don't\n        // want to use the value returned from `afterModel` in any
        way, but rather\n        // always resolve with the original `context` object.\n\n
        \       transition.resolvedModels[handlerInfo.name] = context;\n\n        var
        p = handler.afterModel && handler.afterModel(context, transition);\n        return
        (p instanceof Transition) ? null : p;\n      }\n\n      function proceed()
        {\n        log(router, seq, handlerName + \": validation succeeded, proceeding\");\n\n
        \       handlerInfo.context = transition.resolvedModels[handlerInfo.name];\n
        \       return validateEntry(transition, handlerInfos, index + 1, matchPoint,
        handlerParams);\n      }\n    }\n\n    /**\n      @private\n\n      Throws
        a TransitionAborted if the provided transition has been aborted.\n     */\n
        \   function checkAbort(transition) {\n      if (transition.isAborted) {\n
        \       log(transition.router, transition.sequence, \"detected abort.\");\n
        \       throw new Router.TransitionAborted();\n      }\n    }\n\n    /**\n
        \     @private\n\n      Encapsulates the logic for whether to call `model`
        on a route,\n      or use one of the models provided to `transitionTo`.\n
        \    */\n    function getModel(handlerInfo, transition, handlerParams, needsUpdate)
        {\n\n      var handler = handlerInfo.handler,\n          handlerName = handlerInfo.name;\n\n
        \     if (!needsUpdate && handler.hasOwnProperty('context')) {\n        return
        handler.context;\n      }\n\n      if (transition.providedModels.hasOwnProperty(handlerName))
        {\n        var providedModel = transition.providedModels[handlerName];\n        return
        typeof providedModel === 'function' ? providedModel() : providedModel;\n      }\n\n
        \     return handler.model && handler.model(handlerParams || {}, transition);\n
        \   }\n\n    /**\n      @private\n     */\n    function log(router, sequence,
        msg) {\n\n      if (!router.log) { return; }\n\n      if (arguments.length
        === 3) {\n        router.log(\"Transition #\" + sequence + \": \" + msg);\n
        \     } else {\n        msg = sequence;\n        router.log(msg);\n      }\n
        \   }\n\n    /**\n      @private\n\n      Begins and returns a Transition
        based on the provided\n      arguments. Accepts arguments in the form of both
        URL\n      transitions and named transitions.\n\n      @param {Router} router\n
        \     @param {Array[Object]} args arguments passed to transitionTo,\n        replaceWith,
        or handleURL\n    */\n    function doTransition(router, args) {\n      //
        Normalize blank transitions to root URL transitions.\n      var name = args[0]
        || '/';\n\n      if (name.charAt(0) === '/') {\n        return createURLTransition(router,
        name);\n      } else {\n        return createNamedTransition(router, args);\n
        \     }\n    }\n\n    /**\n      @private\n\n      Serializes a handler using
        its custom `serialize` method or\n      by a default that looks up the expected
        property name from\n      the dynamic segment.\n\n      @param {Object} handler
        a router handler\n      @param {Object} model the model to be serialized for
        this handler\n      @param {Array[Object]} names the names array attached
        to an\n        handler object returned from router.recognizer.handlersFor()\n
        \   */\n    function serialize(handler, model, names) {\n\n      var object
        = {};\n      if (isParam(model)) {\n        object[names[0]] = model;\n        return
        object;\n      }\n\n      // Use custom serialize if it exists.\n      if
        (handler.serialize) {\n        return handler.serialize(model, names);\n      }\n\n
        \     if (names.length !== 1) { return; }\n\n      var name = names[0];\n\n
        \     if (/_id$/.test(name)) {\n        object[name] = model.id;\n      }
        else {\n        object[name] = model;\n      }\n      return object;\n    }\n\n\n
        \   return Router;\n  });\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule
        ember-routing\n*/\n\nfunction DSL(name) {\n  this.parent = name;\n  this.matches
        = [];\n}\n\nDSL.prototype = {\n  resource: function(name, options, callback)
        {\n    if (arguments.length === 2 && typeof options === 'function') {\n      callback
        = options;\n      options = {};\n    }\n\n    if (arguments.length === 1)
        {\n      options = {};\n    }\n\n    if (typeof options.path !== 'string')
        {\n      options.path = \"/\" + name;\n    }\n\n    if (callback) {\n      var
        dsl = new DSL(name);\n      callback.call(dsl);\n      this.push(options.path,
        name, dsl.generate());\n    } else {\n      this.push(options.path, name);\n
        \   }\n  },\n\n  push: function(url, name, callback) {\n    var parts = name.split('.');\n
        \   if (url === \"\" || url === \"/\" || parts[parts.length-1] === \"index\")
        { this.explicitIndex = true; }\n\n    this.matches.push([url, name, callback]);\n
        \ },\n\n  route: function(name, options) {\n    Ember.assert(\"You must use
        `this.resource` to nest\", typeof options !== 'function');\n\n    options
        = options || {};\n\n    if (typeof options.path !== 'string') {\n      options.path
        = \"/\" + name;\n    }\n\n    if (this.parent && this.parent !== 'application')
        {\n      name = this.parent + \".\" + name;\n    }\n\n    this.push(options.path,
        name);\n  },\n\n  generate: function() {\n    var dslMatches = this.matches;\n\n
        \   if (!this.explicitIndex) {\n      this.route(\"index\", { path: \"/\"
        });\n    }\n\n    return function(match) {\n      for (var i=0, l=dslMatches.length;
        i<l; i++) {\n        var dslMatch = dslMatches[i];\n        match(dslMatch[0]).to(dslMatch[1],
        dslMatch[2]);\n      }\n    };\n  }\n};\n\nDSL.map = function(callback) {\n
        \ var dsl = new DSL();\n  callback.call(dsl);\n  return dsl;\n};\n\nEmber.RouterDSL
        = DSL;\n\n})();\n\n\n\n(function() {\nvar get = Ember.get;\n\n/**\n@module
        ember\n@submodule ember-routing\n*/\n\n/**\n  \n  Finds a controller instance.\n\n
        \ @for Ember\n  @method controllerFor\n  @private\n*/\nEmber.controllerFor
        = function(container, controllerName, lookupOptions) {\n  return container.lookup('controller:'
        + controllerName, lookupOptions);\n};\n\n/**\n  Generates a controller automatically
        if none was provided.\n  The type of generated controller depends on the context.\n
        \ You can customize your generated controllers by defining\n  `App.ObjectController`
        and `App.ArrayController`\n  \n  @for Ember\n  @method generateController\n
        \ @private\n*/\nEmber.generateController = function(container, controllerName,
        context) {\n  var ControllerFactory, fullName, instance, name, factoryName,
        controllerType;\n\n  if (context && Ember.isArray(context)) {\n    controllerType
        = 'array';\n  } else if (context) {\n    controllerType = 'object';\n  } else
        {\n    controllerType = 'basic';\n  }\n\n  factoryName = 'controller:' + controllerType;\n\n
        \ ControllerFactory = container.lookupFactory(factoryName).extend({\n    isGenerated:
        true,\n    toString: function() {\n      return \"(generated \" + controllerName
        + \" controller)\";\n    }\n  });\n\n  fullName = 'controller:' + controllerName;\n\n
        \ container.register(fullName, ControllerFactory);\n\n  instance = container.lookup(fullName);\n\n
        \ if (get(instance, 'namespace.LOG_ACTIVE_GENERATION')) {\n    Ember.Logger.info(\"generated
        -> \" + fullName, { fullName: fullName });\n  }\n\n  return instance;\n};\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-routing\n*/\n\nvar Router = requireModule(\"router\");\nvar
        get = Ember.get, set = Ember.set;\nvar defineProperty = Ember.defineProperty;\n\nvar
        DefaultView = Ember._MetamorphView;\n/**\n  The `Ember.Router` class manages
        the application state and URLs. Refer to\n  the [routing guide](http://emberjs.com/guides/routing/)
        for documentation.\n\n  @class Router\n  @namespace Ember\n  @extends Ember.Object\n*/\nEmber.Router
        = Ember.Object.extend({\n  location: 'hash',\n\n  init: function() {\n    this.router
        = this.constructor.router || this.constructor.map(Ember.K);\n    this._activeViews
        = {};\n    this._setupLocation();\n  },\n\n  url: Ember.computed(function()
        {\n    return get(this, 'location').getURL();\n  }),\n\n  startRouting: function()
        {\n    this.router = this.router || this.constructor.map(Ember.K);\n\n    var
        router = this.router,\n        location = get(this, 'location'),\n        container
        = this.container,\n        self = this;\n\n    this._setupRouter(router, location);\n\n
        \   container.register('view:default', DefaultView);\n    container.register('view:toplevel',
        Ember.View.extend());\n\n    location.onUpdateURL(function(url) {\n      self.handleURL(url);\n
        \   });\n\n    this.handleURL(location.getURL());\n  },\n\n  didTransition:
        function(infos) {\n    var appController = this.container.lookup('controller:application'),\n
        \       path = Ember.Router._routePath(infos);\n\n    if (!('currentPath'
        in appController)) { defineProperty(appController, 'currentPath'); }\n    set(appController,
        'currentPath', path);\n\n    if (!('currentRouteName' in appController)) {
        defineProperty(appController, 'currentRouteName'); }\n    set(appController,
        'currentRouteName', infos[infos.length - 1].name);\n\n    this.notifyPropertyChange('url');\n\n
        \   if (get(this, 'namespace').LOG_TRANSITIONS) {\n      Ember.Logger.log(\"Transitioned
        into '\" + path + \"'\");\n    }\n  },\n\n  handleURL: function(url) {\n    return
        this._doTransition('handleURL', [url]);\n  },\n\n  transitionTo: function()
        {\n    return this._doTransition('transitionTo', arguments);\n  },\n\n  replaceWith:
        function() {\n    return this._doTransition('replaceWith', arguments);\n  },\n\n
        \ generate: function() {\n    var url = this.router.generate.apply(this.router,
        arguments);\n    return this.location.formatURL(url);\n  },\n\n  isActive:
        function(routeName) {\n    var router = this.router;\n    return router.isActive.apply(router,
        arguments);\n  },\n\n  send: function(name, context) {\n    this.router.trigger.apply(this.router,
        arguments);\n  },\n\n  hasRoute: function(route) {\n    return this.router.hasRoute(route);\n
        \ },\n\n  /**\n    @private\n\n    Resets the state of the router by clearing
        the current route\n    handlers and deactivating them.\n\n    @method reset\n
        \  */\n  reset: function() {\n    this.router.reset();\n  },\n\n  _lookupActiveView:
        function(templateName) {\n    var active = this._activeViews[templateName];\n
        \   return active && active[0];\n  },\n\n  _connectActiveView: function(templateName,
        view) {\n    var existing = this._activeViews[templateName];\n\n    if (existing)
        {\n      existing[0].off('willDestroyElement', this, existing[1]);\n    }\n\n
        \   var disconnect = function() {\n      delete this._activeViews[templateName];\n
        \   };\n\n    this._activeViews[templateName] = [view, disconnect];\n    view.one('willDestroyElement',
        this, disconnect);\n  },\n\n  _setupLocation: function() {\n    var location
        = get(this, 'location'),\n        rootURL = get(this, 'rootURL'),\n        options
        = {};\n\n    if (typeof rootURL === 'string') {\n      options.rootURL = rootURL;\n
        \   }\n\n    if ('string' === typeof location) {\n      options.implementation
        = location;\n      location = set(this, 'location', Ember.Location.create(options));\n
        \   }\n  },\n\n  _getHandlerFunction: function() {\n    var seen = {}, container
        = this.container,\n        DefaultRoute = container.lookupFactory('route:basic'),\n
        \       self = this;\n\n    return function(name) {\n      var routeName =
        'route:' + name,\n          handler = container.lookup(routeName);\n\n      if
        (seen[name]) { return handler; }\n\n      seen[name] = true;\n\n      if (!handler)
        {\n        if (name === 'loading') { return {}; }\n\n        container.register(routeName,
        DefaultRoute.extend());\n        handler = container.lookup(routeName);\n\n
        \       if (get(self, 'namespace.LOG_ACTIVE_GENERATION')) {\n          Ember.Logger.info(\"generated
        -> \" + routeName, { fullName: routeName });\n        }\n      }\n\n      if
        (name === 'application') {\n        // Inject default `error` handler.\n        //
        Note: `events` is deprecated, but we'll let the\n        // deprecation warnings
        be handled at event-handling time rather\n        // than duplicating that
        logic here.\n        var actions = handler._actions || handler.events;\n        if
        (!actions) { actions = handler._actions = {}; }\n        actions.error = actions.error
        || Ember.Router._defaultErrorHandler;\n      }\n\n      handler.routeName
        = name;\n      return handler;\n    };\n  },\n\n  _setupRouter: function(router,
        location) {\n    var lastURL, emberRouter = this;\n\n    router.getHandler
        = this._getHandlerFunction();\n\n    var doUpdateURL = function() {\n      location.setURL(lastURL);\n
        \   };\n\n    router.updateURL = function(path) {\n      lastURL = path;\n
        \     Ember.run.once(doUpdateURL);\n    };\n\n    if (location.replaceURL)
        {\n      var doReplaceURL = function() {\n        location.replaceURL(lastURL);\n
        \     };\n\n      router.replaceURL = function(path) {\n        lastURL =
        path;\n        Ember.run.once(doReplaceURL);\n      };\n    }\n\n    router.didTransition
        = function(infos) {\n      emberRouter.didTransition(infos);\n    };\n  },\n\n
        \ _doTransition: function(method, args) {\n    // Normalize blank route to
        root URL.\n    args = [].slice.call(args);\n    args[0] = args[0] || '/';\n\n
        \   var passedName = args[0], name, self = this;\n\n    if (passedName.charAt(0)
        === '/') {\n      name = passedName;\n    } else {\n\n      if (!this.router.hasRoute(passedName))
        {\n        name = args[0] = passedName + '.index';\n      } else {\n        name
        = passedName;\n      }\n\n      Ember.assert(\"The route \" + passedName +
        \" was not found\", this.router.hasRoute(name));\n    }\n\n    var transitionPromise
        = this.router[method].apply(this.router, args);\n\n    // Don't schedule loading
        state entry if user has already aborted the transition.\n    if (this.router.activeTransition)
        {\n      this._scheduleLoadingStateEntry();\n    }\n\n    transitionPromise.then(function(route)
        {\n      self._transitionCompleted(route);\n    }, function(error) {\n      if
        (error.name === \"UnrecognizedURLError\") {\n        Ember.assert(\"The URL
        '\" + error.message + \"' did not match any routes in your application\");\n
        \     }\n    });\n\n    // We want to return the configurable promise object\n
        \   // so that callers of this function can use `.method()` on it,\n    //
        which obviously doesn't exist for normal RSVP promises.\n    return transitionPromise;\n
        \ },\n\n  _scheduleLoadingStateEntry: function() {\n    if (this._loadingStateActive)
        { return; }\n    this._shouldEnterLoadingState = true;\n    Ember.run.scheduleOnce('routerTransitions',
        this, this._enterLoadingState);\n  },\n\n  _enterLoadingState: function()
        {\n    if (this._loadingStateActive || !this._shouldEnterLoadingState) { return;
        }\n\n    var loadingRoute = this.router.getHandler('loading');\n    if (loadingRoute)
        {\n      if (loadingRoute.enter) { loadingRoute.enter(); }\n      if (loadingRoute.setup)
        { loadingRoute.setup(); }\n      this._loadingStateActive = true;\n    }\n
        \ },\n\n  _exitLoadingState: function () {\n    this._shouldEnterLoadingState
        = false;\n    if (!this._loadingStateActive) { return; }\n\n    var loadingRoute
        = this.router.getHandler('loading');\n    if (loadingRoute && loadingRoute.exit)
        { loadingRoute.exit(); }\n    this._loadingStateActive = false;\n  },\n\n
        \ _transitionCompleted: function(route) {\n    this.notifyPropertyChange('url');\n
        \   this._exitLoadingState();\n  }\n});\n\nfunction triggerEvent(handlerInfos,
        ignoreFailure, args) {\n  var name = args.shift();\n\n  if (!handlerInfos)
        {\n    if (ignoreFailure) { return; }\n    throw new Ember.Error(\"Could not
        trigger event '\" + name + \"'. There are no active handlers\");\n  }\n\n
        \ var eventWasHandled = false;\n\n  for (var i=handlerInfos.length-1; i>=0;
        i--) {\n    var handlerInfo = handlerInfos[i],\n        handler = handlerInfo.handler;\n\n
        \   if (handler._actions && handler._actions[name]) {\n      if (handler._actions[name].apply(handler,
        args) === true) {\n        eventWasHandled = true;\n      } else {\n        return;\n
        \     }\n    } else if (handler.events && handler.events[name]) {\n      Ember.deprecate('Action
        handlers contained in an `events` object are deprecated in favor of putting
        them in an `actions` object (' + name + ' on ' + handler + ')', false);\n
        \     if (handler.events[name].apply(handler, args) === true) {\n        eventWasHandled
        = true;\n      } else {\n        return;\n      }\n    }\n  }\n\n  if (!eventWasHandled
        && !ignoreFailure) {\n    throw new Ember.Error(\"Nothing handled the event
        '\" + name + \"'.\");\n  }\n}\n\nEmber.Router.reopenClass({\n  router: null,\n
        \ map: function(callback) {\n    var router = this.router;\n    if (!router)
        {\n      router = new Router();\n      router.callbacks = [];\n      router.triggerEvent
        = triggerEvent;\n      this.reopenClass({ router: router });\n    }\n\n    if
        (get(this, 'namespace.LOG_TRANSITIONS_INTERNAL')) {\n      router.log = Ember.Logger.debug;\n
        \   }\n\n    var dsl = Ember.RouterDSL.map(function() {\n      this.resource('application',
        { path: \"/\" }, function() {\n        for (var i=0; i < router.callbacks.length;
        i++) {\n          router.callbacks[i].call(this);\n        }\n        callback.call(this);\n
        \     });\n    });\n\n    router.callbacks.push(callback);\n    router.map(dsl.generate());\n
        \   return router;\n  },\n\n  _defaultErrorHandler: function(error, transition)
        {\n    Ember.Logger.error('Error while loading route:', error);\n\n    //
        Using setTimeout allows us to escape from the Promise's try/catch block\n
        \   setTimeout(function() { throw error; });\n  },\n\n  _routePath: function(handlerInfos)
        {\n    var path = [];\n\n    for (var i=1, l=handlerInfos.length; i<l; i++)
        {\n      var name = handlerInfos[i].name,\n          nameParts = name.split(\".\");\n\n
        \     path.push(nameParts[nameParts.length - 1]);\n    }\n\n    return path.join(\".\");\n
        \ }\n});\n\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule ember-routing\n*/\n\nvar
        get = Ember.get, set = Ember.set,\n    getProperties = Ember.getProperties,\n
        \   classify = Ember.String.classify,\n    fmt = Ember.String.fmt,\n    a_forEach
        = Ember.EnumerableUtils.forEach,\n    a_replace = Ember.EnumerableUtils.replace;\n\n/**\n
        \ The `Ember.Route` class is used to define individual routes. Refer to\n
        \ the [routing guide](http://emberjs.com/guides/routing/) for documentation.\n\n
        \ @class Route\n  @namespace Ember\n  @extends Ember.Object\n*/\nEmber.Route
        = Ember.Object.extend(Ember.ActionHandler, {\n  /**\n    @private\n\n    @method
        exit\n  */\n  exit: function() {\n    this.deactivate();\n    this.teardownViews();\n
        \ },\n\n  /**\n    @private\n\n    @method enter\n  */\n  enter: function()
        {\n    this.activate();\n  },\n\n  /**\n    The collection of functions, keyed
        by name, available on this route as\n    action targets.\n\n    These functions
        will be invoked when a matching `{{action}}` is triggered\n    from within
        a template and the application's current route is this route.\n\n    Actions
        can also be invoked from other parts of your application via `Route#send`\n
        \   or `Controller#send`.\n\n    The `actions` hash will inherit action handlers
        from\n    the `actions` hash defined on extended Route parent classes\n    or
        mixins rather than just replace the entire hash, e.g.:\n\n    ```js\n    App.CanDisplayBanner
        = Ember.Mixin.create({\n      actions: {\n        displayBanner: function(msg)
        {\n          // ...\n        }\n      }\n    });\n\n    App.WelcomeRoute =
        Ember.Route.extend(App.CanDisplayBanner, {\n      actions: {\n        playMusic:
        function() {\n          // ...\n        }\n      }\n    });\n\n    // `WelcomeRoute`,
        when active, will be able to respond\n    // to both actions, since the actions
        hash is merged rather\n    // then replaced when extending mixins / parent
        classes.\n    this.send('displayBanner');\n    this.send('playMusic');\n    ```\n\n
        \   Within a route's action handler, the value of the `this` context\n    is
        the Route object:\n\n    ```js\n    App.SongRoute = Ember.Route.extend({\n
        \     actions: {\n        myAction: function() {\n          this.controllerFor(\"song\");\n
        \         this.transitionTo(\"other.route\");\n          ...\n        }\n
        \     }\n    });\n    ```\n\n    It is also possible to call `this._super()`
        from within an\n    action handler if it overrides a handler defined on a
        parent\n    class or mixin:\n\n    Take for example the following routes:\n\n
        \   ```js\n    App.DebugRoute = Ember.Mixin.create({\n      actions: {\n        debugRouteInformation:
        function() {\n          console.debug(\"trololo\");\n        }\n      }\n
        \   });\n\n    App.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute,
        {\n      actions: {\n        debugRouteInformation: function() {\n          //
        also call the debugRouteInformation of mixed in App.DebugRoute\n          this._super();\n\n
        \         // show additional annoyance\n          window.alert(...);\n        }\n
        \     }\n    });\n    ```\n\n    ## Bubbling\n\n    By default, an action
        will stop bubbling once a handler defined\n    on the `actions` hash handles
        it. To continue bubbling the action,\n    you must return `true` from the
        handler:\n\n    ```js\n    App.Router.map(function() {\n      this.resource(\"album\",
        function() {\n        this.route(\"song\");\n      });\n    });\n\n    App.AlbumRoute
        = Ember.Route.extend({\n      actions: {\n        startPlaying: function()
        {\n        }\n      }\n    });\n\n    App.AlbumSongRoute = Ember.Route.extend({\n
        \     actions: {\n        startPlaying: function() {\n          // ...\n\n
        \         if (actionShouldAlsoBeTriggeredOnParentRoute) {\n            return
        true;\n          }\n        }\n      }\n    });\n    ```\n\n    ## Built-in
        actions\n\n    There are a few built-in actions pertaining to transitions
        that you\n    can use to customize transition behavior: `willTransition` and\n
        \   `error`.\n\n    ### `willTransition`\n\n    The `willTransition` action
        is fired at the beginning of any\n    attempted transition with a `Transition`
        object as the sole\n    argument. This action can be used for aborting, redirecting,\n
        \   or decorating the transition from the currently active routes.\n\n    A
        good example is preventing navigation when a form is\n    half-filled out:\n\n
        \   ```js\n    App.ContactFormRoute = Ember.Route.extend({\n      actions:
        {\n        willTransition: function(transition) {\n          if (this.controller.get('userHasEnteredData'))
        {\n            this.controller.displayNavigationConfirm();\n            transition.abort();\n
        \         }\n        }\n      }\n    });\n    ```\n\n    You can also redirect
        elsewhere by calling\n    `this.transitionTo('elsewhere')` from within `willTransition`.\n
        \   Note that `willTransition` will not be fired for the\n    redirecting
        `transitionTo`, since `willTransition` doesn't\n    fire when there is already
        a transition underway. If you want\n    subsequent `willTransition` actions
        to fire for the redirecting\n    transition, you must first explicitly call\n
        \   `transition.abort()`.\n\n    ### `error`\n\n    When attempting to transition
        into a route, any of the hooks\n    may throw an error, or return a promise
        that rejects, at which\n    point an `error` action will be fired on the partially-entered\n
        \   routes, allowing for per-route error handling logic, or shared\n    error
        handling logic defined on a parent route.\n\n    Here is an example of an
        error handler that will be invoked\n    for rejected promises / thrown errors
        from the various hooks\n    on the route, as well as any unhandled errors
        from child\n    routes:\n\n    ```js\n    App.AdminRoute = Ember.Route.extend({\n
        \     beforeModel: function() {\n        throw \"bad things!\";\n        //
        ...or, equivalently:\n        return Ember.RSVP.reject(\"bad things!\");\n
        \     },\n\n      actions: {\n        error: function(error, transition) {\n
        \         // Assuming we got here due to the error in `beforeModel`,\n          //
        we can expect that error === \"bad things!\",\n          // but a promise
        model rejecting would also\n          // call this hook, as would any errors
        encountered\n          // in `afterModel`.\n\n          // The `error` hook
        is also provided the failed\n          // `transition`, which can be stored
        and later\n          // `.retry()`d if desired.\n\n          this.transitionTo('login');\n
        \       }\n      }\n    });\n    ```\n\n    `error` actions that bubble up
        all the way to `ApplicationRoute`\n    will fire a default error handler that
        logs the error. You can\n    specify your own global default error handler
        by overriding the\n    `error` handler on `ApplicationRoute`:\n\n    ```js\n
        \   App.ApplicationRoute = Ember.Route.extend({\n      actions: {\n        error:
        function(error, transition) {\n          this.controllerFor('banner').displayError(error.message);\n
        \       }\n      }\n    });\n    ```\n\n    @see {Ember.Route#send}\n    @see
        {Handlebars.helpers.action}\n\n    @property actions\n    @type Hash\n    @default
        null\n  */\n  actions: null,\n\n  /**\n    @deprecated\n\n    Please use `actions`
        instead.\n    @method events\n  */\n  events: null,\n\n  mergedProperties:
        ['events'],\n\n  /**\n    This hook is executed when the router completely
        exits this route. It is\n    not executed when the model for the route changes.\n\n
        \   @method deactivate\n  */\n  deactivate: Ember.K,\n\n  /**\n    This hook
        is executed when the router enters the route for the first time.\n    It is
        not executed when the model for the route changes.\n\n    @method activate\n
        \ */\n  activate: Ember.K,\n\n  /**\n    Transition into another route. Optionally
        supply model(s) for the\n    route in question. If multiple models are supplied
        they will be applied\n    last to first recursively up the resource tree (see
        Multiple Models Example\n    below). The model(s) will be serialized into
        the URL using the appropriate \n    route's `serialize` hook. See also 'replaceWith'.\n\n
        \   Simple Transition Example\n\n    ```javascript\n    App.Router.map(function()
        {\n      this.route(\"index\");\n      this.route(\"secret\");\n      this.route(\"fourOhFour\",
        { path: \"*:\"});\n    });\n\n    App.IndexRoute = Ember.Route.extend({\n
        \     actions: {\n        moveToSecret: function(context){\n          if (authorized()){\n
        \           this.transitionTo('secret', context);\n          }\n            this.transitionTo('fourOhFour');\n
        \       }\n      }\n    });\n    ```\n\n    Multiple Models Example\n\n    ```javascript\n
        \   App.Router.map(function() {\n      this.route(\"index\");\n      this.resource('breakfast',
        {path:':breakfastId'}, function(){\n        this.resource('cereal', {path:
        ':cerealId'});\n      });\n    });\n\n    App.IndexRoute = Ember.Route.extend({\n
        \     actions: {\n        moveToChocolateCereal: function(){\n          var
        cereal = { cerealId: \"ChocolateYumminess\"},\n              breakfast = {breakfastId:
        \"CerealAndMilk\"};\n\n          this.transitionTo('cereal', breakfast, cereal);\n
        \       }\n      }\n    });\n\n    @method transitionTo\n    @param {String}
        name the name of the route\n    @param {...Object} models the model(s) to
        be used while transitioning\n    to the route.\n  */\n  transitionTo: function(name,
        context) {\n    var router = this.router;\n    return router.transitionTo.apply(router,
        arguments);\n  },\n\n  /**\n    Transition into another route while replacing
        the current URL, if possible.\n    This will replace the current history entry
        instead of adding a new one. \n    Beside that, it is identical to `transitionTo`
        in all other respects. See\n    'transitionTo' for additional information
        regarding multiple models.\n\n    Example\n\n    ```javascript\n    App.Router.map(function()
        {\n      this.route(\"index\");\n      this.route(\"secret\");\n    });\n\n
        \   App.SecretRoute = Ember.Route.extend({\n      afterModel: function() {\n
        \       if (!authorized()){\n          this.replaceWith('index');\n        }\n
        \     }\n    });\n    ```\n\n    @method replaceWith\n    @param {String}
        name the name of the route\n    @param {...Object} models the model(s) to
        be used while transitioning\n    to the route.\n  */\n  replaceWith: function()
        {\n    var router = this.router;\n    return this.router.replaceWith.apply(this.router,
        arguments);\n  },\n\n  /**\n    Sends an action to the router, which will
        delegate it to the currently\n    active route hierarchy per the bubbling
        rules explained under `actions`.\n\n    Example\n\n    ```javascript\n    App.Router.map(function()
        {\n      this.route(\"index\");\n    });\n\n    App.ApplicationRoute = Ember.Route.extend({\n
        \     actions: {\n        track: function(arg) {\n          console.log(arg,
        'was clicked');\n        }\n      }\n    });\n\n    App.IndexRoute = Ember.Route.extend({\n
        \     actions: {\n        trackIfDebug: function(arg) {\n          if (debug)
        {\n            this.send('track', arg);\n          }\n        }\n      }\n
        \   });\n    ```\n\n    @method send\n    @param {String} name the name of
        the action to trigger\n    @param {...*} args\n  */\n  send: function() {\n
        \   return this.router.send.apply(this.router, arguments);\n  },\n\n  /**\n
        \   @private\n\n    This hook is the entry point for router.js\n\n    @method
        setup\n  */\n  setup: function(context) {\n    var controllerName = this.controllerName
        || this.routeName,\n        controller = this.controllerFor(controllerName,
        true);\n    if (!controller) {\n      controller =  this.generateController(controllerName,
        context);\n    }\n\n    // Assign the route's controller so that it can more
        easily be\n    // referenced in action handlers\n    this.controller = controller;\n\n
        \   if (this.setupControllers) {\n      Ember.deprecate(\"Ember.Route.setupControllers
        is deprecated. Please use Ember.Route.setupController(controller, model) instead.\");\n
        \     this.setupControllers(controller, context);\n    } else {\n      this.setupController(controller,
        context);\n    }\n\n    if (this.renderTemplates) {\n      Ember.deprecate(\"Ember.Route.renderTemplates
        is deprecated. Please use Ember.Route.renderTemplate(controller, model) instead.\");\n
        \     this.renderTemplates(context);\n    } else {\n      this.renderTemplate(controller,
        context);\n    }\n  },\n\n  /**\n    A hook you can implement to optionally
        redirect to another route.\n\n    If you call `this.transitionTo` from inside
        of this hook, this route\n    will not be entered in favor of the other hook.\n\n
        \   Note that this hook is called by the default implementation of\n    `afterModel`,
        so if you override `afterModel`, you must either\n    explicitly call `redirect`
        or just put your redirecting\n    `this.transitionTo()` call within `afterModel`.\n\n
        \   @method redirect\n    @param {Object} model the model for this route\n
        \ */\n  redirect: Ember.K,\n\n  /**\n    This hook is the first of the route
        entry validation hooks\n    called when an attempt is made to transition into
        a route\n    or one of its children. It is called before `model` and\n    `afterModel`,
        and is appropriate for cases when:\n\n    1) A decision can be made to redirect
        elsewhere without\n       needing to resolve the model first.\n    2) Any
        async operations need to occur first before the\n       model is attempted
        to be resolved.\n\n    This hook is provided the current `transition` attempt\n
        \   as a parameter, which can be used to `.abort()` the transition,\n    save
        it for a later `.retry()`, or retrieve values set\n    on it from a previous
        hook. You can also just call\n    `this.transitionTo` to another route to
        implicitly\n    abort the `transition`.\n\n    You can return a promise from
        this hook to pause the\n    transition until the promise resolves (or rejects).
        This could\n    be useful, for instance, for retrieving async code from\n
        \   the server that is required to enter a route.\n\n    ```js\n    App.PostRoute
        = Ember.Route.extend({\n      beforeModel: function(transition) {\n        if
        (!App.Post) {\n          return Ember.$.getScript('/models/post.js');\n        }\n
        \     }\n    });\n    ```\n\n    If `App.Post` doesn't exist in the above
        example,\n    `beforeModel` will use jQuery's `getScript`, which\n    returns
        a promise that resolves after the server has\n    successfully retrieved and
        executed the code from the\n    server. Note that if an error were to occur,
        it would\n    be passed to the `error` hook on `Ember.Route`, but\n    it's
        also possible to handle errors specific to\n    `beforeModel` right from within
        the hook (to distinguish\n    from the shared error handling behavior of the
        `error`\n    hook):\n\n    ```js\n    App.PostRoute = Ember.Route.extend({\n
        \     beforeModel: function(transition) {\n        if (!App.Post) {\n          var
        self = this;\n          return Ember.$.getScript('post.js').then(null, function(e)
        {\n            self.transitionTo('help');\n\n            // Note that the
        above transitionTo will implicitly\n            // halt the transition. If
        you were to return\n            // nothing from this promise reject handler,\n
        \           // according to promise semantics, that would\n            //
        convert the reject into a resolve and the\n            // transition would
        continue. To propagate the\n            // error so that it'd be handled by
        the `error`\n            // hook, you would have to either\n            return
        Ember.RSVP.reject(e);\n            // or\n            throw e;\n          });\n
        \       }\n      }\n    });\n    ```\n\n    @method beforeModel\n    @param
        {Transition} transition\n    @return {Promise} if the value returned from
        this hook is\n      a promise, the transition will pause until the transition\n
        \     resolves. Otherwise, non-promise return values are not\n      utilized
        in any way.\n  */\n  beforeModel: Ember.K,\n\n  /**\n    This hook is called
        after this route's model has resolved.\n    It follows identical async/promise
        semantics to `beforeModel`\n    but is provided the route's resolved model
        in addition to\n    the `transition`, and is therefore suited to performing\n
        \   logic that can only take place after the model has already\n    resolved.\n\n
        \   ```js\n    App.PostsRoute = Ember.Route.extend({\n      afterModel: function(posts,
        transition) {\n        if (posts.length === 1) {\n          this.transitionTo('post.show',
        posts[0]);\n        }\n      }\n    });\n    ```\n\n    Refer to documentation
        for `beforeModel` for a description\n    of transition-pausing semantics when
        a promise is returned\n    from this hook.\n\n    @method afterModel\n    @param
        {Object} resolvedModel the value returned from `model`,\n      or its resolved
        value if it was a promise\n    @param {Transition} transition\n    @return
        {Promise} if the value returned from this hook is\n      a promise, the transition
        will pause until the transition\n      resolves. Otherwise, non-promise return
        values are not\n      utilized in any way.\n   */\n  afterModel: function(resolvedModel,
        transition) {\n    this.redirect(resolvedModel, transition);\n  },\n\n\n  /**\n
        \   @private\n\n    Called when the context is changed by router.js.\n\n    @method
        contextDidChange\n  */\n  contextDidChange: function() {\n    this.currentModel
        = this.context;\n  },\n\n  /**\n    A hook you can implement to convert the
        URL into the model for\n    this route.\n\n    ```js\n    App.Router.map(function()
        {\n      this.resource('post', {path: '/posts/:post_id'});\n    });\n    ```\n\n
        \   The model for the `post` route is `App.Post.find(params.post_id)`.\n\n
        \   By default, if your route has a dynamic segment ending in `_id`:\n\n    *
        The model class is determined from the segment (`post_id`'s\n      class is
        `App.Post`)\n    * The find method is called on the model class with the value
        of\n      the dynamic segment.\n\n    Note that for routes with dynamic segments,
        this hook is only\n    executed when entered via the URL. If the route is
        entered\n    through a transition (e.g. when using the `linkTo` Handlebars\n
        \   helper), then a model context is already provided and this hook\n    is
        not called. Routes without dynamic segments will always\n    execute the model
        hook.\n\n    This hook follows the asynchronous/promise semantics\n    described
        in the documentation for `beforeModel`. In particular,\n    if a promise returned
        from `model` fails, the error will be\n    handled by the `error` hook on
        `Ember.Route`.\n\n    Example\n\n    ```js\n    App.PostRoute = Ember.Route.extend({\n
        \     model: function(params) {\n        return App.Post.find(params.post_id);\n
        \     }\n    });\n    ```\n\n    @method model\n    @param {Object} params
        the parameters extracted from the URL\n    @param {Transition} transition\n
        \   @return {Object|Promise} the model for this route. If\n      a promise
        is returned, the transition will pause until\n      the promise resolves,
        and the resolved value of the promise\n      will be used as the model for
        this route.\n  */\n  model: function(params, transition) {\n    var match,
        name, sawParams, value;\n\n    for (var prop in params) {\n      if (match
        = prop.match(/^(.*)_id$/)) {\n        name = match[1];\n        value = params[prop];\n
        \     }\n      sawParams = true;\n    }\n\n    if (!name && sawParams) { return
        params; }\n    else if (!name) { return; }\n\n    return this.findModel(name,
        value);\n  },\n\n  /**\n\n    @method findModel\n    @param {String} type
        the model type\n    @param {Object} value the value passed to find\n  */\n
        \ findModel: function(){\n    var store = get(this, 'store');\n    return
        store.find.apply(store, arguments);\n  },\n\n  /**\n    Store property provides
        a hook for data persistence libraries to inject themselves.\n\n    By default,
        this store property provides the exact same functionality previously\n    in
        the model hook.\n\n    Currently, the required interface is:\n\n    `store.find(modelName,
        findArguments)`\n\n    @method store\n    @param {Object} store\n  */\n  store:
        Ember.computed(function(){\n    var container = this.container;\n    var routeName
        = this.routeName;\n    var namespace = get(this, 'router.namespace');\n\n
        \   return {\n      find: function(name, value) {\n        var modelClass
        = container.lookupFactory('model:' + name);\n\n        Ember.assert(\"You
        used the dynamic segment \" + name + \"_id in your route \"+ routeName + \",
        but \" + namespace + \".\" + classify(name) + \" did not exist and you did
        not override your route's `model` hook.\", modelClass);\n\n        return
        modelClass.find(value);\n      }\n    };\n  }),\n\n  /**\n    A hook you can
        implement to convert the route's model into parameters\n    for the URL.\n\n
        \   ```js\n    App.Router.map(function() {\n      this.resource('post', {path:
        '/posts/:post_id'});\n    });\n\n    App.PostRoute = Ember.Route.extend({\n
        \     model: function(params) {\n        // the server returns `{ id: 12 }`\n
        \       return jQuery.getJSON(\"/posts/\" + params.post_id);\n      },\n\n
        \     serialize: function(model) {\n        // this will make the URL `/posts/12`\n
        \       return { post_id: model.id };\n      }\n    });\n    ```\n\n    The
        default `serialize` method will insert the model's `id` into the\n    route's
        dynamic segment (in this case, `:post_id`) if the segment contains '_id'.\n
        \   If the route has multiple dynamic segments or does not contain '_id',
        `serialize`\n    will return `Ember.getProperties(model, params)`\n\n    This
        method is called when `transitionTo` is called with a context\n    in order
        to populate the URL.\n\n    @method serialize\n    @param {Object} model the
        route's model\n    @param {Array} params an Array of parameter names for the
        current\n      route (in the example, `['post_id']`.\n    @return {Object}
        the serialized parameters\n  */\n  serialize: function(model, params) {\n
        \   if (params.length < 1) { return; }\n\n    var name = params[0], object
        = {};\n\n    if (/_id$/.test(name) && params.length === 1) {\n      object[name]
        = get(model, \"id\");\n    } else {\n      object = getProperties(model, params);\n
        \   }\n\n    return object;\n  },\n\n  /**\n    A hook you can use to setup
        the controller for the current route.\n\n    This method is called with the
        controller for the current route and the\n    model supplied by the `model`
        hook.\n\n    By default, the `setupController` hook sets the `content` property
        of\n    the controller to the `model`.\n\n    This means that your template
        will get a proxy for the model as its\n    context, and you can act as though
        the model itself was the context.\n\n    The provided controller will be one
        resolved based on the name\n    of this route.\n\n    If no explicit controller
        is defined, Ember will automatically create\n    an appropriate controller
        for the model.\n\n    * if the model is an `Ember.Array` (including record
        arrays from Ember\n      Data), the controller is an `Ember.ArrayController`.\n
        \   * otherwise, the controller is an `Ember.ObjectController`.\n\n    As
        an example, consider the router:\n\n    ```js\n    App.Router.map(function()
        {\n      this.resource('post', {path: '/posts/:post_id'});\n    });\n    ```\n\n
        \   For the `post` route, a controller named `App.PostController` would\n
        \   be used if it is defined. If it is not defined, an `Ember.ObjectController`\n
        \   instance would be used.\n\n    Example\n    ```js\n    App.PostRoute =
        Ember.Route.extend({\n      setupController: function(controller, model) {\n
        \       controller.set('model', model);\n      }\n    });\n    ```\n\n    @method
        setupController\n    @param {Controller} controller instance\n    @param {Object}
        model\n  */\n  setupController: function(controller, context) {\n    if (controller
        && (context !== undefined)) {\n      set(controller, 'model', context);\n
        \   }\n  },\n\n  /**\n    Returns the controller for a particular route or
        name.\n\n    The controller instance must already have been created, either
        through entering the\n    associated route or using `generateController`.\n\n
        \   ```js\n    App.PostRoute = Ember.Route.extend({\n      setupController:
        function(controller, post) {\n        this._super(controller, post);\n        this.controllerFor('posts').set('currentPost',
        post);\n      }\n    });\n    ```\n\n    @method controllerFor\n    @param
        {String} name the name of the route or controller\n    @return {Ember.Controller}\n
        \ */\n  controllerFor: function(name, _skipAssert) {\n    var container =
        this.container,\n        route = container.lookup('route:'+name),\n        controller;\n\n
        \   if (route && route.controllerName) {\n      name = route.controllerName;\n
        \   }\n\n    controller = container.lookup('controller:' + name);\n\n    //
        NOTE: We're specifically checking that skipAssert is true, because according\n
        \   //   to the old API the second parameter was model. We do not want people
        who\n    //   passed a model to skip the assertion.\n    Ember.assert(\"The
        controller named '\"+name+\"' could not be found. Make sure that this route
        exists and has already been entered at least once. If you are accessing a
        controller not associated with a route, make sure the controller class is
        explicitly defined.\", controller || _skipAssert === true);\n\n    return
        controller;\n  },\n\n  /**\n    Generates a controller for a route.\n\n    If
        the optional model is passed then the controller type is determined automatically,\n
        \   e.g., an ArrayController for arrays.\n\n    Example\n\n    ```js\n    App.PostRoute
        = Ember.Route.extend({\n      setupController: function(controller, post)
        {\n        this._super(controller, post);\n        this.generateController('posts',
        post);\n      }\n    });\n    ```\n\n    @method generateController\n    @param
        {String} name the name of the controller\n    @param {Object} model the model
        to infer the type of the controller (optional)\n  */\n  generateController:
        function(name, model) {\n    var container = this.container;\n\n    model
        = model || this.modelFor(name);\n\n    return Ember.generateController(container,
        name, model);\n  },\n\n  /**\n    Returns the current model for a given route.\n\n
        \   This is the object returned by the `model` hook of the route\n    in question.\n\n
        \   Example\n\n    ```js\n    App.Router.map(function() {\n        this.resource('post',
        { path: '/post/:post_id' }, function() {\n            this.resource('comments');\n
        \       });\n    });\n\n    App.CommentsRoute = Ember.Route.extend({\n        afterModel:
        function() {\n            this.set('post', this.modelFor('post'));\n        }\n
        \   });\n    ```\n\n    @method modelFor\n    @param {String} name the name
        of the route\n    @return {Object} the model object\n  */\n  modelFor: function(name)
        {\n\n    var route = this.container.lookup('route:' + name),\n        transition
        = this.router.router.activeTransition;\n\n    // If we are mid-transition,
        we want to try and look up\n    // resolved parent contexts on the current
        transitionEvent.\n    if (transition) {\n      var modelLookupName = (route
        && route.routeName) || name;\n      if (transition.resolvedModels.hasOwnProperty(modelLookupName))
        {\n        return transition.resolvedModels[modelLookupName];\n      }\n    }\n\n
        \   return route && route.currentModel;\n  },\n\n  /**\n    A hook you can
        use to render the template for the current route.\n\n    This method is called
        with the controller for the current route and the\n    model supplied by the
        `model` hook. By default, it renders the route's\n    template, configured
        with the controller for the route.\n\n    This method can be overridden to
        set up and render additional or\n    alternative templates.\n\n    ```js\n
        \   App.PostsRoute = Ember.Route.extend({\n      renderTemplate: function(controller,
        model) {\n        var favController = this.controllerFor('favoritePost');\n\n
        \       // Render the `favoritePost` template into\n        // the outlet
        `posts`, and display the `favoritePost`\n        // controller.\n        this.render('favoritePost',
        {\n          outlet: 'posts',\n          controller: favController\n        });\n
        \     }\n    });\n    ```\n\n    @method renderTemplate\n    @param {Object}
        controller the route's controller\n    @param {Object} model the route's model\n
        \ */\n  renderTemplate: function(controller, model) {\n    this.render();\n
        \ },\n\n  /**\n    Renders a template into an outlet.\n\n    This method has
        a number of defaults, based on the name of the\n    route specified in the
        router.\n\n    For example:\n\n    ```js\n    App.Router.map(function() {\n
        \     this.route('index');\n      this.resource('post', {path: '/posts/:post_id'});\n
        \   });\n\n    App.PostRoute = App.Route.extend({\n      renderTemplate: function()
        {\n        this.render();\n      }\n    });\n    ```\n\n    The name of the
        `PostRoute`, as defined by the router, is `post`.\n\n    By default, render
        will:\n\n    * render the `post` template\n    * with the `post` view (`PostView`)
        for event handling, if one exists\n    * and the `post` controller (`PostController`),
        if one exists\n    * into the `main` outlet of the `application` template\n\n
        \   You can override this behavior:\n\n    ```js\n    App.PostRoute = App.Route.extend({\n
        \     renderTemplate: function() {\n        this.render('myPost', {   // the
        template to render\n          into: 'index',          // the template to render
        into\n          outlet: 'detail',       // the name of the outlet in that
        template\n          controller: 'blogPost'  // the controller to use for the
        template\n        });\n      }\n    });\n    ```\n\n    Remember that the
        controller's `content` will be the route's model. In\n    this case, the default
        model will be `App.Post.find(params.post_id)`.\n\n    @method render\n    @param
        {String} name the name of the template to render\n    @param {Object} options
        the options\n  */\n  render: function(name, options) {\n    Ember.assert(\"The
        name in the given arguments is undefined\", arguments.length > 0 ? !Ember.isNone(arguments[0])
        : true);\n\n    var namePassed = !!name;\n\n    if (typeof name === 'object'
        && !options) {\n      options = name;\n      name = this.routeName;\n    }\n\n
        \   options = options || {};\n    name = name ? name.replace(/\\//g, '.')
        : this.routeName;\n    var viewName = options.view || this.viewName || name;\n
        \   var templateName = this.templateName || name;\n\n    var container = this.container,\n
        \       view = container.lookup('view:' + viewName),\n        template = view
        ? view.get('template') : null;\n\n    if (!template) {\n      template = container.lookup('template:'
        + templateName);\n    }\n\n    if (!view && !template) {\n      Ember.assert(\"Could
        not find \\\"\" + name + \"\\\" template or view.\", !namePassed);\n      if
        (get(this.router, 'namespace.LOG_VIEW_LOOKUPS')) {\n        Ember.Logger.info(\"Could
        not find \\\"\" + name + \"\\\" template or view. Nothing will be rendered\",
        { fullName: 'template:' + name });\n      }\n      return;\n    }\n\n    options
        = normalizeOptions(this, name, template, options);\n    view = setupView(view,
        container, options);\n\n    if (options.outlet === 'main') { this.lastRenderedTemplate
        = name; }\n\n    appendView(this, view, options);\n  },\n\n  /**\n    Disconnects
        a view that has been rendered into an outlet.\n\n    You may pass any or all
        of the following options to `disconnectOutlet`:\n\n    * `outlet`: the name
        of the outlet to clear (default: 'main')\n    * `parentView`: the name of
        the view containing the outlet to clear\n       (default: the view rendered
        by the parent route)\n\n    Example:\n\n    ```js\n    App.ApplicationRoute
        = App.Route.extend({\n      actions: {\n        showModal: function(evt) {\n
        \         this.render(evt.modalName, {\n            outlet: 'modal',\n            into:
        'application'\n          });\n        },\n        hideModal: function(evt)
        {\n          this.disconnectOutlet({\n            outlet: 'modal',\n            parentView:
        'application'\n          });\n        }\n      }\n    });\n    ```\n\n    @method
        disconnectOutlet\n    @param {Object} options the options\n  */\n  disconnectOutlet:
        function(options) {\n    options = options || {};\n    options.parentView
        = options.parentView ? options.parentView.replace(/\\//g, '.') : parentTemplate(this);\n
        \   options.outlet = options.outlet || 'main';\n\n    var parentView = this.router._lookupActiveView(options.parentView);\n
        \   parentView.disconnectOutlet(options.outlet);\n  },\n\n  willDestroy: function()
        {\n    this.teardownViews();\n  },\n\n  /**\n    @private\n\n    @method teardownViews\n
        \ */\n  teardownViews: function() {\n    // Tear down the top level view\n
        \   if (this.teardownTopLevelView) { this.teardownTopLevelView(); }\n\n    //
        Tear down any outlets rendered with 'into'\n    var teardownOutletViews =
        this.teardownOutletViews || [];\n    a_forEach(teardownOutletViews, function(teardownOutletView)
        {\n      teardownOutletView();\n    });\n\n    delete this.teardownTopLevelView;\n
        \   delete this.teardownOutletViews;\n    delete this.lastRenderedTemplate;\n
        \ }\n});\n\nfunction parentRoute(route) {\n  var handlerInfos = route.router.router.targetHandlerInfos;\n\n
        \ if (!handlerInfos) { return; }\n\n  var parent, current;\n\n  for (var i=0,
        l=handlerInfos.length; i<l; i++) {\n    current = handlerInfos[i].handler;\n
        \   if (current === route) { return parent; }\n    parent = current;\n  }\n}\n\nfunction
        parentTemplate(route) {\n  var parent = parentRoute(route), template;\n\n
        \ if (!parent) { return; }\n\n  if (template = parent.lastRenderedTemplate)
        {\n    return template;\n  } else {\n    return parentTemplate(parent);\n
        \ }\n}\n\nfunction normalizeOptions(route, name, template, options) {\n  options
        = options || {};\n  options.into = options.into ? options.into.replace(/\\//g,
        '.') : parentTemplate(route);\n  options.outlet = options.outlet || 'main';\n
        \ options.name = name;\n  options.template = template;\n  options.LOG_VIEW_LOOKUPS
        = get(route.router, 'namespace.LOG_VIEW_LOOKUPS');\n\n  Ember.assert(\"An
        outlet (\"+options.outlet+\") was specified but was not found.\", options.outlet
        === 'main' || options.into);\n\n  var controller = options.controller, namedController;\n\n
        \ if (options.controller) {\n    controller = options.controller;\n  } else
        if (namedController = route.container.lookup('controller:' + name)) {\n    controller
        = namedController;\n  } else {\n    controller = route.controllerName || route.routeName;\n
        \ }\n\n  if (typeof controller === 'string') {\n    controller = route.container.lookup('controller:'
        + controller);\n  }\n\n  options.controller = controller;\n\n  return options;\n}\n\nfunction
        setupView(view, container, options) {\n  if (view) {\n    if (options.LOG_VIEW_LOOKUPS)
        {\n      Ember.Logger.info(\"Rendering \" + options.name + \" with \" + view,
        { fullName: 'view:' + options.name });\n    }\n  } else {\n    var defaultView
        = options.into ? 'view:default' : 'view:toplevel';\n    view = container.lookup(defaultView);\n
        \   if (options.LOG_VIEW_LOOKUPS) {\n      Ember.Logger.info(\"Rendering \"
        + options.name + \" with default view \" + view, { fullName: 'view:' + options.name
        });\n    }\n  }\n\n  if (!get(view, 'templateName')) {\n    set(view, 'template',
        options.template);\n\n    set(view, '_debugTemplateName', options.name);\n
        \ }\n\n  set(view, 'renderedName', options.name);\n  set(view, 'controller',
        options.controller);\n\n  return view;\n}\n\nfunction appendView(route, view,
        options) {\n  if (options.into) {\n    var parentView = route.router._lookupActiveView(options.into);\n
        \   var teardownOutletView = generateOutletTeardown(parentView, options.outlet);\n
        \   if (!route.teardownOutletViews) { route.teardownOutletViews = []; }\n
        \   a_replace(route.teardownOutletViews, 0, 0, [teardownOutletView]);\n    parentView.connectOutlet(options.outlet,
        view);\n  } else {\n    var rootElement = get(route, 'router.namespace.rootElement');\n
        \   // tear down view if one is already rendered\n    if (route.teardownTopLevelView)
        {\n      route.teardownTopLevelView();\n    }\n    route.router._connectActiveView(options.name,
        view);\n    route.teardownTopLevelView = generateTopLevelTeardown(view);\n
        \   view.appendTo(rootElement);\n  }\n}\n\nfunction generateTopLevelTeardown(view)
        {\n  return function() { view.destroy(); };\n}\n\nfunction generateOutletTeardown(parentView,
        outlet) {\n  return function() { parentView.disconnectOutlet(outlet); };\n}\n\n})();\n\n\n\n(function()
        {\n\n})();\n\n\n\n(function() {\nEmber.onLoad('Ember.Handlebars', function()
        {\n  var handlebarsResolve = Ember.Handlebars.resolveParams,\n      map =
        Ember.ArrayPolyfills.map,\n      get = Ember.get,\n      handlebarsGet = Ember.Handlebars.get;\n\n
        \ function resolveParams(context, params, options) {\n    return map.call(resolvePaths(context,
        params, options), function(path, i) {\n      if (null === path) {\n        //
        Param was string/number, not a path, so just return raw string/number.\n        return
        params[i];\n      } else {\n        return handlebarsGet(context, path, options);\n
        \     }\n    });\n  }\n\n  function resolvePaths(context, params, options)
        {\n    var resolved = handlebarsResolve(context, params, options),\n        types
        = options.types;\n\n    return map.call(resolved, function(object, i) {\n
        \     if (types[i] === 'ID') {\n        return unwrap(object, params[i]);\n
        \     } else {\n        return null;\n      }\n    });\n\n    function unwrap(object,
        path) {\n      if (path === 'controller') { return path; }\n\n      if (Ember.ControllerMixin.detect(object))
        {\n        return unwrap(get(object, 'model'), path ? path + '.model' : 'model');\n
        \     } else {\n        return path;\n      }\n    }\n  }\n\n  Ember.Router.resolveParams
        = resolveParams;\n  Ember.Router.resolvePaths = resolvePaths;\n});\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-routing\n*/\n\nvar get = Ember.get,
        set = Ember.set, fmt = Ember.String.fmt;\nEmber.onLoad('Ember.Handlebars',
        function(Handlebars) {\n\n  var resolveParams = Ember.Router.resolveParams,\n
        \     resolvePaths  = Ember.Router.resolvePaths,\n      isSimpleClick = Ember.ViewUtils.isSimpleClick;\n\n
        \ function fullRouteName(router, name) {\n    if (!router.hasRoute(name))
        {\n      name = name + '.index';\n    }\n\n    return name;\n  }\n\n  function
        getResolvedPaths(options) {\n\n    var types = options.options.types,\n        data
        = options.options.data;\n\n    return resolvePaths(options.context, options.params,
        { types: types, data: data });\n  }\n\n  /**\n    `Ember.LinkView` renders
        an element whose `click` event triggers a\n    transition of the application's
        instance of `Ember.Router` to\n    a supplied route by name.\n\n    Instances
        of `LinkView` will most likely be created through\n    the `link-to` Handlebars
        helper, but properties of this class\n    can be overridden to customize application-wide
        behavior.\n\n    @class LinkView\n    @namespace Ember\n    @extends Ember.View\n
        \   @see {Handlebars.helpers.link-to}\n  **/\n  var LinkView = Ember.LinkView
        = Ember.View.extend({\n    tagName: 'a',\n    currentWhen: null,\n\n    /**\n
        \     Sets the `title` attribute of the `LinkView`'s HTML element.\n\n      @property
        title\n      @default null\n    **/\n    title: null,\n\n    /**\n      Sets
        the `rel` attribute of the `LinkView`'s HTML element.\n\n      @property rel\n
        \     @default null\n    **/\n    rel: null,\n\n    /**\n      The CSS class
        to apply to `LinkView`'s element when its `active`\n      property is `true`.\n\n
        \     @property activeClass\n      @type String\n      @default active\n    **/\n
        \   activeClass: 'active',\n\n    /**\n      The CSS class to apply to `LinkView`'s
        element when its `loading`\n      property is `true`.\n\n      @property loadingClass\n
        \     @type String\n      @default loading\n    **/\n    loadingClass: 'loading',\n\n
        \   /**\n      The CSS class to apply to a `LinkView`'s element when its `disabled`\n
        \     property is `true`.\n\n      @property disabledClass\n      @type String\n
        \     @default disabled\n    **/\n    disabledClass: 'disabled',\n    _isDisabled:
        false,\n\n    /**\n      Determines whether the `LinkView` will trigger routing
        via\n      the `replaceWith` routing strategy.\n\n      @property replace\n
        \     @type Boolean\n      @default false\n    **/\n    replace: false,\n\n
        \   /**\n      By default the `{{link-to}}` helper will bind to the `href`
        and\n      `title` attributes. It's discourage that you override these defaults,\n
        \     however you can push onto the array if needed.\n\n      @property attributeBindings\n
        \     @type Array | String\n      @default ['href', 'title', 'rel']\n     **/\n
        \   attributeBindings: ['href', 'title', 'rel'],\n\n    /**\n      By default
        the `{{link-to}}` helper will bind to the `active`, `loading`, and\n      `disabled`
        classes. It is discouraged to override these directly.\n\n      @property
        classNameBindings\n      @type Array\n      @default ['active', 'loading',
        'disabled']\n     **/\n    classNameBindings: ['active', 'loading', 'disabled'],\n\n
        \   /**\n      By default the `{{link-to}}` helper responds to the `click`
        event. You\n      can override this globally by setting this property to your
        custom\n      event name.\n\n      This is particularly useful on mobile when
        one wants to avoid the 300ms\n      click delay using some sort of custom
        `tap` event.\n\n      @property eventName\n      @type String\n      @default
        click\n    */\n    eventName: 'click',\n\n    // this is doc'ed here so it
        shows up in the events\n    // section of the API documentation, which is
        where\n    // people will likely go looking for it.\n    /**\n      Triggers
        the `LinkView`'s routing behavior. If\n      `eventName` is changed to a value
        other than `click`\n      the routing behavior will trigger on that custom
        event\n      instead.\n\n      @event click\n    **/\n\n    /**\n      An
        overridable method called when LinkView objects are instantiated.\n\n      Example:\n\n
        \     ```javascript\n      App.MyLinkView = Ember.LinkView.extend({\n        init:
        function() {\n          this._super();\n          Ember.Logger.log('Event
        is ' + this.get('eventName'));\n        }\n      });\n      ```\n\n      NOTE:
        If you do override `init` for a framework class like `Ember.View` or\n      `Ember.ArrayController`,
        be sure to call `this._super()` in your\n      `init` declaration! If you
        don't, Ember may not have an opportunity to\n      do important setup work,
        and you'll see strange behavior in your\n      application.\n\n      @method
        init\n    */\n    init: function() {\n      this._super.apply(this, arguments);\n\n
        \     // Map desired event name to invoke function\n      var eventName =
        get(this, 'eventName');\n      this.on(eventName, this, this._invoke);\n\n
        \     var helperParameters = this.parameters,\n          templateContext =
        helperParameters.context,\n          paths = getResolvedPaths(helperParameters),\n
        \         length = paths.length,\n          path, i;\n\n      for(i=0; i <
        length; i++) {\n        path = paths[i];\n        if (null === path) {\n          //
        A literal value was provided, not a path, so nothing to observe.\n          continue;\n
        \       }\n\n        var normalizedPath =\n          Ember.Handlebars.normalizePath(templateContext,
        path, helperParameters.options.data);\n        this.registerObserver(normalizedPath.root,
        normalizedPath.path, this, this._paramsChanged);\n      }\n    },\n\n    /**\n
        \     @private\n\n      This method is invoked by observers installed during
        `init` that fire\n      whenever the helpers\n      @method _paramsChanged\n
        \    */\n    _paramsChanged: function() {\n      this.notifyPropertyChange('resolvedParams');\n
        \   },\n\n    /**\n      @private\n\n      Even though this isn't a virtual
        view, we want to treat it as if it is\n      so that you can access the parent
        with {{view.prop}}\n\n      @method concreteView\n    **/\n    concreteView:
        Ember.computed(function() {\n      return get(this, 'parentView');\n    }).property('parentView'),\n\n
        \   /**\n\n      Accessed as a classname binding to apply the `LinkView`'s
        `disabledClass`\n      CSS `class` to the element when the link is disabled.\n\n
        \     When `true` interactions with the element will not trigger route changes.\n
        \     @property disabled\n    */\n    disabled: Ember.computed(function(key,
        value) {\n      if (value !== undefined) { this.set('_isDisabled', value);
        }\n\n      return value ? get(this, 'disabledClass') : false;\n    }),\n\n
        \   /**\n      Accessed as a classname binding to apply the `LinkView`'s `activeClass`\n
        \     CSS `class` to the element when the link is active.\n\n      A `LinkView`
        is considered active when its `currentWhen` property is `true`\n      or the
        application's current route is the route the `LinkView` would trigger\n      transitions
        into.\n\n      @property active\n    **/\n    active: Ember.computed(function()
        {\n      if (get(this, 'loading')) { return false; }\n\n      var router =
        get(this, 'router'),\n          routeArgs = get(this, 'routeArgs'),\n          contexts
        = routeArgs.slice(1),\n          resolvedParams = get(this, 'resolvedParams'),\n
        \         currentWhen = this.currentWhen || resolvedParams[0],\n          currentWithIndex
        = currentWhen + '.index',\n          isActive = router.isActive.apply(router,
        [currentWhen].concat(contexts)) ||\n                     router.isActive.apply(router,
        [currentWithIndex].concat(contexts));\n\n      if (isActive) { return get(this,
        'activeClass'); }\n    }).property('resolvedParams', 'routeArgs', 'router.url'),\n\n
        \   /**\n      Accessed as a classname binding to apply the `LinkView`'s `loadingClass`\n
        \     CSS `class` to the element when the link is loading.\n\n      A `LinkView`
        is considered loading when it has at least one\n      parameter whose value
        is currently null or undefined. During\n      this time, clicking the link
        will perform no transition and\n      emit a warning that the link is still
        in a loading state.\n\n      @property loading\n    **/\n    loading: Ember.computed(function()
        {\n      if (!get(this, 'routeArgs')) { return get(this, 'loadingClass');
        }\n    }).property('routeArgs'),\n\n    /**\n      @private\n\n      Returns
        the application's main router from the container.\n\n      @property router\n
        \   **/\n    router: Ember.computed(function() {\n      return get(this, 'controller').container.lookup('router:main');\n
        \   }),\n\n    /**\n      @private\n\n      Event handler that invokes the
        link, activating the associated route.\n\n      @method _invoke\n      @param
        {Event} event\n    */\n    _invoke: function(event) {\n      if (!isSimpleClick(event))
        { return true; }\n\n      event.preventDefault();\n      if (this.bubbles
        === false) { event.stopPropagation(); }\n\n      if (get(this, '_isDisabled'))
        { return false; }\n\n      if (get(this, 'loading')) {\n        Ember.Logger.warn(\"This
        link-to is in an inactive loading state because at least one of its parameters
        presently has a null/undefined value, or the provided route name is invalid.\");\n
        \       return false;\n      }\n\n      var router = get(this, 'router'),\n
        \         routeArgs = get(this, 'routeArgs');\n\n      if (get(this, 'replace'))
        {\n        router.replaceWith.apply(router, routeArgs);\n      } else {\n
        \       router.transitionTo.apply(router, routeArgs);\n      }\n    },\n\n
        \   /**\n      @private\n\n      Computed property that returns the resolved
        parameters.\n\n      @property\n      @return {Array}\n     */\n    resolvedParams:
        Ember.computed(function() {\n      var parameters = this.parameters,\n          options
        = parameters.options,\n          types = options.types,\n          data =
        options.data;\n\n      return resolveParams(parameters.context, parameters.params,
        { types: types, data: data });\n    }).property(),\n\n    /**\n      @private\n\n
        \     Computed property that returns the current route name and\n      any
        dynamic segments.\n\n      @property\n      @return {Array} An array with
        the route name and any dynamic segments\n     */\n    routeArgs: Ember.computed(function()
        {\n\n      var resolvedParams = get(this, 'resolvedParams').slice(0),\n          router
        = get(this, 'router'),\n          namedRoute = resolvedParams[0];\n\n      if
        (!namedRoute) { return; }\n\n      namedRoute = fullRouteName(router, namedRoute);\n
        \     resolvedParams[0] = namedRoute;\n\n      Ember.assert(fmt(\"The attempt
        to link-to route '%@' failed. The router did not find '%@' in its possible
        routes: '%@'\", [namedRoute, namedRoute, Ember.keys(router.router.recognizer.names).join(\"',
        '\")]), router.hasRoute(namedRoute));\n\n      for (var i = 1, len = resolvedParams.length;
        i < len; ++i) {\n        var param = resolvedParams[i];\n        if (param
        === null || typeof param === 'undefined') {\n          // If contexts aren't
        present, consider the linkView unloaded.\n          return;\n        }\n      }\n\n
        \     return resolvedParams;\n    }).property('resolvedParams'),\n\n    /**\n
        \     Sets the element's `href` attribute to the url for\n      the `LinkView`'s
        targeted route.\n\n      If the `LinkView`'s `tagName` is changed to a value
        other\n      than `a`, this property will be ignored.\n\n      @property href\n
        \   **/\n    href: Ember.computed(function() {\n      if (get(this, 'tagName')
        !== 'a') { return; }\n\n      var router = get(this, 'router'),\n          routeArgs
        = get(this, 'routeArgs');\n\n      return routeArgs ? router.generate.apply(router,
        routeArgs) : get(this, 'loadingHref');\n    }).property('routeArgs'),\n\n
        \   /**\n      The default href value to use while a link-to is loading.\n
        \     Only applies when tagName is 'a'\n\n      @property loadingHref\n      @type
        String\n      @default #\n    */\n    loadingHref: '#'\n  });\n\n  LinkView.toString
        = function() { return \"LinkView\"; };\n\n  /**\n    The `{{link-to}}` helper
        renders a link to the supplied\n    `routeName` passing an optionally supplied
        model to the\n    route as its `model` context of the route. The block\n    for
        `{{link-to}}` becomes the innerHTML of the rendered\n    element:\n\n    ```handlebars\n
        \   {{#link-to 'photoGallery'}}\n      Great Hamster Photos\n    {{/link-to}}\n
        \   ```\n\n    ```html\n    <a href=\"/hamster-photos\">\n      Great Hamster
        Photos\n    </a>\n    ```\n\n    ### Supplying a tagName\n    By default `{{link-to}}`
        renders an `<a>` element. This can\n    be overridden for a single use of
        `{{link-to}}` by supplying\n    a `tagName` option:\n\n    ```handlebars\n
        \   {{#link-to 'photoGallery' tagName=\"li\"}}\n      Great Hamster Photos\n
        \   {{/link-to}}\n    ```\n\n    ```html\n    <li>\n      Great Hamster Photos\n
        \   </li>\n    ```\n\n    To override this option for your entire application,
        see\n    \"Overriding Application-wide Defaults\".\n    \n    ### Disabling
        the `link-to` helper\n    By default `{{link-to}}` is enabled. \n    any passed
        value to `disabled` helper property will disable the `link-to` helper.\n     \n
        \   static use: the `disabled` option:\n \n    ```handlebars\n    {{#link-to
        'photoGallery' disabled=true}}\n      Great Hamster Photos\n    {{/link-to}}\n
        \   ```\n     \n    dynamic use: the `disabledWhen` option:\n    \n    ```handlebars\n
        \   {{#link-to 'photoGallery' disabledWhen=controller.someProperty}}\n      Great
        Hamster Photos\n    {{/link-to}}\n    ```\n    \n    any passed value to `disabled`
        will disable it except `undefined`.\n    to ensure that only `true` disable
        the `link-to` helper you can\n    override the global behaviour of `Ember.LinkView`.\n
        \        \n    ```javascript  \n    Ember.LinkView.reopen({\n      disabled:
        Ember.computed(function(key, value) {\n        if (value !== undefined) {
        \n          this.set('_isDisabled', value === true); \n        }\n        return
        value === true ? get(this, 'disabledClass') : false;\n      })\n    });\n
        \   ```\n     \n    see \"Overriding Application-wide Defaults\" for more.\n
        \   \n    ### Handling `href`\n    `{{link-to}}` will use your application's
        Router to\n    fill the element's `href` property with a url that\n    matches
        the path to the supplied `routeName` for your\n    routers's configured `Location`
        scheme, which defaults\n    to Ember.HashLocation.\n\n    ### Handling current
        route\n    `{{link-to}}` will apply a CSS class name of 'active'\n    when
        the application's current route matches\n    the supplied routeName. For example,
        if the application's\n    current route is 'photoGallery.recent' the following\n
        \   use of `{{link-to}}`:\n\n    ```handlebars\n    {{#link-to 'photoGallery.recent'}}\n
        \     Great Hamster Photos from the last week\n    {{/link-to}}\n    ```\n\n
        \   will result in\n\n    ```html\n    <a href=\"/hamster-photos/this-week\"
        class=\"active\">\n      Great Hamster Photos\n    </a>\n    ```\n\n    The
        CSS class name used for active classes can be customized\n    for a single
        use of `{{link-to}}` by passing an `activeClass`\n    option:\n\n    ```handlebars\n
        \   {{#link-to 'photoGallery.recent' activeClass=\"current-url\"}}\n      Great
        Hamster Photos from the last week\n    {{/link-to}}\n    ```\n\n    ```html\n
        \   <a href=\"/hamster-photos/this-week\" class=\"current-url\">\n      Great
        Hamster Photos\n    </a>\n    ```\n\n    To override this option for your
        entire application, see\n    \"Overriding Application-wide Defaults\".\n\n
        \   ### Supplying a model\n    An optional model argument can be used for
        routes whose\n    paths contain dynamic segments. This argument will become\n
        \   the model context of the linked route:\n\n    ```javascript\n    App.Router.map(function()
        {\n      this.resource(\"photoGallery\", {path: \"hamster-photos/:photo_id\"});\n
        \   });\n    ```\n\n    ```handlebars\n    {{#link-to 'photoGallery' aPhoto}}\n
        \     {{aPhoto.title}}\n    {{/link-to}}\n    ```\n\n    ```html\n    <a href=\"/hamster-photos/42\">\n
        \     Tomster\n    </a>\n    ```\n\n    ### Supplying multiple models\n    For
        deep-linking to route paths that contain multiple\n    dynamic segments, multiple
        model arguments can be used.\n    As the router transitions through the route
        path, each\n    supplied model argument will become the context for the\n
        \   route with the dynamic segments:\n\n    ```javascript\n    App.Router.map(function()
        {\n      this.resource(\"photoGallery\", {path: \"hamster-photos/:photo_id\"},
        function() {\n        this.route(\"comment\", {path: \"comments/:comment_id\"});\n
        \     });\n    });\n    ```\n    This argument will become the model context
        of the linked route:\n\n    ```handlebars\n    {{#link-to 'photoGallery.comment'
        aPhoto comment}}\n      {{comment.body}}\n    {{/link-to}}\n    ```\n\n    ```html\n
        \   <a href=\"/hamster-photos/42/comment/718\">\n      A+++ would snuggle
        again.\n    </a>\n    ```\n\n    ### Supplying an explicit dynamic segment
        value\n    If you don't have a model object available to pass to `{{link-to}}`,\n
        \   an optional string or integer argument can be passed for routes whose\n
        \   paths contain dynamic segments. This argument will become the value\n
        \   of the dynamic segment:\n\n    ```javascript\n    App.Router.map(function()
        {\n      this.resource(\"photoGallery\", {path: \"hamster-photos/:photo_id\"});\n
        \   });\n    ```\n\n    ```handlebars\n    {{#link-to 'photoGallery' aPhotoId}}\n
        \     {{aPhoto.title}}\n    {{/link-to}}\n    ```\n\n    ```html\n    <a href=\"/hamster-photos/42\">\n
        \     Tomster\n    </a>\n    ```\n\n    When transitioning into the linked
        route, the `model` hook will\n    be triggered with parameters including this
        passed identifier.\n\n    ### Overriding attributes\n    You can override
        any given property of the Ember.LinkView\n    that is generated by the `{{link-to}}`
        helper by passing\n    key/value pairs, like so:\n\n    ```handlebars\n    {{#link-to
        \ aPhoto tagName='li' title='Following this link will change your life' classNames=['pic',
        'sweet']}}\n      Uh-mazing!\n    {{/link-to}}\n    ```\n\n    See [Ember.LinkView](/api/classes/Ember.LinkView.html)
        for a\n    complete list of overrideable properties. Be sure to also\n    check
        out inherited properties of `LinkView`.\n\n    ### Overriding Application-wide
        Defaults\n    ``{{link-to}}`` creates an instance of Ember.LinkView\n    for
        rendering. To override options for your entire\n    application, reopen Ember.LinkView
        and supply the\n    desired values:\n\n    ``` javascript\n    Ember.LinkView.reopen({\n
        \     activeClass: \"is-active\",\n      tagName: 'li'\n    })\n    ```\n\n
        \   It is also possible to override the default event in\n    this manner:\n\n
        \   ``` javascript\n    Ember.LinkView.reopen({\n      eventName: 'customEventName'\n
        \   });\n    ```\n\n    @method link-to\n    @for Ember.Handlebars.helpers\n
        \   @param {String} routeName\n    @param {Object} [context]*\n    @param
        [options] {Object} Handlebars key/value pairs of options, you can override
        any property of Ember.LinkView\n    @return {String} HTML string\n    @see
        {Ember.LinkView}\n  */\n  Ember.Handlebars.registerHelper('link-to', function(name)
        {\n    var options = [].slice.call(arguments, -1)[0],\n        params = [].slice.call(arguments,
        0, -1),\n        hash = options.hash;\n\n    hash.disabledBinding = hash.disabledWhen;\n\n
        \   hash.parameters = {\n      context: this,\n      options: options,\n      params:
        params\n    };\n\n    return Ember.Handlebars.helpers.view.call(this, LinkView,
        options);\n  });\n\n  /**\n    See [link-to](/api/classes/Ember.Handlebars.helpers.html#method_link-to)\n\n
        \   @method linkTo\n    @for Ember.Handlebars.helpers\n    @deprecated\n    @param
        {String} routeName\n    @param {Object} [context]*\n    @return {String} HTML
        string\n  */\n  Ember.Handlebars.registerHelper('linkTo', Ember.Handlebars.helpers['link-to']);\n});\n\n\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-routing\n*/\n\nvar get = Ember.get,
        set = Ember.set;\nEmber.onLoad('Ember.Handlebars', function(Handlebars) {\n
        \ /**\n  @module ember\n  @submodule ember-routing\n  */\n\n  Handlebars.OutletView
        = Ember.ContainerView.extend(Ember._Metamorph);\n\n  /**\n    The `outlet`
        helper is a placeholder that the router will fill in with\n    the appropriate
        template based on the current state of the application.\n\n    ``` handlebars\n
        \   {{outlet}}\n    ```\n\n    By default, a template based on Ember's naming
        conventions will be rendered\n    into the `outlet` (e.g. `App.PostsRoute`
        will render the `posts` template).\n\n    You can render a different template
        by using the `render()` method in the\n    route's `renderTemplate` hook.
        The following will render the `favoritePost`\n    template into the `outlet`.\n\n
        \   ``` javascript\n    App.PostsRoute = Ember.Route.extend({\n      renderTemplate:
        function() {\n        this.render('favoritePost');\n      }\n    });\n    ```\n\n
        \   You can create custom named outlets for more control.\n\n    ``` handlebars\n
        \   {{outlet 'favoritePost'}}\n    {{outlet 'posts'}}\n    ```\n\n    Then
        you can define what template is rendered into each outlet in your\n    route.\n\n\n
        \   ``` javascript\n    App.PostsRoute = Ember.Route.extend({\n      renderTemplate:
        function() {\n        this.render('favoritePost', { outlet: 'favoritePost'
        });\n        this.render('posts', { outlet: 'posts' });\n      }\n    });\n
        \   ```\n\n    You can specify the view class that the outlet uses to contain
        and manage the\n    templates rendered into it.\n\n    ``` handlebars\n    {{outlet
        viewClass=App.SectionContainer}}\n    ```\n\n    ``` javascript\n    App.SectionContainer
        = Ember.ContainerView.extend({\n      tagName: 'section',\n      classNames:
        ['special']\n    });\n    ```\n\n    @method outlet\n    @for Ember.Handlebars.helpers\n
        \   @param {String} property the property on the controller\n      that holds
        the view for this outlet\n    @return {String} HTML string\n  */\n  Handlebars.registerHelper('outlet',
        function(property, options) {\n    var outletSource, outletContainerClass;\n\n
        \   if (property && property.data && property.data.isRenderData) {\n      options
        = property;\n      property = 'main';\n    }\n\n    outletSource = options.data.view;\n
        \   while (!outletSource.get('template.isTop')) {\n      outletSource = outletSource.get('_parentView');\n
        \   }\n\n    outletContainerClass = options.hash.viewClass || Handlebars.OutletView;\n\n
        \   options.data.view.set('outletSource', outletSource);\n    options.hash.currentViewBinding
        = '_view.outletSource._outlets.' + property;\n\n    return Handlebars.helpers.view.call(this,
        outletContainerClass, options);\n  });\n});\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-routing\n*/\n\nvar get = Ember.get, set = Ember.set;\nEmber.onLoad('Ember.Handlebars',
        function(Handlebars) {\n\n  /**\n    Calling ``{{render}}`` from within a
        template will insert another \n    template that matches the provided name.
        The inserted template will\n    access its properties on its own controller
        (rather than the controller\n    of the parent template).\n\n    If a view
        class with the same name exists, the view class also will be used.\n    \n
        \   Note: A given controller may only be used *once* in your app in this manner.\n
        \   A singleton instance of the controller will be created for you.\n\n    Example:\n\n
        \   ```javascript\n    App.NavigationController = Ember.Controller.extend({\n
        \     who: \"world\"\n    });\n    ```\n\n    ```handelbars\n    <!-- navigation.hbs
        -->\n    Hello, {{who}}.\n    ```\n\n    ```handelbars\n    <!-- applications.hbs
        -->\n    <h1>My great app</h1>\n    {{render navigaton}}\n    ```\n    \n
        \   ```html\n    <h1>My great app</h1>\n    <div class='ember-view'>\n      Hello,
        world.\n    </div>\n    ```\n\n    Optionally you may provide a  second argument:
        a property path\n    that will be bound to the `model` property of the controller.\n\n
        \   If a `model` property path is specified, then a new instance of the\n
        \   controller will be created and `{{render}}` can be used multiple times\n
        \   with the same name.\n\n   For example if you had this `author` template.\n\n
        \  ```handlebars\n<div class=\"author\">\n  Written by {{firstName}} {{lastName}}.\n
        \ Total Posts: {{postCount}}\n</div>\n  ```\n\n  You could render it inside
        the `post` template using the `render` helper.\n\n  ```handlebars\n<div class=\"post\">\n
        \ <h1>{{title}}</h1>\n  <div>{{body}}</div>\n  {{render \"author\" author}}\n</div>\n
        \  ```\n\n    @method render\n    @for Ember.Handlebars.helpers\n    @param
        {String} name\n    @param {Object?} contextString\n    @param {Hash} options\n
        \   @return {String} HTML string\n  */\n  Ember.Handlebars.registerHelper('render',
        function(name, contextString, options) {\n    Ember.assert(\"You must pass
        a template to render\", arguments.length >= 2);\n    var contextProvided =
        arguments.length === 3,\n        container, router, controller, view, context,
        lookupOptions;\n\n    if (arguments.length === 2) {\n      options = contextString;\n
        \     contextString = undefined;\n    }\n\n    if (typeof contextString ===
        'string') {\n      context = Ember.Handlebars.get(options.contexts[1], contextString,
        options);\n      lookupOptions = { singleton: false };\n    }\n\n    name
        = name.replace(/\\//g, '.');\n    container = options.data.keywords.controller.container;\n
        \   router = container.lookup('router:main');\n\n    Ember.assert(\"You can
        only use the {{render}} helper once without a model object as its second argument,
        as in {{render \\\"post\\\" post}}.\", contextProvided || !router || !router._lookupActiveView(name));\n\n
        \   view = container.lookup('view:' + name) || container.lookup('view:default');\n\n
        \   var controllerName = options.hash.controller;\n\n    // Look up the controller
        by name, if provided.\n    if (controllerName) {\n      controller = container.lookup('controller:'
        + controllerName, lookupOptions);\n      Ember.assert(\"The controller name
        you supplied '\" + controllerName + \"' did not resolve to a controller.\",
        !!controller);\n    } else {\n      controller = container.lookup('controller:'
        + name, lookupOptions) ||\n                      Ember.generateController(container,
        name, context);\n    }\n\n    if (controller && contextProvided) {\n      controller.set('model',
        context);\n    }\n\n    var root = options.contexts[1];\n\n    if (root) {\n
        \     view.registerObserver(root, contextString, function() {\n        controller.set('model',
        Ember.Handlebars.get(root, contextString, options));\n      });\n    }\n\n
        \   controller.set('target', options.data.keywords.controller);\n\n    options.hash.viewName
        = Ember.String.camelize(name);\n    options.hash.template = container.lookup('template:'
        + name);\n    options.hash.controller = controller;\n\n    if (router && !context)
        {\n      router._connectActiveView(name, view);\n    }\n\n    Ember.Handlebars.helpers.view.call(this,
        view, options);\n  });\n\n});\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-routing\n*/\nEmber.onLoad('Ember.Handlebars', function(Handlebars)
        {\n\n  var resolveParams = Ember.Router.resolveParams,\n      isSimpleClick
        = Ember.ViewUtils.isSimpleClick;\n\n  var EmberHandlebars = Ember.Handlebars,\n
        \     handlebarsGet = EmberHandlebars.get,\n      SafeString = EmberHandlebars.SafeString,\n
        \     forEach = Ember.ArrayPolyfills.forEach,\n      get = Ember.get,\n      a_slice
        = Array.prototype.slice;\n\n  function args(options, actionName) {\n    var
        ret = [];\n    if (actionName) { ret.push(actionName); }\n\n    var types
        = options.options.types.slice(1),\n        data = options.options.data;\n\n
        \   return ret.concat(resolveParams(options.context, options.params, { types:
        types, data: data }));\n  }\n\n  var ActionHelper = EmberHandlebars.ActionHelper
        = {\n    registeredActions: {}\n  };\n\n  var keys = [\"alt\", \"shift\",
        \"meta\", \"ctrl\"];\n\n  var isAllowedClick = function(event, allowedKeys)
        {\n    if (typeof allowedKeys === \"undefined\") {\n      return isSimpleClick(event);\n
        \   }\n\n    if (allowedKeys.indexOf(\"any\") >= 0) {\n      return true;\n
        \   }\n\n    var allowed = true;\n\n    forEach.call(keys, function(key) {\n
        \     if (event[key + \"Key\"] && allowedKeys.indexOf(key) === -1) {\n        allowed
        = false;\n      }\n    });\n\n    return allowed;\n  };\n\n  ActionHelper.registerAction
        = function(actionName, options, allowedKeys) {\n    var actionId = (++Ember.uuid).toString();\n\n
        \   ActionHelper.registeredActions[actionId] = {\n      eventName: options.eventName,\n
        \     handler: function(event) {\n        if (!isAllowedClick(event, allowedKeys))
        { return true; }\n\n        event.preventDefault();\n\n        if (options.bubbles
        === false) {\n          event.stopPropagation();\n        }\n\n        var
        target = options.target;\n\n        if (target.target) {\n          target
        = handlebarsGet(target.root, target.target, target.options);\n        } else
        {\n          target = target.root;\n        }\n\n        Ember.run(function()
        {\n          if (target.send) {\n            target.send.apply(target, args(options.parameters,
        actionName));\n          } else {\n            Ember.assert(\"The action '\"
        + actionName + \"' did not exist on \" + target, typeof target[actionName]
        === 'function');\n            target[actionName].apply(target, args(options.parameters));\n
        \         }\n        });\n      }\n    };\n\n    options.view.on('willClearRender',
        function() {\n      delete ActionHelper.registeredActions[actionId];\n    });\n\n
        \   return actionId;\n  };\n\n  /**\n    The `{{action}}` helper registers
        an HTML element within a template for DOM\n    event handling and forwards
        that interaction to the templates's controller\n    or supplied `target` option
        (see 'Specifying a Target').\n\n    If the controller does not implement the
        event, the event is sent\n    to the current route, and it bubbles up the
        route hierarchy from there.\n\n    User interaction with that element will
        invoke the supplied action name on\n    the appropriate target.\n\n    Given
        the following application Handlebars template on the page\n\n    ```handlebars\n
        \   <div {{action 'anActionName'}}>\n      click me\n    </div>\n    ```\n\n
        \   And application code\n\n    ```javascript\n    App.ApplicationController
        = Ember.Controller.extend({\n      actions: {\n        anActionName: function()
        {\n          \n        }  \n      }\n    });\n    ```\n\n    Will result in
        the following rendered HTML\n\n    ```html\n    <div class=\"ember-view\">\n
        \     <div data-ember-action=\"1\">\n        click me\n      </div>\n    </div>\n
        \   ```\n\n    Clicking \"click me\" will trigger the `anActionName` action
        of the\n    `App.ApplicationController`. In this case, no additional parameters
        will be passed.\n\n    If you provide additional parameters to the helper:\n\n
        \   ```handlebars\n    <button {{action 'edit' post}}>Edit</button>\n    ```\n\n
        \   Those parameters will be passed along as arguments to the JavaScript\n
        \   function implementing the action.\n\n    ### Event Propagation\n\n    Events
        triggered through the action helper will automatically have\n    `.preventDefault()`
        called on them. You do not need to do so in your event\n    handlers.\n\n
        \   To also disable bubbling, pass `bubbles=false` to the helper:\n\n    ```handlebars\n
        \   <button {{action 'edit' post bubbles=false}}>Edit</button>\n    ```\n\n
        \   If you need the default handler to trigger you should either register
        your\n    own event handler, or use event methods on your view class. See
        [Ember.View](/api/classes/Ember.View.html)\n    'Responding to Browser Events'
        for more information.\n\n    ### Specifying DOM event type\n\n    By default
        the `{{action}}` helper registers for DOM `click` events. You can\n    supply
        an `on` option to the helper to specify a different DOM event name:\n\n    ```handlebars\n
        \   <div {{action \"anActionName\" on=\"doubleClick\"}}>\n      click me\n
        \   </div>\n    ```\n\n    See `Ember.View` 'Responding to Browser Events'
        for a list of\n    acceptable DOM event names.\n\n    NOTE: Because `{{action}}`
        depends on Ember's event dispatch system it will\n    only function if an
        `Ember.EventDispatcher` instance is available. An\n    `Ember.EventDispatcher`
        instance will be created when a new `Ember.Application`\n    is created. Having
        an instance of `Ember.Application` will satisfy this\n    requirement.\n\n
        \   ### Specifying whitelisted modifier keys\n\n    By default the `{{action}}`
        helper will ignore click event with pressed modifier\n    keys. You can supply
        an `allowedKeys` option to specify which keys should not be ignored.\n\n    ```handlebars\n
        \   <div {{action \"anActionName\" allowedKeys=\"alt\"}}>\n      click me\n
        \   </div>\n    ```\n\n    This way the `{{action}}` will fire when clicking
        with the alt key pressed down.\n\n    Alternatively, supply \"any\" to the
        `allowedKeys` option to accept any combination of modifier keys.\n\n    ```handlebars\n
        \   <div {{action \"anActionName\" allowedKeys=\"any\"}}>\n      click me
        with any key pressed\n    </div>\n    ```\n\n    ### Specifying a Target\n\n
        \   There are several possible target objects for `{{action}}` helpers:\n\n
        \   In a typical Ember application, where views are managed through use of
        the\n    `{{outlet}}` helper, actions will bubble to the current controller,
        then\n    to the current route, and then up the route hierarchy.\n\n    Alternatively,
        a `target` option can be provided to the helper to change\n    which object
        will receive the method call. This option must be a path\n    to an object,
        accessible in the current context:\n\n    ```handlebars\n    {{! the application
        template }}\n    <div {{action \"anActionName\" target=view}}>\n      click
        me\n    </div>\n    ```\n\n    ```javascript\n    App.ApplicationView = Ember.View.extend({\n
        \     actions: {\n        anActionName: function(){}\n      }\n    });\n\n
        \   ```\n\n    ### Additional Parameters\n\n    You may specify additional
        parameters to the `{{action}}` helper. These\n    parameters are passed along
        as the arguments to the JavaScript function\n    implementing the action.\n\n
        \   ```handlebars\n    {{#each person in people}}\n      <div {{action \"edit\"
        person}}>\n        click me\n      </div>\n    {{/each}}\n    ```\n\n    Clicking
        \"click me\" will trigger the `edit` method on the current controller\n    with
        the value of `person` as a parameter.\n\n    @method action\n    @for Ember.Handlebars.helpers\n
        \   @param {String} actionName\n    @param {Object} [context]*\n    @param
        {Hash} options\n  */\n  EmberHandlebars.registerHelper('action', function(actionName)
        {\n    var options = arguments[arguments.length - 1],\n        contexts =
        a_slice.call(arguments, 1, -1);\n\n    var hash = options.hash,\n        controller;\n\n
        \   // create a hash to pass along to registerAction\n    var action = {\n
        \     eventName: hash.on || \"click\"\n    };\n\n    action.parameters = {\n
        \     context: this,\n      options: options,\n      params: contexts\n    };\n\n
        \   action.view = options.data.view;\n\n    var root, target;\n\n    if (hash.target)
        {\n      root = this;\n      target = hash.target;\n    } else if (controller
        = options.data.keywords.controller) {\n      root = controller;\n    }\n\n
        \   action.target = { root: root, target: target, options: options };\n    action.bubbles
        = hash.bubbles;\n\n    var actionId = ActionHelper.registerAction(actionName,
        action, hash.allowedKeys);\n    return new SafeString('data-ember-action=\"'
        + actionId + '\"');\n  });\n\n});\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-routing\n*/\n\nif (Ember.ENV.EXPERIMENTAL_CONTROL_HELPER)
        {\n  var get = Ember.get, set = Ember.set;\n\n  /**\n   `{{control}}` works
        like render, except it uses a new controller instance for every call, instead
        of reusing the singleton controller.\n\n    The control helper is currently
        under development and is considered experimental.\n    To enable it, set `ENV.EXPERIMENTAL_CONTROL_HELPER
        = true` before requiring Ember.\n\n   For example if you had this `author`
        template.\n\n   ```handlebars\n<div class=\"author\">\n  Written by {{firstName}}
        {{lastName}}.\n  Total Posts: {{postCount}}\n</div>\n   ```\n\n   You could
        render it inside the `post` template using the `control` helper.\n\n   ```handlebars\n<div
        class=\"post\">\n  <h1>{{title}}</h1>\n  <div>{{body}}</div>\n     {{control
        \"author\" author}}\n</div>\n   ```\n\n    @method control\n    @for Ember.Handlebars.helpers\n
        \   @param {String} path\n    @param {String} modelPath\n    @param {Hash}
        options\n    @return {String} HTML string\n  */\n  Ember.Handlebars.registerHelper('control',
        function(path, modelPath, options) {\n    if (arguments.length === 2) {\n
        \     options = modelPath;\n      modelPath = undefined;\n    }\n\n    var
        model;\n\n    if (modelPath) {\n      model = Ember.Handlebars.get(this, modelPath,
        options);\n    }\n\n    var controller = options.data.keywords.controller,\n
        \       view = options.data.keywords.view,\n        children = get(controller,
        '_childContainers'),\n        controlID = options.hash.controlID,\n        container,
        subContainer;\n\n    if (children.hasOwnProperty(controlID)) {\n      subContainer
        = children[controlID];\n    } else {\n      container = get(controller, 'container'),\n
        \     subContainer = container.child();\n      children[controlID] = subContainer;\n
        \   }\n\n    var normalizedPath = path.replace(/\\//g, '.');\n\n    var childView
        = subContainer.lookup('view:' + normalizedPath) || subContainer.lookup('view:default'),\n
        \       childController = subContainer.lookup('controller:' + normalizedPath),\n
        \       childTemplate = subContainer.lookup('template:' + path);\n\n    Ember.assert(\"Could
        not find controller for path: \" + normalizedPath, childController);\n    Ember.assert(\"Could
        not find view for path: \" + normalizedPath, childView);\n\n    set(childController,
        'target', controller);\n    set(childController, 'model', model);\n\n    options.hash.template
        = childTemplate;\n    options.hash.controller = childController;\n\n    function
        observer() {\n      var model = Ember.Handlebars.get(this, modelPath, options);\n
        \     set(childController, 'model', model);\n      childView.rerender();\n
        \   }\n\n    if (modelPath) {\n      Ember.addObserver(this, modelPath, observer);\n
        \     childView.one('willDestroyElement', this, function() {\n        Ember.removeObserver(this,
        modelPath, observer);\n      });\n    }\n\n    Ember.Handlebars.helpers.view.call(this,
        childView, options);\n  });\n}\n\n})();\n\n\n\n(function() {\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-routing\n*/\n\nvar get = Ember.get,
        set = Ember.set;\n\nEmber.ControllerMixin.reopen({\n  /**\n    Transition
        the application into another route. The route may\n    be either a single
        route or route path:\n\n    ```javascript\n      aController.transitionToRoute('blogPosts');\n
        \     aController.transitionToRoute('blogPosts.recentEntries');\n    ```\n\n
        \   Optionally supply a model for the route in question. The model\n    will
        be serialized into the URL using the `serialize` hook of\n    the route:\n\n
        \   ```javascript\n      aController.transitionToRoute('blogPost', aPost);\n
        \   ```\n\n    Multiple models will be applied last to first recursively up
        the\n    resource tree.\n\n    ```javascript\n\n      this.resource('blogPost',
        {path:':blogPostId'}, function(){\n        this.resource('blogComment', {path:
        ':blogCommentId'});\n      });\n      \n      aController.transitionToRoute('blogComment',
        aPost, aComment);\n    ```\n\n    See also 'replaceRoute'.\n\n    @param {String}
        name the name of the route\n    @param {...Object} models the model(s) to
        be used while transitioning\n    to the route.\n    @for Ember.ControllerMixin\n
        \   @method transitionToRoute\n  */\n  transitionToRoute: function() {\n    //
        target may be either another controller or a router\n    var target = get(this,
        'target'),\n        method = target.transitionToRoute || target.transitionTo;\n
        \   return method.apply(target, arguments);\n  },\n\n  /**\n    @deprecated\n
        \   @for Ember.ControllerMixin\n    @method transitionTo\n  */\n  transitionTo:
        function() {\n    Ember.deprecate(\"transitionTo is deprecated. Please use
        transitionToRoute.\");\n    return this.transitionToRoute.apply(this, arguments);\n
        \ },\n\n  /**\n    Transition into another route while replacing the current
        URL, if possible.\n    This will replace the current history entry instead
        of adding a new one. \n    Beside that, it is identical to `transitionToRoute`
        in all other respects.\n\n    ```javascript\n      aController.replaceRoute('blogPosts');\n
        \     aController.replaceRoute('blogPosts.recentEntries');\n    ```\n\n    Optionally
        supply a model for the route in question. The model\n    will be serialized
        into the URL using the `serialize` hook of\n    the route:\n\n    ```javascript\n
        \     aController.replaceRoute('blogPost', aPost);\n    ```\n\n    Multiple
        models will be applied last to first recursively up the\n    resource tree.\n\n
        \   ```javascript\n\n      this.resource('blogPost', {path:':blogPostId'},
        function(){\n        this.resource('blogComment', {path: ':blogCommentId'});\n
        \     });\n      \n      aController.replaceRoute('blogComment', aPost, aComment);\n
        \   ```\n\n    @param {String} name the name of the route\n    @param {...Object}
        models the model(s) to be used while transitioning\n    to the route.\n    @for
        Ember.ControllerMixin\n    @method replaceRoute\n  */\n  replaceRoute: function()
        {\n    // target may be either another controller or a router\n    var target
        = get(this, 'target'),\n        method = target.replaceRoute || target.replaceWith;\n
        \   return method.apply(target, arguments);\n  },\n\n  /**\n    @deprecated\n
        \   @for Ember.ControllerMixin\n    @method replaceWith\n  */\n  replaceWith:
        function() {\n    Ember.deprecate(\"replaceWith is deprecated. Please use
        replaceRoute.\");\n    return this.replaceRoute.apply(this, arguments);\n
        \ }\n});\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule ember-routing\n*/\n\nvar
        get = Ember.get, set = Ember.set;\n\nEmber.View.reopen({\n\n  /**\n    Sets
        the private `_outlets` object on the view.\n\n    @method init\n   */\n  init:
        function() {\n    set(this, '_outlets', {});\n    this._super();\n  },\n\n
        \ /**\n    Manually fill any of a view's `{{outlet}}` areas with the\n    supplied
        view.\n\n    Example\n\n    ```javascript\n    var MyView = Ember.View.extend({\n
        \     template: Ember.Handlebars.compile('Child view: {{outlet \"main\"}}
        ')\n    });\n    var myView = MyView.create();\n    myView.appendTo('body');\n
        \   // The html for myView now looks like:\n    // <div id=\"ember228\" class=\"ember-view\">Child
        view: </div>\n\n    myView.connectOutlet('main', Ember.View.extend({\n      template:
        Ember.Handlebars.compile('<h1>Foo</h1> ')\n    }));\n    // The html for myView
        now looks like:\n    // <div id=\"ember228\" class=\"ember-view\">Child view:\n
        \   //   <div id=\"ember234\" class=\"ember-view\"><h1>Foo</h1> </div>\n    //
        </div>\n    ```\n    @method connectOutlet\n    @param  {String} outletName
        A unique name for the outlet\n    @param  {Object} view       An Ember.View\n
        \  */\n  connectOutlet: function(outletName, view) {\n    if (this._pendingDisconnections)
        {\n      delete this._pendingDisconnections[outletName];\n    }\n\n    if
        (this._hasEquivalentView(outletName, view)) {\n      view.destroy();\n      return;\n
        \   }\n\n    var outlets = get(this, '_outlets'),\n        container = get(this,
        'container'),\n        router = container && container.lookup('router:main'),\n
        \       renderedName = get(view, 'renderedName');\n\n    set(outlets, outletName,
        view);\n\n    if (router && renderedName) {\n      router._connectActiveView(renderedName,
        view);\n    }\n  },\n\n  /**\n    @private\n\n    Determines if the view has
        already been created by checking if\n    the view has the same constructor,
        template, and context as the\n    view in the `_outlets` object.\n\n    @method
        _hasEquivalentView\n    @param  {String} outletName The name of the outlet
        we are checking\n    @param  {Object} view       An Ember.View\n    @return
        {Boolean}\n   */\n  _hasEquivalentView: function(outletName, view) {\n    var
        existingView = get(this, '_outlets.'+outletName);\n    return existingView
        &&\n      existingView.constructor === view.constructor &&\n      existingView.get('template')
        === view.get('template') &&\n      existingView.get('context') === view.get('context');\n
        \ },\n\n  /**\n    Removes an outlet from the view.\n\n    Example\n\n    ```javascript\n
        \   var MyView = Ember.View.extend({\n      template: Ember.Handlebars.compile('Child
        view: {{outlet \"main\"}} ')\n    });\n    var myView = MyView.create();\n
        \   myView.appendTo('body');\n    // myView's html:\n    // <div id=\"ember228\"
        class=\"ember-view\">Child view: </div>\n\n    myView.connectOutlet('main',
        Ember.View.extend({\n      template: Ember.Handlebars.compile('<h1>Foo</h1>
        ')\n    }));\n    // myView's html:\n    // <div id=\"ember228\" class=\"ember-view\">Child
        view:\n    //   <div id=\"ember234\" class=\"ember-view\"><h1>Foo</h1> </div>\n
        \   // </div>\n\n    myView.disconnectOutlet('main');\n    // myView's html:\n
        \   // <div id=\"ember228\" class=\"ember-view\">Child view: </div>\n    ```\n\n
        \   @method disconnectOutlet\n    @param  {String} outletName The name of
        the outlet to be removed\n   */\n  disconnectOutlet: function(outletName)
        {\n    if (!this._pendingDisconnections) {\n      this._pendingDisconnections
        = {};\n    }\n    this._pendingDisconnections[outletName] = true;\n    Ember.run.once(this,
        '_finishDisconnections');\n  },\n\n  /**\n    @private\n\n    Gets an outlet
        that is pending disconnection and then\n    nullifys the object on the `_outlet`
        object.\n\n    @method _finishDisconnections\n   */\n  _finishDisconnections:
        function() {\n    var outlets = get(this, '_outlets');\n    var pendingDisconnections
        = this._pendingDisconnections;\n    this._pendingDisconnections = null;\n\n
        \   for (var outletName in pendingDisconnections) {\n      set(outlets, outletName,
        null);\n    }\n  }\n});\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule
        ember-views\n*/\n\n// Add a new named queue after the 'actions' queue (where
        RSVP promises\n// resolve), which is used in router transitions to prevent
        unnecessary\n// loading state entry if all context promises resolve on the
        \n// 'actions' queue first.\n\nvar queues = Ember.run.queues,\n    indexOf
        = Ember.ArrayPolyfills.indexOf;\nqueues.splice(indexOf.call(queues, 'actions')
        + 1, 0, 'routerTransitions');\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-routing\n*/\n\nvar get = Ember.get, set = Ember.set;\n\n/*\n
        \ This file implements the `location` API used by Ember's router.\n\n  That
        API is:\n\n  getURL: returns the current URL\n  setURL(path): sets the current
        URL\n  replaceURL(path): replace the current URL (optional)\n  onUpdateURL(callback):
        triggers the callback when the URL changes\n  formatURL(url): formats `url`
        to be placed into `href` attribute\n\n  Calling setURL or replaceURL will
        not trigger onUpdateURL callbacks.\n\n  TODO: This should perhaps be moved
        so that it's visible in the doc output.\n*/\n\n/**\n  Ember.Location returns
        an instance of the correct implementation of\n  the `location` API.\n\n  You
        can pass it a `implementation` ('hash', 'history', 'none') to force a\n  particular
        implementation.\n\n  @class Location\n  @namespace Ember\n  @static\n*/\nEmber.Location
        = {\n  /**\n   Create an instance of a an implementation of the `location`
        API. Requires\n   an options object with an `implementation` property.\n\n
        \  Example\n\n   ```javascript\n   var hashLocation = Ember.Location.create({implementation:
        'hash'});\n   var historyLocation = Ember.Location.create({implementation:
        'history'});\n   var noneLocation = Ember.Location.create({implementation:
        'none'});\n   ```\n\n    @method create\n    @param {Object} options\n    @return
        {Object} an instance of an implementation of the `location` API\n  */\n  create:
        function(options) {\n    var implementation = options && options.implementation;\n
        \   Ember.assert(\"Ember.Location.create: you must specify a 'implementation'
        option\", !!implementation);\n\n    var implementationClass = this.implementations[implementation];\n
        \   Ember.assert(\"Ember.Location.create: \" + implementation + \" is not
        a valid implementation\", !!implementationClass);\n\n    return implementationClass.create.apply(implementationClass,
        arguments);\n  },\n\n  /**\n   Registers a class that implements the `location`
        API with an implementation\n   name. This implementation name can then be
        specified by the location property on\n   the application's router class.\n\n
        \  Example\n\n   ```javascript\n   Ember.Location.registerImplementation('history',
        Ember.HistoryLocation);\n\n   App.Router.reopen({\n     location: 'history'\n
        \  });\n   ```\n\n    @method registerImplementation\n    @param {String}
        name\n    @param {Object} implementation of the `location` API\n  */\n  registerImplementation:
        function(name, implementation) {\n    this.implementations[name] = implementation;\n
        \ },\n\n  implementations: {}\n};\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-routing\n*/\n\nvar get = Ember.get, set = Ember.set;\n\n/**\n
        \ Ember.NoneLocation does not interact with the browser. It is useful for\n
        \ testing, or when you need to manage state with your Router, but temporarily\n
        \ don't want it to muck with the URL (for example when you embed your\n  application
        in a larger page).\n\n  @class NoneLocation\n  @namespace Ember\n  @extends
        Ember.Object\n*/\nEmber.NoneLocation = Ember.Object.extend({\n  path: '',\n\n
        \ /**\n    @private\n\n    Returns the current path.\n\n    @method getURL\n
        \   @return {String} path\n  */\n  getURL: function() {\n    return get(this,
        'path');\n  },\n\n  /**\n    @private\n\n    Set the path and remembers what
        was set. Using this method\n    to change the path will not invoke the `updateURL`
        callback.\n\n    @method setURL\n    @param path {String}\n  */\n  setURL:
        function(path) {\n    set(this, 'path', path);\n  },\n\n  /**\n    @private\n\n
        \   Register a callback to be invoked when the path changes. These\n    callbacks
        will execute when the user presses the back or forward\n    button, but not
        after `setURL` is invoked.\n\n    @method onUpdateURL\n    @param callback
        {Function}\n  */\n  onUpdateURL: function(callback) {\n    this.updateCallback
        = callback;\n  },\n\n  /**\n    @private\n\n    Sets the path and calls the
        `updateURL` callback.\n\n    @method handleURL\n    @param callback {Function}\n
        \ */\n  handleURL: function(url) {\n    set(this, 'path', url);\n    this.updateCallback(url);\n
        \ },\n\n  /**\n    @private\n\n    Given a URL, formats it to be placed into
        the page as part\n    of an element's `href` attribute.\n\n    This is used,
        for example, when using the {{action}} helper\n    to generate a URL based
        on an event.\n\n    @method formatURL\n    @param url {String}\n    @return
        {String} url\n  */\n  formatURL: function(url) {\n    // The return value
        is not overly meaningful, but we do not want to throw\n    // errors when
        test code renders templates containing {{action href=true}}\n    // helpers.\n
        \   return url;\n  }\n});\n\nEmber.Location.registerImplementation('none',
        Ember.NoneLocation);\n\n})();\n\n\n\n(function() {\n/**\n@module ember\n@submodule
        ember-routing\n*/\n\nvar get = Ember.get, set = Ember.set;\n\n/**\n  Ember.HashLocation
        implements the location API using the browser's\n  hash. At present, it relies
        on a hashchange event existing in the\n  browser.\n\n  @class HashLocation\n
        \ @namespace Ember\n  @extends Ember.Object\n*/\nEmber.HashLocation = Ember.Object.extend({\n\n
        \ init: function() {\n    set(this, 'location', get(this, 'location') || window.location);\n
        \ },\n\n  /**\n    @private\n\n    Returns the current `location.hash`, minus
        the '#' at the front.\n\n    @method getURL\n  */\n  getURL: function() {\n
        \   return get(this, 'location').hash.substr(1);\n  },\n\n  /**\n    @private\n\n
        \   Set the `location.hash` and remembers what was set. This prevents\n    `onUpdateURL`
        callbacks from triggering when the hash was set by\n    `HashLocation`.\n\n
        \   @method setURL\n    @param path {String}\n  */\n  setURL: function(path)
        {\n    get(this, 'location').hash = path;\n    set(this, 'lastSetURL', path);\n
        \ },\n\n  /**\n    @private\n\n    Uses location.replace to update the url
        without a page reload\n    or history modification.\n\n    @method replaceURL\n
        \   @param path {String}\n  */\n  replaceURL: function(path) {\n    get(this,
        'location').replace('#' + path);\n  },\n\n  /**\n    @private\n\n    Register
        a callback to be invoked when the hash changes. These\n    callbacks will
        execute when the user presses the back or forward\n    button, but not after
        `setURL` is invoked.\n\n    @method onUpdateURL\n    @param callback {Function}\n
        \ */\n  onUpdateURL: function(callback) {\n    var self = this;\n    var guid
        = Ember.guidFor(this);\n\n    Ember.$(window).on('hashchange.ember-location-'+guid,
        function() {\n      Ember.run(function() {\n        var path = location.hash.substr(1);\n
        \       if (get(self, 'lastSetURL') === path) { return; }\n\n        set(self,
        'lastSetURL', null);\n\n        callback(path);\n      });\n    });\n  },\n\n
        \ /**\n    @private\n\n    Given a URL, formats it to be placed into the page
        as part\n    of an element's `href` attribute.\n\n    This is used, for example,
        when using the {{action}} helper\n    to generate a URL based on an event.\n\n
        \   @method formatURL\n    @param url {String}\n  */\n  formatURL: function(url)
        {\n    return '#'+url;\n  },\n\n  /**\n    @private\n\n    Cleans up the HashLocation
        event listener.\n\n    @method willDestroy\n  */\n  willDestroy: function()
        {\n    var guid = Ember.guidFor(this);\n\n    Ember.$(window).off('hashchange.ember-location-'+guid);\n
        \ }\n});\n\nEmber.Location.registerImplementation('hash', Ember.HashLocation);\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-routing\n*/\n\nvar get = Ember.get,
        set = Ember.set;\nvar popstateFired = false;\nvar supportsHistoryState = window.history
        && 'state' in window.history;\n\n/**\n  Ember.HistoryLocation implements the
        location API using the browser's\n  history.pushState API.\n\n  @class HistoryLocation\n
        \ @namespace Ember\n  @extends Ember.Object\n*/\nEmber.HistoryLocation = Ember.Object.extend({\n\n
        \ init: function() {\n    set(this, 'location', get(this, 'location') || window.location);\n
        \   this.initState();\n  },\n\n  /**\n    @private\n\n    Used to set state
        on first call to setURL\n\n    @method initState\n  */\n  initState: function()
        {\n    set(this, 'history', get(this, 'history') || window.history);\n    this.replaceState(this.formatURL(this.getURL()));\n
        \ },\n\n  /**\n    Will be pre-pended to path upon state change\n\n    @property
        rootURL\n    @default '/'\n  */\n  rootURL: '/',\n\n  /**\n    @private\n\n
        \   Returns the current `location.pathname` without rootURL\n\n    @method
        getURL\n    @return url {String}\n  */\n  getURL: function() {\n    var rootURL
        = get(this, 'rootURL'),\n        url = get(this, 'location').pathname;\n\n
        \   rootURL = rootURL.replace(/\\/$/, '');\n    url = url.replace(rootURL,
        '');\n\n    return url;\n  },\n\n  /**\n    @private\n\n    Uses `history.pushState`
        to update the url without a page reload.\n\n    @method setURL\n    @param
        path {String}\n  */\n  setURL: function(path) {\n    var state = this.getState();\n
        \   path = this.formatURL(path);\n\n    if (state && state.path !== path)
        {\n      this.pushState(path);\n    }\n  },\n\n  /**\n    @private\n\n    Uses
        `history.replaceState` to update the url without a page reload\n    or history
        modification.\n\n    @method replaceURL\n    @param path {String}\n  */\n
        \ replaceURL: function(path) {\n    var state = this.getState();\n    path
        = this.formatURL(path);\n\n    if (state && state.path !== path) {\n      this.replaceState(path);\n
        \   }\n  },\n\n  /**\n   @private\n\n   Get the current `history.state`\n
        \  Polyfill checks for native browser support and falls back to retrieving\n
        \  from a private _historyState variable\n\n   @method getState\n   @return
        state {Object}\n  */\n  getState: function() {\n    return supportsHistoryState
        ? get(this, 'history').state : this._historyState;\n  },\n\n  /**\n   @private\n\n
        \  Pushes a new state\n\n   @method pushState\n   @param path {String}\n  */\n
        \ pushState: function(path) {\n    var state = { path: path };\n\n    get(this,
        'history').pushState(state, null, path);\n\n    // store state if browser
        doesn't support `history.state`\n    if (!supportsHistoryState) {\n      this._historyState
        = state;\n    }\n\n    // used for webkit workaround\n    this._previousURL
        = this.getURL();\n  },\n\n  /**\n   @private\n\n   Replaces the current state\n\n
        \  @method replaceState\n   @param path {String}\n  */\n  replaceState: function(path)
        {\n    var state = { path: path };\n\n    get(this, 'history').replaceState(state,
        null, path);\n\n    // store state if browser doesn't support `history.state`\n
        \   if (!supportsHistoryState) {\n      this._historyState = state;\n    }\n\n
        \   // used for webkit workaround\n    this._previousURL = this.getURL();\n
        \ },\n\n  /**\n    @private\n\n    Register a callback to be invoked whenever
        the browser\n    history changes, including using forward and back buttons.\n\n
        \   @method onUpdateURL\n    @param callback {Function}\n  */\n  onUpdateURL:
        function(callback) {\n    var guid = Ember.guidFor(this),\n        self =
        this;\n\n    Ember.$(window).on('popstate.ember-location-'+guid, function(e)
        {\n      // Ignore initial page load popstate event in Chrome\n      if (!popstateFired)
        {\n        popstateFired = true;\n        if (self.getURL() === self._previousURL)
        { return; }\n      }\n      callback(self.getURL());\n    });\n  },\n\n  /**\n
        \   @private\n\n    Used when using `{{action}}` helper.  The url is always
        appended to the rootURL.\n\n    @method formatURL\n    @param url {String}\n
        \   @return formatted url {String}\n  */\n  formatURL: function(url) {\n    var
        rootURL = get(this, 'rootURL');\n\n    if (url !== '') {\n      rootURL =
        rootURL.replace(/\\/$/, '');\n    }\n\n    return rootURL + url;\n  },\n\n
        \ /**\n    @private\n\n    Cleans up the HistoryLocation event listener.\n\n
        \   @method willDestroy\n  */\n  willDestroy: function() {\n    var guid =
        Ember.guidFor(this);\n\n    Ember.$(window).off('popstate.ember-location-'+guid);\n
        \ }\n});\n\nEmber.Location.registerImplementation('history', Ember.HistoryLocation);\n\n})();\n\n\n\n(function()
        {\n\n})();\n\n\n\n(function() {\n/**\nEmber Routing\n\n@module ember\n@submodule
        ember-routing\n@requires ember-views\n*/\n\n})();\n\n(function() {\nfunction
        visit(vertex, fn, visited, path) {\n  var name = vertex.name,\n    vertices
        = vertex.incoming,\n    names = vertex.incomingNames,\n    len = names.length,\n
        \   i;\n  if (!visited) {\n    visited = {};\n  }\n  if (!path) {\n    path
        = [];\n  }\n  if (visited.hasOwnProperty(name)) {\n    return;\n  }\n  path.push(name);\n
        \ visited[name] = true;\n  for (i = 0; i < len; i++) {\n    visit(vertices[names[i]],
        fn, visited, path);\n  }\n  fn(vertex, path);\n  path.pop();\n}\n\nfunction
        DAG() {\n  this.names = [];\n  this.vertices = {};\n}\n\nDAG.prototype.add
        = function(name) {\n  if (!name) { return; }\n  if (this.vertices.hasOwnProperty(name))
        {\n    return this.vertices[name];\n  }\n  var vertex = {\n    name: name,
        incoming: {}, incomingNames: [], hasOutgoing: false, value: null\n  };\n  this.vertices[name]
        = vertex;\n  this.names.push(name);\n  return vertex;\n};\n\nDAG.prototype.map
        = function(name, value) {\n  this.add(name).value = value;\n};\n\nDAG.prototype.addEdge
        = function(fromName, toName) {\n  if (!fromName || !toName || fromName ===
        toName) {\n    return;\n  }\n  var from = this.add(fromName), to = this.add(toName);\n
        \ if (to.incoming.hasOwnProperty(fromName)) {\n    return;\n  }\n  function
        checkCycle(vertex, path) {\n    if (vertex.name === toName) {\n      throw
        new Ember.Error(\"cycle detected: \" + toName + \" <- \" + path.join(\" <-
        \"));\n    }\n  }\n  visit(from, checkCycle);\n  from.hasOutgoing = true;\n
        \ to.incoming[fromName] = from;\n  to.incomingNames.push(fromName);\n};\n\nDAG.prototype.topsort
        = function(fn) {\n  var visited = {},\n    vertices = this.vertices,\n    names
        = this.names,\n    len = names.length,\n    i, vertex;\n  for (i = 0; i <
        len; i++) {\n    vertex = vertices[names[i]];\n    if (!vertex.hasOutgoing)
        {\n      visit(vertex, fn, visited);\n    }\n  }\n};\n\nDAG.prototype.addEdges
        = function(name, value, before, after) {\n  var i;\n  this.map(name, value);\n
        \ if (before) {\n    if (typeof before === 'string') {\n      this.addEdge(name,
        before);\n    } else {\n      for (i = 0; i < before.length; i++) {\n        this.addEdge(name,
        before[i]);\n      }\n    }\n  }\n  if (after) {\n    if (typeof after ===
        'string') {\n      this.addEdge(after, name);\n    } else {\n      for (i
        = 0; i < after.length; i++) {\n        this.addEdge(after[i], name);\n      }\n
        \   }\n  }\n};\n\nEmber.DAG = DAG;\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-application\n*/\n\nvar get = Ember.get,\n    classify
        = Ember.String.classify,\n    capitalize = Ember.String.capitalize,\n    decamelize
        = Ember.String.decamelize;\n\n/**\n  The DefaultResolver defines the default
        lookup rules to resolve\n  container lookups before consulting the container
        for registered\n  items:\n\n* templates are looked up on `Ember.TEMPLATES`\n*
        other names are looked up on the application after converting\n  the name.
        For example, `controller:post` looks up\n  `App.PostController` by default.\n*
        there are some nuances (see examples below)\n\n  ### How Resolving Works\n\n
        \ The container calls this object's `resolve` method with the\n  `fullName`
        argument.\n\n  It first parses the fullName into an object using `parseName`.\n\n
        \ Then it checks for the presence of a type-specific instance\n  method of
        the form `resolve[Type]` and calls it if it exists.\n  For example if it was
        resolving 'template:post', it would call\n  the `resolveTemplate` method.\n\n
        \ Its last resort is to call the `resolveOther` method.\n\n  The methods of
        this object are designed to be easy to override\n  in a subclass. For example,
        you could enhance how a template\n  is resolved like so:\n\n  ```javascript\n
        \ App = Ember.Application.create({\n    Resolver: Ember.DefaultResolver.extend({\n
        \     resolveTemplate: function(parsedName) {\n        var resolvedTemplate
        = this._super(parsedName);\n        if (resolvedTemplate) { return resolvedTemplate;
        }\n        return Ember.TEMPLATES['not_found'];\n      }\n    })\n  });\n
        \ ```\n\n  Some examples of how names are resolved:\n\n  ```\n  'template:post'
        //=> Ember.TEMPLATES['post']\n  'template:posts/byline' //=> Ember.TEMPLATES['posts/byline']\n
        \ 'template:posts.byline' //=> Ember.TEMPLATES['posts/byline']\n  'template:blogPost'
        //=> Ember.TEMPLATES['blogPost']\n                      //   OR\n                      //
        \  Ember.TEMPLATES['blog_post']\n  'controller:post' //=> App.PostController\n
        \ 'controller:posts.index' //=> App.PostsIndexController\n  'controller:blog/post'
        //=> Blog.PostController\n  'controller:basic' //=> Ember.Controller\n  'route:post'
        //=> App.PostRoute\n  'route:posts.index' //=> App.PostsIndexRoute\n  'route:blog/post'
        //=> Blog.PostRoute\n  'route:basic' //=> Ember.Route\n  'view:post' //=>
        App.PostView\n  'view:posts.index' //=> App.PostsIndexView\n  'view:blog/post'
        //=> Blog.PostView\n  'view:basic' //=> Ember.View\n  'foo:post' //=> App.PostFoo\n
        \ 'model:post' //=> App.Post\n  ```\n\n  @class DefaultResolver\n  @namespace
        Ember\n  @extends Ember.Object\n*/\nEmber.DefaultResolver = Ember.Object.extend({\n
        \ /**\n    This will be set to the Application instance when it is\n    created.\n\n
        \   @property namespace\n  */\n  namespace: null,\n\n  normalize: function(fullName)
        {\n    var split = fullName.split(':', 2),\n        type = split[0],\n        name
        = split[1];\n\n    Ember.assert(\"Tried to normalize a container name without
        a colon (:) in it. You probably tried to lookup a name that did not contain
        a type, a colon, and a name. A proper lookup name would be `view:post`.\",
        split.length === 2);\n\n    if (type !== 'template') {\n      var result =
        name;\n\n      if (result.indexOf('.') > -1) {\n        result = result.replace(/\\.(.)/g,
        function(m) { return m.charAt(1).toUpperCase(); });\n      }\n\n      if (name.indexOf('_')
        > -1) {\n        result = result.replace(/_(.)/g, function(m) { return m.charAt(1).toUpperCase();
        });\n      }\n\n      return type + ':' + result;\n    } else {\n      return
        fullName;\n    }\n  },\n\n\n  /**\n    This method is called via the container's
        resolver method.\n    It parses the provided `fullName` and then looks up
        and\n    returns the appropriate template or class.\n\n    @method resolve\n
        \   @param {String} fullName the lookup string\n    @return {Object} the resolved
        factory\n  */\n  resolve: function(fullName) {\n    var parsedName = this.parseName(fullName),\n
        \       typeSpecificResolveMethod = this[parsedName.resolveMethodName];\n\n
        \   if (!parsedName.name || !parsedName.type) {\n      throw new TypeError(\"Invalid
        fullName: `\" + fullName + \"`, must of of the form `type:name` \");\n    }\n\n
        \   if (typeSpecificResolveMethod) {\n      var resolved = typeSpecificResolveMethod.call(this,
        parsedName);\n      if (resolved) { return resolved; }\n    }\n    return
        this.resolveOther(parsedName);\n  },\n  /**\n    Convert the string name of
        the form \"type:name\" to\n    a Javascript object with the parsed aspects
        of the name\n    broken out.\n\n    @protected\n    @param {String} fullName
        the lookup string\n    @method parseName\n  */\n  parseName: function(fullName)
        {\n    var nameParts = fullName.split(\":\"),\n        type = nameParts[0],
        fullNameWithoutType = nameParts[1],\n        name = fullNameWithoutType,\n
        \       namespace = get(this, 'namespace'),\n        root = namespace;\n\n
        \   if (type !== 'template' && name.indexOf('/') !== -1) {\n      var parts
        = name.split('/');\n      name = parts[parts.length - 1];\n      var namespaceName
        = capitalize(parts.slice(0, -1).join('.'));\n      root = Ember.Namespace.byName(namespaceName);\n\n
        \     Ember.assert('You are looking for a ' + name + ' ' + type + ' in the
        ' + namespaceName + ' namespace, but the namespace could not be found', root);\n
        \   }\n\n    return {\n      fullName: fullName,\n      type: type,\n      fullNameWithoutType:
        fullNameWithoutType,\n      name: name,\n      root: root,\n      resolveMethodName:
        \"resolve\" + classify(type)\n    };\n  },\n  /**\n    Look up the template
        in Ember.TEMPLATES\n\n    @protected\n    @param {Object} parsedName a parseName
        object with the parsed\n      fullName lookup string\n    @method resolveTemplate\n
        \ */\n  resolveTemplate: function(parsedName) {\n    var templateName = parsedName.fullNameWithoutType.replace(/\\./g,
        '/');\n\n    if (Ember.TEMPLATES[templateName]) {\n      return Ember.TEMPLATES[templateName];\n
        \   }\n\n    templateName = decamelize(templateName);\n    if (Ember.TEMPLATES[templateName])
        {\n      return Ember.TEMPLATES[templateName];\n    }\n  },\n  /**\n    Given
        a parseName object (output from `parseName`), apply\n    the conventions expected
        by `Ember.Router`\n\n    @protected\n    @param {Object} parsedName a parseName
        object with the parsed\n      fullName lookup string\n    @method useRouterNaming\n
        \ */\n  useRouterNaming: function(parsedName) {\n    parsedName.name = parsedName.name.replace(/\\./g,
        '_');\n    if (parsedName.name === 'basic') {\n      parsedName.name = '';\n
        \   }\n  },\n  /**\n    Lookup the controller using `resolveOther`\n\n    @protected\n
        \   @param {Object} parsedName a parseName object with the parsed\n      fullName
        lookup string\n    @method resolveController\n  */\n  resolveController: function(parsedName)
        {\n    this.useRouterNaming(parsedName);\n    return this.resolveOther(parsedName);\n
        \ },\n  /**\n    Lookup the route using `resolveOther`\n\n    @protected\n
        \   @param {Object} parsedName a parseName object with the parsed\n      fullName
        lookup string\n    @method resolveRoute\n  */\n  resolveRoute: function(parsedName)
        {\n    this.useRouterNaming(parsedName);\n    return this.resolveOther(parsedName);\n
        \ },\n  /**\n    Lookup the view using `resolveOther`\n\n    @protected\n
        \   @param {Object} parsedName a parseName object with the parsed\n      fullName
        lookup string\n    @method resolveView\n  */\n  resolveView: function(parsedName)
        {\n    this.useRouterNaming(parsedName);\n    return this.resolveOther(parsedName);\n
        \ },\n\n  /**\n    Lookup the model on the Application namespace\n\n    @protected\n
        \   @param {Object} parsedName a parseName object with the parsed\n      fullName
        lookup string\n    @method resolveModel\n  */\n  resolveModel: function(parsedName)
        {\n    var className = classify(parsedName.name),\n        factory = get(parsedName.root,
        className);\n\n     if (factory) { return factory; }\n  },\n  /**\n    Look
        up the specified object (from parsedName) on the appropriate\n    namespace
        (usually on the Application)\n\n    @protected\n    @param {Object} parsedName
        a parseName object with the parsed\n      fullName lookup string\n    @method
        resolveOther\n  */\n  resolveOther: function(parsedName) {\n    var className
        = classify(parsedName.name) + classify(parsedName.type),\n        factory
        = get(parsedName.root, className);\n    if (factory) { return factory; }\n
        \ },\n\n  /**\n    Returns a human-readable description for a fullName. Used
        by the\n    Application namespace in assertions to describe the\n    precise
        name of the class that Ember is looking for, rather than\n    container keys.\n\n
        \   @protected\n    @param {String} fullName the lookup string\n    @method
        lookupDescription\n  */\n  lookupDescription: function(fullName) {\n    var
        parsedName = this.parseName(fullName);\n\n    if (parsedName.type === 'template')
        {\n      return \"template at \" + parsedName.fullNameWithoutType.replace(/\\./g,
        '/');\n    }\n\n    var description = parsedName.root + \".\" + classify(parsedName.name);\n
        \   if (parsedName.type !== 'model') { description += classify(parsedName.type);
        }\n\n    return description;\n  },\n\n  makeToString: function(factory, fullName)
        {\n    return factory.toString();\n  }\n});\n\n})();\n\n\n\n(function() {\n/**\n@module
        ember\n@submodule ember-application\n*/\n\nvar get = Ember.get, set = Ember.set;\n\nfunction
        DeprecatedContainer(container) {\n  this._container = container;\n}\n\nDeprecatedContainer.deprecate
        = function(method) {\n  return function() {\n    var container = this._container;\n\n
        \   Ember.deprecate('Using the defaultContainer is no longer supported. [defaultContainer#'
        + method + '] see: http://git.io/EKPpnA', false);\n    return container[method].apply(container,
        arguments);\n  };\n};\n\nDeprecatedContainer.prototype = {\n  _container:
        null,\n  lookup: DeprecatedContainer.deprecate('lookup'),\n  resolve: DeprecatedContainer.deprecate('resolve'),\n
        \ register: DeprecatedContainer.deprecate('register')\n};\n\n/**\n  An instance
        of `Ember.Application` is the starting point for every Ember\n  application.
        It helps to instantiate, initialize and coordinate the many\n  objects that
        make up your app.\n\n  Each Ember app has one and only one `Ember.Application`
        object. In fact, the\n  very first thing you should do in your application
        is create the instance:\n\n  ```javascript\n  window.App = Ember.Application.create();\n
        \ ```\n\n  Typically, the application object is the only global variable.
        All other\n  classes in your app should be properties on the `Ember.Application`
        instance,\n  which highlights its first role: a global namespace.\n\n  For
        example, if you define a view class, it might look like this:\n\n  ```javascript\n
        \ App.MyView = Ember.View.extend();\n  ```\n\n  By default, calling `Ember.Application.create()`
        will automatically initialize\n  your application by calling the `Ember.Application.initialize()`
        method. If\n  you need to delay initialization, you can call your app's `deferReadiness()`\n
        \ method. When you are ready for your app to be initialized, call its\n  `advanceReadiness()`
        method.\n\n  You can define a `ready` method on the `Ember.Application` instance,
        which\n  will be run by Ember when the application is initialized.\n\n  Because
        `Ember.Application` inherits from `Ember.Namespace`, any classes\n  you create
        will have useful string representations when calling `toString()`.\n  See
        the `Ember.Namespace` documentation for more information.\n\n  While you can
        think of your `Ember.Application` as a container that holds the\n  other classes
        in your application, there are several other responsibilities\n  going on
        under-the-hood that you may want to understand.\n\n  ### Event Delegation\n\n
        \ Ember uses a technique called _event delegation_. This allows the framework\n
        \ to set up a global, shared event listener instead of requiring each view
        to\n  do it manually. For example, instead of each view registering its own\n
        \ `mousedown` listener on its associated element, Ember sets up a `mousedown`\n
        \ listener on the `body`.\n\n  If a `mousedown` event occurs, Ember will look
        at the target of the event and\n  start walking up the DOM node tree, finding
        corresponding views and invoking\n  their `mouseDown` method as it goes.\n\n
        \ `Ember.Application` has a number of default events that it listens for,
        as\n  well as a mapping from lowercase events to camel-cased view method names.
        For\n  example, the `keypress` event causes the `keyPress` method on the view
        to be\n  called, the `dblclick` event causes `doubleClick` to be called, and
        so on.\n\n  If there is a bubbling browser event that Ember does not listen
        for by\n  default, you can specify custom events and their corresponding view
        method\n  names by setting the application's `customEvents` property:\n\n
        \ ```javascript\n  App = Ember.Application.create({\n    customEvents: {\n
        \     // add support for the paste event\n      'paste: \"paste\"\n    }\n
        \ });\n  ```\n\n  By default, the application sets up these event listeners
        on the document\n  body. However, in cases where you are embedding an Ember
        application inside\n  an existing page, you may want it to set up the listeners
        on an element\n  inside the body.\n\n  For example, if only events inside
        a DOM element with the ID of `ember-app`\n  should be delegated, set your
        application's `rootElement` property:\n\n  ```javascript\n  window.App = Ember.Application.create({\n
        \   rootElement: '#ember-app'\n  });\n  ```\n\n  The `rootElement` can be
        either a DOM element or a jQuery-compatible selector\n  string. Note that
        *views appended to the DOM outside the root element will\n  not receive events.*
        If you specify a custom root element, make sure you only\n  append views inside
        it!\n\n  To learn more about the advantages of event delegation and the Ember
        view\n  layer, and a list of the event listeners that are setup by default,
        visit the\n  [Ember View Layer guide](http://emberjs.com/guides/understanding-ember/the-view-layer/#toc_event-delegation).\n\n
        \ ### Initializers\n\n  Libraries on top of Ember can register additional
        initializers, like so:\n\n  ```javascript\n  Ember.Application.initializer({\n
        \   name: \"store\",\n\n    initialize: function(container, application) {\n
        \     container.register('store:main', application.Store);\n    }\n  });\n
        \ ```\n\n  ### Routing\n\n  In addition to creating your application's router,
        `Ember.Application` is\n  also responsible for telling the router when to
        start routing. Transitions\n  between routes can be logged with the `LOG_TRANSITIONS`
        flag, and more\n  detailed intra-transition logging can be logged with\n  the
        `LOG_TRANSITIONS_INTERNAL` flag:\n\n  ```javascript\n  window.App = Ember.Application.create({\n
        \   LOG_TRANSITIONS: true, // basic logging of successful transitions\n    LOG_TRANSITIONS_INTERNAL:
        true // detailed logging of all routing steps\n  });\n  ```\n\n  By default,
        the router will begin trying to translate the current URL into\n  application
        state once the browser emits the `DOMContentReady` event. If you\n  need to
        defer routing, you can call the application's `deferReadiness()`\n  method.
        Once routing can begin, call the `advanceReadiness()` method.\n\n  If there
        is any setup required before routing begins, you can implement a\n  `ready()`
        method on your app that will be invoked immediately before routing\n  begins.\n
        \ ```\n\n  @class Application\n  @namespace Ember\n  @extends Ember.Namespace\n*/\n\nvar
        Application = Ember.Application = Ember.Namespace.extend(Ember.DeferredMixin,
        {\n\n  /**\n    The root DOM element of the Application. This can be specified
        as an\n    element or a\n    [jQuery-compatible selector string](http://api.jquery.com/category/selectors/).\n\n
        \   This is the element that will be passed to the Application's,\n    `eventDispatcher`,
        which sets up the listeners for event delegation. Every\n    view in your
        application should be a child of the element you specify here.\n\n    @property
        rootElement\n    @type DOMElement\n    @default 'body'\n  */\n  rootElement:
        'body',\n\n  /**\n    The `Ember.EventDispatcher` responsible for delegating
        events to this\n    application's views.\n\n    The event dispatcher is created
        by the application at initialization time\n    and sets up event listeners
        on the DOM element described by the\n    application's `rootElement` property.\n\n
        \   See the documentation for `Ember.EventDispatcher` for more information.\n\n
        \   @property eventDispatcher\n    @type Ember.EventDispatcher\n    @default
        null\n  */\n  eventDispatcher: null,\n\n  /**\n    The DOM events for which
        the event dispatcher should listen.\n\n    By default, the application's `Ember.EventDispatcher`
        listens\n    for a set of standard DOM events, such as `mousedown` and\n    `keyup`,
        and delegates them to your application's `Ember.View`\n    instances.\n\n
        \   If you would like additional bubbling events to be delegated to your\n
        \   views, set your `Ember.Application`'s `customEvents` property\n    to
        a hash containing the DOM event name as the key and the\n    corresponding
        view method name as the value. For example:\n\n    ```javascript\n    App
        = Ember.Application.create({\n      customEvents: {\n        // add support
        for the paste event\n        'paste: \"paste\"\n      }\n    });\n    ```\n\n
        \   @property customEvents\n    @type Object\n    @default null\n  */\n  customEvents:
        null,\n\n  // Start off the number of deferrals at 1. This will be\n  // decremented
        by the Application's own `initialize` method.\n  _readinessDeferrals: 1,\n\n
        \ init: function() {\n    if (!this.$) { this.$ = Ember.$; }\n    this.__container__
        = this.buildContainer();\n\n    this.Router = this.Router || this.defaultRouter();\n
        \   if (this.Router) { this.Router.namespace = this; }\n\n    this._super();\n\n
        \   this.scheduleInitialize();\n\n    Ember.libraries.registerCoreLibrary('Handlebars',
        Ember.Handlebars.VERSION);\n    Ember.libraries.registerCoreLibrary('jQuery',
        Ember.$().jquery);\n\n    if ( Ember.LOG_VERSION ) {\n      Ember.LOG_VERSION
        = false; // we only need to see this once per Application#init\n      var
        maxNameLength = Math.max.apply(this, Ember.A(Ember.libraries).mapBy(\"name.length\"));\n\n
        \     Ember.debug('-------------------------------');\n      Ember.libraries.each(function(name,
        version) {\n        var spaces = new Array(maxNameLength - name.length + 1).join(\"
        \");\n        Ember.debug([name, spaces, ' : ', version].join(\"\"));\n      });\n
        \     Ember.debug('-------------------------------');\n    }\n  },\n\n  /**\n
        \   @private\n\n    Build the container for the current application.\n\n    Also
        register a default application view in case the application\n    itself does
        not.\n\n    @method buildContainer\n    @return {Ember.Container} the configured
        container\n  */\n  buildContainer: function() {\n    var container = this.__container__
        = Application.buildContainer(this);\n\n    return container;\n  },\n\n  /**\n
        \   @private\n\n    If the application has not opted out of routing and has
        not explicitly\n    defined a router, supply a default router for the application
        author\n    to configure.\n\n    This allows application developers to do:\n\n
        \   ```javascript\n    var App = Ember.Application.create();\n\n    App.Router.map(function()
        {\n      this.resource('posts');\n    });\n    ```\n\n    @method defaultRouter\n
        \   @return {Ember.Router} the default router\n  */\n  defaultRouter: function()
        {\n    // Create a default App.Router if one was not supplied to make\n    //
        it possible to do App.Router.map(...) without explicitly\n    // creating
        a router first.\n    if (this.router === undefined) {\n      return Ember.Router.extend();\n
        \   }\n  },\n\n  /**\n    @private\n\n    Automatically initialize the application
        once the DOM has\n    become ready.\n\n    The initialization itself is scheduled
        on the actions queue\n    which ensures that application loading finishes
        before\n    booting.\n\n    If you are asynchronously loading code, you should
        call\n    `deferReadiness()` to defer booting, and then call\n    `advanceReadiness()`
        once all of your code has finished\n    loading.\n\n    @method scheduleInitialize\n
        \ */\n  scheduleInitialize: function() {\n    var self = this;\n\n    if (!this.$
        || this.$.isReady) {\n      Ember.run.schedule('actions', self, '_initialize');\n
        \   } else {\n      this.$().ready(function() {\n        Ember.run(self, '_initialize');\n
        \     });\n    }\n  },\n\n  /**\n    Use this to defer readiness until some
        condition is true.\n\n    Example:\n\n    ```javascript\n    App = Ember.Application.create();\n
        \   App.deferReadiness();\n\n    jQuery.getJSON(\"/auth-token\", function(token)
        {\n      App.token = token;\n      App.advanceReadiness();\n    });\n    ```\n\n
        \   This allows you to perform asynchronous setup logic and defer\n    booting
        your application until the setup has finished.\n\n    However, if the setup
        requires a loading UI, it might be better\n    to use the router for this
        purpose.\n\n    @method deferReadiness\n  */\n  deferReadiness: function()
        {\n    Ember.assert(\"You must call deferReadiness on an instance of Ember.Application\",
        this instanceof Ember.Application);\n    Ember.assert(\"You cannot defer readiness
        since the `ready()` hook has already been called.\", this._readinessDeferrals
        > 0);\n    this._readinessDeferrals++;\n  },\n\n  /**\n    Call `advanceReadiness`
        after any asynchronous setup logic has completed.\n    Each call to `deferReadiness`
        must be matched by a call to `advanceReadiness`\n    or the application will
        never become ready and routing will not begin.\n    \n    @method advanceReadiness\n
        \   @see {Ember.Application#deferReadiness}\n  */\n  advanceReadiness: function()
        {\n    Ember.assert(\"You must call advanceReadiness on an instance of Ember.Application\",
        this instanceof Ember.Application);\n    this._readinessDeferrals--;\n\n    if
        (this._readinessDeferrals === 0) {\n      Ember.run.once(this, this.didBecomeReady);\n
        \   }\n  },\n\n  /**\n    registers a factory for later injection\n\n    Example:\n\n
        \   ```javascript\n    App = Ember.Application.create();\n\n    App.Person
        \ = Ember.Object.extend({});\n    App.Orange  = Ember.Object.extend({});\n
        \   App.Email   = Ember.Object.extend({});\n    App.Session = Ember.Object.create({});\n\n
        \   App.register('model:user', App.Person, {singleton: false });\n    App.register('fruit:favorite',
        App.Orange);\n    App.register('communication:main', App.Email, {singleton:
        false});\n    App.register('session', App.Session, {instantiate: false});\n
        \   ```\n\n    @method register\n    @param  fullName {String} type:name (e.g.,
        'model:user')\n    @param  factory {Function} (e.g., App.Person)\n    @param
        \ options {String} (optional)\n  **/\n  register: function() {\n    var container
        = this.__container__;\n    container.register.apply(container, arguments);\n
        \ },\n  /**\n    defines an injection or typeInjection\n\n    Example:\n\n
        \   ```javascript\n    App.inject(<full_name or type>, <property name>, <full_name>)\n
        \   App.inject('model:user', 'email', 'model:email')\n    App.inject('model',
        'source', 'source:main')\n    ```\n\n    @method inject\n    @param  factoryNameOrType
        {String}\n    @param  property {String}\n    @param  injectionName {String}\n
        \ **/\n  inject: function() {\n    var container = this.__container__;\n    container.injection.apply(container,
        arguments);\n  },\n\n  /**\n    @private\n    @deprecated\n\n    Calling initialize
        manually is not supported.\n\n    Please see Ember.Application#advanceReadiness
        and\n    Ember.Application#deferReadiness.\n\n    @method initialize\n   **/\n
        \ initialize: function() {\n    Ember.deprecate('Calling initialize manually
        is not supported. Please see Ember.Application#advanceReadiness and Ember.Application#deferReadiness');\n
        \ },\n  /**\n    @private\n\n    Initialize the application. This happens
        automatically.\n\n    Run any initializers and run the application load hook.
        These hooks may\n    choose to defer readiness. For example, an authentication
        hook might want\n    to defer readiness until the auth token has been retrieved.\n\n
        \   @method _initialize\n  */\n  _initialize: function() {\n    if (this.isDestroyed)
        { return; }\n\n    // At this point, the App.Router must already be assigned\n
        \   if (this.Router) {\n      this.register('router:main', this.Router);\n
        \   }\n\n    this.runInitializers();\n    Ember.runLoadHooks('application',
        this);\n\n    // At this point, any initializers or load hooks that would
        have wanted\n    // to defer readiness have fired. In general, advancing readiness
        here\n    // will proceed to didBecomeReady.\n    this.advanceReadiness();\n\n
        \   return this;\n  },\n\n  /**\n    Reset the application. This is typically
        used only in tests. It cleans up\n    the application in the following order:\n\n
        \   1. Deactivate existing routes\n    2. Destroy all objects in the container\n
        \   3. Create a new application container\n    4. Re-route to the existing
        url\n\n    Typical Example:\n\n    ```javascript\n\n    var App;\n\n    Ember.run(function()
        {\n      App = Ember.Application.create();\n    });\n\n    module(\"acceptance
        test\", {\n      setup: function() {\n        App.reset();\n      }\n    });\n\n
        \   test(\"first test\", function() {\n      // App is freshly reset\n    });\n\n
        \   test(\"first test\", function() {\n      // App is again freshly reset\n
        \   });\n    ```\n\n    Advanced Example:\n\n    Occasionally you may want
        to prevent the app from initializing during\n    setup. This could enable
        extra configuration, or enable asserting prior\n    to the app becoming ready.\n\n
        \   ```javascript\n\n    var App;\n\n    Ember.run(function() {\n      App
        = Ember.Application.create();\n    });\n\n    module(\"acceptance test\",
        {\n      setup: function() {\n        Ember.run(function() {\n          App.reset();\n
        \         App.deferReadiness();\n        });\n      }\n    });\n\n    test(\"first
        test\", function() {\n      ok(true, 'something before app is initialized');\n\n
        \     Ember.run(function() {\n        App.advanceReadiness();\n      });\n
        \     ok(true, 'something after app is initialized');\n    });\n    ```\n\n
        \   @method reset\n  **/\n  reset: function() {\n    this._readinessDeferrals
        = 1;\n\n    function handleReset() {\n      var router = this.__container__.lookup('router:main');\n
        \     router.reset();\n\n      Ember.run(this.__container__, 'destroy');\n\n
        \     this.buildContainer();\n\n      Ember.run.schedule('actions', this,
        function() {\n        this._initialize();\n      });\n    }\n\n    Ember.run.join(this,
        handleReset);\n  },\n\n  /**\n    @private\n    @method runInitializers\n
        \ */\n  runInitializers: function() {\n    var initializers = get(this.constructor,
        'initializers'),\n        container = this.__container__,\n        graph =
        new Ember.DAG(),\n        namespace = this,\n        name, initializer;\n\n
        \   for (name in initializers) {\n      initializer = initializers[name];\n
        \     graph.addEdges(initializer.name, initializer.initialize, initializer.before,
        initializer.after);\n    }\n\n    graph.topsort(function (vertex) {\n      var
        initializer = vertex.value;\n      Ember.assert(\"No application initializer
        named '\"+vertex.name+\"'\", initializer);\n      initializer(container, namespace);\n
        \   });\n  },\n\n  /**\n    @private\n    @method didBecomeReady\n  */\n  didBecomeReady:
        function() {\n    this.setupEventDispatcher();\n    this.ready(); // user
        hook\n    this.startRouting();\n\n    if (!Ember.testing) {\n      // Eagerly
        name all classes that are already loaded\n      Ember.Namespace.processAll();\n
        \     Ember.BOOTED = true;\n    }\n\n    this.resolve(this);\n  },\n\n  /**\n
        \   @private\n\n    Setup up the event dispatcher to receive events on the\n
        \   application's `rootElement` with any registered\n    `customEvents`.\n\n
        \   @method setupEventDispatcher\n  */\n  setupEventDispatcher: function()
        {\n    var customEvents = get(this, 'customEvents'),\n        rootElement
        = get(this, 'rootElement'),\n        dispatcher = this.__container__.lookup('event_dispatcher:main');\n\n
        \   set(this, 'eventDispatcher', dispatcher);\n    dispatcher.setup(customEvents,
        rootElement);\n  },\n\n  /**\n    @private\n\n    trigger a new call to `route`
        whenever the URL changes.\n    If the application has a router, use it to
        route to the current URL, and\n\n    @method startRouting\n    @property router
        {Ember.Router}\n  */\n  startRouting: function() {\n    var router = this.__container__.lookup('router:main');\n
        \   if (!router) { return; }\n\n    router.startRouting();\n  },\n\n  handleURL:
        function(url) {\n    var router = this.__container__.lookup('router:main');\n\n
        \   router.handleURL(url);\n  },\n\n  /**\n    Called when the Application
        has become ready.\n    The call will be delayed until the DOM has become ready.\n\n
        \   @event ready\n  */\n  ready: Ember.K,\n\n  /**\n    @deprecated Use 'Resolver'
        instead\n    Set this to provide an alternate class to `Ember.DefaultResolver`\n\n\n
        \   @property resolver\n  */\n  resolver: null,\n\n  /**\n    Set this to
        provide an alternate class to `Ember.DefaultResolver`\n\n    @property resolver\n
        \ */\n  Resolver: null,\n\n  willDestroy: function() {\n    Ember.BOOTED =
        false;\n\n    this.__container__.destroy();\n  },\n\n  initializer: function(options)
        {\n    this.constructor.initializer(options);\n  }\n});\n\nEmber.Application.reopenClass({\n
        \ initializers: {},\n  initializer: function(initializer) {\n    // If this
        is the first initializer being added to a subclass, we are going to reopen
        the class\n    // to make sure we have a new `initializers` object, which
        extends from the parent class' using\n    // prototypal inheritance. Without
        this, attempting to add initializers to the subclass would\n    // pollute
        the parent class as well as other subclasses.\n    if (this.superclass.initializers
        !== undefined && this.superclass.initializers === this.initializers) {\n      this.reopenClass({\n
        \       initializers: Ember.create(this.initializers)\n      });\n    }\n\n
        \   Ember.assert(\"The initializer '\" + initializer.name + \"' has already
        been registered\", !this.initializers[initializer.name]);\n    Ember.assert(\"An
        initializer cannot be registered with both a before and an after\", !(initializer.before
        && initializer.after));\n    Ember.assert(\"An initializer cannot be registered
        without an initialize function\", Ember.canInvoke(initializer, 'initialize'));\n\n
        \   this.initializers[initializer.name] = initializer;\n  },\n\n  /**\n    @private\n\n
        \   This creates a container with the default Ember naming conventions.\n\n
        \   It also configures the container:\n\n    * registered views are created
        every time they are looked up (they are\n      not singletons)\n    * registered
        templates are not factories; the registered value is\n      returned directly.\n
        \   * the router receives the application as its `namespace` property\n    *
        all controllers receive the router as their `target` and `controllers`\n      properties\n
        \   * all controllers receive the application as their `namespace` property\n
        \   * the application view receives the application controller as its\n      `controller`
        property\n    * the application view receives the application template as
        its\n      `defaultTemplate` property\n\n    @method buildContainer\n    @static\n
        \   @param {Ember.Application} namespace the application to build the\n      container
        for.\n    @return {Ember.Container} the built container\n  */\n  buildContainer:
        function(namespace) {\n    var container = new Ember.Container();\n\n    Ember.Container.defaultContainer
        = new DeprecatedContainer(container);\n\n    container.set = Ember.set;\n
        \   container.resolver  = resolverFor(namespace);\n    container.normalize
        = container.resolver.normalize;\n    container.describe  = container.resolver.describe;\n
        \   container.makeToString = container.resolver.makeToString;\n\n    container.optionsForType('component',
        { singleton: false });\n    container.optionsForType('view', { singleton:
        false });\n    container.optionsForType('template', { instantiate: false });\n
        \   container.register('application:main', namespace, { instantiate: false
        });\n\n    container.register('controller:basic', Ember.Controller, { instantiate:
        false });\n    container.register('controller:object', Ember.ObjectController,
        { instantiate: false });\n    container.register('controller:array', Ember.ArrayController,
        { instantiate: false });\n    container.register('route:basic', Ember.Route,
        { instantiate: false });\n    container.register('event_dispatcher:main',
        Ember.EventDispatcher);\n\n    container.injection('router:main', 'namespace',
        'application:main');\n\n    container.injection('controller', 'target', 'router:main');\n
        \   container.injection('controller', 'namespace', 'application:main');\n\n
        \   container.injection('route', 'router', 'router:main');\n\n    return container;\n
        \ }\n});\n\n/**\n  @private\n\n  This function defines the default lookup
        rules for container lookups:\n\n  * templates are looked up on `Ember.TEMPLATES`\n
        \ * other names are looked up on the application after classifying the name.\n
        \   For example, `controller:post` looks up `App.PostController` by default.\n
        \ * if the default lookup fails, look for registered classes on the container\n\n
        \ This allows the application to register default injections in the container\n
        \ that could be overridden by the normal naming convention.\n\n  @method resolverFor\n
        \ @param {Ember.Namespace} namespace the namespace to look for classes\n  @return
        {*} the resolved value for a given lookup\n*/\nfunction resolverFor(namespace)
        {\n  if (namespace.get('resolver')) {\n    Ember.deprecate('Application.resolver
        is deprecated in favor of Application.Resolver', false);\n  }\n\n  var ResolverClass
        = namespace.get('resolver') || namespace.get('Resolver') || Ember.DefaultResolver;\n
        \ var resolver = ResolverClass.create({\n    namespace: namespace\n  });\n\n
        \ function resolve(fullName) {\n    return resolver.resolve(fullName);\n  }\n\n
        \ resolve.describe = function(fullName) {\n    return resolver.lookupDescription(fullName);\n
        \ };\n\n  resolve.makeToString = function(factory, fullName) {\n    return
        resolver.makeToString(factory, fullName);\n  };\n\n  resolve.normalize = function(fullName)
        {\n    if (resolver.normalize) {\n      return resolver.normalize(fullName);\n
        \   } else {\n      Ember.deprecate('The Resolver should now provide a \\'normalize\\'
        function', false);\n      return fullName;\n    }\n  };\n\n  return resolve;\n}\n\nEmber.runLoadHooks('Ember.Application',
        Ember.Application);\n\n})();\n\n\n\n(function() {\n\n})();\n\n\n\n(function()
        {\n/**\n@module ember\n@submodule ember-application\n*/\n\nvar get = Ember.get,
        set = Ember.set;\n\nfunction verifyNeedsDependencies(controller, container,
        needs) {\n  var dependency, i, l;\n\n  for (i=0, l=needs.length; i<l; i++)
        {\n    dependency = needs[i];\n    if (dependency.indexOf(':') === -1) {\n
        \     dependency = \"controller:\" + dependency;\n    }\n\n    // Structure
        assert to still do verification but not string concat in production\n    if
        (!container.has(dependency)) {\n      Ember.assert(Ember.inspect(controller)
        + \" needs \" + dependency + \" but it does not exist\", false);\n    }\n
        \ }\n}\n\n/**\n  @class ControllerMixin\n  @namespace Ember\n*/\nEmber.ControllerMixin.reopen({\n
        \ concatenatedProperties: ['needs'],\n\n  /**\n    An array of other controller
        objects available inside\n    instances of this controller via the `controllers`\n
        \   property:\n\n    For example, when you define a controller:\n\n    ```javascript\n
        \   App.CommentsController = Ember.ArrayController.extend({\n      needs:
        ['post']\n    });\n    ```\n\n    The application's single instance of these
        other\n    controllers are accessible by name through the\n    `controllers`
        property:\n\n    ```javascript\n    this.get('controllers.post'); // instance
        of App.PostController\n    ```\n\n    This is only available for singleton
        controllers.\n\n    @property {Array} needs\n    @default []\n  */\n  needs:
        [],\n\n  init: function() {\n    var needs = get(this, 'needs'),\n    length
        = get(needs, 'length');\n\n    if (length > 0) {\n      Ember.assert(' `'
        + Ember.inspect(this) + ' specifies `needs`, but does not have a container.
        Please ensure this controller was instantiated with a container.', this.container);\n\n
        \     verifyNeedsDependencies(this, this.container, needs);\n\n      // if
        needs then initialize controllers proxy\n      get(this, 'controllers');\n
        \   }\n\n    this._super.apply(this, arguments);\n  },\n\n  /**\n    @method
        controllerFor\n    @see {Ember.Route#controllerFor}\n    @deprecated Use `needs`
        instead\n  */\n  controllerFor: function(controllerName) {\n    Ember.deprecate(\"Controller#controllerFor
        is deprecated, please use Controller#needs instead\");\n    return Ember.controllerFor(get(this,
        'container'), controllerName);\n  },\n\n  /**\n    Stores the instances of
        other controllers available from within\n    this controller. Any controller
        listed by name in the `needs`\n    property will be accessible by name through
        this property.\n\n    ```javascript\n    App.CommentsController = Ember.ArrayController.extend({\n
        \     needs: ['post'],\n      postTitle: function(){\n        var currentPost
        = this.get('controllers.post'); // instance of App.PostController\n        return
        currentPost.get('title');\n      }.property('controllers.post.title')\n    });\n
        \   ```\n\n    @see {Ember.ControllerMixin#needs}\n    @property {Object}
        controllers\n    @default null\n  */\n  controllers: Ember.computed(function()
        {\n    var controller = this;\n\n    return {\n      needs: get(controller,
        'needs'),\n      container: get(controller, 'container'),\n      unknownProperty:
        function(controllerName) {\n        var needs = this.needs,\n          dependency,
        i, l;\n        for (i=0, l=needs.length; i<l; i++) {\n          dependency
        = needs[i];\n          if (dependency === controllerName) {\n            return
        this.container.lookup('controller:' + controllerName);\n          }\n        }\n\n
        \       var errorMessage = Ember.inspect(controller) + '#needs does not include
        `' + controllerName + '`. To access the ' + controllerName + ' controller
        from ' + Ember.inspect(controller) + ', ' + Ember.inspect(controller) + '
        should have a `needs` property that is an array of the controllers it has
        access to.';\n        throw new ReferenceError(errorMessage);\n      }\n    };\n
        \ }).readOnly()\n});\n\n})();\n\n\n\n(function() {\n\n})();\n\n\n\n(function()
        {\n/**\nEmber Application\n\n@module ember\n@submodule ember-application\n@requires
        ember-views, ember-routing\n*/\n\n})();\n\n(function() {\n/**\n@module ember\n@submodule
        ember-extension-support\n*/\n/**\n  The `DataAdapter` helps a data persistence
        library\n  interface with tools that debug Ember such\n  as the Chrome Ember
        Extension.\n\n  This class will be extended by a persistence library\n  which
        will override some of the methods with\n  library-specific code.\n\n  The
        methods likely to be overriden are\n  `getFilters`, `detect`, `columnsForType`,\n
        \ `getRecords`, `getRecordColumnValues`,\n  `getRecordKeywords`, `getRecordFilterValues`,\n
        \ `getRecordColor`, `observeRecord`\n\n  The adapter will need to be registered\n
        \ in the application's container as `dataAdapter:main`\n\n  Example:\n  ```javascript\n
        \ Application.initializer({\n    name: \"dataAdapter\",\n\n    initialize:
        function(container, application) {\n      application.register('dataAdapter:main',
        DS.DataAdapter);\n    }\n  });\n  ```\n\n  @class DataAdapter\n  @namespace
        Ember\n  @extends Ember.Object\n*/\nEmber.DataAdapter = Ember.Object.extend({\n
        \ init: function() {\n    this._super();\n    this.releaseMethods = Ember.A();\n
        \ },\n\n  /**\n    The container of the application being debugged.\n    This
        property will be injected\n    on creation.\n  */\n  container: null,\n\n
        \ /**\n    @private\n\n    Number of attributes to send\n    as columns. (Enough
        to make the record\n    identifiable).\n  */\n  attributeLimit: 3,\n\n  /**\n
        \   @private\n\n    Stores all methods that clear observers.\n    These methods
        will be called on destruction.\n  */\n  releaseMethods: Ember.A(),\n\n  /**\n
        \   @public\n\n    Specifies how records can be filtered.\n    Records returned
        will need to have a `filterValues`\n    property with a key for every name
        in the returned array.\n\n    @method getFilters\n    @return {Array} List
        of objects defining filters.\n     The object should have a `name` and `desc`
        property.\n  */\n  getFilters: function() {\n    return Ember.A();\n  },\n\n
        \ /**\n    @public\n\n    Fetch the model types and observe them for changes.\n\n
        \   @method watchModelTypes\n\n    @param {Function} typesAdded Callback to
        call to add types.\n    Takes an array of objects containing wrapped types
        (returned from `wrapModelType`).\n\n    @param {Function} typesUpdated Callback
        to call when a type has changed.\n    Takes an array of objects containing
        wrapped types.\n\n    @return {Function} Method to call to remove all observers\n
        \ */\n  watchModelTypes: function(typesAdded, typesUpdated) {\n    var modelTypes
        = this.getModelTypes(),\n        self = this, typesToSend, releaseMethods
        = Ember.A();\n\n    typesToSend = modelTypes.map(function(type) {\n      var
        wrapped = self.wrapModelType(type);\n      releaseMethods.push(self.observeModelType(type,
        typesUpdated));\n      return wrapped;\n    });\n\n    typesAdded(typesToSend);\n\n
        \   var release = function() {\n      releaseMethods.forEach(function(fn)
        { fn(); });\n      self.releaseMethods.removeObject(release);\n    };\n    this.releaseMethods.pushObject(release);\n
        \   return release;\n  },\n\n  /**\n    @public\n\n    Fetch the records of
        a given type and observe them for changes.\n\n    @method watchRecords\n\n
        \   @param {Function} recordsAdded Callback to call to add records.\n    Takes
        an array of objects containing wrapped records.\n    The object should have
        the following properties:\n      columnValues: {Object} key and value of a
        table cell\n      object: {Object} the actual record object\n\n    @param
        {Function} recordsUpdated Callback to call when a record has changed.\n    Takes
        an array of objects containing wrapped records.\n\n    @param {Function} recordsRemoved
        Callback to call when a record has removed.\n    Takes the following parameters:\n
        \     index: the array index where the records were removed\n      count:
        the number of records removed\n\n    @return {Function} Method to call to
        remove all observers\n  */\n  watchRecords: function(type, recordsAdded, recordsUpdated,
        recordsRemoved) {\n    var self = this, releaseMethods = Ember.A(), records
        = this.getRecords(type), release;\n\n    var recordUpdated = function(updatedRecord)
        {\n      recordsUpdated([updatedRecord]);\n    };\n\n    var recordsToSend
        = records.map(function(record) {\n      releaseMethods.push(self.observeRecord(record,
        recordUpdated));\n      return self.wrapRecord(record);\n    });\n\n\n    var
        contentDidChange = function(array, idx, removedCount, addedCount) {\n      for
        (var i = idx; i < idx + addedCount; i++) {\n        var record = array.objectAt(i);\n
        \       var wrapped = self.wrapRecord(record);\n        releaseMethods.push(self.observeRecord(record,
        recordUpdated));\n        recordsAdded([wrapped]);\n      }\n\n      if (removedCount)
        {\n        recordsRemoved(idx, removedCount);\n      }\n    };\n\n    var
        observer = { didChange: contentDidChange, willChange: Ember.K };\n    records.addArrayObserver(self,
        observer);\n\n    release = function() {\n      releaseMethods.forEach(function(fn)
        { fn(); });\n      records.removeArrayObserver(self, observer);\n      self.releaseMethods.removeObject(release);\n
        \   };\n\n    recordsAdded(recordsToSend);\n\n    this.releaseMethods.pushObject(release);\n
        \   return release;\n  },\n\n  /**\n    @private\n\n    Clear all observers
        before destruction\n  */\n  willDestroy: function() {\n    this._super();\n
        \   this.releaseMethods.forEach(function(fn) {\n      fn();\n    });\n  },\n\n
        \ /**\n    @private\n\n    Detect whether a class is a model.\n\n    Test
        that against the model class\n    of your persistence library\n\n    @method
        detect\n    @param {Class} klass The class to test\n    @return boolean Whether
        the class is a model class or not\n  */\n  detect: function(klass) {\n    return
        false;\n  },\n\n  /**\n    @private\n\n    Get the columns for a given model
        type.\n\n    @method columnsForType\n    @param {Class} type The model type\n
        \   @return {Array} An array of columns of the following format:\n     name:
        {String} name of the column\n     desc: {String} Humanized description (what
        would show in a table column name)\n  */\n  columnsForType: function(type)
        {\n    return Ember.A();\n  },\n\n  /**\n    @private\n\n    Adds observers
        to a model type class.\n\n    @method observeModelType\n    @param {Class}
        type The model type class\n    @param {Function} typesUpdated Called when
        a type is modified.\n    @return {Function} The function to call to remove
        observers\n  */\n\n  observeModelType: function(type, typesUpdated) {\n    var
        self = this, records = this.getRecords(type);\n\n    var onChange = function()
        {\n      typesUpdated([self.wrapModelType(type)]);\n    };\n    var observer
        = {\n      didChange: function() {\n        Ember.run.scheduleOnce('actions',
        this, onChange);\n      },\n      willChange: Ember.K\n    };\n\n    records.addArrayObserver(this,
        observer);\n\n    var release = function() {\n      records.removeArrayObserver(self,
        observer);\n    };\n\n    return release;\n  },\n\n\n  /**\n    @private\n\n
        \   Wraps a given model type and observes changes to it.\n\n    @method wrapModelType\n
        \   @param {Class} type A model class\n    @param {Function} typesUpdated
        callback to call when the type changes\n    @return {Object} contains the
        wrapped type and the function to remove observers\n    Format:\n      type:
        {Object} the wrapped type\n        The wrapped type has the following format:\n
        \         name: {String} name of the type\n          count: {Integer} number
        of records available\n          columns: {Columns} array of columns to describe
        the record\n          object: {Class} the actual Model type class\n      release:
        {Function} The function to remove observers\n  */\n  wrapModelType: function(type,
        typesUpdated) {\n    var release, records = this.getRecords(type),\n        typeToSend,
        self = this;\n\n    typeToSend = {\n      name: type.toString(),\n      count:
        Ember.get(records, 'length'),\n      columns: this.columnsForType(type),\n
        \     object: type\n    };\n\n\n    return typeToSend;\n  },\n\n\n  /**\n
        \   @private\n\n    Fetches all models defined in the application.\n    TODO:
        Use the resolver instead of looping over namespaces.\n\n    @method getModelTypes\n
        \   @return {Array} Array of model types\n  */\n  getModelTypes: function()
        {\n    var namespaces = Ember.A(Ember.Namespace.NAMESPACES), types = Ember.A(),
        self = this;\n\n    namespaces.forEach(function(namespace) {\n      for (var
        key in namespace) {\n        if (!namespace.hasOwnProperty(key)) { continue;
        }\n        var klass = namespace[key];\n        if (self.detect(klass)) {\n
        \         types.push(klass);\n        }\n      }\n    });\n    return types;\n
        \ },\n\n  /**\n    @private\n\n    Fetches all loaded records for a given
        type.\n\n    @method getRecords\n    @return {Array} array of records.\n     This
        array will be observed for changes,\n     so it should update when new records
        are added/removed.\n  */\n  getRecords: function(type) {\n    return Ember.A();\n
        \ },\n\n  /**\n    @private\n\n    Wraps a record and observers changes to
        it\n\n    @method wrapRecord\n    @param {Object} record The record instance\n
        \   @return {Object} the wrapped record. Format:\n    columnValues: {Array}\n
        \   searchKeywords: {Array}\n  */\n  wrapRecord: function(record) {\n    var
        recordToSend = { object: record }, columnValues = {}, self = this;\n\n    recordToSend.columnValues
        = this.getRecordColumnValues(record);\n    recordToSend.searchKeywords = this.getRecordKeywords(record);\n
        \   recordToSend.filterValues = this.getRecordFilterValues(record);\n    recordToSend.color
        = this.getRecordColor(record);\n\n    return recordToSend;\n  },\n\n  /**\n
        \   @private\n\n    Gets the values for each column.\n\n    @method getRecordColumnValues\n
        \   @return {Object} Keys should match column names defined\n    by the model
        type.\n  */\n  getRecordColumnValues: function(record) {\n    return {};\n
        \ },\n\n  /**\n    @private\n\n    Returns keywords to match when searching
        records.\n\n    @method getRecordKeywords\n    @return {Array} Relevant keywords
        for search.\n  */\n  getRecordKeywords: function(record) {\n    return Ember.A();\n
        \ },\n\n  /**\n    @private\n\n    Returns the values of filters defined by
        `getFilters`.\n\n    @method getRecordFilterValues\n    @param {Object} record
        The record instance\n    @return {Object} The filter values\n  */\n  getRecordFilterValues:
        function(record) {\n    return {};\n  },\n\n  /**\n    @private\n\n    Each
        record can have a color that represents its state.\n\n    @method getRecordColor\n
        \   @param {Object} record The record instance\n    @return {String} The record's
        color\n      Possible options: black, red, blue, green\n  */\n  getRecordColor:
        function(record) {\n    return null;\n  },\n\n  /**\n    @private\n\n    Observes
        all relevant properties and re-sends the wrapped record\n    when a change
        occurs.\n\n    @method observerRecord\n    @param {Object} record The record
        instance\n    @param {Function} recordUpdated The callback to call when a
        record is updated.\n    @return {Function} The function to call to remove
        all observers.\n  */\n  observeRecord: function(record, recordUpdated) {\n
        \   return function(){};\n  }\n\n});\n\n\n})();\n\n\n\n(function() {\n/**\nEmber
        Extension Support\n\n@module ember\n@submodule ember-extension-support\n@requires
        ember-application\n*/\n\n})();\n\n(function() {\n/**\n  @module ember\n  @submodule
        ember-testing\n */\nvar slice = [].slice,\n    helpers = {},\n    originalMethods
        = {},\n    injectHelpersCallbacks = [];\n\n/**\n  This is a container for
        an assortment of testing related functionality:\n\n  * Choose your default
        test adapter (for your framework of choice).\n  * Register/Unregister additional
        test helpers.\n  * Setup callbacks to be fired when the test helpers are injected
        into\n    your application.\n  \n  @class Test\n  @namespace Ember\n*/\nEmber.Test
        = {\n\n  /**\n    `registerHelper` is used to register a test helper that
        will be injected\n    when `App.injectTestHelpers` is called.\n\n    The helper
        method will always be called with the current Application as\n    the first
        parameter.\n\n    For example:\n    ```javascript\n      Ember.Test.registerHelper('boot',
        function(app) {\n        Ember.run(app, app.deferReadiness);\n      });\n
        \   ```\n\n    This helper can later be called without arguments because it
        will be\n    called with `app` as the first parameter.\n\n    ```javascript\n
        \     App = Ember.Application.create();\n      App.injectTestHelpers();\n
        \     boot();\n    ```\n\n    Whenever you register a helper that performs
        async operations, make sure\n    you `return wait();` at the end of the helper.\n\n
        \   If an async helper also needs to return a value, pass it to the `wait`\n
        \   helper as a first argument:\n    `return wait(val);`\n\n    @public\n
        \   @method registerHelper\n    @param {String} name The name of the helper
        method to add.\n    @param {Function} helperMethod\n  */\n  registerHelper:
        function(name, helperMethod) {\n    helpers[name] = helperMethod;\n  },\n
        \ /**\n    Remove a previously added helper method.\n\n    Example:\n    ```\n
        \   Ember.Test.unregisterHelper('wait');\n    ```\n\n    @public\n    @method
        unregisterHelper\n    @param {String} name The helper to remove.\n  */\n  unregisterHelper:
        function(name) {\n    delete helpers[name];\n    if (originalMethods[name])
        {\n      window[name] = originalMethods[name];\n    }\n    delete originalMethods[name];\n
        \ },\n\n  /**\n    Used to register callbacks to be fired whenever `App.injectTestHelpers`\n
        \   is called.\n\n    The callback will receive the current application as
        an argument.\n\n    Example:\n    ```\n    Ember.Test.onInjectHelpers(function()
        {\n      Ember.$(document).ajaxStart(function() {\n        Test.pendingAjaxRequests++;\n
        \     });\n\n      Ember.$(document).ajaxStop(function() {\n        Test.pendingAjaxRequests--;\n
        \     });\n    });\n    ```\n\n    @public\n    @method onInjectHelpers\n
        \   @param {Function} callback The function to be called.\n  */\n  onInjectHelpers:
        function(callback) {\n    injectHelpersCallbacks.push(callback);\n  },\n\n
        \ /**\n    This returns a thenable tailored for testing.  It catches failed\n
        \   `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`\n
        \   callback in the last chained then.\n\n    This method should be returned
        by async helpers such as `wait`.\n\n    @public\n    @method promise\n    @param
        {Function} resolver The function used to resolve the promise.\n  */\n  promise:
        function(resolver) {\n    var promise = new Ember.RSVP.Promise(resolver);\n
        \   var thenable = {\n      chained: false\n    };\n    thenable.then = function(onSuccess,
        onFailure) {\n      var thenPromise, nextPromise;\n      thenable.chained
        = true;\n      thenPromise = promise.then(onSuccess, onFailure);\n      //
        this is to ensure all downstream fulfillment\n      // handlers are wrapped
        in the error handling\n      nextPromise = Ember.Test.promise(function(resolve)
        {\n        resolve(thenPromise);\n      });\n      thenPromise.then(null,
        function(reason) {\n        // ensure this is the last promise in the chain\n
        \       // if not, ignore and the exception will propagate\n        // this
        prevents the same error from being fired multiple times\n        if (!nextPromise.chained)
        {\n          Ember.Test.adapter.exception(reason);\n        }\n      });\n
        \     return nextPromise;\n    };\n    return thenable;\n  },\n\n  /**\n   Used
        to allow ember-testing to communicate with a specific testing\n   framework.\n\n
        \  You can manually set it before calling `App.setupForTesting()`.\n\n   Example:\n
        \  ```\n   Ember.Test.adapter = MyCustomAdapter.create()\n   ```\n\n   If
        you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.\n\n
        \  @public\n   @property adapter\n   @type {Class} The adapter to be used.\n
        \  @default Ember.Test.QUnitAdapter\n  */\n  adapter: null\n};\n\nfunction
        curry(app, fn) {\n  return function() {\n    var args = slice.call(arguments);\n
        \   args.unshift(app);\n    return fn.apply(app, args);\n  };\n}\n\nEmber.Application.reopen({\n
        \ /**\n    @property testHelpers\n    @type {Object}\n    @default {}\n  */\n
        \ testHelpers: {},\n\n  /**\n   This hook defers the readiness of the application,
        so that you can start\n   the app when your tests are ready to run. It also
        sets the router's\n   location to 'none', so that the window's location will
        not be modified\n   (preventing both accidental leaking of state between tests
        and interference\n   with your testing framework).\n\n   Example:\n  ```\n
        \ App.setupForTesting();\n  ```\n\n    @method setupForTesting\n  */\n  setupForTesting:
        function() {\n    Ember.testing = true;\n\n    this.deferReadiness();\n\n
        \   this.Router.reopen({\n      location: 'none'\n    });\n\n    // if adapter
        is not manually set default to QUnit\n    if (!Ember.Test.adapter) {\n       Ember.Test.adapter
        = Ember.Test.QUnitAdapter.create();\n    }\n  },\n\n  /**\n    This injects
        the test helpers into the window's scope. If a function of the\n    same name
        has already been defined it will be cached (so that it can be reset\n    if
        the helper is removed with `unregisterHelper` or `removeTestHelpers`).\n\n
        \  Any callbacks registered with `onInjectHelpers` will be called once the\n
        \  helpers have been injected.\n\n  Example:\n  ```\n  App.injectTestHelpers();\n
        \ ```\n\n    @method injectTestHelpers\n  */\n  injectTestHelpers: function()
        {\n    this.testHelpers = {};\n    for (var name in helpers) {\n      originalMethods[name]
        = window[name];\n      this.testHelpers[name] = window[name] = curry(this,
        helpers[name]);\n    }\n\n    for(var i = 0, l = injectHelpersCallbacks.length;
        i < l; i++) {\n      injectHelpersCallbacks[i](this);\n    }\n  },\n\n  /**\n
        \   This removes all helpers that have been registered, and resets and functions\n
        \   that were overridden by the helpers.\n\n    Example:\n    ```\n    App.removeTestHelpers();\n
        \   ```\n\n    @public\n    @method removeTestHelpers\n  */\n  removeTestHelpers:
        function() {\n    for (var name in helpers) {\n      window[name] = originalMethods[name];\n
        \     delete this.testHelpers[name];\n      delete originalMethods[name];\n
        \   }\n  }\n});\n\n})();\n\n\n\n(function() {\n/**\n  @module ember\n  @submodule
        ember-testing\n */\n\nvar $ = Ember.$;\n\n/**\n  This method creates a checkbox
        and triggers the click event to fire the\n  passed in handler. It is used
        to correct for a bug in older versions\n  of jQuery (e.g 1.8.3).\n\n  @private\n
        \ @method testCheckboxClick\n*/\nfunction testCheckboxClick(handler) {\n  $('<input
        type=\"checkbox\">')\n    .css({ position: 'absolute', left: '-1000px', top:
        '-1000px' })\n    .appendTo('body')\n    .on('click', handler)\n    .click()\n
        \   .remove();\n}\n\n$(function() {\n  /*\n    Determine whether a checkbox
        checked using jQuery's \"click\" method will have\n    the correct value for
        its checked property.\n\n    If we determine that the current jQuery version
        exhibits this behavior,\n    patch it to work correctly as in the commit for
        the actual fix:\n    https://github.com/jquery/jquery/commit/1fb2f92.\n  */\n
        \ testCheckboxClick(function() {\n    if (!this.checked && !$.event.special.click)
        {\n      $.event.special.click = {\n        // For checkbox, fire native event
        so checked state will be right\n        trigger: function() {\n          if
        ($.nodeName( this, \"input\" ) && this.type === \"checkbox\" && this.click)
        {\n            this.click();\n            return false;\n          }\n        }\n
        \     };\n    }\n  });\n\n  // Try again to verify that the patch took effect
        or blow up.\n  testCheckboxClick(function() {\n    Ember.warn(\"clicked checkboxes
        should be checked! the jQuery patch didn't work\", this.checked);\n  });\n});\n\n})();\n\n\n\n(function()
        {\n/**\n @module ember\n @submodule ember-testing\n*/\n\nvar Test = Ember.Test;\n\n/**\n
        \ The primary purpose of this class is to create hooks that can be implemented\n
        \ by an adapter for various test frameworks.\n\n  @class Adapter\n  @namespace
        Ember.Test\n*/\nTest.Adapter = Ember.Object.extend({\n  /**\n    This callback
        will be called whenever an async operation is about to start.\n\n    Override
        this to call your framework's methods that handle async\n    operations.\n\n
        \   @public\n    @method asyncStart\n  */\n  asyncStart: Ember.K,\n\n  /**\n
        \   This callback will be called whenever an async operation has completed.\n\n
        \   @public\n    @method asyncEnd\n  */\n  asyncEnd: Ember.K,\n\n  /**\n    Override
        this method with your testing framework's false assertion.\n    This function
        is called whenever an exception occurs causing the testing\n    promise to
        fail.\n\n    QUnit example:\n\n    ```javascript\n      exception: function(error)
        {\n        ok(false, error);\n      };\n    ```\n\n    @public\n    @method
        exception\n    @param {String} error The exception to be raised.\n  */\n  exception:
        function(error) {\n    setTimeout(function() {\n      throw error;\n    });\n
        \ }\n});\n\n/**\n  This class implements the methods defined by Ember.Test.Adapter
        for the\n  QUnit testing framework.\n\n  @class QUnitAdapter\n  @namespace
        Ember.Test\n  @extends Ember.Test.Adapter\n*/\nTest.QUnitAdapter = Test.Adapter.extend({\n
        \ asyncStart: function() {\n    stop();\n  },\n  asyncEnd: function() {\n
        \   start();\n  },\n  exception: function(error) {\n    ok(false, Ember.inspect(error));\n
        \ }\n});\n\n})();\n\n\n\n(function() {\n/**\n* @module ember\n* @submodule
        ember-testing\n*/\n\nvar get = Ember.get,\n    Test = Ember.Test,\n    helper
        = Test.registerHelper,\n    countAsync = 0;\n\nTest.pendingAjaxRequests =
        0;\n\nTest.onInjectHelpers(function() {\n  Ember.$(document).ajaxStart(function()
        {\n    Test.pendingAjaxRequests++;\n  });\n\n  Ember.$(document).ajaxStop(function()
        {\n    Ember.assert(\"An ajaxStop event which would cause the number of pending
        AJAX requests to be negative has been triggered. This is most likely caused
        by AJAX events that were started before calling `injectTestHelpers()`.\",
        Test.pendingAjaxRequests !== 0);\n    Test.pendingAjaxRequests--;\n  });\n});\n\n\nfunction
        visit(app, url) {\n  app.__container__.lookup('router:main').location.setURL(url);\n
        \ Ember.run(app, app.handleURL, url);\n  return wait(app);\n}\n\nfunction
        click(app, selector, context) {\n  var $el = findWithAssert(app, selector,
        context);\n  Ember.run($el, 'mousedown');\n\n  if ($el.is(':input')) {\n    var
        type = $el.prop('type');\n    if (type !== 'checkbox' && type !== 'radio'
        && type !== 'hidden') {\n      Ember.run($el, function(){\n        // Firefox
        does not trigger the `focusin` event if the window\n        // does not have
        focus. If the document doesn't have focus just\n        // use trigger('focusin')
        instead.\n        if (!document.hasFocus || document.hasFocus()) {\n          this.focus();\n
        \       } else {\n          this.trigger('focusin');\n        }\n      });\n
        \   }\n  }\n\n  Ember.run($el, 'mouseup');\n  Ember.run($el, 'click');\n\n
        \ return wait(app);\n}\n\nfunction keyEvent(app, selector, context, type,
        keyCode) {\n  var $el;\n  if (typeof keyCode === 'undefined') {\n    keyCode
        = type;\n    type = context;\n    context = null;\n  }\n  $el = findWithAssert(app,
        selector, context);\n  var event = Ember.$.Event(type, { keyCode: keyCode
        });\n  Ember.run($el, 'trigger', event);\n  return wait(app);\n}\n\nfunction
        fillIn(app, selector, context, text) {\n  var $el;\n  if (typeof text ===
        'undefined') {\n    text = context;\n    context = null;\n  }\n  $el = findWithAssert(app,
        selector, context);\n  Ember.run(function() {\n    $el.val(text).change();\n
        \ });\n  return wait(app);\n}\n\nfunction findWithAssert(app, selector, context)
        {\n  var $el = find(app, selector, context);\n  if ($el.length === 0) {\n
        \   throw new Ember.Error(\"Element \" + selector + \" not found.\");\n  }\n
        \ return $el;\n}\n\nfunction find(app, selector, context) {\n  var $el;\n
        \ context = context || get(app, 'rootElement');\n  $el = app.$(selector, context);\n\n
        \ return $el;\n}\n\nfunction wait(app, value) {\n  var promise;\n\n  promise
        = Test.promise(function(resolve) {\n    if (++countAsync === 1) {\n      Test.adapter.asyncStart();\n
        \   }\n    var watcher = setInterval(function() {\n      var routerIsLoading
        = app.__container__.lookup('router:main').router.isLoading;\n      if (routerIsLoading)
        { return; }\n      if (Test.pendingAjaxRequests) { return; }\n      if (Ember.run.hasScheduledTimers()
        || Ember.run.currentRunLoop) { return; }\n\n      clearInterval(watcher);\n\n
        \     if (--countAsync === 0) {\n        Test.adapter.asyncEnd();\n      }\n\n
        \     Ember.run(null, resolve, value);\n    }, 10);\n  });\n\n  return buildChainObject(app,
        promise);\n}\n\n/*\n Builds an object that contains all helper methods. This
        object will be\n returned by helpers and then-promises.\n\n This allows us
        to chain helpers:\n\n ```javascript\n  visit('posts/new')\n  .click('.add-btn')\n
        \ .fillIn('.title', 'Post')\n  .click('.submit')\n  .then(function() {\n    equal('.post-title',
        'Post');\n  })\n  .visit('comments')\n  .then(function() {\n    equal(find('.comments'),length,
        0);\n  });\n ```\n\n @method buildChainObject\n @param {Ember.Application}
        app\n @param {Ember.RSVP.Promise} promise\n @return {Object} A new object
        with properties for each\n                  of app's helpers to be used for
        continued\n                  method chaining (using promises).\n*/\nfunction
        buildChainObject(app, promise) {\n  var helperName, obj = {};\n  for(helperName
        in app.testHelpers) {\n    obj[helperName] = chain(app, promise, app.testHelpers[helperName]);\n
        \ }\n  obj.then = function(fn) {\n    var thenPromise = promise.then(fn);\n
        \   return buildChainObject(app, thenPromise);\n  };\n  return obj;\n}\n\n/*\n
        \ Used in conjunction with buildChainObject to setup a\n  continued chain
        of method calls (with promises)\n\n  @method chain\n  @param {Ember.Application}
        app\n  @param {Ember.RSVP.Promise} promise\n  @param {Function} fn\n*/\nfunction
        chain(app, promise, fn) {\n  return function() {\n    var args = arguments,
        chainedPromise;\n    chainedPromise = promise.then(function() {\n      return
        fn.apply(null, args);\n    });\n    return buildChainObject(app, chainedPromise);\n
        \ };\n}\n\n/**\n* Loads a route, sets up any controllers, and renders any
        templates associated\n* with the route as though a real user had triggered
        the route change while\n* using your app.\n*\n* Example:\n*\n* ```\n* visit('posts/index').then(function()
        {\n*   // assert something\n* });\n* ```\n*\n* @method visit\n* @param {String}
        url the name of the route\n* @return {RSVP.Promise}\n*/\nhelper('visit', visit);\n\n/**\n*
        Clicks an element and triggers any actions triggered by the element's `click`\n*
        event.\n*\n* Example:\n*\n* ```\n* click('.some-jQuery-selector').then(function()
        {\n*  // assert something\n* });\n* ```\n*\n* @method click\n* @param {String}
        selector jQuery selector for finding element on the DOM\n* @return {RSVP.Promise}\n*/\nhelper('click',
        click);\n\n/**\n* Simulates a key event, e.g. `keypress`, `keydown`, `keyup`
        with the desired keyCode\n*\n* Example:\n*\n* ```\n* keyEvent('.some-jQuery-selector',
        'keypress', 13).then(function() {\n*  // assert something\n* });\n* ```\n*\n*
        @method keyEvent\n* @param {String} selector jQuery selector for finding element
        on the DOM\n* @param {String} the type of key event, e.g. `keypress`, `keydown`,
        `keyup`\n* @param {Number} the keyCode of the simulated key event\n* @return
        {RSVP.Promise}\n*/\nhelper('keyEvent', keyEvent);\n\n/**\n* Fills in an input
        element with some text.\n*\n* Example:\n*\n* ```\n* fillIn('#email', 'you@example.com').then(function()
        {\n*   // assert something\n* });\n* ```\n*\n* @method fillIn\n* @param {String}
        selector jQuery selector finding an input element on the DOM\n* to fill text
        with\n* @param {String} text text to place inside the input element\n* @return
        {RSVP.Promise}\n*/\nhelper('fillIn', fillIn);\n\n/**\n* Finds an element in
        the context of the app's container element. A simple alias\n* for `app.$(selector)`.\n*\n*
        Example:\n*\n* ```\n* var $el = find('.my-selector);\n* ```\n*\n* @method
        find\n* @param {String} selector jQuery string selector for element lookup\n*
        @return {Object} jQuery object representing the results of the query\n*/\nhelper('find',
        find);\n\n/**\n*\n* Like `find`, but throws an error if the element selector
        returns no results\n*\n* Example:\n*\n* ```\n* var $el = findWithAssert('.doesnt-exist');
        // throws error\n* ```\n*\n* @method findWithAssert\n* @param {String} selector
        jQuery selector string for finding an element within\n* the DOM\n* @return
        {Object} jQuery object representing the results of the query\n* @throws {Error}
        throws error if jQuery object returned has a length of 0\n*/\nhelper('findWithAssert',
        findWithAssert);\n\n/**\n  Causes the run loop to process any pending events.
        This is used to ensure that\n  any async operations from other helpers (or
        your assertions) have been processed.\n\n  This is most often used as the
        return value for the helper functions (see 'click',\n  'fillIn','visit',etc).\n\n
        \ Example:\n\n  ```\n  Ember.Test.registerHelper('loginUser', function(app,
        username, password) {\n    visit('secured/path/here')\n    .fillIn('#username',
        username)\n    .fillIn('#password', username)\n    .click('.submit')\n\n    return
        wait(app);\n  });\n\n  @method wait\n  @param {Object} value The value to
        be returned.\n  @return {RSVP.Promise}\n  ```\n*/\nhelper('wait', wait);\n\n})();\n\n\n\n(function()
        {\n/**\n  Ember Testing\n\n  @module ember\n  @submodule ember-testing\n  @requires
        ember-application\n*/\n\n})();\n\n(function() {\n/**\nEmber\n\n@module ember\n*/\n\nfunction
        throwWithMessage(msg) {\n  return function() {\n    throw new Ember.Error(msg);\n
        \ };\n}\n\nfunction generateRemovedClass(className) {\n  var msg = \" has
        been moved into a plugin: https://github.com/emberjs/ember-states\";\n\n  return
        {\n    extend: throwWithMessage(className + msg),\n    create: throwWithMessage(className
        + msg)\n  };\n}\n\nEmber.StateManager = generateRemovedClass(\"Ember.StateManager\");\n\n/**\n
        \ This was exported to ember-states plugin for v 1.0.0 release. See: https://github.com/emberjs/ember-states\n
        \ \n  @class StateManager\n  @namespace Ember\n*/\n\nEmber.State = generateRemovedClass(\"Ember.State\");\n\n/**\n
        \ This was exported to ember-states plugin for v 1.0.0 release. See: https://github.com/emberjs/ember-states\n
        \ \n  @class State\n  @namespace Ember\n*/\n\n})();\n\n\n})();\n"
    http_version: 
  recorded_at: Thu, 31 Oct 2013 20:27:36 GMT
- request:
    method: get
    uri: http://builds.emberjs.com/release/ember.min.js
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - ! '*/*'
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      X-Amz-Id-2:
      - K8X5VbSWpZkj98c1ld4S9ygYihH8V70jGUnS2+MZghZJZBNCogPCLvKzPmzOg4p0
      X-Amz-Request-Id:
      - 4298B2159AE1DC25
      Date:
      - Thu, 31 Oct 2013 20:27:39 GMT
      Last-Modified:
      - Fri, 25 Oct 2013 20:17:45 GMT
      Etag:
      - ! '"b65ddf0e2f7b767dee3bf69d8cba4d34"'
      Content-Type:
      - text/javascript
      Content-Length:
      - '238095'
      Server:
      - AmazonS3
    body:
      encoding: UTF-8
      string: ! "// ==========================================================================\n//
        Project:   Ember - JavaScript Application Framework\n// Copyright: Copyright
        2011-2013 Tilde Inc. and contributors\n//            Portions Copyright 2006-2011
        Strobe Inc.\n//            Portions Copyright 2008-2011 Apple Inc. All rights
        reserved.\n// License:   Licensed under MIT license\n//            See https://raw.github.com/emberjs/ember.js/master/LICENSE\n//
        ==========================================================================\n\n\n
        // Version: 1.1.2\n\n!function(){var e,t;!function(){var r={},n={};e=function(e,t,n){r[e]={deps:t,callback:n}},t=function(e){if(n[e])return
        n[e];n[e]={};var i,o,s,a,u;if(i=r[e],!i)throw new Error(\"Module '\"+e+\"'
        not found.\");o=i.deps,s=i.callback,a=[];for(var c=0,l=o.length;l>c;c++)\"exports\"===o[c]?a.push(u={}):a.push(t(o[c]));var
        h=s.apply(this,a);return n[e]=u||h}}(),function(){function e(e){var t;r.console?t=r.console:\"undefined\"!=typeof
        console&&(t=console);var n=\"object\"==typeof t?t[e]:null;return n?n.apply?function(){n.apply(t,arguments)}:function(){var
        e=Array.prototype.join.call(arguments,\", \");n(e)}:void 0}function t(e,t){if(!e)try{throw
        new Error(\"assertion failed: \"+t)}catch(r){setTimeout(function(){throw r},0)}}\"undefined\"==typeof
        Ember&&(Ember={});var r=Ember.imports=Ember.imports||this,n=Ember.exports=Ember.exports||this;Ember.lookup=Ember.lookup||this,n.Em=n.Ember=Em=Ember,Ember.isNamespace=!0,Ember.toString=function(){return\"Ember\"},Ember.VERSION=\"1.1.2\",\"undefined\"==typeof
        ENV&&(n.ENV={}),\"undefined\"==typeof ENV.DISABLE_RANGE_API&&(ENV.DISABLE_RANGE_API=!0),Ember.ENV=Ember.ENV||ENV,Ember.config=Ember.config||{},Ember.FEATURES={},Ember.FEATURES.isEnabled=function(e){return
        Ember.FEATURES[e]},Ember.EXTEND_PROTOTYPES=Ember.ENV.EXTEND_PROTOTYPES,\"undefined\"==typeof
        Ember.EXTEND_PROTOTYPES&&(Ember.EXTEND_PROTOTYPES=!0),Ember.LOG_STACKTRACE_ON_DEPRECATION=Ember.ENV.LOG_STACKTRACE_ON_DEPRECATION!==!1,Ember.SHIM_ES5=Ember.ENV.SHIM_ES5===!1?!1:Ember.EXTEND_PROTOTYPES,Ember.LOG_VERSION=Ember.ENV.LOG_VERSION===!1?!1:!0,Ember.K=function(){return
        this},\"undefined\"==typeof Ember.assert&&(Ember.assert=Ember.K),\"undefined\"==typeof
        Ember.warn&&(Ember.warn=Ember.K),\"undefined\"==typeof Ember.debug&&(Ember.debug=Ember.K),\"undefined\"==typeof
        Ember.deprecate&&(Ember.deprecate=Ember.K),\"undefined\"==typeof Ember.deprecateFunc&&(Ember.deprecateFunc=function(e,t){return
        t}),Ember.uuid=0,Ember.Logger={log:e(\"log\")||Ember.K,warn:e(\"warn\")||Ember.K,error:e(\"error\")||Ember.K,info:e(\"info\")||Ember.K,debug:e(\"debug\")||e(\"info\")||Ember.K,assert:e(\"assert\")||t},Ember.onerror=null,Ember.handleErrors=function(e,t){if(\"function\"!=typeof
        Ember.onerror)return e.call(t||this);try{return e.call(t||this)}catch(r){Ember.onerror(r)}},Ember.merge=function(e,t){for(var
        r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e},Ember.isNone=function(e){return
        null===e||void 0===e},Ember.none=Ember.deprecateFunc(\"Ember.none is deprecated.
        Please use Ember.isNone instead.\",Ember.isNone),Ember.isEmpty=function(e){return
        Ember.isNone(e)||0===e.length&&\"function\"!=typeof e||\"object\"==typeof
        e&&0===Ember.get(e,\"length\")},Ember.empty=Ember.deprecateFunc(\"Ember.empty
        is deprecated. Please use Ember.isEmpty instead.\",Ember.isEmpty)}(),function(){var
        e=Ember.platform={};if(Ember.create=Object.create,Ember.create&&2!==Ember.create({a:1},{a:{value:2}}).a&&(Ember.create=null),!Ember.create||Ember.ENV.STUB_OBJECT_CREATE){var
        t=function(){};Ember.create=function(e,r){if(t.prototype=e,e=new t,r){t.prototype=e;for(var
        n in r)t.prototype[n]=r[n].value;e=new t}return t.prototype=null,e},Ember.create.isSimulated=!0}var
        r,n,i=Object.defineProperty;if(i)try{i({},\"a\",{get:function(){}})}catch(o){i=null}i&&(r=function(){var
        e={};return i(e,\"a\",{configurable:!0,enumerable:!0,get:function(){},set:function(){}}),i(e,\"a\",{configurable:!0,enumerable:!0,writable:!0,value:!0}),e.a===!0}(),n=function(){try{return
        i(document.createElement(\"div\"),\"definePropertyOnDOM\",{}),!0}catch(e){}return!1}(),r?n||(i=function(e,t,r){var
        n;return n=\"object\"==typeof Node?e instanceof Node:\"object\"==typeof e&&\"number\"==typeof
        e.nodeType&&\"string\"==typeof e.nodeName,n?e[t]=r.value:Object.defineProperty(e,t,r)}):i=null),e.defineProperty=i,e.hasPropertyAccessors=!0,e.defineProperty||(e.hasPropertyAccessors=!1,e.defineProperty=function(e,t,r){r.get||(e[t]=r.value)},e.defineProperty.isSimulated=!0),Ember.ENV.MANDATORY_SETTER&&!e.hasPropertyAccessors&&(Ember.ENV.MANDATORY_SETTER=!1)}(),function(){var
        e=function(e){return e&&Function.prototype.toString.call(e).indexOf(\"[native
        code]\")>-1},t=e(Array.prototype.map)?Array.prototype.map:function(e){if(void
        0===this||null===this)throw new TypeError;var t=Object(this),r=t.length>>>0;if(\"function\"!=typeof
        e)throw new TypeError;for(var n=new Array(r),i=arguments[1],o=0;r>o;o++)o
        in t&&(n[o]=e.call(i,t[o],o,t));return n},r=e(Array.prototype.forEach)?Array.prototype.forEach:function(e){if(void
        0===this||null===this)throw new TypeError;var t=Object(this),r=t.length>>>0;if(\"function\"!=typeof
        e)throw new TypeError;for(var n=arguments[1],i=0;r>i;i++)i in t&&e.call(n,t[i],i,t)},n=e(Array.prototype.indexOf)?Array.prototype.indexOf:function(e,t){null===t||void
        0===t?t=0:0>t&&(t=Math.max(0,this.length+t));for(var r=t,n=this.length;n>r;r++)if(this[r]===e)return
        r;return-1};Ember.ArrayPolyfills={map:t,forEach:r,indexOf:n},Ember.SHIM_ES5&&(Array.prototype.map||(Array.prototype.map=t),Array.prototype.forEach||(Array.prototype.forEach=r),Array.prototype.indexOf||(Array.prototype.indexOf=n))}(),function(){function
        e(e){this.descs={},this.watching={},this.cache={},this.source=e}function t(e,t){return!(!e||\"function\"!=typeof
        e[t])}var r=Ember.platform.defineProperty,n=Ember.create,i=\"__ember\"+ +new
        Date,o=0,s=[],a={},u=Ember.ENV.MANDATORY_SETTER;Ember.GUID_KEY=i;var c={writable:!1,configurable:!1,enumerable:!1,value:null};Ember.generateGuid=function(e,t){t||(t=\"ember\");var
        n=t+o++;return e&&(c.value=n,r(e,i,c)),n},Ember.guidFor=function(e){if(void
        0===e)return\"(undefined)\";if(null===e)return\"(null)\";var t,n=typeof e;switch(n){case\"number\":return
        t=s[e],t||(t=s[e]=\"nu\"+e),t;case\"string\":return t=a[e],t||(t=a[e]=\"st\"+o++),t;case\"boolean\":return
        e?\"(true)\":\"(false)\";default:return e[i]?e[i]:e===Object?\"(Object)\":e===Array?\"(Array)\":(t=\"ember\"+o++,c.value=t,r(e,i,c),t)}};var
        l={writable:!0,configurable:!1,enumerable:!1,value:null},h=Ember.GUID_KEY+\"_meta\";Ember.META_KEY=h;var
        m={descs:{},watching:{}};u&&(m.values={}),Ember.EMPTY_META=m,Object.freeze&&Object.freeze(m);var
        f=Ember.platform.defineProperty.isSimulated;f&&(e.prototype.__preventPlainObject__=!0,e.prototype.toJSON=function(){}),Ember.meta=function(t,i){var
        o=t[h];return i===!1?o||m:(o?o.source!==t&&(f||r(t,h,l),o=n(o),o.descs=n(o.descs),o.watching=n(o.watching),o.cache={},o.source=t,u&&(o.values=n(o.values)),t[h]=o):(f||r(t,h,l),o=new
        e(t),u&&(o.values={}),t[h]=o,o.descs.constructor=null),o)},Ember.getMeta=function(e,t){var
        r=Ember.meta(e,!1);return r[t]},Ember.setMeta=function(e,t,r){var n=Ember.meta(e,!0);return
        n[t]=r,r},Ember.metaPath=function(e,t,r){for(var i,o,s=Ember.meta(e,r),a=0,u=t.length;u>a;a++){if(i=t[a],o=s[i]){if(o.__ember_source__!==e){if(!r)return
        void 0;o=s[i]=n(o),o.__ember_source__=e}}else{if(!r)return void 0;o=s[i]={__ember_source__:e}}s=o}return
        o},Ember.wrap=function(e,t){function r(){}function n(){var n,i=this._super;return
        this._super=t||r,n=e.apply(this,arguments),this._super=i,n}return n.wrappedFunction=e,n.__ember_observes__=e.__ember_observes__,n.__ember_observesBefore__=e.__ember_observesBefore__,n.__ember_listens__=e.__ember_listens__,n},Ember.isArray=function(e){return!e||e.setInterval?!1:Array.isArray&&Array.isArray(e)?!0:Ember.Array&&Ember.Array.detect(e)?!0:void
        0!==e.length&&\"object\"==typeof e?!0:!1},Ember.makeArray=function(e){return
        null===e||void 0===e?[]:Ember.isArray(e)?e:[e]},Ember.canInvoke=t,Ember.tryInvoke=function(e,r,n){return
        t(e,r)?e[r].apply(e,n||[]):void 0};var p=function(){var e=0;try{try{}finally{throw
        e++,new Error(\"needsFinallyFixTest\")}}catch(t){}return 1!==e}();Ember.tryFinally=p?function(e,t,r){var
        n,i,o;r=r||this;try{n=e.call(r)}finally{try{i=t.call(r)}catch(s){o=s}}if(o)throw
        o;return void 0===i?n:i}:function(e,t,r){var n,i;r=r||this;try{n=e.call(r)}finally{i=t.call(r)}return
        void 0===i?n:i},Ember.tryCatchFinally=p?function(e,t,r,n){var i,o,s;n=n||this;try{i=e.call(n)}catch(a){i=t.call(n,a)}finally{try{o=r.call(n)}catch(u){s=u}}if(s)throw
        s;return void 0===o?i:o}:function(e,t,r,n){var i,o;n=n||this;try{i=e.call(n)}catch(s){i=t.call(n,s)}finally{o=r.call(n)}return
        void 0===o?i:o};var d={},b=\"Boolean Number String Function Array Date RegExp
        Object\".split(\" \");Ember.ArrayPolyfills.forEach.call(b,function(e){d[\"[object
        \"+e+\"]\"]=e.toLowerCase()});var E=Object.prototype.toString;Ember.typeOf=function(e){var
        t;return t=null===e||void 0===e?String(e):d[E.call(e)]||\"object\",\"function\"===t?Ember.Object&&Ember.Object.detect(e)&&(t=\"class\"):\"object\"===t&&(t=e
        instanceof Error?\"error\":Ember.Object&&e instanceof Ember.Object?\"instance\":\"object\"),t}}(),function(){Ember.Instrumentation={};var
        e=[],t={},r=function(r){for(var n,i=[],o=0,s=e.length;s>o;o++)n=e[o],n.regex.test(r)&&i.push(n.object);return
        t[r]=i,i},n=function(){var e=\"undefined\"!=typeof window?window.performance||{}:{},t=e.now||e.mozNow||e.webkitNow||e.msNow||e.oNow;return
        t?t.bind(e):function(){return+new Date}}();Ember.Instrumentation.instrument=function(e,i,o,s){function
        a(){for(p=0,d=m.length;d>p;p++)f=m[p],b[p]=f.before(e,n(),i);return o.call(s)}function
        u(e){i=i||{},i.exception=e}function c(){for(p=0,d=m.length;d>p;p++)f=m[p],f.after(e,n(),i,b[p]);Ember.STRUCTURED_PROFILE&&console.timeEnd(l)}var
        l,h,m=t[e];if(Ember.STRUCTURED_PROFILE&&(l=e+\": \"+i.object,console.time(l)),m||(m=r(e)),0===m.length)return
        h=o.call(s),Ember.STRUCTURED_PROFILE&&console.timeEnd(l),h;var f,p,d,b=[];return
        Ember.tryCatchFinally(a,u,c)},Ember.Instrumentation.subscribe=function(r,n){for(var
        i,o=r.split(\".\"),s=[],a=0,u=o.length;u>a;a++)i=o[a],\"*\"===i?s.push(\"[^\\\\.]*\"):s.push(i);s=s.join(\"\\\\.\"),s+=\"(\\\\..*)?\";var
        c={pattern:r,regex:new RegExp(\"^\"+s+\"$\"),object:n};return e.push(c),t={},c},Ember.Instrumentation.unsubscribe=function(r){for(var
        n,i=0,o=e.length;o>i;i++)e[i]===r&&(n=i);e.splice(n,1),t={}},Ember.Instrumentation.reset=function(){e=[],t={}},Ember.instrument=Ember.Instrumentation.instrument,Ember.subscribe=Ember.Instrumentation.subscribe}(),function(){var
        e,t,r,n;e=Array.prototype.map||Ember.ArrayPolyfills.map,t=Array.prototype.forEach||Ember.ArrayPolyfills.forEach,r=Array.prototype.indexOf||Ember.ArrayPolyfills.indexOf,n=Array.prototype.splice;var
        i=Ember.EnumerableUtils={map:function(t,r,n){return t.map?t.map.call(t,r,n):e.call(t,r,n)},forEach:function(e,r,n){return
        e.forEach?e.forEach.call(e,r,n):t.call(e,r,n)},indexOf:function(e,t,n){return
        e.indexOf?e.indexOf.call(e,t,n):r.call(e,t,n)},indexesOf:function(e,t){return
        void 0===t?[]:i.map(t,function(t){return i.indexOf(e,t)})},addObject:function(e,t){var
        r=i.indexOf(e,t);-1===r&&e.push(t)},removeObject:function(e,t){var r=i.indexOf(e,t);-1!==r&&e.splice(r,1)},_replace:function(e,t,r,i){for(var
        o,s,a=[].concat(i),u=[],c=6e4,l=t,h=r;a.length;)s=h>c?c:h,0>=s&&(s=0),o=a.splice(0,c),o=[l,s].concat(o),l+=c,h-=s,u=u.concat(n.apply(e,o));return
        u},replace:function(e,t,r,n){return e.replace?e.replace(t,r,n):i._replace(e,t,r,n)},intersection:function(e,t){var
        r=[];return i.forEach(e,function(e){i.indexOf(t,e)>=0&&r.push(e)}),r}}}(),function(){var
        e,t=Ember.META_KEY,r=Ember.ENV.MANDATORY_SETTER,n=/^([A-Z$]|([0-9][A-Z$])).*[\\.\\*]/,i=/^this[\\.\\*]/,o=/^([^\\.\\*]+)/;e=function(e,n){if(\"\"===n)return
        e;if(n||\"string\"!=typeof e||(n=e,e=null),null===e||-1!==n.indexOf(\".\"))return
        a(e,n);var i,o=e[t],s=o&&o.descs[n];return s?s.get(e,n):(i=r&&o&&o.watching[n]>0?o.values[n]:e[n],void
        0!==i||\"object\"!=typeof e||n in e||\"function\"!=typeof e.unknownProperty?i:e.unknownProperty(n))},Ember.config.overrideAccessors&&(Ember.get=e,Ember.config.overrideAccessors(),e=Ember.get);var
        s=Ember.normalizeTuple=function(t,r){var s,a=i.test(r),u=!a&&n.test(r);if((!t||u)&&(t=Ember.lookup),a&&(r=r.slice(5)),t===Ember.lookup&&(s=r.match(o)[0],t=e(t,s),r=r.slice(s.length+1)),!r||0===r.length)throw
        new Error(\"Invalid Path\");return[t,r]},a=Ember._getPath=function(t,r){var
        n,o,a,u,c;if(null===t&&-1===r.indexOf(\".\"))return e(Ember.lookup,r);for(n=i.test(r),(!t||n)&&(a=s(t,r),t=a[0],r=a[1],a.length=0),o=r.split(\".\"),c=o.length,u=0;null!=t&&c>u;u++)if(t=e(t,o[u],!0),t&&t.isDestroyed)return
        void 0;return t};Ember.getWithDefault=function(t,r,n){var i=e(t,r);return
        void 0===i?n:i},Ember.get=e,Ember.getPath=Ember.deprecateFunc(\"getPath is
        deprecated since get now supports paths\",Ember.get)}(),function(){function
        e(e,t,r){for(var n=-1,i=0,o=e.length;o>i;i+=3)if(t===e[i]&&r===e[i+1]){n=i;break}return
        n}function t(e,t){var r,n=f(e,!0);return n.listeners||(n.listeners={}),n.hasOwnProperty(\"listeners\")||(n.listeners=m(n.listeners)),r=n.listeners[t],r&&!n.listeners.hasOwnProperty(t)?r=n.listeners[t]=n.listeners[t].slice():r||(r=n.listeners[t]=[]),r}function
        r(t,r,n){var i=t[p],o=i&&i.listeners&&i.listeners[r];if(o)for(var s=o.length-3;s>=0;s-=3){var
        a=o[s],u=o[s+1],c=o[s+2],l=e(n,a,u);-1===l&&n.push(a,u,c)}}function n(t,r,n){var
        i=t[p],o=i&&i.listeners&&i.listeners[r],s=[];if(o){for(var a=o.length-3;a>=0;a-=3){var
        u=o[a],c=o[a+1],l=o[a+2],h=e(n,u,c);-1===h&&(n.push(u,c,l),s.push(u,c,l))}return
        s}}function i(r,n,i,o,s){o||\"function\"!=typeof i||(o=i,i=null);var a=t(r,n),u=e(a,i,o),c=0;s&&(c|=b),-1===u&&(a.push(i,o,c),\"function\"==typeof
        r.didAddListener&&r.didAddListener(n,i,o))}function o(r,n,i,o){function s(i,o){var
        s=t(r,n),a=e(s,i,o);-1!==a&&(s.splice(a,3),\"function\"==typeof r.didRemoveListener&&r.didRemoveListener(n,i,o))}if(o||\"function\"!=typeof
        i||(o=i,i=null),o)s(i,o);else{var a=r[p],u=a&&a.listeners&&a.listeners[n];if(!u)return;for(var
        c=u.length-3;c>=0;c-=3)s(u[c],u[c+1])}}function s(r,n,i,o,s){function a(){return
        s.call(i)}function u(){-1!==l&&(c[l+2]&=~E)}o||\"function\"!=typeof i||(o=i,i=null);var
        c=t(r,n),l=e(c,i,o);return-1!==l&&(c[l+2]|=E),Ember.tryFinally(a,u)}function
        a(r,n,i,o,s){function a(){return s.call(i)}function u(){for(var e=0,t=f.length;t>e;e++){var
        r=f[e];p[e][r+2]&=~E}}o||\"function\"!=typeof i||(o=i,i=null);var c,l,h,m,f=[],p=[];for(h=0,m=n.length;m>h;h++){c=n[h],l=t(r,c);var
        d=e(l,i,o);-1!==d&&(l[d+2]|=E,f.push(d),p.push(l))}return Ember.tryFinally(a,u)}function
        u(e){var t=e[p].listeners,r=[];if(t)for(var n in t)t[n]&&r.push(n);return
        r}function c(e,t,r,n){if(e!==Ember&&\"function\"==typeof e.sendEvent&&e.sendEvent(t,r),!n){var
        i=e[p];n=i&&i.listeners&&i.listeners[t]}if(n){for(var s=n.length-3;s>=0;s-=3){var
        a=n[s],u=n[s+1],c=n[s+2];u&&(c&E||(c&b&&o(e,t,a,u),a||(a=e),\"string\"==typeof
        u&&(u=a[u]),r?u.apply(a,r):u.call(a)))}return!0}}function l(e,t){var r=e[p],n=r&&r.listeners&&r.listeners[t];return!(!n||!n.length)}function
        h(e,t){var r=[],n=e[p],i=n&&n.listeners&&n.listeners[t];if(!i)return r;for(var
        o=0,s=i.length;s>o;o+=3){var a=i[o],u=i[o+1];r.push([a,u])}return r}var m=Ember.create,f=Ember.meta,p=Ember.META_KEY,d=[].slice,b=1,E=2;Ember.on=function(){var
        e=d.call(arguments,-1)[0],t=d.call(arguments,0,-1);return e.__ember_listens__=t,e},Ember.addListener=i,Ember.removeListener=o,Ember._suspendListener=s,Ember._suspendListeners=a,Ember.sendEvent=c,Ember.hasListeners=l,Ember.watchedEvents=u,Ember.listenersFor=h,Ember.listenersDiff=n,Ember.listenersUnion=r}(),function(){var
        e=Ember.guidFor,t=Ember.sendEvent,r=Ember._ObserverSet=function(){this.clear()};r.prototype.add=function(t,r,n){var
        i,o=this.observerSet,s=this.observers,a=e(t),u=o[a];return u||(o[a]=u={}),i=u[r],void
        0===i&&(i=s.push({sender:t,keyName:r,eventName:n,listeners:[]})-1,u[r]=i),s[i].listeners},r.prototype.flush=function(){var
        e,r,n,i,o=this.observers;for(this.clear(),e=0,r=o.length;r>e;++e)n=o[e],i=n.sender,i.isDestroying||i.isDestroyed||t(i,n.eventName,[i,n.keyName],n.listeners)},r.prototype.clear=function(){this.observerSet={},this.observers=[]}}(),function(){function
        e(e,t){var n=h(e,!1),i=n.watching[t]>0||\"length\"===t,s=n.proto,a=n.descs[t];i&&s!==e&&(a&&a.willChange&&a.willChange(e,t),r(e,t,n),o(e,t,n),c(e,t))}function
        t(e,t){var r=h(e,!1),i=r.watching[t]>0||\"length\"===t,o=r.proto,a=r.descs[t];o!==e&&(a&&a.didChange&&a.didChange(e,t),(i||\"length\"===t)&&(n(e,t,r),s(e,t,r,!1),l(e,t)))}function
        r(t,r,n){if(!t.isDestroying){var o=w,s=!o;s&&(o=w={}),i(e,t,r,o,n),s&&(w=null)}}function
        n(e,r,n){if(!e.isDestroying){var o=_,s=!o;s&&(o=_={}),i(t,e,r,o,n),s&&(_=null)}}function
        i(e,t,r,n,i){var o=m(t);if(n[o]||(n[o]={}),!n[o][r]){n[o][r]=!0;var s=i.deps;if(s=s&&s[r])for(var
        a in s){var u=i.descs[a];u&&u._suspended===t||e(t,a)}}}function o(t,r,n){if(n.hasOwnProperty(\"chainWatchers\")&&n.chainWatchers[r]){var
        i,o,s=n.chainWatchers[r],a=[];for(i=0,o=s.length;o>i;i++)s[i].willChange(a);for(i=0,o=a.length;o>i;i+=2)e(a[i],a[i+1])}}function
        s(e,r,n,i){if(n.hasOwnProperty(\"chainWatchers\")&&n.chainWatchers[r]){var
        o,s,a=n.chainWatchers[r],u=i?null:[];for(o=0,s=a.length;s>o;o++)a[o].didChange(u);if(!i)for(o=0,s=u.length;s>o;o+=2)t(u[o],u[o+1])}}function
        a(){y++}function u(){y--,0>=y&&(v.clear(),g.flush())}function c(e,t){if(!e.isDestroying){var
        r,n,i=t+\":before\";y?(r=v.add(e,t,i),n=b(e,i,r),p(e,i,[e,t],n)):p(e,i,[e,t])}}function
        l(e,t){if(!e.isDestroying){var r,n=t+\":change\";y?(r=g.add(e,t,n),d(e,n,r)):p(e,n,[e,t])}}var
        h=Ember.meta,m=Ember.guidFor,f=Ember.tryFinally,p=Ember.sendEvent,d=Ember.listenersUnion,b=Ember.listenersDiff,E=Ember._ObserverSet,v=new
        E,g=new E,y=0;Ember.propertyWillChange=e,Ember.propertyDidChange=t;var w,_;Ember.overrideChains=function(e,t,r){s(e,t,r,!0)},Ember.beginPropertyChanges=a,Ember.endPropertyChanges=u,Ember.changeProperties=function(e,t){a(),f(e,u,t)}}(),function(){function
        e(e,t,r,o){var s;if(s=t.slice(t.lastIndexOf(\".\")+1),t=t.slice(0,t.length-(s.length+1)),\"this\"!==t&&(e=n(e,t)),!s||0===s.length)throw
        new Error(\"You passed an empty path\");if(!e){if(o)return;throw new Error(\"Object
        in path \"+t+\" could not be found or was destroyed.\")}return i(e,s,r)}var
        t=Ember.META_KEY,r=Ember.ENV.MANDATORY_SETTER,n=Ember._getPath,i=function(n,i,o,s){if(\"string\"==typeof
        n&&(o=i,i=n,n=null),!n||-1!==i.indexOf(\".\"))return e(n,i,o,s);var a,u,c=n[t],l=c&&c.descs[i];return
        l?l.set(n,i,o):(a=\"object\"==typeof n&&!(i in n),a&&\"function\"==typeof
        n.setUnknownProperty?n.setUnknownProperty(i,o):c&&c.watching[i]>0?(u=r?c.values[i]:n[i],o!==u&&(Ember.propertyWillChange(n,i),r?void
        0!==u||i in n?c.values[i]=o:Ember.defineProperty(n,i,null,o):n[i]=o,Ember.propertyDidChange(n,i))):n[i]=o),o};Ember.config.overrideAccessors&&(Ember.set=i,Ember.config.overrideAccessors(),i=Ember.set),Ember.set=i,Ember.setPath=Ember.deprecateFunc(\"setPath
        is deprecated since set now supports paths\",Ember.set),Ember.trySet=function(e,t,r){return
        i(e,t,r,!0)},Ember.trySetPath=Ember.deprecateFunc(\"trySetPath has been renamed
        to trySet\",Ember.trySet)}(),function(){var e=Ember.set,t=Ember.guidFor,r=Ember.ArrayPolyfills.indexOf,n=function(e){var
        t={};for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);return t},i=function(e,t){var
        r=e.keys.copy(),i=n(e.values);return t.keys=r,t.values=i,t.length=e.length,t},o=Ember.OrderedSet=function(){this.clear()};o.create=function(){return
        new o},o.prototype={clear:function(){this.presenceSet={},this.list=[]},add:function(e){var
        r=t(e),n=this.presenceSet,i=this.list;r in n||(n[r]=!0,i.push(e))},remove:function(e){var
        n=t(e),i=this.presenceSet,o=this.list;delete i[n];var s=r.call(o,e);s>-1&&o.splice(s,1)},isEmpty:function(){return
        0===this.list.length},has:function(e){var r=t(e),n=this.presenceSet;return
        r in n},forEach:function(e,t){for(var r=this.toArray(),n=0,i=r.length;i>n;n++)e.call(t,r[n])},toArray:function(){return
        this.list.slice()},copy:function(){var e=new o;return e.presenceSet=n(this.presenceSet),e.list=this.toArray(),e}};var
        s=Ember.Map=function(){this.keys=Ember.OrderedSet.create(),this.values={}};s.create=function(){return
        new s},s.prototype={length:0,get:function(e){var r=this.values,n=t(e);return
        r[n]},set:function(r,n){var i=this.keys,o=this.values,s=t(r);i.add(r),o[s]=n,e(this,\"length\",i.list.length)},remove:function(r){var
        n=this.keys,i=this.values,o=t(r);return i.hasOwnProperty(o)?(n.remove(r),delete
        i[o],e(this,\"length\",n.list.length),!0):!1},has:function(e){var r=this.values,n=t(e);return
        r.hasOwnProperty(n)},forEach:function(e,r){var n=this.keys,i=this.values;n.forEach(function(n){var
        o=t(n);e.call(r,n,i[o])})},copy:function(){return i(this,new s)}};var a=Ember.MapWithDefault=function(e){s.call(this),this.defaultValue=e.defaultValue};a.create=function(e){return
        e?new a(e):new s},a.prototype=Ember.create(s.prototype),a.prototype.get=function(e){var
        t=this.has(e);if(t)return s.prototype.get.call(this,e);var r=this.defaultValue(e);return
        this.set(e,r),r},a.prototype.copy=function(){return i(this,new a({defaultValue:this.defaultValue}))}}(),function(){var
        e=Ember.META_KEY,t=Ember.meta,r=Ember.platform.defineProperty,n=Ember.ENV.MANDATORY_SETTER;Ember.Descriptor=function(){};var
        i=Ember.MANDATORY_SETTER_FUNCTION=function(){},o=Ember.DEFAULT_GETTER_FUNCTION=function(t){return
        function(){var r=this[e];return r&&r.values[t]}};Ember.defineProperty=function(e,s,a,u,c){var
        l,h,m,f;return c||(c=t(e)),l=c.descs,h=c.descs[s],m=c.watching[s]>0,h instanceof
        Ember.Descriptor&&h.teardown(e,s),a instanceof Ember.Descriptor?(f=a,l[s]=a,n&&m?r(e,s,{configurable:!0,enumerable:!0,writable:!0,value:void
        0}):e[s]=void 0):(l[s]=void 0,null==a?(f=u,n&&m?(c.values[s]=u,r(e,s,{configurable:!0,enumerable:!0,set:i,get:o(s)})):e[s]=u):(f=a,r(e,s,a))),m&&Ember.overrideChains(e,s,c),e.didDefineProperty&&e.didDefineProperty(e,s,f),this}}(),function(){var
        e=Ember.get;Ember.getProperties=function(t){var r={},n=arguments,i=1;2===arguments.length&&\"array\"===Ember.typeOf(arguments[1])&&(i=0,n=arguments[1]);for(var
        o=n.length;o>i;i++)r[n[i]]=e(t,n[i]);return r}}(),function(){var e=Ember.changeProperties,t=Ember.set;Ember.setProperties=function(r,n){return
        e(function(){for(var e in n)n.hasOwnProperty(e)&&t(r,e,n[e])}),r}}(),function(){var
        e=Ember.meta,t=Ember.typeOf,r=Ember.ENV.MANDATORY_SETTER,n=Ember.platform.defineProperty;Ember.watchKey=function(i,o){if(\"length\"!==o||\"array\"!==t(i)){var
        s=e(i),a=s.watching;a[o]?a[o]=(a[o]||0)+1:(a[o]=1,\"function\"==typeof i.willWatchProperty&&i.willWatchProperty(o),r&&o
        in i&&(s.values[o]=i[o],n(i,o,{configurable:!0,enumerable:!0,set:Ember.MANDATORY_SETTER_FUNCTION,get:Ember.DEFAULT_GETTER_FUNCTION(o)})))}},Ember.unwatchKey=function(t,i){var
        o=e(t),s=o.watching;1===s[i]?(s[i]=0,\"function\"==typeof t.didUnwatchProperty&&t.didUnwatchProperty(i),r&&i
        in t&&(n(t,i,{configurable:!0,enumerable:!0,writable:!0,value:o.values[i]}),delete
        o.values[i])):s[i]>1&&s[i]--}}(),function(){function e(e){return e.match(l)[0]}function
        t(e,t,r){if(e&&\"object\"==typeof e){var i=n(e),o=i.chainWatchers;i.hasOwnProperty(\"chainWatchers\")||(o=i.chainWatchers={}),o[t]||(o[t]=[]),o[t].push(r),u(e,t)}}function
        r(e,t){if(!e)return void 0;var r=n(e,!1);if(r.proto===e)return void 0;if(\"@each\"===t)return
        i(e,t);var o=r.descs[t];return o&&o._cacheable?t in r.cache?r.cache[t]:void
        0:i(e,t)}var n=Ember.meta,i=Ember.get,o=Ember.normalizeTuple,s=Ember.ArrayPolyfills.forEach,a=Ember.warn,u=Ember.watchKey,c=Ember.unwatchKey,l=/^([^\\.\\*]+)/,h=[];Ember.flushPendingChains=function(){if(0!==h.length){var
        e=h;h=[],s.call(e,function(e){e[0].add(e[1])}),a(\"Watching an undefined global,
        Ember expects watched globals to be setup by the time the run loop is flushed,
        check for typos\",0===h.length)}};var m=Ember.removeChainWatcher=function(e,t,r){if(e&&\"object\"==typeof
        e){var i=n(e,!1);if(i.hasOwnProperty(\"chainWatchers\")){var o=i.chainWatchers;if(o[t]){o=o[t];for(var
        s=0,a=o.length;a>s;s++)o[s]===r&&o.splice(s,1)}c(e,t)}}},f=Ember._ChainNode=function(e,r,n){this._parent=e,this._key=r,this._watching=void
        0===n,this._value=n,this._paths={},this._watching&&(this._object=e.value(),this._object&&t(this._object,this._key,this)),this._parent&&\"@each\"===this._parent._key&&this.value()},p=f.prototype;p.value=function(){if(void
        0===this._value&&this._watching){var e=this._parent.value();this._value=r(e,this._key)}return
        this._value},p.destroy=function(){if(this._watching){var e=this._object;e&&m(e,this._key,this),this._watching=!1}},p.copy=function(e){var
        t,r=new f(null,null,e),n=this._paths;for(t in n)n[t]<=0||r.add(t);return r},p.add=function(t){var
        r,n,i,s,a;if(a=this._paths,a[t]=(a[t]||0)+1,r=this.value(),n=o(r,t),n[0]&&n[0]===r)t=n[1],i=e(t),t=t.slice(i.length+1);else{if(!n[0])return
        h.push([this,t]),n.length=0,void 0;s=n[0],i=t.slice(0,0-(n[1].length+1)),t=n[1]}n.length=0,this.chain(i,t,s)},p.remove=function(t){var
        r,n,i,s,a;a=this._paths,a[t]>0&&a[t]--,r=this.value(),n=o(r,t),n[0]===r?(t=n[1],i=e(t),t=t.slice(i.length+1)):(s=n[0],i=t.slice(0,0-(n[1].length+1)),t=n[1]),n.length=0,this.unchain(i,t)},p.count=0,p.chain=function(t,r,n){var
        i,o=this._chains;o||(o=this._chains={}),i=o[t],i||(i=o[t]=new f(this,t,n)),i.count++,r&&r.length>0&&(t=e(r),r=r.slice(t.length+1),i.chain(t,r))},p.unchain=function(t,r){var
        n=this._chains,i=n[t];r&&r.length>1&&(t=e(r),r=r.slice(t.length+1),i.unchain(t,r)),i.count--,i.count<=0&&(delete
        n[i._key],i.destroy())},p.willChange=function(e){var t=this._chains;if(t)for(var
        r in t)t.hasOwnProperty(r)&&t[r].willChange(e);this._parent&&this._parent.chainWillChange(this,this._key,1,e)},p.chainWillChange=function(e,t,r,n){this._key&&(t=this._key+\".\"+t),this._parent?this._parent.chainWillChange(this,t,r+1,n):(r>1&&n.push(this.value(),t),t=\"this.\"+t,this._paths[t]>0&&n.push(this.value(),t))},p.chainDidChange=function(e,t,r,n){this._key&&(t=this._key+\".\"+t),this._parent?this._parent.chainDidChange(this,t,r+1,n):(r>1&&n.push(this.value(),t),t=\"this.\"+t,this._paths[t]>0&&n.push(this.value(),t))},p.didChange=function(e){if(this._watching){var
        r=this._parent.value();r!==this._object&&(m(this._object,this._key,this),this._object=r,t(r,this._key,this)),this._value=void
        0,this._parent&&\"@each\"===this._parent._key&&this.value()}var n=this._chains;if(n)for(var
        i in n)n.hasOwnProperty(i)&&n[i].didChange(e);null!==e&&this._parent&&this._parent.chainDidChange(this,this._key,1,e)},Ember.finishChains=function(e){var
        t=n(e,!1),r=t.chains;r&&(r.value()!==e&&(t.chains=r=r.copy(e)),r.didChange(null))}}(),function(){function
        e(e){var r=t(e),i=r.chains;return i?i.value()!==e&&(i=r.chains=i.copy(e)):i=r.chains=new
        n(null,null,e),i}var t=Ember.meta,r=Ember.typeOf,n=Ember._ChainNode;Ember.watchPath=function(n,i){if(\"length\"!==i||\"array\"!==r(n)){var
        o=t(n),s=o.watching;s[i]?s[i]=(s[i]||0)+1:(s[i]=1,e(n).add(i))}},Ember.unwatchPath=function(r,n){var
        i=t(r),o=i.watching;1===o[n]?(o[n]=0,e(r).remove(n)):o[n]>1&&o[n]--}}(),function(){function
        e(e){return\"*\"===e||!h.test(e)}var t=Ember.meta,r=Ember.GUID_KEY,n=Ember.META_KEY,i=Ember.removeChainWatcher,o=Ember.watchKey,s=Ember.unwatchKey,a=Ember.watchPath,u=Ember.unwatchPath,c=Ember.typeOf,l=Ember.generateGuid,h=/[\\.\\*]/;Ember.watch=function(t,r){(\"length\"!==r||\"array\"!==c(t))&&(e(r)?o(t,r):a(t,r))},Ember.isWatching=function(e,t){var
        r=e[n];return(r&&r.watching[t])>0},Ember.watch.flushPending=Ember.flushPendingChains,Ember.unwatch=function(t,r){(\"length\"!==r||\"array\"!==c(t))&&(e(r)?s(t,r):u(t,r))},Ember.rewatch=function(e){var
        n=t(e,!1),i=n.chains;r in e&&!e.hasOwnProperty(r)&&l(e,\"ember\"),i&&i.value()!==e&&(n.chains=i.copy(e))};var
        m=[];Ember.destroy=function(e){var t,r,o,s,a=e[n];if(a&&(e[n]=null,t=a.chains))for(m.push(t);m.length>0;){if(t=m.pop(),r=t._chains)for(o
        in r)r.hasOwnProperty(o)&&m.push(r[o]);t._watching&&(s=t._object,s&&i(s,t._key,t))}}}(),function(){function
        e(e,t){var r=e[t];return r?e.hasOwnProperty(t)||(r=e[t]=f(r)):r=e[t]={},r}function
        t(t){return e(t,\"deps\")}function r(r,n,i,o){var s,a,u,c,l,h=r._dependentKeys;if(h)for(s=t(o),a=0,u=h.length;u>a;a++)c=h[a],l=e(s,c),l[i]=(l[i]||0)+1,p(n,c)}function
        n(r,n,i,o){var s,a,u,c,l,h=r._dependentKeys;if(h)for(s=t(o),a=0,u=h.length;u>a;a++)c=h[a],l=e(s,c),l[i]=(l[i]||0)-1,d(n,c)}function
        i(e,t){this.func=e,this._cacheable=t&&void 0!==t.cacheable?t.cacheable:!0,this._dependentKeys=t&&t.dependentKeys,this._readOnly=t&&(void
        0!==t.readOnly||!!t.readOnly)}function o(e){for(var t=0,r=e.length;r>t;t++)e[t].didChange(null)}function
        s(e,t){for(var r={},n=0;n<t.length;n++)r[t[n]]=c(e,t[n]);return r}function
        a(e,t){Ember.computed[e]=function(e){var r=m.call(arguments);return Ember.computed(e,function(){return
        t.apply(this,r)})}}function u(e,t){Ember.computed[e]=function(){var e=m.call(arguments),r=Ember.computed(function(){return
        t.apply(this,[s(this,e)])});return r.property.apply(r,e)}}var c=Ember.get,l=Ember.set,h=Ember.meta,m=[].slice,f=Ember.create,p=(Ember.META_KEY,Ember.watch),d=Ember.unwatch;Ember.ComputedProperty=i,i.prototype=new
        Ember.Descriptor;var b=i.prototype;b.cacheable=function(e){return this._cacheable=e!==!1,this},b.volatile=function(){return
        this.cacheable(!1)},b.readOnly=function(e){return this._readOnly=void 0===e||!!e,this},b.property=function(){for(var
        e=[],t=0,r=arguments.length;r>t;t++)e.push(arguments[t]);return this._dependentKeys=e,this},b.meta=function(e){return
        0===arguments.length?this._meta||{}:(this._meta=e,this)},b.didChange=function(e,t){if(this._cacheable&&this._suspended!==e){var
        r=h(e);t in r.cache&&(delete r.cache[t],n(this,e,t,r))}},b.get=function(e,t){var
        n,i,s,a;if(this._cacheable){if(s=h(e),i=s.cache,t in i)return i[t];n=i[t]=this.func.call(e,t),a=s.chainWatchers&&s.chainWatchers[t],a&&o(a),r(this,e,t,s)}else
        n=this.func.call(e,t);return n},b.set=function(e,t,n){var i,o,s,a=this._cacheable,u=this.func,c=h(e,a),l=c.watching[t],m=this._suspended,f=!1,p=c.cache;if(this._readOnly)throw
        new Error(\"Cannot Set: \"+t+\" on: \"+e.toString());this._suspended=e;try{if(a&&p.hasOwnProperty(t)&&(o=p[t],f=!0),i=u.wrappedFunction?u.wrappedFunction.length:u.length,3===i)s=u.call(e,t,n,o);else{if(2!==i)return
        Ember.defineProperty(e,t,null,o),Ember.set(e,t,n),void 0;s=u.call(e,t,n)}if(f&&o===s)return;l&&Ember.propertyWillChange(e,t),f&&delete
        p[t],a&&(f||r(this,e,t,c),p[t]=s),l&&Ember.propertyDidChange(e,t)}finally{this._suspended=m}return
        s},b.teardown=function(e,t){var r=h(e);return t in r.cache&&n(this,e,t,r),this._cacheable&&delete
        r.cache[t],null},Ember.computed=function(e){var t;if(arguments.length>1&&(t=m.call(arguments,0,-1),e=m.call(arguments,-1)[0]),\"function\"!=typeof
        e)throw new Error(\"Computed Property declared without a property function\");var
        r=new i(e);return t&&r.property.apply(r,t),r},Ember.cacheFor=function(e,t){var
        r=h(e,!1).cache;return r&&t in r?r[t]:void 0},a(\"empty\",function(e){return
        Ember.isEmpty(c(this,e))}),a(\"notEmpty\",function(e){return!Ember.isEmpty(c(this,e))}),a(\"none\",function(e){return
        Ember.isNone(c(this,e))}),a(\"not\",function(e){return!c(this,e)}),a(\"bool\",function(e){return!!c(this,e)}),a(\"match\",function(e,t){var
        r=c(this,e);return\"string\"==typeof r?!!r.match(t):!1}),a(\"equal\",function(e,t){return
        c(this,e)===t}),a(\"gt\",function(e,t){return c(this,e)>t}),a(\"gte\",function(e,t){return
        c(this,e)>=t}),a(\"lt\",function(e,t){return c(this,e)<t}),a(\"lte\",function(e,t){return
        c(this,e)<=t}),u(\"and\",function(e){for(var t in e)if(e.hasOwnProperty(t)&&!e[t])return!1;return!0}),u(\"or\",function(e){for(var
        t in e)if(e.hasOwnProperty(t)&&e[t])return!0;return!1}),u(\"any\",function(e){for(var
        t in e)if(e.hasOwnProperty(t)&&e[t])return e[t];return null}),u(\"collect\",function(e){var
        t=[];for(var r in e)e.hasOwnProperty(r)&&(Ember.isNone(e[r])?t.push(null):t.push(e[r]));return
        t}),Ember.computed.alias=function(e){return Ember.computed(e,function(t,r){return
        arguments.length>1?(l(this,e,r),r):c(this,e)})},Ember.computed.oneWay=function(e){return
        Ember.computed(e,function(){return c(this,e)})},Ember.computed.defaultTo=function(e){return
        Ember.computed(function(t,r,n){return 1===arguments.length?null!=n?n:c(this,e):null!=r?r:c(this,e)})}}(),function(){function
        e(e){return e+r}function t(e){return e+n}var r=\":change\",n=\":before\";Ember.addObserver=function(t,r,n,i){return
        Ember.addListener(t,e(r),n,i),Ember.watch(t,r),this},Ember.observersFor=function(t,r){return
        Ember.listenersFor(t,e(r))},Ember.removeObserver=function(t,r,n,i){return
        Ember.unwatch(t,r),Ember.removeListener(t,e(r),n,i),this},Ember.addBeforeObserver=function(e,r,n,i){return
        Ember.addListener(e,t(r),n,i),Ember.watch(e,r),this},Ember._suspendBeforeObserver=function(e,r,n,i,o){return
        Ember._suspendListener(e,t(r),n,i,o)},Ember._suspendObserver=function(t,r,n,i,o){return
        Ember._suspendListener(t,e(r),n,i,o)};var i=Ember.ArrayPolyfills.map;Ember._suspendBeforeObservers=function(e,r,n,o,s){var
        a=i.call(r,t);return Ember._suspendListeners(e,a,n,o,s)},Ember._suspendObservers=function(t,r,n,o,s){var
        a=i.call(r,e);return Ember._suspendListeners(t,a,n,o,s)},Ember.beforeObserversFor=function(e,r){return
        Ember.listenersFor(e,t(r))},Ember.removeBeforeObserver=function(e,r,n,i){return
        Ember.unwatch(e,r),Ember.removeListener(e,t(r),n,i),this}}(),function(){e(\"backburner/queue\",[\"exports\"],function(e){\"use
        strict\";function t(e,t,r){this.daq=e,this.name=t,this.options=r,this._queue=[]}t.prototype={daq:null,name:null,options:null,_queue:null,push:function(e,t,r,n){var
        i=this._queue;return i.push(e,t,r,n),{queue:this,target:e,method:t}},pushUnique:function(e,t,r,n){var
        i,o,s,a,u=this._queue;\nfor(s=0,a=u.length;a>s;s+=4)if(i=u[s],o=u[s+1],i===e&&o===t)return
        u[s+2]=r,u[s+3]=n,{queue:this,target:e,method:t};return this._queue.push(e,t,r,n),{queue:this,target:e,method:t}},flush:function(){var
        e,t,r,n,i,o=this._queue,s=this.options,a=s&&s.before,u=s&&s.after,c=o.length;for(c&&a&&a(),i=0;c>i;i+=4)e=o[i],t=o[i+1],r=o[i+2],n=o[i+3],r&&r.length>0?t.apply(e,r):t.call(e);c&&u&&u(),o.length>c?(this._queue=o.slice(c),this.flush()):this._queue.length=0},cancel:function(e){var
        t,r,n,i,o=this._queue;for(n=0,i=o.length;i>n;n+=4)if(t=o[n],r=o[n+1],t===e.target&&r===e.method)return
        o.splice(n,4),!0;if(o=this._queueBeingFlushed)for(n=0,i=o.length;i>n;n+=4)if(t=o[n],r=o[n+1],t===e.target&&r===e.method)return
        o[n+1]=null,!0}},e.Queue=t}),e(\"backburner/deferred_action_queues\",[\"backburner/queue\",\"exports\"],function(e,t){\"use
        strict\";function r(e,t){var r=this.queues={};this.queueNames=e=e||[];for(var
        n,o=0,s=e.length;s>o;o++)n=e[o],r[n]=new i(this,n,t[n])}function n(e,t){for(var
        r,n,i=0,o=t;o>=i;i++)if(r=e.queueNames[i],n=e.queues[r],n._queue.length)return
        i;return-1}var i=e.Queue;r.prototype={queueNames:null,queues:null,schedule:function(e,t,r,n,i,o){var
        s=this.queues,a=s[e];if(!a)throw new Error(\"You attempted to schedule an
        action in a queue (\"+e+\") that doesn't exist\");return i?a.pushUnique(t,r,n,o):a.push(t,r,n,o)},flush:function(){for(var
        e,t,r,i,o=this.queues,s=this.queueNames,a=0,u=s.length;u>a;){e=s[a],t=o[e],r=t._queueBeingFlushed=t._queue.slice(),t._queue=[];var
        c,l,h,m,f=t.options,p=f&&f.before,d=f&&f.after,b=0,E=r.length;for(E&&p&&p();E>b;)c=r[b],l=r[b+1],h=r[b+2],m=r[b+3],\"string\"==typeof
        l&&(l=c[l]),l&&(h&&h.length>0?l.apply(c,h):l.call(c)),b+=4;t._queueBeingFlushed=null,E&&d&&d(),-1===(i=n(this,a))?a++:a=i}}},t.DeferredActionQueues=r}),e(\"backburner\",[\"backburner/deferred_action_queues\",\"exports\"],function(e,t){\"use
        strict\";function r(e){return\"number\"==typeof e||E.test(e)}function n(e,t){this.queueNames=e,this.options=t||{},this.options.defaultQueue||(this.options.defaultQueue=e[0]),this.instanceStack=[]}function
        i(e){e.begin(),a=b.setTimeout(function(){a=null,e.end()})}function o(e){var
        t,r,n,i,s=+new Date;e.run(function(){for(n=0,i=d.length;i>n&&(t=d[n],!(t>s));n+=2);for(r=d.splice(0,n),n=1,i=r.length;i>n;n+=2)e.schedule(e.options.defaultQueue,null,r[n])}),d.length&&(u=b.setTimeout(function(){o(e),u=null,c=null},d[0]-s),c=d[0])}function
        s(e,t){for(var r,n=-1,i=0,o=p.length;o>i;i++)if(r=p[i],r[0]===e&&r[1]===t){n=i;break}return
        n}var a,u,c,l=e.DeferredActionQueues,h=[].slice,m=[].pop,f=[],p=[],d=[],b=this,E=/\\d+/;n.prototype={queueNames:null,options:null,currentInstance:null,instanceStack:null,begin:function(){var
        e=this.options&&this.options.onBegin,t=this.currentInstance;t&&this.instanceStack.push(t),this.currentInstance=new
        l(this.queueNames,this.options),e&&e(this.currentInstance,t)},end:function(){var
        e=this.options&&this.options.onEnd,t=this.currentInstance,r=null;try{t.flush()}finally{this.currentInstance=null,this.instanceStack.length&&(r=this.instanceStack.pop(),this.currentInstance=r),e&&e(t,r)}},run:function(e,t){var
        r;this.begin(),t||(t=e,e=null),\"string\"==typeof t&&(t=e[t]);var n=!1;try{r=arguments.length>2?t.apply(e,h.call(arguments,2)):t.call(e)}finally{n||(n=!0,this.end())}return
        r},defer:function(e,t,r){r||(r=t,t=null),\"string\"==typeof r&&(r=t[r]);var
        n=this.DEBUG?(new Error).stack:void 0,o=arguments.length>3?h.call(arguments,3):void
        0;return this.currentInstance||i(this),this.currentInstance.schedule(e,t,r,o,!1,n)},deferOnce:function(e,t,r){r||(r=t,t=null),\"string\"==typeof
        r&&(r=t[r]);var n=this.DEBUG?(new Error).stack:void 0,o=arguments.length>3?h.call(arguments,3):void
        0;return this.currentInstance||i(this),this.currentInstance.schedule(e,t,r,o,!0,n)},setTimeout:function(){function
        e(){t.apply(i,m)}var t,n,i,s,a,l,m=h.call(arguments),f=m.length,p=this;if(0!==f){if(1===f)t=m.shift(),n=0;else
        if(2===f)s=m[0],a=m[1],\"function\"==typeof a||\"function\"==typeof s[a]?(i=m.shift(),t=m.shift(),n=0):r(a)?(t=m.shift(),n=m.shift()):(t=m.shift(),n=0);else{var
        E=m[m.length-1];r(E)&&(n=m.pop()),s=m[0],l=m[1],\"function\"==typeof l||\"string\"==typeof
        l&&null!==s&&l in s?(i=m.shift(),t=m.shift()):t=m.shift()}var v=+new Date+parseInt(n,10);\"string\"==typeof
        t&&(t=i[t]);var g,y;for(g=0,y=d.length;y>g&&!(v<d[g]);g+=2);return d.splice(g,0,v,e),u&&v>c?e:(u&&(clearTimeout(u),u=null),u=b.setTimeout(function(){o(p),u=null,c=null},n),c=v,e)}},throttle:function(e,t){for(var
        r,n=this,i=arguments,o=m.call(i),s=0,a=f.length;a>s;s++)if(r=f[s],r[0]===e&&r[1]===t)return;var
        u=b.setTimeout(function(){n.run.apply(n,i);for(var o=-1,s=0,a=f.length;a>s;s++)if(r=f[s],r[0]===e&&r[1]===t){o=s;break}o>-1&&f.splice(o,1)},o);f.push([e,t,u])},debounce:function(e,t){var
        r,n,i,o=this,a=arguments,u=m.call(a);\"number\"==typeof u?(r=u,u=!1):r=m.call(a),n=s(e,t),-1!==n&&(i=p[n],p.splice(n,1),clearTimeout(i[2]));var
        c=b.setTimeout(function(){u||o.run.apply(o,a),n=s(e,t),n&&p.splice(n,1)},r);u&&-1===n&&o.run.apply(o,a),p.push([e,t,c])},cancelTimers:function(){var
        e,t;for(e=0,t=f.length;t>e;e++)clearTimeout(f[e][2]);for(f=[],e=0,t=p.length;t>e;e++)clearTimeout(p[e][2]);p=[],u&&(clearTimeout(u),u=null),d=[],a&&(clearTimeout(a),a=null)},hasTimers:function(){return!!d.length||a},cancel:function(e){if(e&&\"object\"==typeof
        e&&e.queue&&e.method)return e.queue.cancel(e);if(\"function\"==typeof e)for(var
        t=0,r=d.length;r>t;t+=2)if(d[t+1]===e)return d.splice(t,2),!0}},n.prototype.schedule=n.prototype.defer,n.prototype.scheduleOnce=n.prototype.deferOnce,n.prototype.later=n.prototype.setTimeout,t.Backburner=n})}(),function(){function
        e(){!Ember.run.currentRunLoop}var r=function(e){Ember.run.currentRunLoop=e},n=function(e,t){Ember.run.currentRunLoop=t},i=t(\"backburner\").Backburner,o=new
        i([\"sync\",\"actions\",\"destroy\"],{sync:{before:Ember.beginPropertyChanges,after:Ember.endPropertyChanges},defaultQueue:\"actions\",onBegin:r,onEnd:n}),s=[].slice;Ember.run=function(){var
        e;if(Ember.onerror)try{e=o.run.apply(o,arguments)}catch(t){Ember.onerror(t)}else
        e=o.run.apply(o,arguments);return e},Ember.run.join=function(){if(!Ember.run.currentRunLoop)return
        Ember.run.apply(Ember.run,arguments);var e=s.call(arguments);e.unshift(\"actions\"),Ember.run.schedule.apply(Ember.run,e)},Ember.run.backburner=o,Ember.run,Ember.run.currentRunLoop=null,Ember.run.queues=o.queueNames,Ember.run.begin=function(){o.begin()},Ember.run.end=function(){o.end()},Ember.run.schedule=function(){e(),o.schedule.apply(o,arguments)},Ember.run.hasScheduledTimers=function(){return
        o.hasTimers()},Ember.run.cancelTimers=function(){o.cancelTimers()},Ember.run.sync=function(){o.currentInstance&&o.currentInstance.queues.sync.flush()},Ember.run.later=function(){return
        o.later.apply(o,arguments)},Ember.run.once=function(){e();var t=s.call(arguments);return
        t.unshift(\"actions\"),o.scheduleOnce.apply(o,t)},Ember.run.scheduleOnce=function(){return
        e(),o.scheduleOnce.apply(o,arguments)},Ember.run.next=function(){var e=s.call(arguments);return
        e.push(1),o.later.apply(o,e)},Ember.run.cancel=function(e){return o.cancel(e)},Ember.run.debounce=function(){return
        o.debounce.apply(o,arguments)},Ember.run.throttle=function(){return o.throttle.apply(o,arguments)}}(),function(){function
        e(e,t){return r(o(t)?Ember.lookup:e,t)}function t(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])}Ember.LOG_BINDINGS=!1||!!Ember.ENV.LOG_BINDINGS;var
        r=Ember.get,n=(Ember.set,Ember.guidFor),i=/^([A-Z$]|([0-9][A-Z$]))/,o=Ember.isGlobalPath=function(e){return
        i.test(e)},s=function(e,t){this._direction=\"fwd\",this._from=t,this._to=e,this._directionMap=Ember.Map.create()};s.prototype={copy:function(){var
        e=new s(this._to,this._from);return this._oneWay&&(e._oneWay=!0),e},from:function(e){return
        this._from=e,this},to:function(e){return this._to=e,this},oneWay:function(){return
        this._oneWay=!0,this},toString:function(){var e=this._oneWay?\"[oneWay]\":\"\";return\"Ember.Binding<\"+n(this)+\">(\"+this._from+\"
        -> \"+this._to+\")\"+e},connect:function(t){var r=this._from,n=this._to;return
        Ember.trySet(t,n,e(t,r)),Ember.addObserver(t,r,this,this.fromDidChange),this._oneWay||Ember.addObserver(t,n,this,this.toDidChange),this._readyToSync=!0,this},disconnect:function(e){var
        t=!this._oneWay;return Ember.removeObserver(e,this._from,this,this.fromDidChange),t&&Ember.removeObserver(e,this._to,this,this.toDidChange),this._readyToSync=!1,this},fromDidChange:function(e){this._scheduleSync(e,\"fwd\")},toDidChange:function(e){this._scheduleSync(e,\"back\")},_scheduleSync:function(e,t){var
        r=this._directionMap,n=r.get(e);n||(Ember.run.schedule(\"sync\",this,this._sync,e),r.set(e,t)),\"back\"===n&&\"fwd\"===t&&r.set(e,\"fwd\")},_sync:function(t){var
        n=Ember.LOG_BINDINGS;if(!t.isDestroyed&&this._readyToSync){var i=this._directionMap,o=i.get(t),s=this._from,a=this._to;if(i.remove(t),\"fwd\"===o){var
        u=e(t,this._from);n&&Ember.Logger.log(\" \",this.toString(),\"->\",u,t),this._oneWay?Ember.trySet(t,a,u):Ember._suspendObserver(t,a,this,this.toDidChange,function(){Ember.trySet(t,a,u)})}else
        if(\"back\"===o){var c=r(t,this._to);n&&Ember.Logger.log(\" \",this.toString(),\"<-\",c,t),Ember._suspendObserver(t,s,this,this.fromDidChange,function(){Ember.trySet(Ember.isGlobalPath(s)?Ember.lookup:t,s,c)})}}}},t(s,{from:function(){var
        e=this,t=new e;return t.from.apply(t,arguments)},to:function(){var e=this,t=new
        e;return t.to.apply(t,arguments)},oneWay:function(e,t){var r=this,n=new r(null,e);return
        n.oneWay(t)}}),Ember.Binding=s,Ember.bind=function(e,t,r){return new Ember.Binding(t,r).connect(e)},Ember.oneWay=function(e,t,r){return
        new Ember.Binding(t,r).oneWay().connect(e)}}(),function(){function e(e){var
        t=Ember.meta(e,!0),r=t.mixins;return r?t.hasOwnProperty(\"mixins\")||(r=t.mixins=V(r)):r=t.mixins={},r}function
        t(e,t){return t&&t.length>0&&(e.mixins=C.call(t,function(e){if(e instanceof
        y)return e;var t=new y;return t.properties=e,t})),e}function r(e){return\"function\"==typeof
        e&&e.isMethod!==!1&&e!==Boolean&&e!==Object&&e!==Number&&e!==Array&&e!==Date&&e!==String}function
        n(e,t){var r;return t instanceof y?(r=S(t),e[r]?T:(e[r]=t,t.properties)):t}function
        i(e,t,r,n){var i;return i=r[e]||n[e],t[e]&&(i=i?i.concat(t[e]):t[e]),i}function
        o(e,t,r,n,i){var o;return void 0===n[t]&&(o=i[t]),o=o||e.descs[t],o&&o instanceof
        Ember.ComputedProperty?(r=V(r),r.func=Ember.wrap(r.func,o.func),r):r}function
        s(e,t,r,n,i){var o;return void 0===i[t]&&(o=n[t]),o=o||e[t],\"function\"!=typeof
        o?r:Ember.wrap(r,o)}function a(e,t,r,n){var i=n[t]||e[t];return i?\"function\"==typeof
        i.concat?i.concat(r):Ember.makeArray(i).concat(r):Ember.makeArray(r)}function
        u(e,t,n,i){var o=i[t]||e[t];if(!o)return n;var a=Ember.merge({},o);for(var
        u in n)if(n.hasOwnProperty(u)){var c=n[u];a[u]=r(c)?s(e,u,c,o,{}):c}return
        a}function c(e,t,n,i,c,l,h,m){if(n instanceof Ember.Descriptor){if(n===w&&c[t])return
        T;n.func&&(n=o(i,t,n,l,c)),c[t]=n,l[t]=void 0}else h&&O.call(h,t)>=0||\"concatenatedProperties\"===t||\"mergedProperties\"===t?n=a(e,t,n,l):m&&O.call(m,t)>=0?n=u(e,t,n,l):r(n)&&(n=s(e,t,n,l,c)),c[t]=void
        0,l[t]=n}function l(e,t,r,o,s,a){function u(e){delete r[e],delete o[e]}for(var
        h,m,f,p,d,b,E=0,v=e.length;v>E;E++)if(h=e[E],m=n(t,h),m!==T)if(m){b=Ember.meta(s),s.willMergeMixin&&s.willMergeMixin(m),p=i(\"concatenatedProperties\",m,o,s),d=i(\"mergedProperties\",m,o,s);for(f
        in m)m.hasOwnProperty(f)&&(a.push(f),c(s,f,m[f],b,r,o,p,d));m.hasOwnProperty(\"toString\")&&(s.toString=m.toString)}else
        h.mixins&&(l(h.mixins,t,r,o,s,a),h._without&&A.call(h._without,u))}function
        h(e,t,r,n){if(N.test(t)){var i=n.bindings;i?n.hasOwnProperty(\"bindings\")||(i=n.bindings=V(n.bindings)):i=n.bindings={},i[t]=r}}function
        m(e,t){var r,n,i,o=t.bindings;if(o){for(r in o)n=o[r],n&&(i=r.slice(0,-7),n
        instanceof Ember.Binding?(n=n.copy(),n.to(i)):n=new Ember.Binding(i,n),n.connect(e),e[r]=n);t.bindings={}}}function
        f(e,t){return m(e,t||Ember.meta(e)),e}function p(e,t,r,n,i){var o,s=t.methodName;return
        n[s]||i[s]?(o=i[s],t=n[s]):r.descs[s]?(t=r.descs[s],o=void 0):(t=void 0,o=e[s]),{desc:t,value:o}}function
        d(e,t,r,n,i){var o=r[n];if(o)for(var s=0,a=o.length;a>s;s++)Ember[i](e,o[s],null,t)}function
        b(e,t,r){var n=e[t];\"function\"==typeof n&&(d(e,t,n,\"__ember_observesBefore__\",\"removeBeforeObserver\"),d(e,t,n,\"__ember_observes__\",\"removeObserver\"),d(e,t,n,\"__ember_listens__\",\"removeListener\")),\"function\"==typeof
        r&&(d(e,t,r,\"__ember_observesBefore__\",\"addBeforeObserver\"),d(e,t,r,\"__ember_observes__\",\"addObserver\"),d(e,t,r,\"__ember_listens__\",\"addListener\"))}function
        E(t,r,n){var i,o,s,a={},u={},c=Ember.meta(t),m=[];l(r,e(t),a,u,t,m);for(var
        d=0,E=m.length;E>d;d++)if(i=m[d],\"constructor\"!==i&&u.hasOwnProperty(i)&&(s=a[i],o=u[i],s!==w)){for(;s&&s
        instanceof _;){var v=p(t,s,c,a,u);s=v.desc,o=v.value}(void 0!==s||void 0!==o)&&(b(t,i,o),h(t,i,o,c),x(t,i,s,o,c))}return
        n||f(t,c),t}function v(e,t,r){var n=S(e);if(r[n])return!1;if(r[n]=!0,e===t)return!0;for(var
        i=e.mixins,o=i?i.length:0;--o>=0;)if(v(i[o],t,r))return!0;return!1}function
        g(e,t,r){if(!r[S(t)])if(r[S(t)]=!0,t.properties){var n=t.properties;for(var
        i in n)n.hasOwnProperty(i)&&(e[i]=!0)}else t.mixins&&A.call(t.mixins,function(t){g(e,t,r)})}var
        y,w,_,C=Ember.ArrayPolyfills.map,O=Ember.ArrayPolyfills.indexOf,A=Ember.ArrayPolyfills.forEach,P=[].slice,V=Ember.create,x=Ember.defineProperty,S=Ember.guidFor,T={},N=Ember.IS_BINDING=/^.+Binding$/;Ember.mixin=function(e){var
        t=P.call(arguments,1);return E(e,t,!1),e},Ember.Mixin=function(){return t(this,arguments)},y=Ember.Mixin,y.prototype={properties:null,mixins:null,ownerConstructor:null},y._apply=E,y.applyPartial=function(e){var
        t=P.call(arguments,1);return E(e,t,!0)},y.finishPartial=f,Ember.anyUnprocessedMixins=!1,y.create=function(){Ember.anyUnprocessedMixins=!0;var
        e=this;return t(new e,arguments)};var D=y.prototype;D.reopen=function(){var
        e,t;this.properties?(e=y.create(),e.properties=this.properties,delete this.properties,this.mixins=[e]):this.mixins||(this.mixins=[]);var
        r,n=arguments.length,i=this.mixins;for(r=0;n>r;r++)e=arguments[r],e instanceof
        y?i.push(e):(t=y.create(),t.properties=e,i.push(t));return this},D.apply=function(e){return
        E(e,[this],!1)},D.applyPartial=function(e){return E(e,[this],!0)},D.detect=function(e){if(!e)return!1;if(e
        instanceof y)return v(e,this,{});var t=Ember.meta(e,!1).mixins;return t?!!t[S(this)]:!1},D.without=function(){var
        e=new y(this);return e._without=P.call(arguments),e},D.keys=function(){var
        e={},t={},r=[];g(e,this,t);for(var n in e)e.hasOwnProperty(n)&&r.push(n);return
        r},y.mixins=function(e){var t=Ember.meta(e,!1).mixins,r=[];if(!t)return r;for(var
        n in t){var i=t[n];i.properties||r.push(i)}return r},w=new Ember.Descriptor,w.toString=function(){return\"(Required
        Property)\"},Ember.required=function(){return w},_=function(e){this.methodName=e},_.prototype=new
        Ember.Descriptor,Ember.alias=function(e){return new _(e)},Ember.aliasMethod=function(e){return
        new _(e)},Ember.observer=function(e){var t=P.call(arguments,1);return e.__ember_observes__=t,e},Ember.immediateObserver=function(){for(var
        e=0,t=arguments.length;t>e;e++)arguments[e];return Ember.observer.apply(this,arguments)},Ember.beforeObserver=function(e){var
        t=P.call(arguments,1);return e.__ember_observesBefore__=t,e}}(),function(){var
        e=Ember.EnumerableUtils.forEach,t=Ember.EnumerableUtils.indexOf;Ember.libraries=function(){var
        r=[],n=0,i=function(e){for(var t=0;t<r.length;t++)if(r[t].name===e)return
        r[t]};return r.register=function(e,t){i(e)||r.push({name:e,version:t})},r.registerCoreLibrary=function(e,t){i(e)||r.splice(n++,0,{name:e,version:t})},r.deRegister=function(e){var
        n=i(e);n&&r.splice(t(r,n),1)},r.each=function(t){e(r,function(e){t(e.name,e.version)})},r}(),Ember.libraries.registerCoreLibrary(\"Ember\",Ember.VERSION)}(),function(){e(\"rsvp/all\",[\"rsvp/promise\",\"exports\"],function(e,t){\"use
        strict\";function r(e){if(\"[object Array]\"!==Object.prototype.toString.call(e))throw
        new TypeError(\"You must pass an array to all.\");return new n(function(t,r){function
        n(e){return function(t){i(e,t)}}function i(e,r){s[e]=r,0===--a&&t(s)}var o,s=[],a=e.length;0===a&&t([]);for(var
        u=0;u<e.length;u++)o=e[u],o&&\"function\"==typeof o.then?o.then(n(u),r):i(u,o)})}var
        n=e.Promise;t.all=r}),e(\"rsvp/async\",[\"exports\"],function(e){\"use strict\";function
        t(){return function(e,t){process.nextTick(function(){e(t)})}}function r(){return
        function(e,t){setImmediate(function(){e(t)})}}function n(){var e=[],t=new
        a(function(){var t=e.slice();e=[],t.forEach(function(e){var t=e[0],r=e[1];t(r)})}),r=document.createElement(\"div\");return
        t.observe(r,{attributes:!0}),window.addEventListener(\"unload\",function(){t.disconnect(),t=null},!1),function(t,n){e.push([t,n]),r.setAttribute(\"drainQueue\",\"drainQueue\")}}function
        i(){return function(e,t){u.setTimeout(function(){e(t)},1)}}var o,s=\"undefined\"!=typeof
        window?window:{},a=s.MutationObserver||s.WebKitMutationObserver,u=\"undefined\"!=typeof
        global?global:this;o=\"function\"==typeof setImmediate?r():\"undefined\"!=typeof
        process&&\"[object process]\"==={}.toString.call(process)?t():a?n():i(),e.async=o}),e(\"rsvp/config\",[\"rsvp/async\",\"exports\"],function(e,t){\"use
        strict\";var r=e.async,n={};n.async=r,t.config=n}),e(\"rsvp/defer\",[\"rsvp/promise\",\"exports\"],function(e,t){\"use
        strict\";function r(){var e={resolve:void 0,reject:void 0,promise:void 0};return
        e.promise=new n(function(t,r){e.resolve=t,e.reject=r}),e}var n=e.Promise;t.defer=r}),e(\"rsvp/events\",[\"exports\"],function(e){\"use
        strict\";var t=function(e,t){this.type=e;for(var r in t)t.hasOwnProperty(r)&&(this[r]=t[r])},r=function(e,t){for(var
        r=0,n=e.length;n>r;r++)if(e[r][0]===t)return r;return-1},n=function(e){var
        t=e._promiseCallbacks;return t||(t=e._promiseCallbacks={}),t},i={mixin:function(e){return
        e.on=this.on,e.off=this.off,e.trigger=this.trigger,e},on:function(e,t,i){var
        o,s,a=n(this);for(e=e.split(/\\s+/),i=i||this;s=e.shift();)o=a[s],o||(o=a[s]=[]),-1===r(o,t)&&o.push([t,i])},off:function(e,t){var
        i,o,s,a=n(this);for(e=e.split(/\\s+/);o=e.shift();)t?(i=a[o],s=r(i,t),-1!==s&&i.splice(s,1)):a[o]=[]},trigger:function(e,r){var
        i,o,s,a,u,c=n(this);if(i=c[e])for(var l=0;l<i.length;l++)o=i[l],s=o[0],a=o[1],\"object\"!=typeof
        r&&(r={detail:r}),u=new t(e,r),s.call(a,u)}};e.EventTarget=i}),e(\"rsvp/hash\",[\"rsvp/defer\",\"exports\"],function(e,t){\"use
        strict\";function r(e){var t=0;for(var r in e)t++;return t}function n(e){var
        t={},n=i(),o=r(e);0===o&&n.resolve({});var s=function(e){return function(t){a(e,t)}},a=function(e,r){t[e]=r,0===--o&&n.resolve(t)},u=function(e){n.reject(e)};for(var
        c in e)e[c]&&\"function\"==typeof e[c].then?e[c].then(s(c),u):a(c,e[c]);return
        n.promise}var i=e.defer;t.hash=n}),e(\"rsvp/node\",[\"rsvp/promise\",\"rsvp/all\",\"exports\"],function(e,t,r){\"use
        strict\";function n(e,t){return function(r,n){r?t(r):arguments.length>2?e(Array.prototype.slice.call(arguments,1)):e(n)}}function
        i(e){return function(){var t,r,i=Array.prototype.slice.call(arguments),a=this,u=new
        o(function(e,n){t=e,r=n});return s(i).then(function(i){i.push(n(t,r));try{e.apply(a,i)}catch(o){r(o)}}),u}}var
        o=e.Promise,s=t.all;r.denodeify=i}),e(\"rsvp/promise\",[\"rsvp/config\",\"rsvp/events\",\"exports\"],function(e,t,r){\"use
        strict\";function n(e){return i(e)||\"object\"==typeof e&&null!==e}function
        i(e){return\"function\"==typeof e}function o(e){l.onerror&&l.onerror(e.detail)}function
        s(e,t){e===t?u(e,t):a(e,t)||u(e,t)}function a(e,t){var r,o=null;try{if(e===t)throw
        new TypeError(\"A promises callback cannot return that same promise.\");if(n(t)&&(o=t.then,i(o)))return
        o.call(t,function(n){return r?!0:(r=!0,t!==n?s(e,n):u(e,n),void 0)},function(t){return
        r?!0:(r=!0,c(e,t),void 0)}),!0}catch(a){return c(e,a),!0}return!1}function
        u(e,t){l.async(function(){e.trigger(\"promise:resolved\",{detail:t}),e.isFulfilled=!0,e.fulfillmentValue=t})}function
        c(e,t){l.async(function(){e.trigger(\"promise:failed\",{detail:t}),e.isRejected=!0,e.rejectedReason=t})}var
        l=e.config,h=t.EventTarget,m=function(e){var t=this,r=!1;if(\"function\"!=typeof
        e)throw new TypeError(\"You must pass a resolver function as the sole argument
        to the promise constructor\");if(!(t instanceof m))return new m(e);var n=function(e){r||(r=!0,s(t,e))},i=function(e){r||(r=!0,c(t,e))};this.on(\"promise:resolved\",function(e){this.trigger(\"success\",{detail:e.detail})},this),this.on(\"promise:failed\",function(e){this.trigger(\"error\",{detail:e.detail})},this),this.on(\"error\",o);try{e(n,i)}catch(a){i(a)}},f=function(e,t,r,n){var
        o,u,l,h,m=i(r);if(m)try{o=r(n.detail),l=!0}catch(f){h=!0,u=f}else o=n.detail,l=!0;a(t,o)||(m&&l?s(t,o):h?c(t,u):\"resolve\"===e?s(t,o):\"reject\"===e&&c(t,o))};m.prototype={constructor:m,isRejected:void
        0,isFulfilled:void 0,rejectedReason:void 0,fulfillmentValue:void 0,then:function(e,t){this.off(\"error\",o);var
        r=new this.constructor(function(){});return this.isFulfilled&&l.async(function(t){f(\"resolve\",r,e,{detail:t.fulfillmentValue})},this),this.isRejected&&l.async(function(e){f(\"reject\",r,t,{detail:e.rejectedReason})},this),this.on(\"promise:resolved\",function(t){f(\"resolve\",r,e,t)}),this.on(\"promise:failed\",function(e){f(\"reject\",r,t,e)}),r},fail:function(e){return
        this.then(null,e)}},h.mixin(m.prototype),r.Promise=m}),e(\"rsvp/reject\",[\"rsvp/promise\",\"exports\"],function(e,t){\"use
        strict\";function r(e){return new n(function(t,r){r(e)})}var n=e.Promise;t.reject=r}),e(\"rsvp/resolve\",[\"rsvp/promise\",\"exports\"],function(e,t){\"use
        strict\";function r(e){return new n(function(t){t(e)})}var n=e.Promise;t.resolve=r}),e(\"rsvp/rethrow\",[\"exports\"],function(e){\"use
        strict\";function t(e){throw r.setTimeout(function(){throw e}),e}var r=\"undefined\"==typeof
        global?this:global;e.rethrow=t}),e(\"rsvp\",[\"rsvp/events\",\"rsvp/promise\",\"rsvp/node\",\"rsvp/all\",\"rsvp/hash\",\"rsvp/rethrow\",\"rsvp/defer\",\"rsvp/config\",\"rsvp/resolve\",\"rsvp/reject\",\"exports\"],function(e,t,r,n,i,o,s,a,u,c,l){\"use
        strict\";function h(e,t){g[e]=t}var m=e.EventTarget,f=t.Promise,p=r.denodeify,d=n.all,b=i.hash,E=o.rethrow,v=s.defer,g=a.config,y=u.resolve,w=c.reject;l.Promise=f,l.EventTarget=m,l.all=d,l.hash=b,l.rethrow=E,l.defer=v,l.denodeify=p,l.configure=h,l.resolve=y,l.reject=w})}(),function(){Ember.MODEL_FACTORY_INJECTIONS=!1||!!Ember.ENV.MODEL_FACTORY_INJECTIONS,e(\"container\",[],function(){function
        e(e){this.parent=e,this.dict={}}function t(t){this.parent=t,this.children=[],this.resolver=t&&t.resolver||function(){},this.registry=new
        e(t&&t.registry),this.cache=new e(t&&t.cache),this.factoryCache=new e(t&&t.cache),this.typeInjections=new
        e(t&&t.typeInjections),this.injections={},this.factoryTypeInjections=new e(t&&t.factoryTypeInjections),this.factoryInjections={},this._options=new
        e(t&&t._options),this._typeOptions=new e(t&&t._typeOptions)}function r(e){throw
        new Error(e+\" is not currently supported on child containers\")}function
        n(e,t){var r=o(e,t,\"singleton\");return r!==!1}function i(e,t){var r={};if(!t)return
        r;for(var n,i,o=0,s=t.length;s>o;o++){if(n=t[o],i=e.lookup(n.fullName),void
        0===i)throw new Error(\"Attempting to inject an unknown injection: `\"+n.fullName+\"`\");r[n.property]=i}return
        r}function o(e,t,r){var n=e._options.get(t);if(n&&void 0!==n[r])return n[r];var
        i=t.split(\":\")[0];return n=e._typeOptions.get(i),n?n[r]:void 0}function
        s(e,t){var r,n=e.normalize(t),i=e.resolve(n),o=e.factoryCache,s=t.split(\":\")[0];if(void
        0!==i){if(o.has(t))return o.get(t);if(!i||\"function\"!=typeof i.extend||!Ember.MODEL_FACTORY_INJECTIONS&&\"model\"===s)return
        i;var c=a(e,t),l=u(e,t);return l._toString=e.makeToString(i,t),r=i.extend(c),r.reopenClass(l),o.set(t,r),r}}function
        a(e,t){var r=t.split(\":\"),n=r[0],o=[];return o=o.concat(e.typeInjections.get(n)||[]),o=o.concat(e.injections[t]||[]),o=i(e,o),o._debugContainerKey=t,o.container=e,o}function
        u(e,t){var r=t.split(\":\"),n=r[0],o=[];return o=o.concat(e.factoryTypeInjections.get(n)||[]),o=o.concat(e.factoryInjections[t]||[]),o=i(e,o),o._debugContainerKey=t,o}function
        c(e,t){var r=s(e,t);return o(e,t,\"instantiate\")===!1?r:r?\"function\"==typeof
        r.extend?r.create():r.create(a(e,t)):void 0}function l(e,t){e.cache.eachLocal(function(r,n){o(e,r,\"instantiate\")!==!1&&t(n)})}function
        h(e){e.cache.eachLocal(function(t,r){o(e,t,\"instantiate\")!==!1&&r.destroy()}),e.cache.dict={}}function
        m(e,t,r,n){var i=e.get(t);i||(i=[],e.set(t,i)),i.push({property:r,fullName:n})}function
        f(e,t,r,n){var i=e[t]=e[t]||[];i.push({property:r,fullName:n})}return e.prototype={parent:null,dict:null,get:function(e){var
        t=this.dict;return t.hasOwnProperty(e)?t[e]:this.parent?this.parent.get(e):void
        0},set:function(e,t){this.dict[e]=t},remove:function(e){delete this.dict[e]},has:function(e){var
        t=this.dict;return t.hasOwnProperty(e)?!0:this.parent?this.parent.has(e):!1},eachLocal:function(e,t){var
        r=this.dict;for(var n in r)r.hasOwnProperty(n)&&e.call(t,n,r[n])}},t.prototype={parent:null,children:null,resolver:null,registry:null,cache:null,typeInjections:null,injections:null,_options:null,_typeOptions:null,child:function(){var
        e=new t(this);return this.children.push(e),e},set:function(e,t,r){e[t]=r},register:function(e,t,r){if(-1===e.indexOf(\":\"))throw
        new TypeError(\"malformed fullName, expected: `type:name` got: \"+e);if(void
        0===t)throw new TypeError(\"Attempting to register an unknown factory: `\"+e+\"`\");var
        n=this.normalize(e);if(this.cache.has(n))throw new Error(\"Cannot re-register:
        `\"+e+\"`, as it has already been looked up.\");this.registry.set(n,t),this._options.set(n,r||{})},unregister:function(e){var
        t=this.normalize(e);this.registry.remove(t),this.cache.remove(t),this.factoryCache.remove(t),this._options.remove(t)},resolve:function(e){return
        this.resolver(e)||this.registry.get(e)},describe:function(e){return e},normalize:function(e){return
        e},makeToString:function(e){return e.toString()},lookup:function(e,t){if(e=this.normalize(e),t=t||{},this.cache.has(e)&&t.singleton!==!1)return
        this.cache.get(e);var r=c(this,e);return void 0!==r?(n(this,e)&&t.singleton!==!1&&this.cache.set(e,r),r):void
        0},lookupFactory:function(e){return s(this,e)},has:function(e){return this.cache.has(e)?!0:!!s(this,e)},optionsForType:function(e,t){this.parent&&r(\"optionsForType\"),this._typeOptions.set(e,t)},options:function(e,t){this.optionsForType(e,t)},typeInjection:function(e,t,n){this.parent&&r(\"typeInjection\"),m(this.typeInjections,e,t,n)},injection:function(e,t,n){return
        this.parent&&r(\"injection\"),-1===e.indexOf(\":\")?this.typeInjection(e,t,n):(f(this.injections,e,t,n),void
        0)},factoryTypeInjection:function(e,t,n){this.parent&&r(\"factoryTypeInjection\"),m(this.factoryTypeInjections,e,t,n)},factoryInjection:function(e,t,n){return
        this.parent&&r(\"injection\"),-1===e.indexOf(\":\")?this.factoryTypeInjection(e,t,n):(f(this.factoryInjections,e,t,n),void
        0)},destroy:function(){this.isDestroyed=!0;for(var e=0,t=this.children.length;t>e;e++)this.children[e].destroy();this.children=[],l(this,function(e){e.destroy()}),this.parent=void
        0,this.isDestroyed=!0},reset:function(){for(var e=0,t=this.children.length;t>e;e++)h(this.children[e]);h(this)}},t})}(),function(){function
        e(r,n,i,o){var s,a,u;if(\"object\"!=typeof r||null===r)return r;if(n&&(a=t(i,r))>=0)return
        o[a];if(\"array\"===Ember.typeOf(r)){if(s=r.slice(),n)for(a=s.length;--a>=0;)s[a]=e(s[a],n,i,o)}else
        if(Ember.Copyable&&Ember.Copyable.detect(r))s=r.copy(n,i,o);else{s={};for(u
        in r)r.hasOwnProperty(u)&&\"__\"!==u.substring(0,2)&&(s[u]=n?e(r[u],n,i,o):r[u])}return
        n&&(i.push(r),o.push(s)),s}var t=Ember.EnumerableUtils.indexOf;if(Ember.compare=function
        o(e,t){if(e===t)return 0;var r=Ember.typeOf(e),n=Ember.typeOf(t),i=Ember.Comparable;if(i){if(\"instance\"===r&&i.detect(e.constructor))return
        e.constructor.compare(e,t);if(\"instance\"===n&&i.detect(t.constructor))return
        1-t.constructor.compare(t,e)}var s=Ember.ORDER_DEFINITION_MAPPING;if(!s){var
        a=Ember.ORDER_DEFINITION;s=Ember.ORDER_DEFINITION_MAPPING={};var u,c;for(u=0,c=a.length;c>u;++u)s[a[u]]=u;delete
        Ember.ORDER_DEFINITION}var l=s[r],h=s[n];if(h>l)return-1;if(l>h)return 1;switch(r){case\"boolean\":case\"number\":return
        t>e?-1:e>t?1:0;case\"string\":var m=e.localeCompare(t);return 0>m?-1:m>0?1:0;case\"array\":for(var
        f=e.length,p=t.length,d=Math.min(f,p),b=0,E=0;0===b&&d>E;)b=o(e[E],t[E]),E++;return
        0!==b?b:p>f?-1:f>p?1:0;case\"instance\":return Ember.Comparable&&Ember.Comparable.detect(e)?e.compare(e,t):0;case\"date\":var
        v=e.getTime(),g=t.getTime();return g>v?-1:v>g?1:0;default:return 0}},Ember.copy=function(t,r){return\"object\"!=typeof
        t||null===t?t:Ember.Copyable&&Ember.Copyable.detect(t)?t.copy(r):e(t,r,r?[]:null,r?[]:null)},Ember.inspect=function(e){var
        t=Ember.typeOf(e);if(\"array\"===t)return\"[\"+e+\"]\";if(\"object\"!==t)return
        e+\"\";var r,n=[];for(var i in e)if(e.hasOwnProperty(i)){if(r=e[i],\"toString\"===r)continue;\"function\"===Ember.typeOf(r)&&(r=\"function()
        { ... }\"),n.push(i+\": \"+r)}return\"{\"+n.join(\", \")+\"}\"},Ember.isEqual=function(e,t){return
        e&&\"function\"==typeof e.isEqual?e.isEqual(t):e===t},Ember.ORDER_DEFINITION=Ember.ENV.ORDER_DEFINITION||[\"undefined\",\"null\",\"boolean\",\"number\",\"string\",\"array\",\"object\",\"instance\",\"function\",\"class\",\"date\"],Ember.keys=Object.keys,!Ember.keys||Ember.create.isSimulated){var
        r=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"valueOf\",\"toLocaleString\",\"toString\"],n=function(e,r,n){\"__\"!==n.substring(0,2)&&\"_super\"!==n&&(t(r,n)>=0||e.hasOwnProperty(n)&&r.push(n))};Ember.keys=function(e){var
        t,i=[];for(t in e)n(e,i,t);for(var o=0,s=r.length;s>o;o++)t=r[o],n(e,i,t);return
        i}}var i=[\"description\",\"fileName\",\"lineNumber\",\"message\",\"name\",\"number\",\"stack\"];Ember.Error=function(){for(var
        e=Error.apply(this,arguments),t=0;t<i.length;t++)this[i[t]]=e[i[t]]},Ember.Error.prototype=Ember.create(Error.prototype)}(),function(){function
        e(){return 0===a.length?{}:a.pop()}function t(e){return a.push(e),null}function
        r(e,t){function r(r){var o=n(r,e);return i?t===o:!!o}var i=2===arguments.length;return
        r}var n=Ember.get,i=Ember.set,o=Array.prototype.slice,s=Ember.EnumerableUtils.indexOf,a=[];Ember.Enumerable=Ember.Mixin.create({nextObject:Ember.required(Function),firstObject:Ember.computed(function(){if(0===n(this,\"length\"))return
        void 0;var r,i=e();return r=this.nextObject(0,null,i),t(i),r}).property(\"[]\"),lastObject:Ember.computed(function(){var
        r=n(this,\"length\");if(0===r)return void 0;var i,o=e(),s=0,a=null;do a=i,i=this.nextObject(s++,a,o);while(void
        0!==i);return t(o),a}).property(\"[]\"),contains:function(e){return void 0!==this.find(function(t){return
        t===e})},forEach:function(r,i){if(\"function\"!=typeof r)throw new TypeError;var
        o=n(this,\"length\"),s=null,a=e();void 0===i&&(i=null);for(var u=0;o>u;u++){var
        c=this.nextObject(u,s,a);r.call(i,c,u,this),s=c}return s=null,a=t(a),this},getEach:function(e){return
        this.mapBy(e)},setEach:function(e,t){return this.forEach(function(r){i(r,e,t)})},map:function(e,t){var
        r=Ember.A();return this.forEach(function(n,i,o){r[i]=e.call(t,n,i,o)}),r},mapBy:function(e){return
        this.map(function(t){return n(t,e)})},mapProperty:Ember.aliasMethod(\"mapBy\"),filter:function(e,t){var
        r=Ember.A();return this.forEach(function(n,i,o){e.call(t,n,i,o)&&r.push(n)}),r},reject:function(e,t){return
        this.filter(function(){return!e.apply(t,arguments)})},filterBy:function(){return
        this.filter(r.apply(this,arguments))},filterProperty:Ember.aliasMethod(\"filterBy\"),rejectBy:function(e,t){var
        r=function(r){return n(r,e)===t},i=function(t){return!!n(t,e)},o=2===arguments.length?r:i;return
        this.reject(o)},rejectProperty:Ember.aliasMethod(\"rejectBy\"),find:function(r,i){var
        o=n(this,\"length\");void 0===i&&(i=null);for(var s,a,u=null,c=!1,l=e(),h=0;o>h&&!c;h++)s=this.nextObject(h,u,l),(c=r.call(i,s,h,this))&&(a=s),u=s;return
        s=u=null,l=t(l),a},findBy:function(){return this.find(r.apply(this,arguments))},findProperty:Ember.aliasMethod(\"findBy\"),every:function(e,t){return!this.find(function(r,n,i){return!e.call(t,r,n,i)})},everyBy:function(){return
        this.every(r.apply(this,arguments))},everyProperty:Ember.aliasMethod(\"everyBy\"),any:function(e,t){return!!this.find(function(r,n,i){return!!e.call(t,r,n,i)})},some:Ember.aliasMethod(\"any\"),anyBy:function(){return
        this.any(r.apply(this,arguments))},someProperty:Ember.aliasMethod(\"anyBy\"),reduce:function(e,t,r){if(\"function\"!=typeof
        e)throw new TypeError;var n=t;return this.forEach(function(t,i){n=e.call(null,n,t,i,this,r)},this),n},invoke:function(e){var
        t,r=Ember.A();return arguments.length>1&&(t=o.call(arguments,1)),this.forEach(function(n,i){var
        o=n&&n[e];\"function\"==typeof o&&(r[i]=t?o.apply(n,t):o.call(n))},this),r},toArray:function(){var
        e=Ember.A();return this.forEach(function(t,r){e[r]=t}),e},compact:function(){return
        this.filter(function(e){return null!=e})},without:function(e){if(!this.contains(e))return
        this;var t=Ember.A();return this.forEach(function(r){r!==e&&(t[t.length]=r)}),t},uniq:function(){var
        e=Ember.A();return this.forEach(function(t){s(e,t)<0&&e.push(t)}),e},\"[]\":Ember.computed(function(){return
        this}),addEnumerableObserver:function(e,t){var r=t&&t.willChange||\"enumerableWillChange\",i=t&&t.didChange||\"enumerableDidChange\",o=n(this,\"hasEnumerableObservers\");\nreturn
        o||Ember.propertyWillChange(this,\"hasEnumerableObservers\"),Ember.addListener(this,\"@enumerable:before\",e,r),Ember.addListener(this,\"@enumerable:change\",e,i),o||Ember.propertyDidChange(this,\"hasEnumerableObservers\"),this},removeEnumerableObserver:function(e,t){var
        r=t&&t.willChange||\"enumerableWillChange\",i=t&&t.didChange||\"enumerableDidChange\",o=n(this,\"hasEnumerableObservers\");return
        o&&Ember.propertyWillChange(this,\"hasEnumerableObservers\"),Ember.removeListener(this,\"@enumerable:before\",e,r),Ember.removeListener(this,\"@enumerable:change\",e,i),o&&Ember.propertyDidChange(this,\"hasEnumerableObservers\"),this},hasEnumerableObservers:Ember.computed(function(){return
        Ember.hasListeners(this,\"@enumerable:change\")||Ember.hasListeners(this,\"@enumerable:before\")}),enumerableContentWillChange:function(e,t){var
        r,i,o;return r=\"number\"==typeof e?e:e?n(e,\"length\"):e=-1,i=\"number\"==typeof
        t?t:t?n(t,\"length\"):t=-1,o=0>i||0>r||0!==i-r,-1===e&&(e=null),-1===t&&(t=null),Ember.propertyWillChange(this,\"[]\"),o&&Ember.propertyWillChange(this,\"length\"),Ember.sendEvent(this,\"@enumerable:before\",[this,e,t]),this},enumerableContentDidChange:function(e,t){var
        r,i,o;return r=\"number\"==typeof e?e:e?n(e,\"length\"):e=-1,i=\"number\"==typeof
        t?t:t?n(t,\"length\"):t=-1,o=0>i||0>r||0!==i-r,-1===e&&(e=null),-1===t&&(t=null),Ember.sendEvent(this,\"@enumerable:change\",[this,e,t]),o&&Ember.propertyDidChange(this,\"length\"),Ember.propertyDidChange(this,\"[]\"),this}})}(),function(){var
        e=Ember.get,t=(Ember.set,Ember.isNone),r=Ember.EnumerableUtils.map,n=Ember.cacheFor;Ember.Array=Ember.Mixin.create(Ember.Enumerable,{length:Ember.required(),objectAt:function(t){return
        0>t||t>=e(this,\"length\")?void 0:e(this,t)},objectsAt:function(e){var t=this;return
        r(e,function(e){return t.objectAt(e)})},nextObject:function(e){return this.objectAt(e)},\"[]\":Ember.computed(function(t,r){return
        void 0!==r&&this.replace(0,e(this,\"length\"),r),this}),firstObject:Ember.computed(function(){return
        this.objectAt(0)}),lastObject:Ember.computed(function(){return this.objectAt(e(this,\"length\")-1)}),contains:function(e){return
        this.indexOf(e)>=0},slice:function(r,n){var i=Ember.A(),o=e(this,\"length\");for(t(r)&&(r=0),(t(n)||n>o)&&(n=o),0>r&&(r=o+r),0>n&&(n=o+n);n>r;)i[i.length]=this.objectAt(r++);return
        i},indexOf:function(t,r){var n,i=e(this,\"length\");for(void 0===r&&(r=0),0>r&&(r+=i),n=r;i>n;n++)if(this.objectAt(n)===t)return
        n;return-1},lastIndexOf:function(t,r){var n,i=e(this,\"length\");for((void
        0===r||r>=i)&&(r=i-1),0>r&&(r+=i),n=r;n>=0;n--)if(this.objectAt(n)===t)return
        n;return-1},addArrayObserver:function(t,r){var n=r&&r.willChange||\"arrayWillChange\",i=r&&r.didChange||\"arrayDidChange\",o=e(this,\"hasArrayObservers\");return
        o||Ember.propertyWillChange(this,\"hasArrayObservers\"),Ember.addListener(this,\"@array:before\",t,n),Ember.addListener(this,\"@array:change\",t,i),o||Ember.propertyDidChange(this,\"hasArrayObservers\"),this},removeArrayObserver:function(t,r){var
        n=r&&r.willChange||\"arrayWillChange\",i=r&&r.didChange||\"arrayDidChange\",o=e(this,\"hasArrayObservers\");return
        o&&Ember.propertyWillChange(this,\"hasArrayObservers\"),Ember.removeListener(this,\"@array:before\",t,n),Ember.removeListener(this,\"@array:change\",t,i),o&&Ember.propertyDidChange(this,\"hasArrayObservers\"),this},hasArrayObservers:Ember.computed(function(){return
        Ember.hasListeners(this,\"@array:change\")||Ember.hasListeners(this,\"@array:before\")}),arrayContentWillChange:function(t,r,n){void
        0===t?(t=0,r=n=-1):(void 0===r&&(r=-1),void 0===n&&(n=-1)),Ember.isWatching(this,\"@each\")&&e(this,\"@each\"),Ember.sendEvent(this,\"@array:before\",[this,t,r,n]);var
        i,o;if(t>=0&&r>=0&&e(this,\"hasEnumerableObservers\")){i=[],o=t+r;for(var
        s=t;o>s;s++)i.push(this.objectAt(s))}else i=r;return this.enumerableContentWillChange(i,n),this},arrayContentDidChange:function(t,r,i){void
        0===t?(t=0,r=i=-1):(void 0===r&&(r=-1),void 0===i&&(i=-1));var o,s;if(t>=0&&i>=0&&e(this,\"hasEnumerableObservers\")){o=[],s=t+i;for(var
        a=t;s>a;a++)o.push(this.objectAt(a))}else o=i;this.enumerableContentDidChange(r,o),Ember.sendEvent(this,\"@array:change\",[this,t,r,i]);var
        u=e(this,\"length\"),c=n(this,\"firstObject\"),l=n(this,\"lastObject\");return
        this.objectAt(0)!==c&&(Ember.propertyWillChange(this,\"firstObject\"),Ember.propertyDidChange(this,\"firstObject\")),this.objectAt(u-1)!==l&&(Ember.propertyWillChange(this,\"lastObject\"),Ember.propertyDidChange(this,\"lastObject\")),this},\"@each\":Ember.computed(function(){return
        this.__each||(this.__each=new Ember.EachProxy(this)),this.__each})})}(),function(){function
        e(e,t,r){this.callbacks=e,this.cp=t,this.instanceMeta=r,this.dependentKeysByGuid={},this.trackedArraysByGuid={},this.changedItems={}}function
        t(e,t,r){this.dependentArray=e,this.index=t,this.item=e.objectAt(t),this.trackedArray=r,this.beforeObserver=null,this.observer=null,this.destroyed=!1}function
        r(e,t,r,n,i,o){var s={arrayChanged:e,index:r,item:t,propertyName:n,property:i};return
        o&&(s.previousValues=o),s}function n(e,t,n,i,o){y(e,function(s,a){o.setValue(t.addedItem.call(this,o.getValue(),s,r(e,s,a,i,n),o.sugarMeta))},this)}function
        i(e,t){var r;e._callbacks(),e._hasInstanceMeta(this,t)?(r=e._instanceMeta(this,t),r.setValue(e.resetValue(r.getValue()))):r=e._instanceMeta(this,t),e.options.initialize&&e.options.initialize.call(this,r.getValue(),{property:e,propertyName:t},r.sugarMeta)}function
        o(e,t,r){this.context=e,this.propertyName=t,this.cache=l(e).cache,this.dependentArrays={},this.sugarMeta={},this.initialValue=r}function
        s(e){var t=this;this.options=e,this._instanceMetas={},this._dependentKeys=null,this._itemPropertyKeys={},this._previousItemPropertyKeys={},this.readOnly(),this.cacheable(),this.recomputeOnce=function(e){Ember.run.once(this,r,e)};var
        r=function(e){var r=(t._dependentKeys,t._instanceMeta(this,e)),o=t._callbacks();i.call(this,t,e),y(t._dependentKeys,function(e){var
        n=u(this,e),i=r.dependentArrays[e];n===i?t._previousItemPropertyKeys[e]&&(delete
        t._previousItemPropertyKeys[e],r.dependentArraysObserver.setupPropertyObservers(e,t._itemPropertyKeys[e])):(r.dependentArrays[e]=n,i&&r.dependentArraysObserver.teardownObservers(i,e),n&&r.dependentArraysObserver.setupObservers(n,e))},this),y(t._dependentKeys,function(i){var
        s=u(this,i);s&&n.call(this,s,o,t,e,r)},this)};this.func=function(e){return
        r.call(this,e),t._instanceMeta(this,e).getValue()}}function a(e){return e}var
        u=Ember.get,c=(Ember.set,Ember.guidFor),l=Ember.meta,h=Ember.propertyWillChange,m=Ember.propertyDidChange,f=Ember.addBeforeObserver,p=Ember.removeBeforeObserver,d=Ember.addObserver,b=Ember.removeObserver,E=Ember.ComputedProperty,v=[].slice,g=Ember.create,y=Ember.EnumerableUtils.forEach,w=/^(.*)\\.@each\\.(.*)/,_=/(.*\\.@each){2,}/;e.prototype={setValue:function(e){this.instanceMeta.setValue(e,!0)},getValue:function(){return
        this.instanceMeta.getValue()},setupObservers:function(e,t){this.dependentKeysByGuid[c(e)]=t,e.addArrayObserver(this,{willChange:\"dependentArrayWillChange\",didChange:\"dependentArrayDidChange\"}),this.cp._itemPropertyKeys[t]&&this.setupPropertyObservers(t,this.cp._itemPropertyKeys[t])},teardownObservers:function(e,t){var
        r=this.cp._itemPropertyKeys[t]||[];delete this.dependentKeysByGuid[c(e)],this.teardownPropertyObservers(t,r),e.removeArrayObserver(this,{willChange:\"dependentArrayWillChange\",didChange:\"dependentArrayDidChange\"})},setupPropertyObservers:function(e,t){var
        r=u(this.instanceMeta.context,e),n=u(r,\"length\"),i=new Array(n);this.resetTransformations(e,i),y(r,function(n,o){var
        s=this.createPropertyObserverContext(r,o,this.trackedArraysByGuid[e]);i[o]=s,y(t,function(e){f(n,e,this,s.beforeObserver),d(n,e,this,s.observer)},this)},this)},teardownPropertyObservers:function(e,t){var
        r,n,i,o=this,s=this.trackedArraysByGuid[e];s&&s.apply(function(e,s,a){a!==Ember.TrackedArray.DELETE&&y(e,function(e){e.destroyed=!0,r=e.beforeObserver,n=e.observer,i=e.item,y(t,function(e){p(i,e,o,r),b(i,e,o,n)})})})},createPropertyObserverContext:function(e,r,n){var
        i=new t(e,r,n);return this.createPropertyObserver(i),i},createPropertyObserver:function(e){var
        t=this;e.beforeObserver=function(r,n){return t.itemPropertyWillChange(r,n,e.dependentArray,e)},e.observer=function(r,n){return
        t.itemPropertyDidChange(r,n,e.dependentArray,e)}},resetTransformations:function(e,t){this.trackedArraysByGuid[e]=new
        Ember.TrackedArray(t)},trackAdd:function(e,t,r){var n=this.trackedArraysByGuid[e];n&&n.addItems(t,r)},trackRemove:function(e,t,r){var
        n=this.trackedArraysByGuid[e];return n?n.removeItems(t,r):[]},updateIndexes:function(e,t){var
        r=u(t,\"length\");e.apply(function(e,t,n){n!==Ember.TrackedArray.DELETE&&(n!==Ember.TrackedArray.RETAIN||e.length!==r||0!==t)&&y(e,function(e,r){e.index=r+t})})},dependentArrayWillChange:function(e,t,n){function
        i(e){l[u].destroyed=!0,p(s,e,this,l[u].beforeObserver),b(s,e,this,l[u].observer)}var
        o,s,a,u,l,h=this.callbacks.removedItem,m=c(e),f=this.dependentKeysByGuid[m],d=this.cp._itemPropertyKeys[f]||[];for(l=this.trackRemove(f,t,n),u=n-1;u>=0;--u)a=t+u,s=e.objectAt(a),y(d,i,this),o=r(e,s,a,this.instanceMeta.propertyName,this.cp),this.setValue(h.call(this.instanceMeta.context,this.getValue(),s,o,this.instanceMeta.sugarMeta))},dependentArrayDidChange:function(e,t,n,i){var
        o,s,a=this.callbacks.addedItem,u=c(e),l=this.dependentKeysByGuid[u],h=new
        Array(i),m=this.cp._itemPropertyKeys[l];y(e.slice(t,t+i),function(n,i){m&&(s=h[i]=this.createPropertyObserverContext(e,t+i,this.trackedArraysByGuid[l]),y(m,function(e){f(n,e,this,s.beforeObserver),d(n,e,this,s.observer)},this)),o=r(e,n,t+i,this.instanceMeta.propertyName,this.cp),this.setValue(a.call(this.instanceMeta.context,this.getValue(),n,o,this.instanceMeta.sugarMeta))},this),this.trackAdd(l,t,h)},itemPropertyWillChange:function(e,t,r,n){var
        i=c(e);this.changedItems[i]||(this.changedItems[i]={array:r,observerContext:n,obj:e,previousValues:{}}),this.changedItems[i].previousValues[t]=u(e,t)},itemPropertyDidChange:function(){this.flushChanges()},flushChanges:function(){var
        e,t,n,i=this.changedItems;for(e in i)t=i[e],t.observerContext.destroyed||(this.updateIndexes(t.observerContext.trackedArray,t.observerContext.dependentArray),n=r(t.array,t.obj,t.observerContext.index,this.instanceMeta.propertyName,this.cp,t.previousValues),this.setValue(this.callbacks.removedItem.call(this.instanceMeta.context,this.getValue(),t.obj,n,this.instanceMeta.sugarMeta)),this.setValue(this.callbacks.addedItem.call(this.instanceMeta.context,this.getValue(),t.obj,n,this.instanceMeta.sugarMeta)));this.changedItems={}}},o.prototype={getValue:function(){return
        this.propertyName in this.cache?this.cache[this.propertyName]:this.initialValue},setValue:function(e,t){if(void
        0!==e){var r=t&&e!==this.cache[this.propertyName];r&&h(this.context,this.propertyName),this.cache[this.propertyName]=e,r&&m(this.context,this.propertyName)}else
        delete this.cache[this.propertyName]}},Ember.ReduceComputedProperty=s,s.prototype=g(E.prototype),s.prototype._callbacks=function(){if(!this.callbacks){var
        e=this.options;this.callbacks={removedItem:e.removedItem||a,addedItem:e.addedItem||a}}return
        this.callbacks},s.prototype._hasInstanceMeta=function(e,t){var r=c(e),n=r+\":\"+t;return!!this._instanceMetas[n]},s.prototype._instanceMeta=function(t,r){var
        n=c(t),i=n+\":\"+r,s=this._instanceMetas[i];return s||(s=this._instanceMetas[i]=new
        o(t,r,this.initialValue()),s.dependentArraysObserver=new e(this._callbacks(),this,s,t,r,s.sugarMeta)),s},s.prototype.initialValue=function(){return\"function\"==typeof
        this.options.initialValue?this.options.initialValue():this.options.initialValue},s.prototype.resetValue=function(){return
        this.initialValue()},s.prototype.itemPropertyKey=function(e,t){this._itemPropertyKeys[e]=this._itemPropertyKeys[e]||[],this._itemPropertyKeys[e].push(t)},s.prototype.clearItemPropertyKeys=function(e){this._itemPropertyKeys[e]&&(this._previousItemPropertyKeys[e]=this._itemPropertyKeys[e],this._itemPropertyKeys[e]=[])},s.prototype.property=function(){var
        e,t,r,n=this,i=(v.call(arguments),new Ember.Set);return y(v.call(arguments),function(o){if(_.test(o))throw
        new Ember.Error(\"Nested @each properties not supported: \"+o);(e=w.exec(o))?(t=e[1],r=e[2],n.itemPropertyKey(t,r),i.add(t)):i.add(o)}),E.prototype.property.apply(this,i.toArray())},Ember.reduceComputed=function(e){var
        t;if(arguments.length>1&&(t=v.call(arguments,0,-1),e=v.call(arguments,-1)[0]),\"object\"!=typeof
        e)throw new Ember.Error(\"Reduce Computed Property declared without an options
        hash\");if(!(\"initialValue\"in e))throw new Ember.Error(\"Reduce Computed
        Property declared without an initial value\");var r=new s(e);return t&&r.property.apply(r,t),r}}(),function(){function
        e(){var e=this;return t.apply(this,arguments),this.func=function(t){return
        function(r){return e._hasInstanceMeta(this,r)||i(e._dependentKeys,function(t){Ember.addObserver(this,t,function(){e.recomputeOnce.call(this,r)})},this),t.apply(this,arguments)}}(this.func),this}var
        t=Ember.ReduceComputedProperty,r=[].slice,n=Ember.create,i=Ember.EnumerableUtils.forEach;Ember.ArrayComputedProperty=e,e.prototype=n(t.prototype),e.prototype.initialValue=function(){return
        Ember.A()},e.prototype.resetValue=function(e){return e.clear(),e},Ember.arrayComputed=function(t){var
        n;if(arguments.length>1&&(n=r.call(arguments,0,-1),t=r.call(arguments,-1)[0]),\"object\"!=typeof
        t)throw new Ember.Error(\"Array Computed Property declared without an options
        hash\");var i=new e(t);return n&&i.property.apply(i,n),i}}(),function(){function
        e(e,n,i,o){function s(e){return Ember.ObjectProxy.detectInstance(e)?r(t(e,\"content\")):r(e)}var
        a,u,c,l,h;return arguments.length<4&&(o=t(e,\"length\")),arguments.length<3&&(i=0),i===o?i:(a=i+Math.floor((o-i)/2),u=e.objectAt(a),l=s(u),h=s(n),l===h?a:(c=this.order(u,n),0===c&&(c=h>l?-1:1),0>c?this.binarySearch(e,n,a+1,o):c>0?this.binarySearch(e,n,i,a):a))}var
        t=Ember.get,r=(Ember.set,Ember.guidFor),n=Ember.merge,i=[].slice,o=Ember.EnumerableUtils.forEach,s=Ember.EnumerableUtils.map;Ember.computed.max=function(e){return
        Ember.reduceComputed.call(null,e,{initialValue:-1/0,addedItem:function(e,t){return
        Math.max(e,t)},removedItem:function(e,t){return e>t?e:void 0}})},Ember.computed.min=function(e){return
        Ember.reduceComputed.call(null,e,{initialValue:1/0,addedItem:function(e,t){return
        Math.min(e,t)},removedItem:function(e,t){return t>e?e:void 0}})},Ember.computed.map=function(e,t){var
        r={addedItem:function(e,r,n){var i=t.call(this,r);return e.insertAt(n.index,i),e},removedItem:function(e,t,r){return
        e.removeAt(r.index,1),e}};return Ember.arrayComputed(e,r)},Ember.computed.mapBy=function(e,r){var
        n=function(e){return t(e,r)};return Ember.computed.map(e+\".@each.\"+r,n)},Ember.computed.mapProperty=Ember.computed.mapBy,Ember.computed.filter=function(e,t){var
        r={initialize:function(e,t,r){r.filteredArrayIndexes=new Ember.SubArray},addedItem:function(e,r,n,i){var
        o=!!t.call(this,r),s=i.filteredArrayIndexes.addItem(n.index,o);return o&&e.insertAt(s,r),e},removedItem:function(e,t,r,n){var
        i=n.filteredArrayIndexes.removeItem(r.index);return i>-1&&e.removeAt(i),e}};return
        Ember.arrayComputed(e,r)},Ember.computed.filterBy=function(e,r,n){var i;return
        i=2===arguments.length?function(e){return t(e,r)}:function(e){return t(e,r)===n},Ember.computed.filter(e+\".@each.\"+r,i)},Ember.computed.filterProperty=Ember.computed.filterBy,Ember.computed.uniq=function(){var
        e=i.call(arguments);return e.push({initialize:function(e,t,r){r.itemCounts={}},addedItem:function(e,t,n,i){var
        o=r(t);return i.itemCounts[o]?++i.itemCounts[o]:i.itemCounts[o]=1,e.addObject(t),e},removedItem:function(e,t,n,i){var
        o=r(t),s=i.itemCounts;return 0===--s[o]&&e.removeObject(t),e}}),Ember.arrayComputed.apply(null,e)},Ember.computed.union=Ember.computed.uniq,Ember.computed.intersect=function(){var
        e=function(e){return s(e.property._dependentKeys,function(e){return r(e)})},t=i.call(arguments);return
        t.push({initialize:function(e,t,r){r.itemCounts={}},addedItem:function(t,n,i,o){var
        s=r(n),a=(e(i),r(i.arrayChanged)),u=i.property._dependentKeys.length,c=o.itemCounts;return
        c[s]||(c[s]={}),void 0===c[s][a]&&(c[s][a]=0),1===++c[s][a]&&u===Ember.keys(c[s]).length&&t.addObject(n),t},removedItem:function(t,n,i,o){var
        s,a=r(n),u=(e(i),r(i.arrayChanged)),c=(i.property._dependentKeys.length,o.itemCounts);return
        void 0===c[a][u]&&(c[a][u]=0),0===--c[a][u]&&(delete c[a][u],s=Ember.keys(c[a]).length,0===s&&delete
        c[a],t.removeObject(n)),t}}),Ember.arrayComputed.apply(null,t)},Ember.computed.setDiff=function(e,r){if(2!==arguments.length)throw
        new Ember.Error(\"setDiff requires exactly two dependent arrays.\");return
        Ember.arrayComputed.call(null,e,r,{addedItem:function(n,i,o){var s=t(this,e),a=t(this,r);return
        o.arrayChanged===s?a.contains(i)||n.addObject(i):n.removeObject(i),n},removedItem:function(n,i,o){var
        s=t(this,e),a=t(this,r);return o.arrayChanged===a?s.contains(i)&&n.addObject(i):n.removeObject(i),n}})},Ember.computed.sort=function(r,i){var
        s,a;return\"function\"==typeof i?s=function(t,r,n){n.order=i,n.binarySearch=e}:(a=i,s=function(n,i,s){function
        u(){var e,n,u,l=t(this,a),h=s.sortProperties=[],m=s.sortPropertyAscending={};i.property.clearItemPropertyKeys(r),o(l,function(t){-1!==(n=t.indexOf(\":\"))?(e=t.substring(0,n),u=\"desc\"!==t.substring(n+1).toLowerCase()):(e=t,u=!0),h.push(e),m[e]=u,i.property.itemPropertyKey(r,e)}),l.addObserver(\"@each\",this,c)}function
        c(){Ember.run.once(this,l,i.propertyName)}function l(e){u.call(this),i.property.recomputeOnce.call(this,e)}Ember.addObserver(this,a,c),u.call(this),s.order=function(e,r){for(var
        n,i,o,s=0;s<this.sortProperties.length;++s)if(n=this.sortProperties[s],i=Ember.compare(t(e,n),t(r,n)),0!==i)return
        o=this.sortPropertyAscending[n],o?i:-1*i;return 0},s.binarySearch=e}),Ember.arrayComputed.call(null,r,{initialize:s,addedItem:function(e,t,r,n){var
        i=n.binarySearch(e,t);return e.insertAt(i,t),e},removedItem:function(e,t,r,i){var
        o,s,a;return r.previousValues?(o=n({content:t},r.previousValues),a=Ember.ObjectProxy.create(o)):a=t,s=i.binarySearch(e,a),e.removeAt(s),e}})}}(),function(){Ember.RSVP=t(\"rsvp\")}(),function(){var
        e=/[ _]/g,t={},r=/([a-z\\d])([A-Z])/g,n=/(\\-|_|\\.|\\s)+(.)?/g,i=/([a-z\\d])([A-Z]+)/g,o=/\\-|\\s+/g;Ember.STRINGS={},Ember.String={fmt:function(e,t){var
        r=0;return e.replace(/%@([0-9]+)?/g,function(e,n){return n=n?parseInt(n,10)-1:r++,e=t[n],null===e?\"(null)\":void
        0===e?\"\":Ember.inspect(e)})},loc:function(e,t){return e=Ember.STRINGS[e]||e,Ember.String.fmt(e,t)},w:function(e){return
        e.split(/\\s+/)},decamelize:function(e){return e.replace(r,\"$1_$2\").toLowerCase()},dasherize:function(r){var
        n,i=t,o=i.hasOwnProperty(r);return o?i[r]:(n=Ember.String.decamelize(r).replace(e,\"-\"),i[r]=n,n)},camelize:function(e){return
        e.replace(n,function(e,t,r){return r?r.toUpperCase():\"\"}).replace(/^([A-Z])/,function(e){return
        e.toLowerCase()})},classify:function(e){for(var t=e.split(\".\"),r=[],n=0,i=t.length;i>n;n++){var
        o=Ember.String.camelize(t[n]);r.push(o.charAt(0).toUpperCase()+o.substr(1))}return
        r.join(\".\")},underscore:function(e){return e.replace(i,\"$1_$2\").replace(o,\"_\").toLowerCase()},capitalize:function(e){return
        e.charAt(0).toUpperCase()+e.substr(1)}}}(),function(){var e=Ember.String.fmt,t=Ember.String.w,r=Ember.String.loc,n=Ember.String.camelize,i=Ember.String.decamelize,o=Ember.String.dasherize,s=Ember.String.underscore,a=Ember.String.capitalize,u=Ember.String.classify;(Ember.EXTEND_PROTOTYPES===!0||Ember.EXTEND_PROTOTYPES.String)&&(String.prototype.fmt=function(){return
        e(this,arguments)},String.prototype.w=function(){return t(this)},String.prototype.loc=function(){return
        r(this,arguments)},String.prototype.camelize=function(){return n(this)},String.prototype.decamelize=function(){return
        i(this)},String.prototype.dasherize=function(){return o(this)},String.prototype.underscore=function(){return
        s(this)},String.prototype.classify=function(){return u(this)},String.prototype.capitalize=function(){return
        a(this)})}(),function(){var e=Array.prototype.slice;(Ember.EXTEND_PROTOTYPES===!0||Ember.EXTEND_PROTOTYPES.Function)&&(Function.prototype.property=function(){var
        e=Ember.computed(this);return e.property.apply(e,arguments)},Function.prototype.observes=function(){return
        this.__ember_observes__=e.call(arguments),this},Function.prototype.observesImmediately=function(){for(var
        e=0,t=arguments.length;t>e;e++)arguments[e];return this.observes.apply(this,arguments)},Function.prototype.observesBefore=function(){return
        this.__ember_observesBefore__=e.call(arguments),this},Function.prototype.on=function(){var
        t=e.call(arguments);return this.__ember_listens__=t,this})}(),function(){Ember.Comparable=Ember.Mixin.create({compare:Ember.required(Function)})}(),function(){var
        e=Ember.get;Ember.set,Ember.Copyable=Ember.Mixin.create({copy:Ember.required(Function),frozenCopy:function(){if(Ember.Freezable&&Ember.Freezable.detect(this))return
        e(this,\"isFrozen\")?this:this.copy().freeze();throw new Ember.Error(Ember.String.fmt(\"%@
        does not support freezing\",[this]))}})}(),function(){var e=Ember.get,t=Ember.set;Ember.Freezable=Ember.Mixin.create({isFrozen:!1,freeze:function(){return
        e(this,\"isFrozen\")?this:(t(this,\"isFrozen\",!0),this)}}),Ember.FROZEN_ERROR=\"Frozen
        object cannot be modified.\"}(),function(){var e=Ember.EnumerableUtils.forEach;Ember.MutableEnumerable=Ember.Mixin.create(Ember.Enumerable,{addObject:Ember.required(Function),addObjects:function(t){return
        Ember.beginPropertyChanges(this),e(t,function(e){this.addObject(e)},this),Ember.endPropertyChanges(this),this},removeObject:Ember.required(Function),removeObjects:function(t){return
        Ember.beginPropertyChanges(this),e(t,function(e){this.removeObject(e)},this),Ember.endPropertyChanges(this),this}})}(),function(){var
        e=\"Index out of range\",t=[],r=Ember.get;Ember.set,Ember.MutableArray=Ember.Mixin.create(Ember.Array,Ember.MutableEnumerable,{replace:Ember.required(),clear:function(){var
        e=r(this,\"length\");return 0===e?this:(this.replace(0,e,t),this)},insertAt:function(t,n){if(t>r(this,\"length\"))throw
        new Ember.Error(e);return this.replace(t,0,[n]),this},removeAt:function(n,i){if(\"number\"==typeof
        n){if(0>n||n>=r(this,\"length\"))throw new Ember.Error(e);void 0===i&&(i=1),this.replace(n,i,t)}return
        this},pushObject:function(e){return this.insertAt(r(this,\"length\"),e),e},pushObjects:function(e){if(!Ember.Enumerable.detect(e)&&!Ember.isArray(e))throw
        new TypeError(\"Must pass Ember.Enumerable to Ember.MutableArray#pushObjects\");return
        this.replace(r(this,\"length\"),0,e),this},popObject:function(){var e=r(this,\"length\");if(0===e)return
        null;var t=this.objectAt(e-1);return this.removeAt(e-1,1),t},shiftObject:function(){if(0===r(this,\"length\"))return
        null;var e=this.objectAt(0);return this.removeAt(0),e},unshiftObject:function(e){return
        this.insertAt(0,e),e},unshiftObjects:function(e){return this.replace(0,0,e),this},reverseObjects:function(){var
        e=r(this,\"length\");if(0===e)return this;var t=this.toArray().reverse();return
        this.replace(0,e,t),this},setObjects:function(e){if(0===e.length)return this.clear();var
        t=r(this,\"length\");return this.replace(0,t,e),this},removeObject:function(e){for(var
        t=r(this,\"length\")||0;--t>=0;){var n=this.objectAt(t);n===e&&this.removeAt(t)}return
        this},addObject:function(e){return this.contains(e)||this.pushObject(e),this}})}(),function(){var
        e=Ember.get,t=Ember.set,r=Array.prototype.slice,n=Ember.getProperties;Ember.Observable=Ember.Mixin.create({get:function(t){return
        e(this,t)},getProperties:function(){return n.apply(null,[this].concat(r.call(arguments)))},set:function(e,r){return
        t(this,e,r),this},setProperties:function(e){return Ember.setProperties(this,e)},beginPropertyChanges:function(){return
        Ember.beginPropertyChanges(),this},endPropertyChanges:function(){return Ember.endPropertyChanges(),this},propertyWillChange:function(e){return
        Ember.propertyWillChange(this,e),this},propertyDidChange:function(e){return
        Ember.propertyDidChange(this,e),this},notifyPropertyChange:function(e){return
        this.propertyWillChange(e),this.propertyDidChange(e),this},addBeforeObserver:function(e,t,r){Ember.addBeforeObserver(this,e,t,r)},addObserver:function(e,t,r){Ember.addObserver(this,e,t,r)},removeObserver:function(e,t,r){Ember.removeObserver(this,e,t,r)},hasObserverFor:function(e){return
        Ember.hasListeners(this,e+\":change\")},getPath:function(e){return this.get(e)},setPath:function(e,t){return
        this.set(e,t)},getWithDefault:function(e,t){return Ember.getWithDefault(this,e,t)},incrementProperty:function(r,n){return
        Ember.isNone(n)&&(n=1),t(this,r,(e(this,r)||0)+n),e(this,r)},decrementProperty:function(r,n){return
        Ember.isNone(n)&&(n=1),t(this,r,(e(this,r)||0)-n),e(this,r)},toggleProperty:function(r){return
        t(this,r,!e(this,r)),e(this,r)},cacheFor:function(e){return Ember.cacheFor(this,e)},observersForKey:function(e){return
        Ember.observersFor(this,e)}})}(),function(){var e=Ember.get;Ember.set,Ember.TargetActionSupport=Ember.Mixin.create({target:null,action:null,actionContext:null,targetObject:Ember.computed(function(){var
        t=e(this,\"target\");if(\"string\"===Ember.typeOf(t)){var r=e(this,t);return
        void 0===r&&(r=e(Ember.lookup,t)),r}return t}).property(\"target\"),actionContextObject:Ember.computed(function(){var
        t=e(this,\"actionContext\");if(\"string\"===Ember.typeOf(t)){var r=e(this,t);return
        void 0===r&&(r=e(Ember.lookup,t)),r}return t}).property(\"actionContext\"),triggerAction:function(t){function
        r(e,t){var r=[];return t&&r.push(t),r.concat(e)}t=t||{};var n=t.action||e(this,\"action\"),i=t.target||e(this,\"targetObject\"),o=t.actionContext;if(\"undefined\"==typeof
        o&&(o=e(this,\"actionContextObject\")||this),i&&n){var s;return s=i.send?i.send.apply(i,r(o,n)):i[n].apply(i,r(o)),s!==!1&&(s=!0),s}return!1}})}(),function(){Ember.Evented=Ember.Mixin.create({on:function(e,t,r){return
        Ember.addListener(this,e,t,r),this},one:function(e,t,r){return r||(r=t,t=null),Ember.addListener(this,e,t,r,!0),this},trigger:function(e){var
        t,r,n=[];for(t=1,r=arguments.length;r>t;t++)n.push(arguments[t]);Ember.sendEvent(this,e,n)},off:function(e,t,r){return
        Ember.removeListener(this,e,t,r),this},has:function(e){return Ember.hasListeners(this,e)}})}(),function(){var
        e=t(\"rsvp\");e.configure(\"async\",function(e,t){Ember.run.schedule(\"actions\",t,e,t)});var
        r=Ember.get;Ember.DeferredMixin=Ember.Mixin.create({then:function(e,t){function
        n(t){return t===o?e(s):e(t)}var i,o,s;return s=this,i=r(this,\"_deferred\"),o=i.promise,o.then(e&&n,t)},resolve:function(e){var
        t,n;t=r(this,\"_deferred\"),n=t.promise,e===this?t.resolve(n):t.resolve(e)},reject:function(e){r(this,\"_deferred\").reject(e)},_deferred:Ember.computed(function(){return
        e.defer()})})}(),function(){var e=Ember.get;Ember.ActionHandler=Ember.Mixin.create({mergedProperties:[\"_actions\"],willMergeMixin:function(e){e.actions&&!e._actions&&(e._actions=Ember.merge(e._actions||{},e.actions),delete
        e.actions)},send:function(t){var r,n=[].slice.call(arguments,1);if(this._actions&&this._actions[t]){if(this._actions[t].apply(this,n)!==!0)return}else
        if(this.deprecatedSend&&this.deprecatedSendHandles&&this.deprecatedSendHandles(t)&&this.deprecatedSend.apply(this,[].slice.call(arguments))!==!0)return;(r=e(this,\"target\"))&&r.send.apply(r,arguments)}})}(),function(){function
        e(e,r){r.then(function(r){return t(e,\"isFulfilled\",!0),t(e,\"content\",r),r},function(r){t(e,\"isRejected\",!0),t(e,\"reason\",r)}).fail(i)}var
        t=Ember.set,r=Ember.get,n=Ember.RSVP.resolve,i=Ember.RSVP.rethrow,o=Ember.computed.not,s=Ember.computed.or;Ember.PromiseProxyMixin=Ember.Mixin.create({reason:null,isPending:o(\"isSettled\").readOnly(),isSettled:s(\"isRejected\",\"isFulfilled\").readOnly(),isRejected:!1,isFulfilled:!1,promise:Ember.computed(function(t,r){if(2===arguments.length)return
        r=n(r),e(this,r),r;throw new Ember.Error(\"PromiseProxy's promise must be
        set\")}),then:function(e,t){return r(this,\"promise\").then(e,t)}})}(),function(){function
        e(e,t,r){this.type=e,this.count=t,this.items=r}function t(e,t,r,n){this.operation=e,this.index=t,this.split=r,this.rangeStart=n}var
        r=Ember.get,n=Ember.EnumerableUtils.forEach,i=\"r\",o=\"i\",s=\"d\";Ember.TrackedArray=function(t){arguments.length<1&&(t=[]);var
        n=r(t,\"length\");this._operations=n?[new e(i,n,t)]:[]},Ember.TrackedArray.RETAIN=i,Ember.TrackedArray.INSERT=o,Ember.TrackedArray.DELETE=s,Ember.TrackedArray.prototype={addItems:function(t,n){var
        i=r(n,\"length\");if(!(1>i)){var s,a,u=this._findArrayOperation(t),c=u.operation,l=u.index,h=u.rangeStart;a=new
        e(o,i,n),c?u.split?(this._split(l,t-h,a),s=l+1):(this._operations.splice(l,0,a),s=l):(this._operations.push(a),s=l),this._composeInsert(s)}},removeItems:function(t,r){if(!(1>r)){var
        n,i,o=this._findArrayOperation(t),a=(o.operation,o.index),u=o.rangeStart;return
        n=new e(s,r),o.split?(this._split(a,t-u,n),i=a+1):(this._operations.splice(a,0,n),i=a),this._composeDelete(i)}},apply:function(t){var
        r=[],o=0;n(this._operations,function(e){t(e.items,o,e.type),e.type!==s&&(o+=e.count,r=r.concat(e.items))}),this._operations=[new
        e(i,r.length,r)]},_findArrayOperation:function(e){var r,n,i,o,a,u=!1;for(r=o=0,n=this._operations.length;n>r;++r)if(i=this._operations[r],i.type!==s){if(a=o+i.count-1,e===o)break;if(e>o&&a>=e){u=!0;break}o=a+1}return
        new t(i,r,u,o)},_split:function(t,r,n){var i=this._operations[t],o=i.items.slice(r),s=new
        e(i.type,o.length,o);i.count=r,i.items=i.items.slice(0,r),this._operations.splice(t+1,0,n,s)},_composeInsert:function(e){var
        t=this._operations[e],r=this._operations[e-1],n=this._operations[e+1],i=r&&r.type,s=n&&n.type;i===o?(r.count+=t.count,r.items=r.items.concat(t.items),s===o?(r.count+=n.count,r.items=r.items.concat(n.items),this._operations.splice(e,2)):this._operations.splice(e,1)):s===o&&(t.count+=n.count,t.items=t.items.concat(n.items),this._operations.splice(e+1,1))},_composeDelete:function(e){var
        t,r,n,i=this._operations[e],a=i.count,u=this._operations[e-1],c=u&&u.type,l=!1,h=[];c===s&&(i=u,e-=1);for(var
        m=e+1;a>0;++m)t=this._operations[m],r=t.type,n=t.count,r!==s?(n>a?(h=h.concat(t.items.splice(0,a)),t.count-=a,m-=1,n=a,a=0):(n===a&&(l=!0),h=h.concat(t.items),a-=n),r===o&&(i.count-=n)):i.count+=n;return
        i.count>0?this._operations.splice(e+1,m-1-e):this._operations.splice(e,l?2:1),h},toString:function(){var
        e=\"\";return n(this._operations,function(t){e+=\" \"+t.type+\":\"+t.count}),e.substring(1)}}}(),function(){function
        e(e,t){this.type=e,this.count=t}var t=(Ember.get,Ember.EnumerableUtils.forEach,\"r\"),r=\"f\";Ember.SubArray=function(r){arguments.length<1&&(r=0),this._operations=r>0?[new
        e(t,r)]:[]},Ember.SubArray.prototype={addItem:function(n,i){var o=-1,s=i?t:r,a=this;return
        this._findOperation(n,function(r,u,c,l,h){var m,f;s===r.type?++r.count:n===c?a._operations.splice(u,0,new
        e(s,1)):(m=new e(s,1),f=new e(r.type,l-n+1),r.count=n-c,a._operations.splice(u+1,0,m,f)),i&&(o=r.type===t?h+(n-c):h),a._composeAt(u)},function(t){a._operations.push(new
        e(s,1)),i&&(o=t),a._composeAt(a._operations.length-1)}),o},removeItem:function(e){var
        r=-1,n=this;return this._findOperation(e,function(i,o,s,a,u){i.type===t&&(r=u+(e-s)),i.count>1?--i.count:(n._operations.splice(o,1),n._composeAt(o))},function(){throw
        new Ember.Error(\"Can't remove an item that has never been added.\")}),r},_findOperation:function(e,r,n){var
        i,o,s,a,u,c=0;for(i=a=0,o=this._operations.length;o>i;a=u+1,++i){if(s=this._operations[i],u=a+s.count-1,e>=a&&u>=e)return
        r(s,i,a,u,c),void 0;s.type===t&&(c+=s.count)}n(c)},_composeAt:function(e){var
        t,r=this._operations[e];r&&(e>0&&(t=this._operations[e-1],t.type===r.type&&(r.count+=t.count,this._operations.splice(e-1,1),--e)),e<this._operations.length-1&&(t=this._operations[e+1],t.type===r.type&&(r.count+=t.count,this._operations.splice(e+1,1))))}}}(),function(){Ember.Container=t(\"container\"),Ember.Container.set=Ember.set}(),function(){function
        e(){var e,t,o=!1,s=function(){o||s.proto(),n(this,i,g),n(this,\"_super\",g);var
        u=a(this),h=u.proto;if(u.proto=this,e){var m=e;e=null,this.reopen.apply(this,m)}if(t){var
        f=t;t=null;for(var p=this.concatenatedProperties,b=0,y=f.length;y>b;b++){var
        w=f[b];if(null!==w&&\"object\"==typeof w)for(var _=Ember.keys(w),C=0,O=_.length;O>C;C++){var
        A=_[C];if(w.hasOwnProperty(A)){var P=w[A],V=Ember.IS_BINDING;if(V.test(A)){var
        x=u.bindings;x?u.hasOwnProperty(\"bindings\")||(x=u.bindings=r(u.bindings)):x=u.bindings={},x[A]=P}var
        S=u.descs[A];if(p&&v(p,A)>=0){var T=this[A];P=T?\"function\"==typeof T.concat?T.concat(P):Ember.makeArray(T).concat(P):Ember.makeArray(P)}S?S.set(this,A,P):\"function\"!=typeof
        this.setUnknownProperty||A in this?E?Ember.defineProperty(this,A,null,P):this[A]=P:this.setUnknownProperty(A,P)}}}}d(this,u),this.init.apply(this,arguments),u.proto=h,c(this),l(this,\"init\")};return
        s.toString=f.prototype.toString,s.willReopen=function(){o&&(s.PrototypeMixin=f.create(s.PrototypeMixin)),o=!1},s._initMixins=function(t){e=t},s._initProperties=function(e){t=e},s.proto=function(){var
        e=s.superclass;return e&&e.proto(),o||(o=!0,s.PrototypeMixin.applyPartial(s.prototype),u(s.prototype)),this.prototype\n},s}function
        t(e){return function(){return e}}var r=(Ember.set,Ember.get,Ember.create),n=Ember.platform.defineProperty,i=Ember.GUID_KEY,o=Ember.guidFor,s=Ember.generateGuid,a=Ember.meta,u=Ember.rewatch,c=Ember.finishChains,l=Ember.sendEvent,h=Ember.destroy,m=Ember.run.schedule,f=Ember.Mixin,p=f._apply,d=f.finishPartial,b=f.prototype.reopen,E=Ember.ENV.MANDATORY_SETTER,v=Ember.EnumerableUtils.indexOf,g={configurable:!0,writable:!0,enumerable:!1,value:void
        0},y=e();y.toString=function(){return\"Ember.CoreObject\"},y.PrototypeMixin=f.create({reopen:function(){return
        p(this,arguments,!0),this},init:function(){},concatenatedProperties:null,isDestroyed:!1,isDestroying:!1,destroy:function(){return
        this.isDestroying?void 0:(this.isDestroying=!0,m(\"actions\",this,this.willDestroy),m(\"destroy\",this,this._scheduledDestroy),this)},willDestroy:Ember.K,_scheduledDestroy:function(){this.isDestroyed||(h(this),this.isDestroyed=!0)},bind:function(e,t){return
        t instanceof Ember.Binding||(t=Ember.Binding.from(t)),t.to(e).connect(this),t},toString:function(){var
        e=\"function\"==typeof this.toStringExtension,r=e?\":\"+this.toStringExtension():\"\",n=\"<\"+this.constructor.toString()+\":\"+o(this)+r+\">\";return
        this.toString=t(n),n}}),y.PrototypeMixin.ownerConstructor=y,Ember.config.overridePrototypeMixin&&Ember.config.overridePrototypeMixin(y.PrototypeMixin),y.__super__=null;var
        w=f.create({ClassMixin:Ember.required(),PrototypeMixin:Ember.required(),isClass:!0,isMethod:!1,extend:function(){var
        t,n=e();return n.ClassMixin=f.create(this.ClassMixin),n.PrototypeMixin=f.create(this.PrototypeMixin),n.ClassMixin.ownerConstructor=n,n.PrototypeMixin.ownerConstructor=n,b.apply(n.PrototypeMixin,arguments),n.superclass=this,n.__super__=this.prototype,t=n.prototype=r(this.prototype),t.constructor=n,s(t,\"ember\"),a(t).proto=t,n.ClassMixin.apply(n),n},createWithMixins:function(){var
        e=this;return arguments.length>0&&this._initMixins(arguments),new e},create:function(){var
        e=this;return arguments.length>0&&this._initProperties(arguments),new e},reopen:function(){return
        this.willReopen(),b.apply(this.PrototypeMixin,arguments),this},reopenClass:function(){return
        b.apply(this.ClassMixin,arguments),p(this,arguments,!1),this},detect:function(e){if(\"function\"!=typeof
        e)return!1;for(;e;){if(e===this)return!0;e=e.superclass}return!1},detectInstance:function(e){return
        e instanceof this},metaForProperty:function(e){var t=a(this.proto(),!1).descs[e];return
        t._meta||{}},eachComputedProperty:function(e,t){var r,n=this.proto(),i=a(n).descs,o={};for(var
        s in i)r=i[s],r instanceof Ember.ComputedProperty&&e.call(t||this,s,r._meta||o)}});w.ownerConstructor=y,Ember.config.overrideClassMixin&&Ember.config.overrideClassMixin(w),y.ClassMixin=w,w.apply(y),Ember.CoreObject=y}(),function(){Ember.Object=Ember.CoreObject.extend(Ember.Observable),Ember.Object.toString=function(){return\"Ember.Object\"}}(),function(){function
        e(t,r,i){var s=t.length;c[t.join(\".\")]=r;for(var a in r)if(l.call(r,a)){var
        u=r[a];if(t[s]=a,u&&u.toString===n)u.toString=o(t.join(\".\")),u[m]=t.join(\".\");else
        if(u&&u.isNamespace){if(i[h(u)])continue;i[h(u)]=!0,e(t,u,i)}}t.length=s}function
        t(){var e,t,r=Ember.Namespace,n=Ember.lookup;if(!r.PROCESSED)for(var i in
        n)if(\"parent\"!==i&&\"top\"!==i&&\"frameElement\"!==i&&\"webkitStorageInfo\"!==i&&!(\"globalStorage\"===i&&n.StorageList&&n.globalStorage
        instanceof n.StorageList||n.hasOwnProperty&&!n.hasOwnProperty(i))){try{e=Ember.lookup[i],t=e&&e.isNamespace}catch(o){continue}t&&(e[m]=i)}}function
        r(e){var t=e.superclass;return t?t[m]?t[m]:r(t):void 0}function n(){Ember.BOOTED||this[m]||i();var
        e;if(this[m])e=this[m];else if(this._toString)e=this._toString;else{var t=r(this);e=t?\"(subclass
        of \"+t+\")\":\"(unknown mixin)\",this.toString=o(e)}return e}function i(){var
        r=!u.PROCESSED,n=Ember.anyUnprocessedMixins;if(r&&(t(),u.PROCESSED=!0),r||n){for(var
        i,o=u.NAMESPACES,s=0,a=o.length;a>s;s++)i=o[s],e([i.toString()],i,{});Ember.anyUnprocessedMixins=!1}}function
        o(e){return function(){return e}}var s=Ember.get,a=Ember.ArrayPolyfills.indexOf,u=Ember.Namespace=Ember.Object.extend({isNamespace:!0,init:function(){Ember.Namespace.NAMESPACES.push(this),Ember.Namespace.PROCESSED=!1},toString:function(){var
        e=s(this,\"name\");return e?e:(t(),this[Ember.GUID_KEY+\"_name\"])},nameClasses:function(){e([this.toString()],this,{})},destroy:function(){var
        e=Ember.Namespace.NAMESPACES;Ember.lookup[this.toString()]=void 0,e.splice(a.call(e,this),1),this._super()}});u.reopenClass({NAMESPACES:[Ember],NAMESPACES_BY_ID:{},PROCESSED:!1,processAll:i,byName:function(e){return
        Ember.BOOTED||i(),c[e]}});var c=u.NAMESPACES_BY_ID,l={}.hasOwnProperty,h=Ember.guidFor,m=Ember.NAME_KEY=Ember.GUID_KEY+\"_name\";Ember.Mixin.prototype.toString=n}(),function(){Ember.Application=Ember.Namespace.extend()}(),function(){var
        e=\"Index out of range\",t=[],r=Ember.get;Ember.set,Ember.ArrayProxy=Ember.Object.extend(Ember.MutableArray,{content:null,arrangedContent:Ember.computed.alias(\"content\"),objectAtContent:function(e){return
        r(this,\"arrangedContent\").objectAt(e)},replaceContent:function(e,t,n){r(this,\"content\").replace(e,t,n)},_contentWillChange:Ember.beforeObserver(function(){this._teardownContent()},\"content\"),_teardownContent:function(){var
        e=r(this,\"content\");e&&e.removeArrayObserver(this,{willChange:\"contentArrayWillChange\",didChange:\"contentArrayDidChange\"})},contentArrayWillChange:Ember.K,contentArrayDidChange:Ember.K,_contentDidChange:Ember.observer(function(){r(this,\"content\"),this._setupContent()},\"content\"),_setupContent:function(){var
        e=r(this,\"content\");e&&e.addArrayObserver(this,{willChange:\"contentArrayWillChange\",didChange:\"contentArrayDidChange\"})},_arrangedContentWillChange:Ember.beforeObserver(function(){var
        e=r(this,\"arrangedContent\"),t=e?r(e,\"length\"):0;this.arrangedContentArrayWillChange(this,0,t,void
        0),this.arrangedContentWillChange(this),this._teardownArrangedContent(e)},\"arrangedContent\"),_arrangedContentDidChange:Ember.observer(function(){var
        e=r(this,\"arrangedContent\"),t=e?r(e,\"length\"):0;this._setupArrangedContent(),this.arrangedContentDidChange(this),this.arrangedContentArrayDidChange(this,0,void
        0,t)},\"arrangedContent\"),_setupArrangedContent:function(){var e=r(this,\"arrangedContent\");e&&e.addArrayObserver(this,{willChange:\"arrangedContentArrayWillChange\",didChange:\"arrangedContentArrayDidChange\"})},_teardownArrangedContent:function(){var
        e=r(this,\"arrangedContent\");e&&e.removeArrayObserver(this,{willChange:\"arrangedContentArrayWillChange\",didChange:\"arrangedContentArrayDidChange\"})},arrangedContentWillChange:Ember.K,arrangedContentDidChange:Ember.K,objectAt:function(e){return
        r(this,\"content\")&&this.objectAtContent(e)},length:Ember.computed(function(){var
        e=r(this,\"arrangedContent\");return e?r(e,\"length\"):0}),_replace:function(e,t,n){var
        i=r(this,\"content\");return i&&this.replaceContent(e,t,n),this},replace:function(){if(r(this,\"arrangedContent\")!==r(this,\"content\"))throw
        new Ember.Error(\"Using replace on an arranged ArrayProxy is not allowed.\");this._replace.apply(this,arguments)},_insertAt:function(t,n){if(t>r(this,\"content.length\"))throw
        new Ember.Error(e);return this._replace(t,0,[n]),this},insertAt:function(e,t){if(r(this,\"arrangedContent\")===r(this,\"content\"))return
        this._insertAt(e,t);throw new Ember.Error(\"Using insertAt on an arranged
        ArrayProxy is not allowed.\")},removeAt:function(n,i){if(\"number\"==typeof
        n){var o,s=r(this,\"content\"),a=r(this,\"arrangedContent\"),u=[];if(0>n||n>=r(this,\"length\"))throw
        new Ember.Error(e);for(void 0===i&&(i=1),o=n;n+i>o;o++)u.push(s.indexOf(a.objectAt(o)));for(u.sort(function(e,t){return
        t-e}),Ember.beginPropertyChanges(),o=0;o<u.length;o++)this._replace(u[o],1,t);Ember.endPropertyChanges()}return
        this},pushObject:function(e){return this._insertAt(r(this,\"content.length\"),e),e},pushObjects:function(e){if(!Ember.Enumerable.detect(e)&&!Ember.isArray(e))throw
        new TypeError(\"Must pass Ember.Enumerable to Ember.MutableArray#pushObjects\");return
        this._replace(r(this,\"length\"),0,e),this},setObjects:function(e){if(0===e.length)return
        this.clear();var t=r(this,\"length\");return this._replace(0,t,e),this},unshiftObject:function(e){return
        this._insertAt(0,e),e},unshiftObjects:function(e){return this._replace(0,0,e),this},slice:function(){var
        e=this.toArray();return e.slice.apply(e,arguments)},arrangedContentArrayWillChange:function(e,t,r,n){this.arrayContentWillChange(t,r,n)},arrangedContentArrayDidChange:function(e,t,r,n){this.arrayContentDidChange(t,r,n)},init:function(){this._super(),this._setupContent(),this._setupArrangedContent()},willDestroy:function(){this._teardownArrangedContent(),this._teardownContent()}})}(),function(){function
        e(e,t){var r=t.slice(8);r in this||u(this,r)}function t(e,t){var r=t.slice(8);r
        in this||c(this,r)}var r=Ember.get,n=Ember.set,i=(Ember.String.fmt,Ember.addBeforeObserver),o=Ember.addObserver,s=Ember.removeBeforeObserver,a=Ember.removeObserver,u=Ember.propertyWillChange,c=Ember.propertyDidChange,l=Ember.meta,h=Ember.defineProperty;Ember.ObjectProxy=Ember.Object.extend({content:null,_contentDidChange:Ember.observer(function(){},\"content\"),isTruthy:Ember.computed.bool(\"content\"),_debugContainerKey:null,willWatchProperty:function(r){var
        n=\"content.\"+r;i(this,n,null,e),o(this,n,null,t)},didUnwatchProperty:function(r){var
        n=\"content.\"+r;s(this,n,null,e),a(this,n,null,t)},unknownProperty:function(e){var
        t=r(this,\"content\");return t?r(t,e):void 0},setUnknownProperty:function(e,t){var
        i=l(this);if(i.proto===this)return h(this,e,null,t),t;var o=r(this,\"content\");return
        n(o,e,t)}})}(),function(){function e(e,t,r,i,o){var s,a=r._objects;for(a||(a=r._objects={});--o>=i;){var
        u=e.objectAt(o);u&&(Ember.addBeforeObserver(u,t,r,\"contentKeyWillChange\"),Ember.addObserver(u,t,r,\"contentKeyDidChange\"),s=n(u),a[s]||(a[s]=[]),a[s].push(o))}}function
        t(e,t,r,i,s){var a=r._objects;a||(a=r._objects={});for(var u,c;--s>=i;){var
        l=e.objectAt(s);l&&(Ember.removeBeforeObserver(l,t,r,\"contentKeyWillChange\"),Ember.removeObserver(l,t,r,\"contentKeyDidChange\"),c=n(l),u=a[c],u[o.call(u,s)]=null)}}var
        r=(Ember.set,Ember.get),n=Ember.guidFor,i=Ember.EnumerableUtils.forEach,o=Ember.ArrayPolyfills.indexOf,s=Ember.Object.extend(Ember.Array,{init:function(e,t,r){this._super(),this._keyName=t,this._owner=r,this._content=e},objectAt:function(e){var
        t=this._content.objectAt(e);return t&&r(t,this._keyName)},length:Ember.computed(function(){var
        e=this._content;return e?r(e,\"length\"):0})}),a=/^.+:(before|change)$/;Ember.EachProxy=Ember.Object.extend({init:function(e){this._super(),this._content=e,e.addArrayObserver(this),i(Ember.watchedEvents(this),function(e){this.didAddListener(e)},this)},unknownProperty:function(e){var
        t;return t=new s(this._content,e,this),Ember.defineProperty(this,e,null,t),this.beginObservingContentKey(e),t},arrayWillChange:function(e,r,n){var
        i,o,s=this._keys;o=n>0?r+n:-1,Ember.beginPropertyChanges(this);for(i in s)s.hasOwnProperty(i)&&(o>0&&t(e,i,this,r,o),Ember.propertyWillChange(this,i));Ember.propertyWillChange(this._content,\"@each\"),Ember.endPropertyChanges(this)},arrayDidChange:function(t,r,n,i){var
        o,s=this._keys;o=i>0?r+i:-1,Ember.changeProperties(function(){for(var n in
        s)s.hasOwnProperty(n)&&(o>0&&e(t,n,this,r,o),Ember.propertyDidChange(this,n));Ember.propertyDidChange(this._content,\"@each\")},this)},didAddListener:function(e){a.test(e)&&this.beginObservingContentKey(e.slice(0,-7))},didRemoveListener:function(e){a.test(e)&&this.stopObservingContentKey(e.slice(0,-7))},beginObservingContentKey:function(t){var
        n=this._keys;if(n||(n=this._keys={}),n[t])n[t]++;else{n[t]=1;var i=this._content,o=r(i,\"length\");e(i,t,this,0,o)}},stopObservingContentKey:function(e){var
        n=this._keys;if(n&&n[e]>0&&--n[e]<=0){var i=this._content,o=r(i,\"length\");t(i,e,this,0,o)}},contentKeyWillChange:function(e,t){Ember.propertyWillChange(this,t)},contentKeyDidChange:function(e,t){Ember.propertyDidChange(this,t)}})}(),function(){var
        e=Ember.get,t=(Ember.set,Ember.EnumerableUtils._replace),r=Ember.Mixin.create(Ember.MutableArray,Ember.Observable,Ember.Copyable,{get:function(e){return\"length\"===e?this.length:\"number\"==typeof
        e?this[e]:this._super(e)},objectAt:function(e){return this[e]},replace:function(r,n,i){if(this.isFrozen)throw
        Ember.FROZEN_ERROR;var o=i?e(i,\"length\"):0;return this.arrayContentWillChange(r,n,o),i&&0!==i.length?t(this,r,n,i):this.splice(r,n),this.arrayContentDidChange(r,n,o),this},unknownProperty:function(e,t){var
        r;return void 0!==t&&void 0===r&&(r=this[e]=t),r},indexOf:function(e,t){var
        r,n=this.length;for(t=void 0===t?0:0>t?Math.ceil(t):Math.floor(t),0>t&&(t+=n),r=t;n>r;r++)if(this[r]===e)return
        r;return-1},lastIndexOf:function(e,t){var r,n=this.length;for(t=void 0===t?n-1:0>t?Math.ceil(t):Math.floor(t),0>t&&(t+=n),r=t;r>=0;r--)if(this[r]===e)return
        r;return-1},copy:function(e){return e?this.map(function(e){return Ember.copy(e,!0)}):this.slice()}}),n=[\"length\"];Ember.EnumerableUtils.forEach(r.keys(),function(e){Array.prototype[e]&&n.push(e)}),n.length>0&&(r=r.without.apply(r,n)),Ember.NativeArray=r,Ember.A=function(e){return
        void 0===e&&(e=[]),Ember.Array.detect(e)?e:Ember.NativeArray.apply(e)},Ember.NativeArray.activate=function(){r.apply(Array.prototype),Ember.A=function(e){return
        e||[]}},(Ember.EXTEND_PROTOTYPES===!0||Ember.EXTEND_PROTOTYPES.Array)&&Ember.NativeArray.activate()}(),function(){var
        e=Ember.get,t=Ember.set,r=Ember.guidFor,n=Ember.isNone,i=Ember.String.fmt;Ember.Set=Ember.CoreObject.extend(Ember.MutableEnumerable,Ember.Copyable,Ember.Freezable,{length:0,clear:function(){if(this.isFrozen)throw
        new Ember.Error(Ember.FROZEN_ERROR);var n=e(this,\"length\");if(0===n)return
        this;var i;this.enumerableContentWillChange(n,0),Ember.propertyWillChange(this,\"firstObject\"),Ember.propertyWillChange(this,\"lastObject\");for(var
        o=0;n>o;o++)i=r(this[o]),delete this[i],delete this[o];return t(this,\"length\",0),Ember.propertyDidChange(this,\"firstObject\"),Ember.propertyDidChange(this,\"lastObject\"),this.enumerableContentDidChange(n,0),this},isEqual:function(t){if(!Ember.Enumerable.detect(t))return!1;var
        r=e(this,\"length\");if(e(t,\"length\")!==r)return!1;for(;--r>=0;)if(!t.contains(this[r]))return!1;return!0},add:Ember.aliasMethod(\"addObject\"),remove:Ember.aliasMethod(\"removeObject\"),pop:function(){if(e(this,\"isFrozen\"))throw
        new Ember.Error(Ember.FROZEN_ERROR);var t=this.length>0?this[this.length-1]:null;return
        this.remove(t),t},push:Ember.aliasMethod(\"addObject\"),shift:Ember.aliasMethod(\"pop\"),unshift:Ember.aliasMethod(\"push\"),addEach:Ember.aliasMethod(\"addObjects\"),removeEach:Ember.aliasMethod(\"removeObjects\"),init:function(e){this._super(),e&&this.addObjects(e)},nextObject:function(e){return
        this[e]},firstObject:Ember.computed(function(){return this.length>0?this[0]:void
        0}),lastObject:Ember.computed(function(){return this.length>0?this[this.length-1]:void
        0}),addObject:function(i){if(e(this,\"isFrozen\"))throw new Ember.Error(Ember.FROZEN_ERROR);if(n(i))return
        this;var o,s=r(i),a=this[s],u=e(this,\"length\");return a>=0&&u>a&&this[a]===i?this:(o=[i],this.enumerableContentWillChange(null,o),Ember.propertyWillChange(this,\"lastObject\"),u=e(this,\"length\"),this[s]=u,this[u]=i,t(this,\"length\",u+1),Ember.propertyDidChange(this,\"lastObject\"),this.enumerableContentDidChange(null,o),this)},removeObject:function(i){if(e(this,\"isFrozen\"))throw
        new Ember.Error(Ember.FROZEN_ERROR);if(n(i))return this;var o,s,a=r(i),u=this[a],c=e(this,\"length\"),l=0===u,h=u===c-1;return
        u>=0&&c>u&&this[u]===i&&(s=[i],this.enumerableContentWillChange(s,null),l&&Ember.propertyWillChange(this,\"firstObject\"),h&&Ember.propertyWillChange(this,\"lastObject\"),c-1>u&&(o=this[c-1],this[u]=o,this[r(o)]=u),delete
        this[a],delete this[c-1],t(this,\"length\",c-1),l&&Ember.propertyDidChange(this,\"firstObject\"),h&&Ember.propertyDidChange(this,\"lastObject\"),this.enumerableContentDidChange(s,null)),this},contains:function(e){return
        this[r(e)]>=0},copy:function(){var n=this.constructor,i=new n,o=e(this,\"length\");for(t(i,\"length\",o);--o>=0;)i[o]=this[o],i[r(this[o])]=o;return
        i},toString:function(){var e,t=this.length,r=[];for(e=0;t>e;e++)r[e]=this[e];return
        i(\"Ember.Set<%@>\",[r.join(\",\")])}})}(),function(){var e=Ember.DeferredMixin;Ember.get;var
        t=Ember.Object.extend(e);t.reopenClass({promise:function(e,r){var n=t.create();return
        e.call(r,n),n}}),Ember.Deferred=t}(),function(){var e=Ember.ArrayPolyfills.forEach,t=Ember.ENV.EMBER_LOAD_HOOKS||{},r={};Ember.onLoad=function(e,n){var
        i;t[e]=t[e]||Ember.A(),t[e].pushObject(n),(i=r[e])&&n(i)},Ember.runLoadHooks=function(n,i){r[n]=i,t[n]&&e.call(t[n],function(e){e(i)})}}(),function(){Ember.get,Ember.ControllerMixin=Ember.Mixin.create(Ember.ActionHandler,{isController:!0,target:null,container:null,parentController:null,store:null,model:Ember.computed.alias(\"content\"),deprecatedSendHandles:function(e){return!!this[e]},deprecatedSend:function(e){var
        t=[].slice.call(arguments,1);this[e].apply(this,t)}}),Ember.Controller=Ember.Object.extend(Ember.ControllerMixin)}(),function(){var
        e=Ember.get,t=(Ember.set,Ember.EnumerableUtils.forEach);Ember.SortableMixin=Ember.Mixin.create(Ember.MutableEnumerable,{sortProperties:null,sortAscending:!0,sortFunction:Ember.compare,orderBy:function(r,n){var
        i=0,o=e(this,\"sortProperties\"),s=e(this,\"sortAscending\"),a=e(this,\"sortFunction\");return
        t(o,function(t){0===i&&(i=a(e(r,t),e(n,t)),0===i||s||(i=-1*i))}),i},destroy:function(){var
        r=e(this,\"content\"),n=e(this,\"sortProperties\");return r&&n&&t(r,function(e){t(n,function(t){Ember.removeObserver(e,t,this,\"contentItemSortPropertyDidChange\")},this)},this),this._super()},isSorted:Ember.computed.bool(\"sortProperties\"),arrangedContent:Ember.computed(\"content\",\"sortProperties.@each\",function(){var
        r=e(this,\"content\"),n=e(this,\"isSorted\"),i=e(this,\"sortProperties\"),o=this;return
        r&&n?(r=r.slice(),r.sort(function(e,t){return o.orderBy(e,t)}),t(r,function(e){t(i,function(t){Ember.addObserver(e,t,this,\"contentItemSortPropertyDidChange\")},this)},this),Ember.A(r)):r}),_contentWillChange:Ember.beforeObserver(function(){var
        r=e(this,\"content\"),n=e(this,\"sortProperties\");r&&n&&t(r,function(e){t(n,function(t){Ember.removeObserver(e,t,this,\"contentItemSortPropertyDidChange\")},this)},this),this._super()},\"content\"),sortAscendingWillChange:Ember.beforeObserver(function(){this._lastSortAscending=e(this,\"sortAscending\")},\"sortAscending\"),sortAscendingDidChange:Ember.observer(function(){if(e(this,\"sortAscending\")!==this._lastSortAscending){var
        t=e(this,\"arrangedContent\");t.reverseObjects()}},\"sortAscending\"),contentArrayWillChange:function(r,n,i,o){var
        s=e(this,\"isSorted\");if(s){var a=e(this,\"arrangedContent\"),u=r.slice(n,n+i),c=e(this,\"sortProperties\");t(u,function(e){a.removeObject(e),t(c,function(t){Ember.removeObserver(e,t,this,\"contentItemSortPropertyDidChange\")},this)},this)}return
        this._super(r,n,i,o)},contentArrayDidChange:function(r,n,i,o){var s=e(this,\"isSorted\"),a=e(this,\"sortProperties\");if(s){var
        u=r.slice(n,n+o);t(u,function(e){this.insertItemSorted(e),t(a,function(t){Ember.addObserver(e,t,this,\"contentItemSortPropertyDidChange\")},this)},this)}return
        this._super(r,n,i,o)},insertItemSorted:function(t){var r=e(this,\"arrangedContent\"),n=e(r,\"length\"),i=this._binarySearch(t,0,n);r.insertAt(i,t)},contentItemSortPropertyDidChange:function(t){var
        r=e(this,\"arrangedContent\"),n=r.indexOf(t),i=r.objectAt(n-1),o=r.objectAt(n+1),s=i&&this.orderBy(t,i),a=o&&this.orderBy(t,o);(0>s||a>0)&&(r.removeObject(t),this.insertItemSorted(t))},_binarySearch:function(t,r,n){var
        i,o,s,a;return r===n?r:(a=e(this,\"arrangedContent\"),i=r+Math.floor((n-r)/2),o=a.objectAt(i),s=this.orderBy(o,t),0>s?this._binarySearch(t,i+1,n):s>0?this._binarySearch(t,r,i):i)}})}(),function(){var
        e=Ember.get,t=(Ember.set,Ember.EnumerableUtils.forEach),r=Ember.EnumerableUtils.replace;Ember.ArrayController=Ember.ArrayProxy.extend(Ember.ControllerMixin,Ember.SortableMixin,{itemController:null,lookupItemController:function(){return
        e(this,\"itemController\")},objectAtContent:function(t){var r=e(this,\"length\"),n=e(this,\"arrangedContent\"),i=n&&n.objectAt(t);if(t>=0&&r>t){var
        o=this.lookupItemController(i);if(o)return this.controllerAt(t,i,o)}return
        i},arrangedContentDidChange:function(){this._super(),this._resetSubControllers()},arrayContentDidChange:function(n,i,o){var
        s=e(this,\"_subControllers\"),a=s.slice(n,n+i);t(a,function(e){e&&e.destroy()}),r(s,n,i,new
        Array(o)),this._super(n,i,o)},init:function(){this._super(),this.set(\"_subControllers\",Ember.A())},content:Ember.computed(function(){return
        Ember.A()}),controllerAt:function(t,r,n){var i,o=e(this,\"container\"),s=e(this,\"_subControllers\"),a=s[t];if(a)return
        a;if(i=\"controller:\"+n,!o.has(i))throw new Ember.Error('Could not resolve
        itemController: \"'+n+'\"');return a=o.lookupFactory(i).create({target:this,parentController:e(this,\"parentController\")||this,content:r}),s[t]=a,a},_subControllers:null,_resetSubControllers:function(){var
        r=e(this,\"_subControllers\");r&&t(r,function(e){e&&e.destroy()}),this.set(\"_subControllers\",Ember.A())}})}(),function(){Ember.ObjectController=Ember.ObjectProxy.extend(Ember.ControllerMixin)}(),function(){var
        e=Ember.imports.jQuery;Ember.$=e}(),function(){if(Ember.$){var e=Ember.String.w(\"dragstart
        drag dragenter dragleave dragover drop dragend\");Ember.EnumerableUtils.forEach(e,function(e){Ember.$.event.fixHooks[e]={props:[\"dataTransfer\"]}})}}(),function(){function
        e(e){var t=e.shiftKey||e.metaKey||e.altKey||e.ctrlKey,r=e.which>1;return!t&&!r}var
        t=this.document&&function(){var e=document.createElement(\"div\");return e.innerHTML=\"<div></div>\",e.firstChild.innerHTML=\"<script></script>\",\"\"===e.firstChild.innerHTML}(),r=this.document&&function(){var
        e=document.createElement(\"div\");return e.innerHTML=\"Test: <script type='text/x-placeholder'></script>Value\",\"Test:\"===e.childNodes[0].nodeValue&&\"
        Value\"===e.childNodes[2].nodeValue}(),n=function(e,t){if(e.getAttribute(\"id\")===t)return
        e;var r,i,o,s=e.childNodes.length;for(r=0;s>r;r++)if(i=e.childNodes[r],o=1===i.nodeType&&n(i,t))return
        o},i=function(e,i){t&&(i=\"&shy;\"+i);var o=[];if(r&&(i=i.replace(/(\\s+)(<script
        id='([^']+)')/g,function(e,t,r,n){return o.push([n,t]),r})),e.innerHTML=i,o.length>0){var
        s,a=o.length;for(s=0;a>s;s++){var u=n(e,o[s][0]),c=document.createTextNode(o[s][1]);u.parentNode.insertBefore(c,u)}}if(t){for(var
        l=e.firstChild;1===l.nodeType&&!l.nodeName;)l=l.firstChild;3===l.nodeType&&\"­\"===l.nodeValue.charAt(0)&&(l.nodeValue=l.nodeValue.slice(1))}},o={},s=function(e){if(void
        0!==o[e])return o[e];var t=!0;if(\"select\"===e.toLowerCase()){var r=document.createElement(\"select\");i(r,'<option
        value=\"test\">Test</option>'),t=1===r.options.length}return o[e]=t,t},a=function(e,t){var
        r=e.tagName;if(s(r))i(e,t);else{var n=e.outerHTML||(new XMLSerializer).serializeToString(e),o=n.match(new
        RegExp(\"<\"+r+\"([^>]*)>\",\"i\"))[0],a=\"</\"+r+\">\",u=document.createElement(\"div\");for(i(u,o+t+a),e=u.firstChild;e.tagName!==r;)e=e.nextSibling}return
        e};Ember.ViewUtils={setInnerHTML:a,isSimpleClick:e}}(),function(){function
        e(e){return e?n.test(e)?e.replace(i,\"\"):e:e}function t(e){var t={\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\",\"`\":\"&#x60;\"},r=function(e){return
        t[e]||\"&amp;\"},n=e.toString();return s.test(n)?n.replace(o,r):n}Ember.get,Ember.set;var
        r=function(){this.seen={},this.list=[]};r.prototype={add:function(e){e in
        this.seen||(this.seen[e]=!0,this.list.push(e))},toDOM:function(){return this.list.join(\"
        \")}};var n=/[^a-zA-Z0-9\\-]/,i=/[^a-zA-Z0-9\\-]/g,o=/&(?!\\w+;)|[<>\"'`]/g,s=/[&<>\"'`]/,a=function(){var
        e=document.createElement(\"div\"),t=document.createElement(\"input\");return
        t.setAttribute(\"name\",\"foo\"),e.appendChild(t),!!e.innerHTML.match(\"foo\")}();Ember.RenderBuffer=function(e){return
        new Ember._RenderBuffer(e)},Ember._RenderBuffer=function(e){this.tagNames=[e||null],this.buffer=\"\"},Ember._RenderBuffer.prototype={_element:null,_hasElement:!0,elementClasses:null,classes:null,elementId:null,elementAttributes:null,elementProperties:null,elementTag:null,elementStyle:null,parentBuffer:null,push:function(e){return
        this.buffer+=e,this},addClass:function(e){return this.elementClasses=this.elementClasses||new
        r,this.elementClasses.add(e),this.classes=this.elementClasses.list,this},setClasses:function(e){this.classes=e},id:function(e){return
        this.elementId=e,this},attr:function(e,t){var r=this.elementAttributes=this.elementAttributes||{};return
        1===arguments.length?r[e]:(r[e]=t,this)},removeAttr:function(e){var t=this.elementAttributes;return
        t&&delete t[e],this},prop:function(e,t){var r=this.elementProperties=this.elementProperties||{};return
        1===arguments.length?r[e]:(r[e]=t,this)},removeProp:function(e){var t=this.elementProperties;return
        t&&delete t[e],this},style:function(e,t){return this.elementStyle=this.elementStyle||{},this.elementStyle[e]=t,this},begin:function(e){return
        this.tagNames.push(e||null),this},pushOpeningTag:function(){var r=this.currentTagName();if(r){if(this._hasElement&&!this._element&&0===this.buffer.length)return
        this._element=this.generateElement(),void 0;var n,i,o=this.buffer,s=this.elementId,a=this.classes,u=this.elementAttributes,c=this.elementProperties,l=this.elementStyle;if(o+=\"<\"+e(r),s&&(o+='
        id=\"'+t(s)+'\"',this.elementId=null),a&&(o+=' class=\"'+t(a.join(\" \"))+'\"',this.classes=null),l){o+='
        style=\"';for(i in l)l.hasOwnProperty(i)&&(o+=i+\":\"+t(l[i])+\";\");o+='\"',this.elementStyle=null}if(u){for(n
        in u)u.hasOwnProperty(n)&&(o+=\" \"+n+'=\"'+t(u[n])+'\"');this.elementAttributes=null}if(c){for(i
        in c)if(c.hasOwnProperty(i)){var h=c[i];(h||\"number\"==typeof h)&&(o+=h===!0?\"
        \"+i+'=\"'+i+'\"':\" \"+i+'=\"'+t(c[i])+'\"')}this.elementProperties=null}o+=\">\",this.buffer=o}},pushClosingTag:function(){var
        t=this.tagNames.pop();t&&(this.buffer+=\"</\"+e(t)+\">\")},currentTagName:function(){return
        this.tagNames[this.tagNames.length-1]},generateElement:function(){var r,n,i,o=this.tagNames.pop(),s=this.elementId,u=this.classes,c=this.elementAttributes,l=this.elementProperties,h=this.elementStyle,m=\"\";i=c&&c.name&&!a?\"<\"+e(o)+'
        name=\"'+t(c.name)+'\">':o;var f=document.createElement(i),p=Ember.$(f);if(s&&(p.attr(\"id\",s),this.elementId=null),u&&(p.attr(\"class\",u.join(\"
        \")),this.classes=null),h){for(n in h)h.hasOwnProperty(n)&&(m+=n+\":\"+h[n]+\";\");p.attr(\"style\",m),this.elementStyle=null}if(c){for(r
        in c)c.hasOwnProperty(r)&&p.attr(r,c[r]);this.elementAttributes=null}if(l){for(n
        in l)l.hasOwnProperty(n)&&p.prop(n,l[n]);this.elementProperties=null}return
        f},element:function(){var e=this.innerString();return e&&(this._element=Ember.ViewUtils.setInnerHTML(this._element,e)),this._element},string:function(){if(this._hasElement&&this._element){var
        e=this.element(),t=e.outerHTML;return\"undefined\"==typeof t?Ember.$(\"<div/>\").append(e).html():t}return
        this.innerString()},innerString:function(){return this.buffer}}}(),function(){var
        e=Ember.get,t=Ember.set;Ember.String.fmt,Ember.EventDispatcher=Ember.Object.extend({events:{touchstart:\"touchStart\",touchmove:\"touchMove\",touchend:\"touchEnd\",touchcancel:\"touchCancel\",keydown:\"keyDown\",keyup:\"keyUp\",keypress:\"keyPress\",mousedown:\"mouseDown\",mouseup:\"mouseUp\",contextmenu:\"contextMenu\",click:\"click\",dblclick:\"doubleClick\",mousemove:\"mouseMove\",focusin:\"focusIn\",focusout:\"focusOut\",mouseenter:\"mouseEnter\",mouseleave:\"mouseLeave\",submit:\"submit\",input:\"input\",change:\"change\",dragstart:\"dragStart\",drag:\"drag\",dragenter:\"dragEnter\",dragleave:\"dragLeave\",dragover:\"dragOver\",drop:\"drop\",dragend:\"dragEnd\"},rootElement:\"body\",setup:function(r,n){var
        i,o=e(this,\"events\");Ember.$.extend(o,r||{}),Ember.isNone(n)||t(this,\"rootElement\",n),n=Ember.$(e(this,\"rootElement\")),n.addClass(\"ember-application\");for(i
        in o)o.hasOwnProperty(i)&&this.setupHandler(n,i,o[i])},setupHandler:function(e,t,r){var
        n=this;e.on(t+\".ember\",\".ember-view\",function(e,t){return Ember.handleErrors(function(){var
        i=Ember.View.views[this.id],o=!0,s=null;return s=n._findNearestEventManager(i,r),s&&s!==t?o=n._dispatchEvent(s,e,r,i):i?o=n._bubbleEvent(i,e,r):e.stopPropagation(),o},this)}),e.on(t+\".ember\",\"[data-ember-action]\",function(e){return
        Ember.handleErrors(function(){var t=Ember.$(e.currentTarget).attr(\"data-ember-action\"),n=Ember.Handlebars.ActionHelper.registeredActions[t];return
        n&&n.eventName===r?n.handler(e):void 0},this)})},_findNearestEventManager:function(t,r){for(var
        n=null;t&&(n=e(t,\"eventManager\"),!n||!n[r]);)t=e(t,\"parentView\");return
        n},_dispatchEvent:function(e,t,r,n){var i=!0,o=e[r];return\"function\"===Ember.typeOf(o)?(i=Ember.run(function(){return
        o.call(e,t,n)}),t.stopPropagation()):i=this._bubbleEvent(n,t,r),i},_bubbleEvent:function(e,t,r){return
        Ember.run(function(){return e.handleEvent(r,t)})},destroy:function(){var t=e(this,\"rootElement\");return
        Ember.$(t).off(\".ember\",\"**\").removeClass(\"ember-application\"),this._super()}})}(),function(){var
        e=Ember.run.queues,t=Ember.ArrayPolyfills.indexOf;e.splice(t.call(e,\"actions\")+1,0,\"render\",\"afterRender\")}(),function(){var
        e=Ember.get,t=Ember.set;Ember.ControllerMixin.reopen({target:null,namespace:null,view:null,container:null,_childContainers:null,init:function(){this._super(),t(this,\"_childContainers\",{})},_modelDidChange:Ember.observer(function(){var
        r=e(this,\"_childContainers\");for(var n in r)r.hasOwnProperty(n)&&r[n].destroy();t(this,\"_childContainers\",{})},\"model\")})}(),function(){function
        e(){Ember.run.once(Ember.View,\"notifyMutationListeners\")}var t={},r=Ember.get,n=Ember.set,i=Ember.guidFor,o=Ember.EnumerableUtils.forEach,s=Ember.EnumerableUtils.addObject,a=Ember.meta,u=Ember.computed(function(){var
        e=this._childViews,t=Ember.A(),n=this;return o(e,function(e){var n;e.isVirtual?(n=r(e,\"childViews\"))&&t.pushObjects(n):t.push(e)}),t.replace=function(e,t,r){if(n
        instanceof Ember.ContainerView)return n.replace(e,t,r);throw new Ember.Error(\"childViews
        is immutable\")},t});Ember.TEMPLATES={},Ember.CoreView=Ember.Object.extend(Ember.Evented,Ember.ActionHandler,{isView:!0,states:t,init:function(){this._super(),this.transitionTo(\"preRender\")},parentView:Ember.computed(function(){var
        e=this._parentView;return e&&e.isVirtual?r(e,\"parentView\"):e}).property(\"_parentView\"),state:null,_parentView:null,concreteView:Ember.computed(function(){return
        this.isVirtual?r(this,\"parentView\"):this}).property(\"parentView\"),instrumentName:\"core_view\",instrumentDetails:function(e){e.object=this.toString()},renderToBuffer:function(e,t){var
        r=\"render.\"+this.instrumentName,n={};return this.instrumentDetails(n),Ember.instrument(r,n,function(){return
        this._renderToBuffer(e,t)},this)},_renderToBuffer:function(e){var t=this.tagName;(null===t||void
        0===t)&&(t=\"div\");var r=this.buffer=e&&e.begin(t)||Ember.RenderBuffer(t);return
        this.transitionTo(\"inBuffer\",!1),this.beforeRender(r),this.render(r),this.afterRender(r),r},trigger:function(e){this._super.apply(this,arguments);var
        t=this[e];if(t){var r,n,i=[];for(r=1,n=arguments.length;n>r;r++)i.push(arguments[r]);return
        t.apply(this,i)}},deprecatedSendHandles:function(e){return!!this[e]},deprecatedSend:function(e){var
        t=[].slice.call(arguments,1);this[e].apply(this,t)},has:function(e){return\"function\"===Ember.typeOf(this[e])||this._super(e)},destroy:function(){var
        e=this._parentView;if(this._super())return this.removedFromDOM||this.destroyElement(),e&&e.removeChild(this),this.transitionTo(\"destroying\",!1),this},clearRenderedChildren:Ember.K,triggerRecursively:Ember.K,invokeRecursively:Ember.K,transitionTo:Ember.K,destroyElement:Ember.K});var
        c=Ember._ViewCollection=function(e){var t=this.views=e||[];this.length=t.length};c.prototype={length:0,trigger:function(e){for(var
        t,r=this.views,n=0,i=r.length;i>n;n++)t=r[n],t.trigger&&t.trigger(e)},triggerRecursively:function(e){for(var
        t=this.views,r=0,n=t.length;n>r;r++)t[r].triggerRecursively(e)},invokeRecursively:function(e){for(var
        t,r=this.views,n=0,i=r.length;i>n;n++)t=r[n],e(t)},transitionTo:function(e,t){for(var
        r=this.views,n=0,i=r.length;i>n;n++)r[n].transitionTo(e,t)},push:function(){this.length+=arguments.length;var
        e=this.views;return e.push.apply(e,arguments)},objectAt:function(e){return
        this.views[e]},forEach:function(e){var t=this.views;return o(t,e)},clear:function(){this.length=0,this.views.length=0}};var
        l=[];Ember.View=Ember.CoreView.extend({concatenatedProperties:[\"classNames\",\"classNameBindings\",\"attributeBindings\"],isView:!0,templateName:null,layoutName:null,templates:Ember.TEMPLATES,template:Ember.computed(function(e,t){if(void
        0!==t)return t;var n=r(this,\"templateName\"),i=this.templateForName(n,\"template\");return
        i||r(this,\"defaultTemplate\")}).property(\"templateName\"),controller:Ember.computed(function(){var
        e=r(this,\"_parentView\");return e?r(e,\"controller\"):null}).property(\"_parentView\"),layout:Ember.computed(function(){var
        e=r(this,\"layoutName\"),t=this.templateForName(e,\"layout\");return t||r(this,\"defaultLayout\")}).property(\"layoutName\"),_yield:function(e,t){var
        n=r(this,\"template\");n&&n(e,t)},templateForName:function(e){if(e){var t=this.container||Ember.Container&&Ember.Container.defaultContainer;\nreturn
        t&&t.lookup(\"template:\"+e)}},context:Ember.computed(function(e,t){return
        2===arguments.length?(n(this,\"_context\",t),t):r(this,\"_context\")}).volatile(),_context:Ember.computed(function(){var
        e,t;return(t=r(this,\"controller\"))?t:(e=this._parentView,e?r(e,\"_context\"):null)}),_contextDidChange:Ember.observer(function(){this.rerender()},\"context\"),isVisible:!0,childViews:u,_childViews:l,_childViewsWillChange:Ember.beforeObserver(function(){if(this.isVirtual){var
        e=r(this,\"parentView\");e&&Ember.propertyWillChange(e,\"childViews\")}},\"childViews\"),_childViewsDidChange:Ember.observer(function(){if(this.isVirtual){var
        e=r(this,\"parentView\");e&&Ember.propertyDidChange(e,\"childViews\")}},\"childViews\"),nearestInstanceOf:function(e){for(var
        t=r(this,\"parentView\");t;){if(t instanceof e)return t;t=r(t,\"parentView\")}},nearestOfType:function(e){for(var
        t=r(this,\"parentView\"),n=e instanceof Ember.Mixin?function(t){return e.detect(t)}:function(t){return
        e.detect(t.constructor)};t;){if(n(t))return t;t=r(t,\"parentView\")}},nearestWithProperty:function(e){for(var
        t=r(this,\"parentView\");t;){if(e in t)return t;t=r(t,\"parentView\")}},nearestChildOf:function(e){for(var
        t=r(this,\"parentView\");t;){if(r(t,\"parentView\")instanceof e)return t;t=r(t,\"parentView\")}},_parentViewDidChange:Ember.observer(function(){this.isDestroying||(this.trigger(\"parentViewDidChange\"),r(this,\"parentView.controller\")&&!r(this,\"controller\")&&this.notifyPropertyChange(\"controller\"))},\"_parentView\"),_controllerDidChange:Ember.observer(function(){this.isDestroying||(this.rerender(),this.forEachChildView(function(e){e.propertyDidChange(\"controller\")}))},\"controller\"),cloneKeywords:function(){var
        e=r(this,\"templateData\"),t=e?Ember.copy(e.keywords):{};return n(t,\"view\",r(this,\"concreteView\")),n(t,\"_view\",this),n(t,\"controller\",r(this,\"controller\")),t},render:function(e){var
        t=r(this,\"layout\")||r(this,\"template\");if(t){var n,i=r(this,\"context\"),o=this.cloneKeywords(),s={view:this,buffer:e,isRenderData:!0,keywords:o,insideGroup:r(this,\"templateData.insideGroup\")};n=t(i,{data:s}),void
        0!==n&&e.push(n)}},rerender:function(){return this.currentState.rerender(this)},clearRenderedChildren:function(){for(var
        e=this.lengthBeforeRender,t=this.lengthAfterRender,r=this._childViews,n=t-1;n>=e;n--)r[n]&&r[n].destroy()},_applyClassNameBindings:function(e){var
        t,r,n,i=this.classNames;o(e,function(e){var o,a=Ember.View._parsePropertyPath(e),u=function(){r=this._classStringForProperty(e),t=this.$(),o&&(t.removeClass(o),i.removeObject(o)),r?(t.addClass(r),o=r):o=null};n=this._classStringForProperty(e),n&&(s(i,n),o=n),this.registerObserver(this,a.path,u),this.one(\"willClearRender\",function(){o&&(i.removeObject(o),o=null)})},this)},_applyAttributeBindings:function(e,t){var
        n,i;o(t,function(t){var o=t.split(\":\"),s=o[0],a=o[1]||s,u=function(){i=this.$(),n=r(this,s),Ember.View.applyAttributeBindings(i,a,n)};this.registerObserver(this,s,u),n=r(this,s),Ember.View.applyAttributeBindings(e,a,n)},this)},_classStringForProperty:function(e){var
        t=Ember.View._parsePropertyPath(e),n=t.path,i=r(this,n);return void 0===i&&Ember.isGlobalPath(n)&&(i=r(Ember.lookup,n)),Ember.View._classStringForValue(n,i,t.className,t.falsyClassName)},element:Ember.computed(function(e,t){return
        void 0!==t?this.currentState.setElement(this,t):this.currentState.getElement(this)}).property(\"_parentView\"),$:function(e){return
        this.currentState.$(this,e)},mutateChildViews:function(e){for(var t,r=this._childViews,n=r.length;--n>=0;)t=r[n],e(this,t,n);return
        this},forEachChildView:function(e){var t=this._childViews;if(!t)return this;var
        r,n,i=t.length;for(n=0;i>n;n++)r=t[n],e(r);return this},appendTo:function(e){return
        this._insertElementLater(function(){this.$().appendTo(e)}),this},replaceIn:function(e){return
        this._insertElementLater(function(){Ember.$(e).empty(),this.$().appendTo(e)}),this},_insertElementLater:function(e){this._scheduledInsert=Ember.run.scheduleOnce(\"render\",this,\"_insertElement\",e)},_insertElement:function(e){this._scheduledInsert=null,this.currentState.insertElement(this,e)},append:function(){return
        this.appendTo(document.body)},remove:function(){this.removedFromDOM||this.destroyElement(),this.invokeRecursively(function(e){e.clearRenderedChildren&&e.clearRenderedChildren()})},elementId:null,findElementInParentElement:function(e){var
        t=\"#\"+this.elementId;return Ember.$(t)[0]||Ember.$(t,e)[0]},createElement:function(){if(r(this,\"element\"))return
        this;var e=this.renderToBuffer();return n(this,\"element\",e.element()),this},willInsertElement:Ember.K,didInsertElement:Ember.K,willClearRender:Ember.K,invokeRecursively:function(e,t){for(var
        r,n,i,o=t===!1?this._childViews:[this];o.length;){r=o.slice(),o=[];for(var
        s=0,a=r.length;a>s;s++)n=r[s],i=n._childViews?n._childViews.slice(0):null,e(n),i&&o.push.apply(o,i)}},triggerRecursively:function(e){for(var
        t,r,n,i=[this];i.length;){t=i.slice(),i=[];for(var o=0,s=t.length;s>o;o++)r=t[o],n=r._childViews?r._childViews.slice(0):null,r.trigger&&r.trigger(e),n&&i.push.apply(i,n)}},viewHierarchyCollection:function(){for(var
        e,t=new c([this]),r=0;r<t.length;r++)e=t.objectAt(r),e._childViews&&t.push.apply(t,e._childViews);return
        t},destroyElement:function(){return this.currentState.destroyElement(this)},willDestroyElement:Ember.K,_notifyWillDestroyElement:function(){var
        e=this.viewHierarchyCollection();return e.trigger(\"willClearRender\"),e.trigger(\"willDestroyElement\"),e},_elementDidChange:Ember.observer(function(){this.forEachChildView(function(e){delete
        a(e).cache.element})},\"element\"),parentViewDidChange:Ember.K,instrumentName:\"view\",instrumentDetails:function(e){e.template=r(this,\"templateName\"),this._super(e)},_renderToBuffer:function(e,t){this.lengthBeforeRender=this._childViews.length;var
        r=this._super(e,t);return this.lengthAfterRender=this._childViews.length,r},renderToBufferIfNeeded:function(e){return
        this.currentState.renderToBufferIfNeeded(this,e)},beforeRender:function(e){this.applyAttributesToBuffer(e),e.pushOpeningTag()},afterRender:function(e){e.pushClosingTag()},applyAttributesToBuffer:function(e){var
        t=r(this,\"classNameBindings\");t.length&&this._applyClassNameBindings(t);var
        n=r(this,\"attributeBindings\");n.length&&this._applyAttributeBindings(e,n),e.setClasses(this.classNames),e.id(this.elementId);var
        i=r(this,\"ariaRole\");i&&e.attr(\"role\",i),r(this,\"isVisible\")===!1&&e.style(\"display\",\"none\")},tagName:null,ariaRole:null,classNames:[\"ember-view\"],classNameBindings:l,attributeBindings:l,init:function(){this.elementId=this.elementId||i(this),this._super(),this._childViews=this._childViews.slice(),this.classNameBindings=Ember.A(this.classNameBindings.slice()),this.classNames=Ember.A(this.classNames.slice())},appendChild:function(e,t){return
        this.currentState.appendChild(this,e,t)},removeChild:function(e){if(!this.isDestroying){n(e,\"_parentView\",null);var
        t=this._childViews;return Ember.EnumerableUtils.removeObject(t,e),this.propertyDidChange(\"childViews\"),this}},removeAllChildren:function(){return
        this.mutateChildViews(function(e,t){e.removeChild(t)})},destroyAllChildren:function(){return
        this.mutateChildViews(function(e,t){t.destroy()})},removeFromParent:function(){var
        e=this._parentView;return this.remove(),e&&e.removeChild(this),this},destroy:function(){var
        e,t,n=this._childViews,i=r(this,\"parentView\"),o=this.viewName;if(this._super()){for(e=n.length,t=e-1;t>=0;t--)n[t].removedFromDOM=!0;for(o&&i&&i.set(o,null),e=n.length,t=e-1;t>=0;t--)n[t].destroy();return
        this}},createChildView:function(e,t){if(!e)throw new TypeError(\"createChildViews
        first argument must exist\");if(e.isView&&e._parentView===this&&e.container===this.container)return
        e;if(t=t||{},t._parentView=this,Ember.CoreView.detect(e))t.templateData=t.templateData||r(this,\"templateData\"),t.container=this.container,e=e.create(t),e.viewName&&n(r(this,\"concreteView\"),e.viewName,e);else
        if(\"string\"==typeof e){var i=\"view:\"+e,o=this.container.lookupFactory(i);t.templateData=r(this,\"templateData\"),e=o.create(t)}else
        t.container=this.container,r(e,\"templateData\")||(t.templateData=r(this,\"templateData\")),Ember.setProperties(e,t);return
        e},becameVisible:Ember.K,becameHidden:Ember.K,_isVisibleDidChange:Ember.observer(function(){var
        e=this.$();if(e){var t=r(this,\"isVisible\");e.toggle(t),this._isAncestorHidden()||(t?this._notifyBecameVisible():this._notifyBecameHidden())}},\"isVisible\"),_notifyBecameVisible:function(){this.trigger(\"becameVisible\"),this.forEachChildView(function(e){var
        t=r(e,\"isVisible\");(t||null===t)&&e._notifyBecameVisible()})},_notifyBecameHidden:function(){this.trigger(\"becameHidden\"),this.forEachChildView(function(e){var
        t=r(e,\"isVisible\");(t||null===t)&&e._notifyBecameHidden()})},_isAncestorHidden:function(){for(var
        e=r(this,\"parentView\");e;){if(r(e,\"isVisible\")===!1)return!0;e=r(e,\"parentView\")}return!1},clearBuffer:function(){this.invokeRecursively(function(e){e.buffer=null})},transitionTo:function(e,t){var
        r=this.currentState,n=this.currentState=this.states[e];this.state=e,r&&r.exit&&r.exit(this),n.enter&&n.enter(this),\"inDOM\"===e&&delete
        Ember.meta(this).cache.element,t!==!1&&this.forEachChildView(function(t){t.transitionTo(e)})},handleEvent:function(e,t){return
        this.currentState.handleEvent(this,e,t)},registerObserver:function(e,t,r,n){if(n||\"function\"!=typeof
        r||(n=r,r=null),e&&\"object\"==typeof e){var i=this,o=function(){i.currentState.invokeObserver(this,n)},s=function(){Ember.run.scheduleOnce(\"render\",this,o)};Ember.addObserver(e,t,r,s),this.one(\"willClearRender\",function(){Ember.removeObserver(e,t,r,s)})}}});var
        h={prepend:function(t,r){t.$().prepend(r),e()},after:function(t,r){t.$().after(r),e()},html:function(t,r){t.$().html(r),e()},replace:function(t){var
        i=r(t,\"element\");n(t,\"element\",null),t._insertElementLater(function(){Ember.$(i).replaceWith(r(t,\"element\")),e()})},remove:function(t){t.$().remove(),e()},empty:function(t){t.$().empty(),e()}};Ember.View.reopen({domManager:h}),Ember.View.reopenClass({_parsePropertyPath:function(e){var
        t,r,n=e.split(\":\"),i=n[0],o=\"\";return n.length>1&&(t=n[1],3===n.length&&(r=n[2]),o=\":\"+t,r&&(o+=\":\"+r)),{path:i,classNames:o,className:\"\"===t?void
        0:t,falsyClassName:r}},_classStringForValue:function(e,t,r,n){if(r||n)return
        r&&t?r:n&&!t?n:null;if(t===!0){var i=e.split(\".\");return Ember.String.dasherize(i[i.length-1])}return
        t!==!1&&null!=t?t:null}});var m=Ember.Object.extend(Ember.Evented).create();Ember.View.addMutationListener=function(e){m.on(\"change\",e)},Ember.View.removeMutationListener=function(e){m.off(\"change\",e)},Ember.View.notifyMutationListeners=function(){m.trigger(\"change\")},Ember.View.views={},Ember.View.childViewsProperty=u,Ember.View.applyAttributeBindings=function(e,t,r){var
        n=Ember.typeOf(r);\"value\"===t||\"string\"!==n&&(\"number\"!==n||isNaN(r))?\"value\"===t||\"boolean\"===n?(Ember.isNone(r)&&(r=\"\"),r!==e.prop(t)&&e.prop(t,r)):r||e.removeAttr(t):r!==e.attr(t)&&e.attr(t,r)},Ember.View.states=t}(),function(){var
        e=(Ember.get,Ember.set);Ember.View.states._default={appendChild:function(){throw\"You
        can't use appendChild outside of the rendering process\"},$:function(){return
        void 0},getElement:function(){return null},handleEvent:function(){return!0},destroyElement:function(t){return
        e(t,\"element\",null),t._scheduledInsert&&(Ember.run.cancel(t._scheduledInsert),t._scheduledInsert=null),t},renderToBufferIfNeeded:function(){return!1},rerender:Ember.K,invokeObserver:Ember.K}}(),function(){var
        e=Ember.View.states.preRender=Ember.create(Ember.View.states._default);Ember.merge(e,{insertElement:function(e,t){e.createElement();var
        r=e.viewHierarchyCollection();r.trigger(\"willInsertElement\"),t.call(e);for(var
        n=e.get(\"element\");n=n.parentNode;)n===document&&(r.transitionTo(\"inDOM\",!1),r.trigger(\"didInsertElement\"))},renderToBufferIfNeeded:function(e,t){return
        e.renderToBuffer(t),!0},empty:Ember.K,setElement:function(e,t){return null!==t&&e.transitionTo(\"hasElement\"),t}})}(),function(){Ember.get,Ember.set;var
        e=Ember.View.states.inBuffer=Ember.create(Ember.View.states._default);Ember.merge(e,{$:function(e){return
        e.rerender(),Ember.$()},rerender:function(){throw new Ember.Error(\"Something
        you did caused a view to re-render after it rendered but before it was inserted
        into the DOM.\")},appendChild:function(e,t,r){var n=e.buffer,i=e._childViews;return
        t=e.createChildView(t,r),i.length||(i=e._childViews=i.slice()),i.push(t),t.renderToBuffer(n),e.propertyDidChange(\"childViews\"),t},destroyElement:function(e){e.clearBuffer();var
        t=e._notifyWillDestroyElement();return t.transitionTo(\"preRender\",!1),e},empty:function(){},renderToBufferIfNeeded:function(){return!1},insertElement:function(){throw\"You
        can't insert an element that has already been rendered\"},setElement:function(e,t){return
        null===t?e.transitionTo(\"preRender\"):(e.clearBuffer(),e.transitionTo(\"hasElement\")),t},invokeObserver:function(e,t){t.call(e)}})}(),function(){var
        e=Ember.get,t=Ember.set,r=Ember.View.states.hasElement=Ember.create(Ember.View.states._default);Ember.merge(r,{$:function(t,r){var
        n=e(t,\"element\");return r?Ember.$(r,n):Ember.$(n)},getElement:function(t){var
        r=e(t,\"parentView\");return r&&(r=e(r,\"element\")),r?t.findElementInParentElement(r):Ember.$(\"#\"+e(t,\"elementId\"))[0]},setElement:function(e,t){if(null!==t)throw\"You
        cannot set an element to a non-null value when the element is already in the
        DOM.\";return e.transitionTo(\"preRender\"),t},rerender:function(e){return
        e.triggerRecursively(\"willClearRender\"),e.clearRenderedChildren(),e.domManager.replace(e),e},destroyElement:function(e){return
        e._notifyWillDestroyElement(),e.domManager.remove(e),t(e,\"element\",null),e._scheduledInsert&&(Ember.run.cancel(e._scheduledInsert),e._scheduledInsert=null),e},empty:function(e){var
        t,r,n=e._childViews;if(n)for(t=n.length,r=0;t>r;r++)n[r]._notifyWillDestroyElement();e.domManager.empty(e)},handleEvent:function(e,t,r){return
        e.has(t)?e.trigger(t,r):!0},invokeObserver:function(e,t){t.call(e)}});var
        n=Ember.View.states.inDOM=Ember.create(r);Ember.merge(n,{enter:function(e){e.isVirtual||(Ember.View.views[e.elementId]=e),e.addBeforeObserver(\"elementId\",function(){throw
        new Ember.Error(\"Changing a view's elementId after creation is not allowed\")})},exit:function(e){this.isVirtual||delete
        Ember.View.views[e.elementId]},insertElement:function(){throw\"You can't insert
        an element into the DOM that has already been inserted\"}})}(),function(){var
        e=\"You can't call %@ on a view being destroyed\",t=Ember.String.fmt,r=Ember.View.states.destroying=Ember.create(Ember.View.states._default);Ember.merge(r,{appendChild:function(){throw
        t(e,[\"appendChild\"])},rerender:function(){throw t(e,[\"rerender\"])},destroyElement:function(){throw
        t(e,[\"destroyElement\"])},empty:function(){throw t(e,[\"empty\"])},setElement:function(){throw
        t(e,[\"set('element', ...)\"])},renderToBufferIfNeeded:function(){return!1},insertElement:Ember.K})}(),function(){Ember.View.cloneStates=function(e){var
        t={};t._default={},t.preRender=Ember.create(t._default),t.destroying=Ember.create(t._default),t.inBuffer=Ember.create(t._default),t.hasElement=Ember.create(t._default),t.inDOM=Ember.create(t.hasElement);for(var
        r in e)e.hasOwnProperty(r)&&Ember.merge(t[r],e[r]);return t}}(),function(){function
        e(e,t,r,n){t.triggerRecursively(\"willInsertElement\"),r?r.domManager.after(r,n.string()):e.domManager.prepend(e,n.string()),t.forEach(function(e){e.transitionTo(\"inDOM\"),e.propertyDidChange(\"element\"),e.triggerRecursively(\"didInsertElement\")})}var
        t=Ember.View.cloneStates(Ember.View.states),r=Ember.get,n=Ember.set,i=Ember.EnumerableUtils.forEach,o=Ember._ViewCollection;Ember.ContainerView=Ember.View.extend(Ember.MutableArray,{states:t,init:function(){this._super();var
        e=r(this,\"childViews\");Ember.defineProperty(this,\"childViews\",Ember.View.childViewsProperty);var
        t=this._childViews;i(e,function(e,i){var o;\"string\"==typeof e?(o=r(this,e),o=this.createChildView(o),n(this,e,o)):o=this.createChildView(e),t[i]=o},this);var
        o=r(this,\"currentView\");o&&(t.length||(t=this._childViews=this._childViews.slice()),t.push(this.createChildView(o)))},replace:function(e,t,n){var
        i=n?r(n,\"length\"):0;if(this.arrayContentWillChange(e,t,i),this.childViewsWillChange(this._childViews,e,t),0===i)this._childViews.splice(e,t);else{var
        o=[e,t].concat(n);n.length&&!this._childViews.length&&(this._childViews=this._childViews.slice()),this._childViews.splice.apply(this._childViews,o)}return
        this.arrayContentDidChange(e,t,i),this.childViewsDidChange(this._childViews,e,t,i),this},objectAt:function(e){return
        this._childViews[e]},length:Ember.computed(function(){return this._childViews.length}).volatile(),render:function(e){this.forEachChildView(function(t){t.renderToBuffer(e)})},instrumentName:\"container\",childViewsWillChange:function(e,t,r){if(this.propertyWillChange(\"childViews\"),r>0){var
        n=e.slice(t,t+r);this.currentState.childViewsWillChange(this,e,t,r),this.initializeViews(n,null,null)}},removeChild:function(e){return
        this.removeObject(e),this},childViewsDidChange:function(e,t,n,i){if(i>0){var
        o=e.slice(t,t+i);this.initializeViews(o,this,r(this,\"templateData\")),this.currentState.childViewsDidChange(this,e,t,i)}this.propertyDidChange(\"childViews\")},initializeViews:function(e,t,o){i(e,function(e){n(e,\"_parentView\",t),!e.container&&t&&n(e,\"container\",t.container),r(e,\"templateData\")||n(e,\"templateData\",o)})},currentView:null,_currentViewWillChange:Ember.beforeObserver(function(){var
        e=r(this,\"currentView\");e&&e.destroy()},\"currentView\"),_currentViewDidChange:Ember.observer(function(){var
        e=r(this,\"currentView\");e&&this.pushObject(e)},\"currentView\"),_ensureChildrenAreInDOM:function(){this.currentState.ensureChildrenAreInDOM(this)}}),Ember.merge(t._default,{childViewsWillChange:Ember.K,childViewsDidChange:Ember.K,ensureChildrenAreInDOM:Ember.K}),Ember.merge(t.inBuffer,{childViewsDidChange:function(){throw
        new Ember.Error(\"You cannot modify child views while in the inBuffer state\")}}),Ember.merge(t.hasElement,{childViewsWillChange:function(e,t,r,n){for(var
        i=r;r+n>i;i++)t[i].remove()},childViewsDidChange:function(e){Ember.run.scheduleOnce(\"render\",e,\"_ensureChildrenAreInDOM\")},ensureChildrenAreInDOM:function(t){var
        r,n,i,s,a,u=t._childViews,c=new o;for(r=0,n=u.length;n>r;r++)i=u[r],a||(a=Ember.RenderBuffer(),a._hasElement=!1),i.renderToBufferIfNeeded(a)?c.push(i):c.length?(e(t,c,s,a),a=null,s=i,c.clear()):s=i;c.length&&e(t,c,s,a)}})}(),function(){var
        e=Ember.get,t=Ember.set;Ember.String.fmt,Ember.CollectionView=Ember.ContainerView.extend({content:null,emptyViewClass:Ember.View,emptyView:null,itemViewClass:Ember.View,init:function(){var
        e=this._super();return this._contentDidChange(),e},_contentWillChange:Ember.beforeObserver(function(){var
        t=this.get(\"content\");t&&t.removeArrayObserver(this);var r=t?e(t,\"length\"):0;this.arrayWillChange(t,0,r)},\"content\"),_contentDidChange:Ember.observer(function(){var
        t=e(this,\"content\");t&&(this._assertArrayLike(t),t.addArrayObserver(this));var
        r=t?e(t,\"length\"):0;this.arrayDidChange(t,0,null,r)},\"content\"),_assertArrayLike:function(){},destroy:function(){if(this._super()){var
        t=e(this,\"content\");return t&&t.removeArrayObserver(this),this._createdEmptyView&&this._createdEmptyView.destroy(),this}},arrayWillChange:function(t,r,n){var
        i=e(this,\"emptyView\");i&&i instanceof Ember.View&&i.removeFromParent();var
        o,s,a,u=this._childViews;a=this._childViews.length;var c=n===a;for(c&&(this.currentState.empty(this),this.invokeRecursively(function(e){e.removedFromDOM=!0},!1)),s=r+n-1;s>=r;s--)o=u[s],o.destroy()},arrayDidChange:function(r,n,i,o){var
        s,a,u,c,l,h,m=[];if(c=r?e(r,\"length\"):0)for(l=e(this,\"itemViewClass\"),\"string\"==typeof
        l&&(l=e(l)||l),u=n;n+o>u;u++)a=r.objectAt(u),s=this.createChildView(l,{content:a,contentIndex:u}),m.push(s);else{if(h=e(this,\"emptyView\"),!h)return;\"string\"==typeof
        h&&(h=e(h)||h),h=this.createChildView(h),m.push(h),t(this,\"emptyView\",h),Ember.CoreView.detect(h)&&(this._createdEmptyView=h)}this.replace(n,0,m)},createChildView:function(r,n){r=this._super(r,n);var
        i=e(r,\"tagName\");return(null===i||void 0===i)&&(i=Ember.CollectionView.CONTAINER_MAP[e(this,\"tagName\")],t(r,\"tagName\",i)),r}}),Ember.CollectionView.CONTAINER_MAP={ul:\"li\",ol:\"li\",table:\"tr\",thead:\"tr\",tbody:\"tr\",tfoot:\"tr\",tr:\"td\",select:\"option\"}}(),function(){var
        e=Ember.get,t=Ember.set,r=(Ember.isNone,Array.prototype.slice);Ember.Component=Ember.View.extend(Ember.TargetActionSupport,{init:function(){this._super(),t(this,\"context\",this),t(this,\"controller\",this)},cloneKeywords:function(){return{view:this,controller:this}},_yield:function(t,r){var
        n=r.data.view,i=this._parentView,o=e(this,\"template\");o&&n.appendChild(Ember.View,{isVirtual:!0,tagName:\"\",_contextView:i,template:o,context:e(i,\"context\"),controller:e(i,\"controller\"),templateData:{keywords:i.cloneKeywords()}})},targetObject:Ember.computed(function(){var
        t=e(this,\"_parentView\");return t?e(t,\"controller\"):null}).property(\"_parentView\"),sendAction:function(t){var
        n,i=r.call(arguments,1);n=void 0===t?e(this,\"action\"):e(this,t),void 0!==n&&this.triggerAction({action:n,actionContext:i})}})}(),function(){Ember.ViewTargetActionSupport=Ember.Mixin.create(Ember.TargetActionSupport,{target:Ember.computed.alias(\"controller\"),actionContext:Ember.computed.alias(\"context\")})}(),function(){e(\"metamorph\",[],function(){\"use
        strict\";// Copyright: ©2011 My Company Inc. All rights reserved.\nvar e=function(){},t=0,r=this.document,n=(\"undefined\"==typeof
        ENV?{}:ENV).DISABLE_RANGE_API,i=!n&&r&&\"createRange\"in r&&\"undefined\"!=typeof
        Range&&Range.prototype.createContextualFragment,o=r&&function(){var e=r.createElement(\"div\");return
        e.innerHTML=\"<div></div>\",e.firstChild.innerHTML=\"<script></script>\",\"\"===e.firstChild.innerHTML}(),s=r&&function(){var
        e=r.createElement(\"div\");return e.innerHTML=\"Test: <script type='text/x-placeholder'></script>Value\",\"Test:\"===e.childNodes[0].nodeValue&&\"
        Value\"===e.childNodes[2].nodeValue}(),a=function(r){var n;n=this instanceof
        a?this:new e,n.innerHTML=r;var i=\"metamorph-\"+t++;return n.start=i+\"-start\",n.end=i+\"-end\",n};e.prototype=a.prototype;var
        u,c,l,h,m,f,p,d,b;if(h=function(){return this.startTag()+this.innerHTML+this.endTag()},d=function(){return\"<script
        id='\"+this.start+\"' type='text/x-placeholder'></script>\"},b=function(){return\"<script
        id='\"+this.end+\"' type='text/x-placeholder'></script>\"},i)u=function(e,t){var
        n=r.createRange(),i=r.getElementById(e.start),o=r.getElementById(e.end);return
        t?(n.setStartBefore(i),n.setEndAfter(o)):(n.setStartAfter(i),n.setEndBefore(o)),n},c=function(e,t){var
        r=u(this,t);r.deleteContents();var n=r.createContextualFragment(e);r.insertNode(n)},l=function(){var
        e=u(this,!0);e.deleteContents()},m=function(e){var t=r.createRange();t.setStart(e),t.collapse(!1);var
        n=t.createContextualFragment(this.outerHTML());e.appendChild(n)},f=function(e){var
        t=r.createRange(),n=r.getElementById(this.end);t.setStartAfter(n),t.setEndAfter(n);var
        i=t.createContextualFragment(e);t.insertNode(i)},p=function(e){var t=r.createRange(),n=r.getElementById(this.start);t.setStartAfter(n),t.setEndAfter(n);var
        i=t.createContextualFragment(e);t.insertNode(i)};else{var E={select:[1,\"<select
        multiple='multiple'>\",\"</select>\"],fieldset:[1,\"<fieldset>\",\"</fieldset>\"],table:[1,\"<table>\",\"</table>\"],tbody:[2,\"<table><tbody>\",\"</tbody></table>\"],tr:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],colgroup:[2,\"<table><tbody></tbody><colgroup>\",\"</colgroup></table>\"],map:[1,\"<map>\",\"</map>\"],_default:[0,\"\",\"\"]},v=function(e,t){if(e.getAttribute(\"id\")===t)return
        e;var r,n,i,o=e.childNodes.length;for(r=0;o>r;r++)if(n=e.childNodes[r],i=1===n.nodeType&&v(n,t))return
        i},g=function(e,t){var n=[];if(s&&(t=t.replace(/(\\s+)(<script id='([^']+)')/g,function(e,t,r,i){return
        n.push([i,t]),r})),e.innerHTML=t,n.length>0){var i,o=n.length;for(i=0;o>i;i++){var
        a=v(e,n[i][0]),u=r.createTextNode(n[i][1]);a.parentNode.insertBefore(u,a)}}},y=function(e,t){var
        n=E[e.tagName.toLowerCase()]||E._default,i=n[0],s=n[1],a=n[2];o&&(t=\"&shy;\"+t);var
        u=r.createElement(\"div\");g(u,s+t+a);for(var c=0;i>=c;c++)u=u.firstChild;if(o){for(var
        l=u;1===l.nodeType&&!l.nodeName;)l=l.firstChild;3===l.nodeType&&\"­\"===l.nodeValue.charAt(0)&&(l.nodeValue=l.nodeValue.slice(1))}return
        u},w=function(e){for(;\"\"===e.parentNode.tagName;)e=e.parentNode;return e},_=function(e,t){e.parentNode!==t.parentNode&&t.parentNode.insertBefore(e,t.parentNode.firstChild)};c=function(e,t){var
        n,i,o,s=w(r.getElementById(this.start)),a=r.getElementById(this.end),u=a.parentNode;for(_(s,a),n=s.nextSibling;n;){if(i=n.nextSibling,o=n===a){if(!t)break;a=n.nextSibling}if(n.parentNode.removeChild(n),o)break;n=i}for(n=y(s.parentNode,e);n;)i=n.nextSibling,u.insertBefore(n,a),n=i},l=function(){var
        e=w(r.getElementById(this.start)),t=r.getElementById(this.end);this.html(\"\"),e.parentNode.removeChild(e),t.parentNode.removeChild(t)},m=function(e){for(var
        t,r=y(e,this.outerHTML());r;)t=r.nextSibling,e.appendChild(r),r=t},f=function(e){var
        t,n,i=r.getElementById(this.end),o=i.nextSibling,s=i.parentNode;for(n=y(s,e);n;)t=n.nextSibling,s.insertBefore(n,o),n=t},p=function(e){var
        t,n,i=r.getElementById(this.start),o=i.parentNode;n=y(o,e);for(var s=i.nextSibling;n;)t=n.nextSibling,o.insertBefore(n,s),n=t}}return
        a.prototype.html=function(e){return this.checkRemoved(),void 0===e?this.innerHTML:(c.call(this,e),this.innerHTML=e,void
        0)},a.prototype.replaceWith=function(e){this.checkRemoved(),c.call(this,e,!0)},a.prototype.remove=l,a.prototype.outerHTML=h,a.prototype.appendTo=m,a.prototype.after=f,a.prototype.prepend=p,a.prototype.startTag=d,a.prototype.endTag=b,a.prototype.isRemoved=function(){var
        e=r.getElementById(this.start),t=r.getElementById(this.end);return!e||!t},a.prototype.checkRemoved=function(){if(this.isRemoved())throw
        new Error(\"Cannot perform operations on a Metamorph that is not in the DOM.\")},a})}(),function(){var
        e=Object.create||function(e){function t(){}return t.prototype=e,new t},t=this.Handlebars||Ember.imports&&Ember.imports.Handlebars;t||\"function\"!=typeof
        require||(t=require(\"handlebars\")),Ember.Handlebars=e(t),Ember.Handlebars.helper=function(e,t){Ember.View.detect(t)?Ember.Handlebars.registerHelper(e,function(e){return
        Ember.Handlebars.helpers.view.call(this,t,e)}):Ember.Handlebars.registerBoundHelper.apply(null,arguments)},Ember.Handlebars.helpers=e(t.helpers),Ember.Handlebars.Compiler=function(){},t.Compiler&&(Ember.Handlebars.Compiler.prototype=e(t.Compiler.prototype)),Ember.Handlebars.Compiler.prototype.compiler=Ember.Handlebars.Compiler,Ember.Handlebars.JavaScriptCompiler=function(){},t.JavaScriptCompiler&&(Ember.Handlebars.JavaScriptCompiler.prototype=e(t.JavaScriptCompiler.prototype),Ember.Handlebars.JavaScriptCompiler.prototype.compiler=Ember.Handlebars.JavaScriptCompiler),Ember.Handlebars.JavaScriptCompiler.prototype.namespace=\"Ember.Handlebars\",Ember.Handlebars.JavaScriptCompiler.prototype.initializeBuffer=function(){return\"''\"},Ember.Handlebars.JavaScriptCompiler.prototype.appendToBuffer=function(e){return\"data.buffer.push(\"+e+\");\"};var
        r=\"ember\"+ +new Date,n=1;Ember.Handlebars.Compiler.prototype.mustache=function(e){if(e.isHelper&&\"control\"===e.id.string)e.hash=e.hash||new
        t.AST.HashNode([]),e.hash.pairs.push([\"controlID\",new t.AST.StringNode(r+n++)]);else
        if(e.params.length||e.hash);else{var i=new t.AST.IdNode([{part:\"_triageMustache\"}]);e.escaped||(e.hash=e.hash||new
        t.AST.HashNode([]),e.hash.pairs.push([\"unescaped\",new t.AST.StringNode(\"true\")])),e=new
        t.AST.MustacheNode([i].concat([e.id]),e.hash,!e.escaped)}return t.Compiler.prototype.mustache.call(this,e)},Ember.Handlebars.precompile=function(e){var
        r=t.parse(e),n={knownHelpers:{action:!0,unbound:!0,bindAttr:!0,template:!0,view:!0,_triageMustache:!0},data:!0,stringParams:!0},i=(new
        Ember.Handlebars.Compiler).compile(r,n);return(new Ember.Handlebars.JavaScriptCompiler).compile(i,n,void
        0,!0)},t.compile&&(Ember.Handlebars.compile=function(e){var r=t.parse(e),n={data:!0,stringParams:!0},i=(new
        Ember.Handlebars.Compiler).compile(r,n),o=(new Ember.Handlebars.JavaScriptCompiler).compile(i,n,void
        0,!0),s=Ember.Handlebars.template(o);return s.isMethod=!1,s})}(),function(){function
        e(e,t,r,n){var i,o,s,a,u=[],c=n.hash,l=c.boundOptions;for(a in l)l.hasOwnProperty(a)&&(c[a]=Ember.Handlebars.get(e,l[a],n));for(i=0,o=r.length;o>i;++i)s=r[i],u.push(Ember.Handlebars.get(s.root,s.path,n));return
        u.push(n),t.apply(e,u)}var t=Array.prototype.slice,r=Ember.Handlebars.normalizePath=function(e,t,r){var
        n,i,o=r&&r.keywords||{};return n=t.split(\".\",1)[0],o.hasOwnProperty(n)&&(e=o[n],i=!0,t=t===n?\"\":t.substr(n.length+1)),{root:e,path:t,isKeyword:i}},n=Ember.Handlebars.get=function(e,t,n){var
        i,o=n&&n.data,s=r(e,t,o);return e=s.root,t=s.path,i=Ember.get(e,t),void 0===i&&e!==Ember.lookup&&Ember.isGlobalPath(t)&&(i=Ember.get(Ember.lookup,t)),i};Ember.Handlebars.getPath=Ember.deprecateFunc(\"`Ember.Handlebars.getPath`
        has been changed to `Ember.Handlebars.get` for consistency.\",Ember.Handlebars.get),Ember.Handlebars.resolveParams=function(e,t,r){for(var
        i,o,s=[],a=r.types,u=0,c=t.length;c>u;u++)i=t[u],o=a[u],\"ID\"===o?s.push(n(e,i,r)):s.push(i);return
        s},Ember.Handlebars.resolveHash=function(e,t,r){var i,o={},s=r.hashTypes;for(var
        a in t)t.hasOwnProperty(a)&&(i=s[a],o[a]=\"ID\"===i?n(e,t[a],r):t[a]);return
        o},Ember.Handlebars.registerHelper(\"helperMissing\",function(e,t){var r,n=\"\";throw
        r=\"%@ Handlebars error: Could not find property '%@' on object %@.\",t.data&&(n=t.data.view),new
        Ember.Error(Ember.String.fmt(r,[n,e,this]))}),Ember.Handlebars.registerBoundHelper=function(n,i){function
        o(){var n,o,a,u,c,l=t.call(arguments,0,-1),h=l.length,m=arguments[arguments.length-1],f=[],p=m.types,d=m.data,b=m.hash,E=d.view,v=m.contexts,g=v&&v.length?v[0]:this,y=\"\",w=Ember._SimpleHandlebarsView.prototype.normalizedValue,_=b.boundOptions={};for(a
        in b)Ember.IS_BINDING.test(a)&&(_[a.slice(0,-7)]=b[a]);var C=[];for(d.properties=[],n=0;h>n;++n)if(d.properties.push(l[n]),\"ID\"===p[n]){var
        O=r(g,l[n],d);f.push(O),C.push(O)}else f.push(null);if(d.isUnbound)return
        e(this,i,f,m);var A=new Ember._SimpleHandlebarsView(null,null,!m.hash.unescaped,m.data);A.normalizedValue=function(){var
        e,t=[];for(e in _)_.hasOwnProperty(e)&&(c=r(g,_[e],d),A.path=c.path,A.pathRoot=c.root,b[e]=w.call(A));for(n=0;h>n;++n)c=f[n],c?(A.path=c.path,A.pathRoot=c.root,t.push(w.call(A))):t.push(l[n]);return
        t.push(m),i.apply(g,t)},E.appendChild(A);for(u in _)_.hasOwnProperty(u)&&C.push(r(g,_[u],d));for(n=0,o=C.length;o>n;++n)c=C[n],E.registerObserver(c.root,c.path,A,A.rerender);if(\"ID\"===p[0]&&0!==f.length){var
        P=f[0],V=P.root,x=P.path;Ember.isEmpty(x)||(y=x+\".\");for(var S=0,T=s.length;T>S;S++)E.registerObserver(V,y+s[S],A,A.rerender)}}var
        s=t.call(arguments,2);o._rawFunction=i,Ember.Handlebars.registerHelper(n,o)},Ember.Handlebars.template=function(e){var
        t=Handlebars.template(e);return t.isTop=!0,t}}(),function(){Ember.String.htmlSafe=function(e){return
        new Handlebars.SafeString(e)};var e=Ember.String.htmlSafe;(Ember.EXTEND_PROTOTYPES===!0||Ember.EXTEND_PROTOTYPES.String)&&(String.prototype.htmlSafe=function(){return
        e(this)})}(),function(){Ember.Handlebars.resolvePaths=function(e){for(var
        t=[],r=e.contexts,n=e.roots,i=e.data,o=0,s=r.length;s>o;o++)t.push(Ember.Handlebars.get(n[o],r[o],{data:i}));return
        t}}(),function(){function e(){Ember.run.once(Ember.View,\"notifyMutationListeners\")}Ember.set,Ember.get;var
        r=t(\"metamorph\"),n={remove:function(t){t.morph.remove(),e()},prepend:function(t,r){t.morph.prepend(r),e()},after:function(t,r){t.morph.after(r),e()},html:function(t,r){t.morph.html(r),e()},replace:function(t){var
        r=t.morph;t.transitionTo(\"preRender\"),Ember.run.schedule(\"render\",this,function(){if(!t.isDestroying){t.clearRenderedChildren();var
        n=t.renderToBuffer();t.invokeRecursively(function(e){e.propertyWillChange(\"element\")}),t.triggerRecursively(\"willInsertElement\"),r.replaceWith(n.string()),t.transitionTo(\"inDOM\"),t.invokeRecursively(function(e){e.propertyDidChange(\"element\")}),t.triggerRecursively(\"didInsertElement\"),e()}})},empty:function(t){t.morph.html(\"\"),e()}};Ember._Metamorph=Ember.Mixin.create({isVirtual:!0,tagName:\"\",instrumentName:\"metamorph\",init:function(){this._super(),this.morph=r()},beforeRender:function(e){e.push(this.morph.startTag()),e.pushOpeningTag()},afterRender:function(e){e.pushClosingTag(),e.push(this.morph.endTag())},createElement:function(){var
        e=this.renderToBuffer();this.outerHTML=e.string(),this.clearBuffer()},domManager:n}),Ember._MetamorphView=Ember.View.extend(Ember._Metamorph),Ember._SimpleMetamorphView=Ember.CoreView.extend(Ember._Metamorph)}(),function(){function
        e(e,t,r,n){this.path=e,this.pathRoot=t,this.isEscaped=r,this.templateData=n,this.morph=o(),this.state=\"preRender\",this.updateId=null,this._parentView=null,this.buffer=null}var
        r=Ember.get,n=Ember.set,i=Ember.Handlebars.get,o=t(\"metamorph\");Ember._SimpleHandlebarsView=e,e.prototype={isVirtual:!0,isView:!0,destroy:function(){this.updateId&&(Ember.run.cancel(this.updateId),this.updateId=null),this._parentView&&this._parentView.removeChild(this),this.morph=null,this.state=\"destroyed\"},propertyWillChange:Ember.K,propertyDidChange:Ember.K,normalizedValue:function(){var
        e,t,r=this.path,n=this.pathRoot;return\"\"===r?e=n:(t=this.templateData,e=i(n,r,{data:t})),e},renderToBuffer:function(e){var
        t=\"\";t+=this.morph.startTag(),t+=this.render(),t+=this.morph.endTag(),e.push(t)},render:function(){var
        e=this.isEscaped,t=this.normalizedValue();return null===t||void 0===t?t=\"\":t
        instanceof Handlebars.SafeString||(t=String(t)),e&&(t=Handlebars.Utils.escapeExpression(t)),t},rerender:function(){switch(this.state){case\"preRender\":case\"destroyed\":break;case\"inBuffer\":throw
        new Ember.Error(\"Something you did tried to replace an {{expression}} before
        it was inserted into the DOM.\");case\"hasElement\":case\"inDOM\":this.updateId=Ember.run.scheduleOnce(\"render\",this,\"update\")}return
        this},update:function(){this.updateId=null,this.morph.html(this.render())},transitionTo:function(e){this.state=e}};var
        s=Ember.View.cloneStates(Ember.View.states),a=Ember.merge;a(s._default,{rerenderIfNeeded:Ember.K}),a(s.inDOM,{rerenderIfNeeded:function(e){e.normalizedValue()!==e._lastNormalizedValue&&e.rerender()}}),Ember._HandlebarsBoundView=Ember._MetamorphView.extend({instrumentName:\"boundHandlebars\",states:s,shouldDisplayFunc:null,preserveContext:!1,previousContext:null,displayTemplate:null,inverseTemplate:null,path:null,pathRoot:null,normalizedValue:function(){var
        e,t,n=r(this,\"path\"),o=r(this,\"pathRoot\"),s=r(this,\"valueNormalizerFunc\");return\"\"===n?e=o:(t=r(this,\"templateData\"),e=i(o,n,{data:t})),s?s(e):e},rerenderIfNeeded:function(){this.currentState.rerenderIfNeeded(this)},render:function(e){var
        t=r(this,\"isEscaped\"),i=r(this,\"shouldDisplayFunc\"),o=r(this,\"preserveContext\"),s=r(this,\"previousContext\"),a=r(this,\"inverseTemplate\"),u=r(this,\"displayTemplate\"),c=this.normalizedValue();if(this._lastNormalizedValue=c,i(c))if(n(this,\"template\",u),o)n(this,\"_context\",s);else{if(!u)return
        null===c||void 0===c?c=\"\":c instanceof Handlebars.SafeString||(c=String(c)),t&&(c=Handlebars.Utils.escapeExpression(c)),e.push(c),void
        0;n(this,\"_context\",c)}else a?(n(this,\"template\",a),o?n(this,\"_context\",s):n(this,\"_context\",c)):n(this,\"template\",function(){return\"\"});return
        this._super(e)}})}(),function(){function e(e){return!Ember.isNone(e)}function
        t(e,t,r,n,s,a){var u,c,l,h=t.data,m=t.fn,f=t.inverse,p=h.view,d=this;if(u=o(d,e,h),\"object\"==typeof
        this){if(h.insideGroup){c=function(){Ember.run.once(p,\"rerender\")};var b,E,v=i(d,e,t);v=s?s(v):v,E=r?d:v,n(v)?b=m:f&&(b=f),b(E,{data:t.data})}else{var
        g=p.createChildView(Ember._HandlebarsBoundView,{preserveContext:r,shouldDisplayFunc:n,valueNormalizerFunc:s,displayTemplate:m,inverseTemplate:f,path:e,pathRoot:d,previousContext:d,isEscaped:!t.hash.unescaped,templateData:t.data});p.appendChild(g),c=function(){Ember.run.scheduleOnce(\"render\",g,\"rerenderIfNeeded\")}}if(\"\"!==u.path&&(p.registerObserver(u.root,u.path,c),a))for(l=0;l<a.length;l++)p.registerObserver(u.root,u.path+\".\"+a[l],c)}else
        h.buffer.push(i(d,e,t))}function r(e,t,r){var n,s,a,u,c=r.data,l=c.view;if(n=o(e,t,c),a=n.root,a&&\"object\"==typeof
        a){if(c.insideGroup){s=function(){Ember.run.once(l,\"rerender\")};var h=i(e,t,r);(null===h||void
        0===h)&&(h=\"\"),c.buffer.push(h)}else{var m=new Ember._SimpleHandlebarsView(t,e,!r.hash.unescaped,r.data);m._parentView=l,l.appendChild(m),s=function(){Ember.run.scheduleOnce(\"render\",m,\"rerender\")}}\"\"!==n.path&&l.registerObserver(n.root,n.path,s)}else
        u=i(e,t,r),c.buffer.push(null===u||\"undefined\"==typeof u?\"\":u)}var n=Ember.get;Ember.set,Ember.String.fmt;var
        i=Ember.Handlebars.get,o=Ember.Handlebars.normalizePath,s=Ember.ArrayPolyfills.forEach,a=Ember.Handlebars,u=a.helpers;a.registerHelper(\"_triageMustache\",function(e,t){return
        u[e]?u[e].call(this,t):u.bind.apply(this,arguments)}),a.registerHelper(\"bind\",function(n,i){var
        o=i.contexts&&i.contexts.length?i.contexts[0]:this;return i.fn?t.call(o,n,i,!1,e):r(o,n,i)}),a.registerHelper(\"boundIf\",function(e,r){var
        i=r.contexts&&r.contexts.length?r.contexts[0]:this,o=function(e){var t=e&&n(e,\"isTruthy\");return\"boolean\"==typeof
        t?t:Ember.isArray(e)?0!==n(e,\"length\"):!!e};return t.call(i,e,r,!0,o,o,[\"isTruthy\",\"length\"])}),a.registerHelper(\"with\",function(r,n){if(4===arguments.length){var
        i,s,a,c;if(n=arguments[3],i=arguments[2],s=arguments[0],Ember.isGlobalPath(s))Ember.bind(n.data.keywords,i,s);else{c=o(this,s,n.data),s=c.path,a=c.root;var
        l=Ember.$.expando+Ember.guidFor(a);n.data.keywords[l]=a;var h=s?l+\".\"+s:l;Ember.bind(n.data.keywords,i,h)}return
        t.call(this,s,n,!0,e)}return u.bind.call(n.contexts[0],r,n)}),a.registerHelper(\"if\",function(e,t){return
        u.boundIf.call(t.contexts[0],e,t)}),a.registerHelper(\"unless\",function(e,t){var
        r=t.fn,n=t.inverse;return t.fn=n,t.inverse=r,u.boundIf.call(t.contexts[0],e,t)}),a.registerHelper(\"bind-attr\",function(e){var
        t=e.hash,r=e.data.view,n=[],u=this,c=++Ember.uuid,l=t[\"class\"];if(null!=l){var
        h=a.bindClasses(this,l,r,c,e);n.push('class=\"'+Handlebars.Utils.escapeExpression(h.join(\"
        \"))+'\"'),delete t[\"class\"]}var m=Ember.keys(t);return s.call(m,function(s){var
        a,l=t[s];a=o(u,l,e.data);var h,m,f=\"this\"===l?a.root:i(u,l,e),p=Ember.typeOf(f);h=function(){var
        t=i(u,l,e),n=r.$(\"[data-bindattr-\"+c+\"='\"+c+\"']\");return n&&0!==n.length?(Ember.View.applyAttributeBindings(n,s,t),void
        0):(Ember.removeObserver(a.root,a.path,m),void 0)},\"this\"===l||a.isKeyword&&\"\"===a.path||r.registerObserver(a.root,a.path,h),\"string\"===p||\"number\"===p&&!isNaN(f)?n.push(s+'=\"'+Handlebars.Utils.escapeExpression(f)+'\"'):f&&\"boolean\"===p&&n.push(s+'=\"'+s+'\"')},this),n.push(\"data-bindattr-\"+c+'=\"'+c+'\"'),new
        a.SafeString(n.join(\" \"))}),a.registerHelper(\"bindAttr\",a.helpers[\"bind-attr\"]),a.bindClasses=function(e,t,r,n,a){var
        u,c,l,h=[],m=function(e,t,r){var n,o=t.path;return n=\"this\"===o?e:\"\"===o?!0:i(e,o,r),Ember.View._classStringForValue(o,n,t.className,t.falsyClassName)};return
        s.call(t.split(\" \"),function(t){var i,s,f,p,d=Ember.View._parsePropertyPath(t),b=d.path,E=e;\"\"!==b&&\"this\"!==b&&(p=o(e,b,a.data),E=p.root,b=p.path),s=function(){u=m(e,d,a),l=n?r.$(\"[data-bindattr-\"+n+\"='\"+n+\"']\"):r.$(),l&&0!==l.length?(i&&l.removeClass(i),u?(l.addClass(u),i=u):i=null):Ember.removeObserver(E,b,f)},\"\"!==b&&\"this\"!==b&&r.registerObserver(E,b,s),c=m(e,d,a),c&&(h.push(c),i=c)}),h}}(),function(){function
        e(e,r){var n=r.hash,i=r.hashTypes;for(var o in n)if(\"ID\"===i[o]){var s=n[o];Ember.IS_BINDING.test(o)||(n[o+\"Binding\"]=s,i[o+\"Binding\"]=\"STRING\",delete
        n[o],delete i[o])}n.hasOwnProperty(\"idBinding\")&&(n.id=t.get(e,n.idBinding,r),i.id=\"STRING\",delete
        n.idBinding,delete i.idBinding)}Ember.get,Ember.set;var t=Ember.Handlebars,r=/^[a-z]/,n=/^view\\./;t.ViewHelper=Ember.Object.create({propertiesFromHTMLOptions:function(e){var
        t=e.hash,r=e.data,n={},i=t[\"class\"],o=!1;t.id&&(n.elementId=t.id,o=!0),t.tag&&(n.tagName=t.tag,o=!0),i&&(i=i.split(\"
        \"),n.classNames=i,o=!0),t.classBinding&&(n.classNameBindings=t.classBinding.split(\"
        \"),o=!0),t.classNameBindings&&(void 0===n.classNameBindings&&(n.classNameBindings=[]),n.classNameBindings=n.classNameBindings.concat(t.classNameBindings.split(\"
        \")),o=!0),t.attributeBindings&&(n.attributeBindings=null,o=!0),o&&(t=Ember.$.extend({},t),delete
        t.id,delete t.tag,delete t[\"class\"],delete t.classBinding);var s;for(var
        a in t)t.hasOwnProperty(a)&&Ember.IS_BINDING.test(a)&&\"string\"==typeof t[a]&&(s=this.contextualizeBindingPath(t[a],r),s&&(t[a]=s));if(n.classNameBindings)for(var
        u in n.classNameBindings){var c=n.classNameBindings[u];if(\"string\"==typeof
        c){var l=Ember.View._parsePropertyPath(c);s=this.contextualizeBindingPath(l.path,r),s&&(n.classNameBindings[u]=s+l.classNames)}}return
        Ember.$.extend(t,n)},contextualizeBindingPath:function(e,t){var r=Ember.Handlebars.normalizePath(null,e,t);return
        r.isKeyword?\"templateData.keywords.\"+e:Ember.isGlobalPath(e)?null:\"this\"===e?\"_parentView.context\":\"_parentView.context.\"+e},helper:function(i,o,s){var
        a,u=s.data,c=s.fn;e(i,s),a=\"string\"==typeof o?\"STRING\"===s.types[0]&&r.test(o)&&!n.test(o)?u.view.container.lookupFactory(\"view:\"+o):t.get(i,o,s):o;var
        l=this.propertiesFromHTMLOptions(s,i),h=u.view;l.templateData=u;var m=a.proto?a.proto():a;c&&(l.template=c),m.controller||m.controllerBinding||l.controller||l.controllerBinding||(l._context=i),h.appendChild(a,l)}}),t.registerHelper(\"view\",function(e,r){return
        e&&e.data&&e.data.isRenderData&&(r=e,e=\"Ember.View\"),t.ViewHelper.helper(this,e,r)})}(),function(){var
        e=Ember.get,t=Ember.Handlebars.get;Ember.String.fmt,Ember.Handlebars.registerHelper(\"collection\",function(r,n){r&&r.data&&r.data.isRenderData&&(n=r,r=void
        0);var i=n.fn,o=n.data,s=n.inverse;n.data.view;var a;a=r?t(this,r,n):Ember.CollectionView;var
        u,c,l=n.hash,h={},m=a.proto();if(l.itemView){var f=o.keywords.controller,p=f.container;c=p.resolve(\"view:\"+Ember.String.camelize(l.itemView))}else
        c=l.itemViewClass?t(m,l.itemViewClass,n):m.itemViewClass;delete l.itemViewClass,delete
        l.itemView;for(var d in l)l.hasOwnProperty(d)&&(u=d.match(/^item(.)(.*)$/),u&&\"itemController\"!==d&&(h[u[1].toLowerCase()+u[2]]=l[d],delete
        l[d]));i&&(h.template=i,delete n.fn);var b;s&&s!==Handlebars.VM.noop?(b=e(m,\"emptyViewClass\"),b=b.extend({template:s,tagName:h.tagName})):l.emptyViewClass&&(b=t(this,l.emptyViewClass,n)),b&&(l.emptyView=b),l.keyword||(h._context=Ember.computed.alias(\"content\"));var
        E=Ember.Handlebars.ViewHelper.propertiesFromHTMLOptions({data:o,hash:h},this);return
        l.itemViewClass=c.extend(E),Ember.Handlebars.helpers.view.call(this,a,n)})}(),function(){var
        e=Ember.Handlebars.get;Ember.Handlebars.registerHelper(\"unbound\",function(t,r){var
        n,i,o,s=arguments[arguments.length-1];return arguments.length>2?(s.data.isUnbound=!0,n=Ember.Handlebars.helpers[arguments[0]]||Ember.Handlebars.helperMissing,o=n.apply(this,Array.prototype.slice.call(arguments,1)),delete
        s.data.isUnbound,o):(i=r.contexts&&r.contexts.length?r.contexts[0]:this,e(i,t,r))})}(),function(){var
        e=Ember.Handlebars.get,t=Ember.Handlebars.normalizePath;Ember.Handlebars.registerHelper(\"log\",function(r,n){var
        i=n.contexts&&n.contexts.length?n.contexts[0]:this,o=t(i,r,n.data),s=o.root,a=o.path,u=\"this\"===a?s:e(s,a,n);Ember.Logger.log(u)}),Ember.Handlebars.registerHelper(\"debugger\",function(){})}(),function(){var
        e=Ember.get,t=Ember.set;Ember.Handlebars.EachView=Ember.CollectionView.extend(Ember._Metamorph,{init:function(){var
        r,n=e(this,\"itemController\");if(n){var i=e(this,\"controller.container\").lookupFactory(\"controller:array\").create({parentController:e(this,\"controller\"),itemController:n,target:e(this,\"controller\"),_eachView:this});this.disableContentObservers(function(){t(this,\"content\",i),r=new
        Ember.Binding(\"content\",\"_eachView.dataSource\").oneWay(),r.connect(i)}),t(this,\"_arrayController\",i)}else
        this.disableContentObservers(function(){r=new Ember.Binding(\"content\",\"dataSource\").oneWay(),r.connect(this)});return
        this._super()},_assertArrayLike:function(){},disableContentObservers:function(e){Ember.removeBeforeObserver(this,\"content\",null,\"_contentWillChange\"),Ember.removeObserver(this,\"content\",null,\"_contentDidChange\"),e.call(this),Ember.addBeforeObserver(this,\"content\",null,\"_contentWillChange\"),Ember.addObserver(this,\"content\",null,\"_contentDidChange\")},itemViewClass:Ember._MetamorphView,emptyViewClass:Ember._MetamorphView,createChildView:function(r,n){r=this._super(r,n);var
        i=e(this,\"keyword\"),o=e(r,\"content\");if(i){var s=e(r,\"templateData\");s=Ember.copy(s),s.keywords=r.cloneKeywords(),t(r,\"templateData\",s),s.keywords[i]=o}return
        o&&e(o,\"isController\")&&t(r,\"controller\",o),r},destroy:function(){if(this._super()){var
        t=e(this,\"_arrayController\");return t&&t.destroy(),this}}});var r=Ember.Handlebars.GroupedEach=function(e,t,r){var
        n=this,i=Ember.Handlebars.normalizePath(e,t,r.data);this.context=e,this.path=t,this.options=r,this.template=r.fn,this.containingView=r.data.view,this.normalizedRoot=i.root,this.normalizedPath=i.path,this.content=this.lookupContent(),this.addContentObservers(),this.addArrayObservers(),this.containingView.on(\"willClearRender\",function(){n.destroy()})};r.prototype={contentWillChange:function(){this.removeArrayObservers()},contentDidChange:function(){this.content=this.lookupContent(),this.addArrayObservers(),this.rerenderContainingView()},contentArrayWillChange:Ember.K,contentArrayDidChange:function(){this.rerenderContainingView()},lookupContent:function(){return
        Ember.Handlebars.get(this.normalizedRoot,this.normalizedPath,this.options)},addArrayObservers:function(){this.content&&this.content.addArrayObserver(this,{willChange:\"contentArrayWillChange\",didChange:\"contentArrayDidChange\"})},removeArrayObservers:function(){this.content&&this.content.removeArrayObserver(this,{willChange:\"contentArrayWillChange\",didChange:\"contentArrayDidChange\"})},addContentObservers:function(){Ember.addBeforeObserver(this.normalizedRoot,this.normalizedPath,this,this.contentWillChange),Ember.addObserver(this.normalizedRoot,this.normalizedPath,this,this.contentDidChange)},removeContentObservers:function(){Ember.removeBeforeObserver(this.normalizedRoot,this.normalizedPath,this.contentWillChange),Ember.removeObserver(this.normalizedRoot,this.normalizedPath,this.contentDidChange)},render:function(){if(this.content){var
        t=this.content,r=e(t,\"length\"),n=this.options.data,i=this.template;n.insideEach=!0;for(var
        o=0;r>o;o++)i(t.objectAt(o),{data:n})}},rerenderContainingView:function(){var
        e=this;Ember.run.scheduleOnce(\"render\",this,function(){e.destroyed||e.containingView.rerender()})},destroy:function(){this.removeContentObservers(),this.content&&this.removeArrayObservers(),this.destroyed=!0}},Ember.Handlebars.registerHelper(\"each\",function(e,t){if(4===arguments.length){var
        r=arguments[0];t=arguments[3],e=arguments[2],\"\"===e&&(e=\"this\"),t.hash.keyword=r}return
        1===arguments.length&&(t=e,e=\"this\"),t.hash.dataSourceBinding=e,!t.data.insideGroup||t.hash.groupedRows||t.hash.itemViewClass?Ember.Handlebars.helpers.collection.call(this,\"Ember.Handlebars.EachView\",t):(new
        Ember.Handlebars.GroupedEach(this,e,t).render(),void 0)})}(),function(){Ember.Handlebars.registerHelper(\"template\",function(){return
        Ember.Handlebars.helpers.partial.apply(this,arguments)})}(),function(){Ember.Handlebars.registerHelper(\"partial\",function(e,t){var
        r=e.split(\"/\"),n=r[r.length-1];r[r.length-1]=\"_\"+n;var i=t.data.view,o=r.join(\"/\"),s=i.templateForName(o),a=!s&&i.templateForName(e);s=s||a,s(this,{data:t.data})})}(),function(){var
        e=Ember.get;Ember.set,Ember.Handlebars.registerHelper(\"yield\",function(t){for(var
        r=t.data.view;r&&!e(r,\"layout\");)r=r._contextView?r._contextView:e(r,\"parentView\");r._yield(this,t)})}(),function(){Ember.Handlebars.registerHelper(\"loc\",function(e){return
        Ember.String.loc(e)})}(),function(){var e=Ember.set;Ember.get,Ember.Checkbox=Ember.View.extend({classNames:[\"ember-checkbox\"],tagName:\"input\",attributeBindings:[\"type\",\"checked\",\"indeterminate\",\"disabled\",\"tabindex\",\"name\"],type:\"checkbox\",checked:!1,disabled:!1,indeterminate:!1,init:function(){this._super(),this.on(\"change\",this,this._updateElementValue)},didInsertElement:function(){this._super(),this.get(\"element\").indeterminate=!!this.get(\"indeterminate\")},_updateElementValue:function(){e(this,\"checked\",this.$().prop(\"checked\"))}})}(),function(){function
        e(e,r,n){var i=t(r,e),o=t(r,\"onEvent\"),s=t(r,\"value\");(o===e||\"keyPress\"===o&&\"key-press\"===e)&&r.sendAction(\"action\",s),r.sendAction(e,s),(i||o===e)&&(t(r,\"bubbles\")||n.stopPropagation())}var
        t=Ember.get,r=Ember.set;Ember.TextSupport=Ember.Mixin.create({value:\"\",attributeBindings:[\"placeholder\",\"disabled\",\"maxlength\",\"tabindex\"],placeholder:null,disabled:!1,maxlength:null,init:function(){this._super(),this.on(\"focusOut\",this,this._elementValueDidChange),this.on(\"change\",this,this._elementValueDidChange),this.on(\"paste\",this,this._elementValueDidChange),this.on(\"cut\",this,this._elementValueDidChange),this.on(\"input\",this,this._elementValueDidChange),this.on(\"keyUp\",this,this.interpretKeyEvents)},action:null,onEvent:\"enter\",bubbles:!1,interpretKeyEvents:function(e){var
        t=Ember.TextSupport.KEY_EVENTS,r=t[e.keyCode];return this._elementValueDidChange(),r?this[r](e):void
        0},_elementValueDidChange:function(){r(this,\"value\",this.$().val())},insertNewline:function(t){e(\"enter\",this,t),e(\"insert-newline\",this,t)},cancel:function(t){e(\"escape-press\",this,t)},focusIn:function(t){e(\"focus-in\",this,t)},focusOut:function(t){e(\"focus-out\",this,t)},keyPress:function(t){e(\"key-press\",this,t)}}),Ember.TextSupport.KEY_EVENTS={13:\"insertNewline\",27:\"cancel\"}}(),function(){Ember.get,Ember.set,Ember.TextField=Ember.Component.extend(Ember.TextSupport,{classNames:[\"ember-text-field\"],tagName:\"input\",attributeBindings:[\"type\",\"value\",\"size\",\"pattern\",\"name\"],value:\"\",type:\"text\",size:null,pattern:null})}(),function(){var
        e=Ember.get,t=Ember.set;Ember.Button=Ember.View.extend(Ember.TargetActionSupport,{classNames:[\"ember-button\"],classNameBindings:[\"isActive\"],tagName:\"button\",propagateEvents:!1,attributeBindings:[\"type\",\"disabled\",\"href\",\"tabindex\"],targetObject:Ember.computed(function(){var
        t=e(this,\"target\"),r=e(this,\"context\"),n=e(this,\"templateData\");return\"string\"!=typeof
        t?t:Ember.Handlebars.get(r,t,{data:n})}).property(\"target\"),type:Ember.computed(function(){var
        e=this.tagName;return\"input\"===e||\"button\"===e?\"button\":void 0}),disabled:!1,href:Ember.computed(function(){return\"a\"===this.tagName?\"#\":null}),mouseDown:function(){return
        e(this,\"disabled\")||(t(this,\"isActive\",!0),this._mouseDown=!0,this._mouseEntered=!0),e(this,\"propagateEvents\")},mouseLeave:function(){this._mouseDown&&(t(this,\"isActive\",!1),this._mouseEntered=!1)},mouseEnter:function(){this._mouseDown&&(t(this,\"isActive\",!0),this._mouseEntered=!0)},mouseUp:function(){return
        e(this,\"isActive\")&&(this.triggerAction(),t(this,\"isActive\",!1)),this._mouseDown=!1,this._mouseEntered=!1,e(this,\"propagateEvents\")},keyDown:function(e){(13===e.keyCode||32===e.keyCode)&&this.mouseDown()},keyUp:function(e){(13===e.keyCode||32===e.keyCode)&&this.mouseUp()},touchStart:function(e){return
        this.mouseDown(e)},touchEnd:function(e){return this.mouseUp(e)},init:function(){this._super()}})}(),function(){var
        e=Ember.get;Ember.set,Ember.TextArea=Ember.Component.extend(Ember.TextSupport,{classNames:[\"ember-text-area\"],tagName:\"textarea\",attributeBindings:[\"rows\",\"cols\",\"name\"],rows:null,cols:null,_updateElementValue:Ember.observer(function(){var
        t=e(this,\"value\"),r=this.$();r&&t!==r.val()&&r.val(t)},\"value\"),init:function(){this._super(),this.on(\"didInsertElement\",this,this._updateElementValue)}})}(),function(){var
        e=Ember.set,t=Ember.get,r=Ember.EnumerableUtils.indexOf,n=Ember.EnumerableUtils.indexesOf,i=Ember.EnumerableUtils.forEach,o=Ember.EnumerableUtils.replace,s=Ember.isArray;Ember.Handlebars.compile,Ember.SelectOption=Ember.View.extend({tagName:\"option\",attributeBindings:[\"value\",\"selected\"],defaultTemplate:function(e,t){t={data:t.data,hash:{}},Ember.Handlebars.helpers.bind.call(e,\"view.label\",t)},init:function(){this.labelPathDidChange(),this.valuePathDidChange(),this._super()},selected:Ember.computed(function(){var
        e=t(this,\"content\"),n=t(this,\"parentView.selection\");return t(this,\"parentView.multiple\")?n&&r(n,e.valueOf())>-1:e==n}).property(\"content\",\"parentView.selection\"),labelPathDidChange:Ember.observer(function(){var
        e=t(this,\"parentView.optionLabelPath\");e&&Ember.defineProperty(this,\"label\",Ember.computed(function(){return
        t(this,e)}).property(e))},\"parentView.optionLabelPath\"),valuePathDidChange:Ember.observer(function(){var
        e=t(this,\"parentView.optionValuePath\");e&&Ember.defineProperty(this,\"value\",Ember.computed(function(){return
        t(this,e)}).property(e))},\"parentView.optionValuePath\")}),Ember.SelectOptgroup=Ember.CollectionView.extend({tagName:\"optgroup\",attributeBindings:[\"label\"],selectionBinding:\"parentView.selection\",multipleBinding:\"parentView.multiple\",optionLabelPathBinding:\"parentView.optionLabelPath\",optionValuePathBinding:\"parentView.optionValuePath\",itemViewClassBinding:\"parentView.optionView\"}),Ember.Select=Ember.View.extend({tagName:\"select\",classNames:[\"ember-select\"],defaultTemplate:Ember.Handlebars.template(function(e,t,r,n,i){function
        o(e,t){var n,i,o=\"\";return t.buffer.push('<option value=\"\">'),n={},i={},t.buffer.push(p(r._triageMustache.call(e,\"view.prompt\",{hash:{},contexts:[e],types:[\"ID\"],hashContexts:i,hashTypes:n,data:t}))),t.buffer.push(\"</option>\"),o}function
        s(e,t){var n,i,o;i={},o={},n=r.each.call(e,\"view.groupedContent\",{hash:{},inverse:d.noop,fn:d.program(4,a,t),contexts:[e],types:[\"ID\"],hashContexts:o,hashTypes:i,data:t}),n||0===n?t.buffer.push(n):t.buffer.push(\"\")}function
        a(e,t){var n,i;n={content:e,label:e},i={content:\"ID\",label:\"ID\"},t.buffer.push(p(r.view.call(e,\"view.groupView\",{hash:{content:\"content\",label:\"label\"},contexts:[e],types:[\"ID\"],hashContexts:n,hashTypes:i,data:t})))}function
        u(e,t){var n,i,o;i={},o={},n=r.each.call(e,\"view.content\",{hash:{},inverse:d.noop,fn:d.program(7,c,t),contexts:[e],types:[\"ID\"],hashContexts:o,hashTypes:i,data:t}),n||0===n?t.buffer.push(n):t.buffer.push(\"\")}function
        c(e,t){var n,i;n={content:e},i={content:\"ID\"},t.buffer.push(p(r.view.call(e,\"view.optionView\",{hash:{content:\"\"},contexts:[e],types:[\"ID\"],hashContexts:n,hashTypes:i,data:t})))}this.compilerInfo=[4,\">=
        1.0.0\"],r=this.merge(r,Ember.Handlebars.helpers),i=i||{};\nvar l,h,m,f=\"\",p=this.escapeExpression,d=this;return
        h={},m={},l=r[\"if\"].call(t,\"view.prompt\",{hash:{},inverse:d.noop,fn:d.program(1,o,i),contexts:[t],types:[\"ID\"],hashContexts:m,hashTypes:h,data:i}),(l||0===l)&&i.buffer.push(l),h={},m={},l=r[\"if\"].call(t,\"view.optionGroupPath\",{hash:{},inverse:d.program(6,u,i),fn:d.program(3,s,i),contexts:[t],types:[\"ID\"],hashContexts:m,hashTypes:h,data:i}),(l||0===l)&&i.buffer.push(l),f}),attributeBindings:[\"multiple\",\"disabled\",\"tabindex\",\"name\"],multiple:!1,disabled:!1,content:null,selection:null,value:Ember.computed(function(e,r){if(2===arguments.length)return
        r;var n=t(this,\"optionValuePath\").replace(/^content\\.?/,\"\");return n?t(this,\"selection.\"+n):t(this,\"selection\")}).property(\"selection\"),prompt:null,optionLabelPath:\"content\",optionValuePath:\"content\",optionGroupPath:null,groupView:Ember.SelectOptgroup,groupedContent:Ember.computed(function(){var
        e=t(this,\"optionGroupPath\"),r=Ember.A(),n=t(this,\"content\")||[];return
        i(n,function(n){var i=t(n,e);t(r,\"lastObject.label\")!==i&&r.pushObject({label:i,content:Ember.A()}),t(r,\"lastObject.content\").push(n)}),r}).property(\"optionGroupPath\",\"content.@each\"),optionView:Ember.SelectOption,_change:function(){t(this,\"multiple\")?this._changeMultiple():this._changeSingle()},selectionDidChange:Ember.observer(function(){var
        r=t(this,\"selection\");if(t(this,\"multiple\")){if(!s(r))return e(this,\"selection\",Ember.A([r])),void
        0;this._selectionDidChangeMultiple()}else this._selectionDidChangeSingle()},\"selection.@each\"),valueDidChange:Ember.observer(function(){var
        e,r=t(this,\"content\"),n=t(this,\"value\"),i=t(this,\"optionValuePath\").replace(/^content\\.?/,\"\"),o=i?t(this,\"selection.\"+i):t(this,\"selection\");n!==o&&(e=r?r.find(function(e){return
        n===(i?t(e,i):e)}):null,this.set(\"selection\",e))},\"value\"),_triggerChange:function(){var
        e=t(this,\"selection\"),r=t(this,\"value\");Ember.isNone(e)||this.selectionDidChange(),Ember.isNone(r)||this.valueDidChange(),this._change()},_changeSingle:function(){var
        r=this.$()[0].selectedIndex,n=t(this,\"content\"),i=t(this,\"prompt\");if(n&&t(n,\"length\")){if(i&&0===r)return
        e(this,\"selection\",null),void 0;i&&(r-=1),e(this,\"selection\",n.objectAt(r))}},_changeMultiple:function(){var
        r=this.$(\"option:selected\"),n=t(this,\"prompt\"),i=n?1:0,a=t(this,\"content\"),u=t(this,\"selection\");if(a&&r){var
        c=r.map(function(){return this.index-i}).toArray(),l=a.objectsAt(c);s(u)?o(u,0,t(u,\"length\"),l):e(this,\"selection\",l)}},_selectionDidChangeSingle:function(){var
        e=this.get(\"element\");if(e){var n=t(this,\"content\"),i=t(this,\"selection\"),o=n?r(n,i):-1,s=t(this,\"prompt\");s&&(o+=1),e&&(e.selectedIndex=o)}},_selectionDidChangeMultiple:function(){var
        e,i=t(this,\"content\"),o=t(this,\"selection\"),s=i?n(i,o):[-1],a=t(this,\"prompt\"),u=a?1:0,c=this.$(\"option\");c&&c.each(function(){e=this.index>-1?this.index-u:-1,this.selected=r(s,e)>-1})},init:function(){this._super(),this.on(\"didInsertElement\",this,this._triggerChange),this.on(\"change\",this,this._change)}})}(),function(){Ember.Handlebars.registerHelper(\"input\",function(e){var
        t=e.hash,r=(e.hashTypes,t.type),n=t.on;return delete t.type,delete t.on,\"checkbox\"===r?Ember.Handlebars.helpers.view.call(this,Ember.Checkbox,e):(r&&(t.type=r),t.onEvent=n||\"enter\",Ember.Handlebars.helpers.view.call(this,Ember.TextField,e))}),Ember.Handlebars.registerHelper(\"textarea\",function(e){return
        e.hash,e.hashTypes,Ember.Handlebars.helpers.view.call(this,Ember.TextArea,e)})}(),function(){function
        e(){Ember.Handlebars.bootstrap(Ember.$(document))}function t(e){var t,n=Ember.TEMPLATES;if(n)for(var
        i in n)(t=i.match(/^components\\/(.*)$/))&&r(e,t[1])}function r(e,t){var r=\"component:\"+t;e.injection(r,\"layout\",\"template:components/\"+t);var
        n=e.lookupFactory(r);n||(e.register(r,Ember.Component),n=e.lookupFactory(r)),Ember.Handlebars.helper(t,n)}Ember.Handlebars.bootstrap=function(e){var
        t='script[type=\"text/x-handlebars\"], script[type=\"text/x-raw-handlebars\"]';Ember.$(t,e).each(function(){var
        e=Ember.$(this),t=\"text/x-raw-handlebars\"===e.attr(\"type\")?Ember.$.proxy(Handlebars.compile,Handlebars):Ember.$.proxy(Ember.Handlebars.compile,Ember.Handlebars),r=e.attr(\"data-template-name\")||e.attr(\"id\")||\"application\",n=t(e.html());if(void
        0!==Ember.TEMPLATES[r])throw new Ember.Error('Template named \"'+r+'\" already
        exists.');Ember.TEMPLATES[r]=n,e.remove()})},Ember.onLoad(\"Ember.Application\",function(r){r.initializer({name:\"domTemplates\",initialize:e}),r.initializer({name:\"registerComponents\",after:\"domTemplates\",initialize:t})})}(),function(){Ember.runLoadHooks(\"Ember.Handlebars\",Ember.Handlebars)}(),function(){e(\"route-recognizer\",[],function(){\"use
        strict\";function e(e){this.string=e}function t(e){this.name=e}function r(e){this.name=e}function
        n(){}function i(i,o,s){\"/\"===i.charAt(0)&&(i=i.substr(1));for(var a=i.split(\"/\"),u=[],c=0,l=a.length;l>c;c++){var
        h,m=a[c];(h=m.match(/^:([^\\/]+)$/))?(u.push(new t(h[1])),o.push(h[1]),s.dynamics++):(h=m.match(/^\\*([^\\/]+)$/))?(u.push(new
        r(h[1])),o.push(h[1]),s.stars++):\"\"===m?u.push(new n):(u.push(new e(m)),s.statics++)}return
        u}function o(e){this.charSpec=e,this.nextStates=[]}function s(e){return e.sort(function(e,t){return
        e.types.stars!==t.types.stars?e.types.stars-t.types.stars:e.types.dynamics!==t.types.dynamics?e.types.dynamics-t.types.dynamics:e.types.statics!==t.types.statics?e.types.statics-t.types.statics:0})}function
        a(e,t){for(var r=[],n=0,i=e.length;i>n;n++){var o=e[n];r=r.concat(o.match(t))}return
        r}function u(e,t){for(var r=e.handlers,n=e.regex,i=t.match(n),o=1,s=[],a=0,u=r.length;u>a;a++){for(var
        c=r[a],l=c.names,h={},m=0,f=l.length;f>m;m++)h[l[m]]=i[o++];s.push({handler:c.handler,params:h,isDynamic:!!l.length})}return
        s}function c(e,t){return t.eachChar(function(t){e=e.put(t)}),e}function l(e,t,r){this.path=e,this.matcher=t,this.delegate=r}function
        h(e){this.routes={},this.children={},this.target=e}function m(e,t,r){return
        function(n,i){var o=e+n;return i?(i(m(o,t,r)),void 0):new l(e+n,t,r)}}function
        f(e,t,r){for(var n=0,i=0,o=e.length;o>i;i++)n+=e[i].path.length;t=t.substr(n),e.push({path:t,handler:r})}function
        p(e,t,r,n){var i=t.routes;for(var o in i)if(i.hasOwnProperty(o)){var s=e.slice();f(s,o,i[o]),t.children[o]?p(s,t.children[o],r,n):r.call(n,s)}}var
        d=[\"/\",\".\",\"*\",\"+\",\"?\",\"|\",\"(\",\")\",\"[\",\"]\",\"{\",\"}\",\"\\\\\"],b=new
        RegExp(\"(\\\\\"+d.join(\"|\\\\\")+\")\",\"g\");e.prototype={eachChar:function(e){for(var
        t,r=this.string,n=0,i=r.length;i>n;n++)t=r.charAt(n),e({validChars:t})},regex:function(){return
        this.string.replace(b,\"\\\\$1\")},generate:function(){return this.string}},t.prototype={eachChar:function(e){e({invalidChars:\"/\",repeat:!0})},regex:function(){return\"([^/]+)\"},generate:function(e){return
        e[this.name]}},r.prototype={eachChar:function(e){e({invalidChars:\"\",repeat:!0})},regex:function(){return\"(.+)\"},generate:function(e){return
        e[this.name]}},n.prototype={eachChar:function(){},regex:function(){return\"\"},generate:function(){return\"\"}},o.prototype={get:function(e){for(var
        t=this.nextStates,r=0,n=t.length;n>r;r++){var i=t[r],o=i.charSpec.validChars===e.validChars;if(o=o&&i.charSpec.invalidChars===e.invalidChars)return
        i}},put:function(e){var t;return(t=this.get(e))?t:(t=new o(e),this.nextStates.push(t),e.repeat&&t.nextStates.push(t),t)},match:function(e){for(var
        t,r,n,i=this.nextStates,o=[],s=0,a=i.length;a>s;s++)t=i[s],r=t.charSpec,\"undefined\"!=typeof(n=r.validChars)?-1!==n.indexOf(e)&&o.push(t):\"undefined\"!=typeof(n=r.invalidChars)&&-1===n.indexOf(e)&&o.push(t);return
        o}};var E=function(){this.rootState=new o,this.names={}};return E.prototype={add:function(e,t){for(var
        r,o=this.rootState,s=\"^\",a={statics:0,dynamics:0,stars:0},u=[],l=[],h=!0,m=0,f=e.length;f>m;m++){var
        p=e[m],d=[],b=i(p.path,d,a);l=l.concat(b);for(var E=0,v=b.length;v>E;E++){var
        g=b[E];g instanceof n||(h=!1,o=o.put({validChars:\"/\"}),s+=\"/\",o=c(o,g),s+=g.regex())}u.push({handler:p.handler,names:d})}h&&(o=o.put({validChars:\"/\"}),s+=\"/\"),o.handlers=u,o.regex=new
        RegExp(s+\"$\"),o.types=a,(r=t&&t.as)&&(this.names[r]={segments:l,handlers:u})},handlersFor:function(e){var
        t=this.names[e],r=[];if(!t)throw new Error(\"There is no route named \"+e);for(var
        n=0,i=t.handlers.length;i>n;n++)r.push(t.handlers[n]);return r},hasRoute:function(e){return!!this.names[e]},generate:function(e,t){var
        r=this.names[e],i=\"\";if(!r)throw new Error(\"There is no route named \"+e);for(var
        o=r.segments,s=0,a=o.length;a>s;s++){var u=o[s];u instanceof n||(i+=\"/\",i+=u.generate(t))}return\"/\"!==i.charAt(0)&&(i=\"/\"+i),i},recognize:function(e){var
        t,r,n,i=[this.rootState];for(\"/\"!==e.charAt(0)&&(e=\"/\"+e),t=e.length,t>1&&\"/\"===e.charAt(t-1)&&(e=e.substr(0,t-1)),r=0,n=e.length;n>r&&(i=a(i,e.charAt(r)),i.length);r++);var
        o=[];for(r=0,n=i.length;n>r;r++)i[r].handlers&&o.push(i[r]);i=s(o);var c=o[0];return
        c&&c.handlers?u(c,e):void 0}},l.prototype={to:function(e,t){var r=this.delegate;if(r&&r.willAddRoute&&(e=r.willAddRoute(this.matcher.target,e)),this.matcher.add(this.path,e),t){if(0===t.length)throw
        new Error(\"You must have an argument in the function passed to `to`\");this.matcher.addChild(this.path,e,t,this.delegate)}}},h.prototype={add:function(e,t){this.routes[e]=t},addChild:function(e,t,r,n){var
        i=new h(t);this.children[e]=i;var o=m(e,i,n);n&&n.contextEntered&&n.contextEntered(t,o),r(o)}},E.prototype.map=function(e,t){var
        r=new h;e(m(\"\",r,this.delegate)),p([],r,function(e){t?t(this,e):this.add(e)},this)},E})}(),function(){e(\"router\",[\"route-recognizer\",\"rsvp\"],function(e,t){\"use
        strict\";function r(e,t){this.router=e,this.promise=t,this.data={},this.resolvedModels={},this.providedModels={},this.providedModelsArray=[],this.sequence=++r.currentSequence,this.params={}}function
        n(){this.recognizer=new e}function i(e,n){return new r(e,t.reject(n))}function
        o(e,t,r,n){var i,o,a=t.length,u={},l=e.currentHandlerInfos||[],h={},m=e.currentParams||{},f=e.activeTransition,p={};for(r=x.call(r),c(h,n),i=t.length-1;i>=0;i--){var
        d=t[i],b=d.handler,E=l[i],v=!1;if(E&&E.name===d.handler||(v=!0),d.isDynamic)if(o=s(r,b,f,!0,h))v=!0,u[b]=o;else{p[b]={};for(var
        g in d.params)if(d.params.hasOwnProperty(g)){var y=d.params[g];m[g]!==y&&(v=!0),p[b][g]=h[g]=y}}else
        if(d.hasOwnProperty(\"names\"))if(r.length&&(v=!0),o=s(r,b,f,d.names[0],h))u[b]=o;else{var
        w=d.names;p[b]={};for(var _=0,C=w.length;C>_;++_){var O=w[_];p[b][O]=h[O]=h[O]||m[O]}}v&&(a=i)}if(r.length>0)throw
        new Error(\"More context objects were passed than there are dynamic segments
        for the route: \"+t[t.length-1].handler);return{matchPoint:a,providedModels:u,params:h,handlerParams:p}}function
        s(e,t,r,n,i){if(e.length&&n){var o=e.pop();if(!a(o))return o;i[n]=o.toString()}else
        if(r)return r.resolvedModels[t]||n&&r.providedModels[t]}function a(e){return\"string\"==typeof
        e||e instanceof String||!isNaN(e)}function u(e,t,r){var n,i,s,a,u,l=e.recognizer.handlersFor(t),h={},m=o(e,l,r).matchPoint;for(u=0;u<l.length;u++)i=l[u],s=e.getHandler(i.handler),a=i.names,a.length&&(n=u>=m?r.shift():s.context,c(h,V(s,n,a)));return
        h}function c(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])}function
        l(e,t){var r=e.recognizer.handlersFor(t[0]);return A(e,\"Attempting transition
        to \"+t[0]),v(e,r,x.call(t,1),e.currentParams)}function h(e,t){var r=e.recognizer.recognize(t);return
        e.currentHandlerInfos,A(e,\"Attempting URL transition to \"+t),r?v(e,r,[],{}):i(e,new
        n.UnrecognizedURLError(t))}function m(e,t){var r=e.router,n=d(r.currentHandlerInfos||[],t);r.targetHandlerInfos=t,p(n.exited,function(e){var
        t=e.handler;delete t.context,t.exit&&t.exit()});var i=n.unchanged.slice();r.currentHandlerInfos=i,p(n.updatedContext,function(t){f(e,i,t,!1)}),p(n.entered,function(t){f(e,i,t,!0)})}function
        f(e,t,r,i){var o=r.handler,s=r.context;try{i&&o.enter&&o.enter(),C(e),E(o,s),o.setup&&o.setup(s),C(e)}catch(a){throw
        a instanceof n.TransitionAborted||b(e.router,t.concat(r),!0,[\"error\",a,e]),a}t.push(r)}function
        p(e,t){for(var r=0,n=e.length;n>r;r++)t(e[r])}function d(e,t){var r,n,i,o,s={updatedContext:[],exited:[],entered:[],unchanged:[]};for(i=0,o=t.length;o>i;i++){var
        a=e[i],u=t[i];a&&a.handler===u.handler||(r=!0),r?(s.entered.push(u),a&&s.exited.unshift(a)):n||a.context!==u.context?(n=!0,s.updatedContext.push(u)):s.unchanged.push(a)}for(i=t.length,o=e.length;o>i;i++)s.exited.unshift(e[i]);return
        s}function b(e,t,r,n){if(e.triggerEvent)return e.triggerEvent(t,r,n),void
        0;var i=n.shift();if(!t){if(r)return;throw new Error(\"Could not trigger event
        '\"+i+\"'. There are no active handlers\")}for(var o=!1,s=t.length-1;s>=0;s--){var
        a=t[s],u=a.handler;if(u.events&&u.events[i]){if(u.events[i].apply(u,n)!==!0)return;o=!0}}if(!o&&!r)throw
        new Error(\"Nothing handled the event '\"+i+\"'.\")}function E(e,t){e.context=t,e.contextDidChange&&e.contextDidChange()}function
        v(e,n,i,s,a){function u(){C(d);try{A(e,d.sequence,\"Validation succeeded,
        finalizing transition;\"),f&&f.length&&e.recognizer.hasRoute(f[f.length-1].name)&&f.length===l.matchPoint||w(d,E),e.didTransition&&e.didTransition(E),A(e,d.sequence,\"TRANSITION
        COMPLETE.\"),p.resolve(E[E.length-1].handler)}catch(t){p.reject(t)}d.isAborted||(e.activeTransition=null)}function
        c(e){p.reject(e)}var l=o(e,n,i,s),h=n[n.length-1].handler,m=!1,f=e.currentHandlerInfos;if(e.activeTransition){if(y(e.activeTransition,h,i))return
        e.activeTransition;e.activeTransition.abort(),m=!0}var p=t.defer(),d=new r(e,p.promise);d.targetName=h,d.providedModels=l.providedModels,d.providedModelsArray=i,d.params=l.params,d.data=a||{},e.activeTransition=d;var
        E=g(e,n);return m||b(e,f,!0,[\"willTransition\",d]),A(e,d.sequence,\"Beginning
        validation for transition to \"+d.targetName),_(d,E,0,l.matchPoint,l.handlerParams).then(u,c),d}function
        g(e,t){for(var r=[],n=0,i=t.length;i>n;++n){var o=t[n],s=o.isDynamic||o.names&&o.names.length;r.push({isDynamic:!!s,name:o.handler,handler:e.getHandler(o.handler)})}return
        r}function y(e,t,r){if(e.targetName!==t)return!1;var n=e.providedModelsArray;if(n.length!==r.length)return!1;for(var
        i=0,o=n.length;o>i;++i)if(n[i]!==r[i])return!1;return!0}function w(e,t){for(var
        r=e.router,n=(e.sequence,t[t.length-1].name),i=[],o=e.providedModelsArray.slice(),s=t.length-1;s>=0;--s){var
        c=t[s];if(c.isDynamic){var l=o.pop();i.unshift(a(l)?l.toString():c.context)}}var
        h=u(r,n,i);r.currentParams=h;var f=e.urlMethod;if(f){var p=r.recognizer.generate(n,h);\"replace\"===f?r.replaceURL(p):r.updateURL(p)}m(e,t)}function
        _(e,i,o,s,a){function u(r){return e.isAborted?(A(e.router,e.sequence,\"detected
        abort.\"),t.reject(new n.TransitionAborted)):r}function c(r){return r instanceof
        n.TransitionAborted?t.reject(r):(e.abort(),A(p,g,v+\": handling error: \"+r),b(p,i.slice(0,o+1),!0,[\"error\",r,e]),t.reject(r))}function
        l(){A(p,g,v+\": calling beforeModel hook\");var t=E.beforeModel&&E.beforeModel(e);return
        t instanceof r?null:t}function h(){A(p,g,v+\": resolving model\");var t=O(d,e,a[v],o>=s);return
        t instanceof r?null:t}function m(t){A(p,g,v+\": calling afterModel hook\"),e.resolvedModels[d.name]=t;var
        n=E.afterModel&&E.afterModel(t,e);return n instanceof r?null:n}function f(){return
        A(p,g,v+\": validation succeeded, proceeding\"),d.context=e.resolvedModels[d.name],_(e,i,o+1,s,a)}if(o===i.length)return
        t.resolve(e.resolvedModels);var p=e.router,d=i[o],E=d.handler,v=d.name,g=e.sequence;return
        s>o?(A(p,g,v+\": using context from already-active handler\"),e.resolvedModels[d.name]=e.providedModels[d.name]||d.handler.context,f()):t.resolve().then(u).then(l).then(u).then(h).then(u).then(m).then(u).then(null,c).then(f)}function
        C(e){if(e.isAborted)throw A(e.router,e.sequence,\"detected abort.\"),new n.TransitionAborted}function
        O(e,t,r,n){var i=e.handler,o=e.name;if(!n&&i.hasOwnProperty(\"context\"))return
        i.context;if(t.providedModels.hasOwnProperty(o)){var s=t.providedModels[o];return\"function\"==typeof
        s?s():s}return i.model&&i.model(r||{},t)}function A(e,t,r){e.log&&(3===arguments.length?e.log(\"Transition
        #\"+t+\": \"+r):(r=t,e.log(r)))}function P(e,t){var r=t[0]||\"/\";return\"/\"===r.charAt(0)?h(e,r):l(e,t)}function
        V(e,t,r){var n={};if(a(t))return n[r[0]]=t,n;if(e.serialize)return e.serialize(t,r);if(1===r.length){var
        i=r[0];return n[i]=/_id$/.test(i)?t.id:t,n}}var x=Array.prototype.slice;return
        r.currentSequence=0,r.prototype={targetName:null,urlMethod:\"update\",providedModels:null,resolvedModels:null,params:null,promise:null,data:null,then:function(e,t){return
        this.promise.then(e,t)},abort:function(){return this.isAborted?this:(A(this.router,this.sequence,this.targetName+\":
        transition was aborted\"),this.isAborted=!0,this.router.activeTransition=null,this)},retry:function(){this.abort();var
        e=this.router.recognizer.handlersFor(this.targetName),t=v(this.router,e,this.providedModelsArray,this.params,this.data);return
        t},method:function(e){return this.urlMethod=e,this}},n.UnrecognizedURLError=function(e){this.message=e||\"UnrecognizedURLError\",this.name=\"UnrecognizedURLError\"},n.TransitionAborted=function(e){this.message=e||\"TransitionAborted\",this.name=\"TransitionAborted\"},n.prototype={map:function(e){this.recognizer.delegate=this.delegate,this.recognizer.map(e,function(e,t){var
        r=t[t.length-1].handler,n=[t,{as:r}];e.add.apply(e,n)})},hasRoute:function(e){return
        this.recognizer.hasRoute(e)},reset:function(){p(this.currentHandlerInfos||[],function(e){var
        t=e.handler;t.exit&&t.exit()}),this.currentHandlerInfos=null,this.targetHandlerInfos=null},activeTransition:null,handleURL:function(e){var
        t=x.call(arguments);return\"/\"!==e.charAt(0)&&(t[0]=\"/\"+e),P(this,t).method(null)},updateURL:function(){throw
        new Error(\"updateURL is not implemented\")},replaceURL:function(e){this.updateURL(e)},transitionTo:function(){return
        P(this,arguments)},replaceWith:function(){return P(this,arguments).method(\"replace\")},paramsForHandler:function(e){return
        u(this,e,x.call(arguments,1))},generate:function(e){var t=u(this,e,x.call(arguments,1));return
        this.recognizer.generate(e,t)},isActive:function(e){var t,r,n=x.call(arguments,1),i=this.targetHandlerInfos,o=!1;if(!i)return!1;for(var
        s=this.recognizer.handlersFor(i[i.length-1].name),u=i.length-1;u>=0;u--)if(r=i[u],r.name===e&&(o=!0),o){if(0===n.length)break;if(r.isDynamic)if(t=n.pop(),a(t)){var
        c=s[u],l=c.names[0];if(\"\"+t!==this.currentParams[l])return!1}else if(r.context!==t)return!1}return
        0===n.length&&o},trigger:function(){var e=x.call(arguments);b(this,this.currentHandlerInfos,!1,e)},log:null},n})}(),function(){function
        e(e){this.parent=e,this.matches=[]}e.prototype={resource:function(t,r,n){if(2===arguments.length&&\"function\"==typeof
        r&&(n=r,r={}),1===arguments.length&&(r={}),\"string\"!=typeof r.path&&(r.path=\"/\"+t),n){var
        i=new e(t);n.call(i),this.push(r.path,t,i.generate())}else this.push(r.path,t)},push:function(e,t,r){var
        n=t.split(\".\");(\"\"===e||\"/\"===e||\"index\"===n[n.length-1])&&(this.explicitIndex=!0),this.matches.push([e,t,r])},route:function(e,t){t=t||{},\"string\"!=typeof
        t.path&&(t.path=\"/\"+e),this.parent&&\"application\"!==this.parent&&(e=this.parent+\".\"+e),this.push(t.path,e)},generate:function(){var
        e=this.matches;return this.explicitIndex||this.route(\"index\",{path:\"/\"}),function(t){for(var
        r=0,n=e.length;n>r;r++){var i=e[r];t(i[0]).to(i[1],i[2])}}}},e.map=function(t){var
        r=new e;return t.call(r),r},Ember.RouterDSL=e}(),function(){var e=Ember.get;Ember.controllerFor=function(e,t,r){return
        e.lookup(\"controller:\"+t,r)},Ember.generateController=function(t,r,n){var
        i,o,s,a,u;return u=n&&Ember.isArray(n)?\"array\":n?\"object\":\"basic\",a=\"controller:\"+u,i=t.lookupFactory(a).extend({isGenerated:!0,toString:function(){return\"(generated
        \"+r+\" controller)\"}}),o=\"controller:\"+r,t.register(o,i),s=t.lookup(o),e(s,\"namespace.LOG_ACTIVE_GENERATION\")&&Ember.Logger.info(\"generated
        -> \"+o,{fullName:o}),s}}(),function(){function e(e,t,r){var n=r.shift();if(!e){if(t)return;throw
        new Ember.Error(\"Could not trigger event '\"+n+\"'. There are no active handlers\")}for(var
        i=!1,o=e.length-1;o>=0;o--){var s=e[o],a=s.handler;if(a._actions&&a._actions[n]){if(a._actions[n].apply(a,r)!==!0)return;i=!0}else
        if(a.events&&a.events[n]){if(a.events[n].apply(a,r)!==!0)return;i=!0}}if(!i&&!t)throw
        new Ember.Error(\"Nothing handled the event '\"+n+\"'.\")}var r=t(\"router\"),n=Ember.get,i=Ember.set,o=Ember.defineProperty,s=Ember._MetamorphView;Ember.Router=Ember.Object.extend({location:\"hash\",init:function(){this.router=this.constructor.router||this.constructor.map(Ember.K),this._activeViews={},this._setupLocation()},url:Ember.computed(function(){return
        n(this,\"location\").getURL()}),startRouting:function(){this.router=this.router||this.constructor.map(Ember.K);var
        e=this.router,t=n(this,\"location\"),r=this.container,i=this;this._setupRouter(e,t),r.register(\"view:default\",s),r.register(\"view:toplevel\",Ember.View.extend()),t.onUpdateURL(function(e){i.handleURL(e)}),this.handleURL(t.getURL())},didTransition:function(e){var
        t=this.container.lookup(\"controller:application\"),r=Ember.Router._routePath(e);\"currentPath\"in
        t||o(t,\"currentPath\"),i(t,\"currentPath\",r),\"currentRouteName\"in t||o(t,\"currentRouteName\"),i(t,\"currentRouteName\",e[e.length-1].name),this.notifyPropertyChange(\"url\"),n(this,\"namespace\").LOG_TRANSITIONS&&Ember.Logger.log(\"Transitioned
        into '\"+r+\"'\")},handleURL:function(e){return this._doTransition(\"handleURL\",[e])},transitionTo:function(){return
        this._doTransition(\"transitionTo\",arguments)},replaceWith:function(){return
        this._doTransition(\"replaceWith\",arguments)},generate:function(){var e=this.router.generate.apply(this.router,arguments);return
        this.location.formatURL(e)},isActive:function(){var e=this.router;return e.isActive.apply(e,arguments)},send:function(){this.router.trigger.apply(this.router,arguments)},hasRoute:function(e){return
        this.router.hasRoute(e)},reset:function(){this.router.reset()},_lookupActiveView:function(e){var
        t=this._activeViews[e];return t&&t[0]},_connectActiveView:function(e,t){var
        r=this._activeViews[e];r&&r[0].off(\"willDestroyElement\",this,r[1]);var n=function(){delete
        this._activeViews[e]};this._activeViews[e]=[t,n],t.one(\"willDestroyElement\",this,n)},_setupLocation:function(){var
        e=n(this,\"location\"),t=n(this,\"rootURL\"),r={};\"string\"==typeof t&&(r.rootURL=t),\"string\"==typeof
        e&&(r.implementation=e,e=i(this,\"location\",Ember.Location.create(r)))},_getHandlerFunction:function(){var
        e={},t=this.container,r=t.lookupFactory(\"route:basic\"),i=this;return function(o){var
        s=\"route:\"+o,a=t.lookup(s);if(e[o])return a;if(e[o]=!0,!a){if(\"loading\"===o)return{};t.register(s,r.extend()),a=t.lookup(s),n(i,\"namespace.LOG_ACTIVE_GENERATION\")&&Ember.Logger.info(\"generated
        -> \"+s,{fullName:s})}if(\"application\"===o){var u=a._actions||a.events;u||(u=a._actions={}),u.error=u.error||Ember.Router._defaultErrorHandler}return
        a.routeName=o,a}},_setupRouter:function(e,t){var r,n=this;e.getHandler=this._getHandlerFunction();var
        i=function(){t.setURL(r)};if(e.updateURL=function(e){r=e,Ember.run.once(i)},t.replaceURL){var
        o=function(){t.replaceURL(r)};e.replaceURL=function(e){r=e,Ember.run.once(o)}}e.didTransition=function(e){n.didTransition(e)}},_doTransition:function(e,t){t=[].slice.call(t),t[0]=t[0]||\"/\";var
        r,n=t[0],i=this;r=\"/\"===n.charAt(0)?n:this.router.hasRoute(n)?n:t[0]=n+\".index\";var
        o=this.router[e].apply(this.router,t);return this.router.activeTransition&&this._scheduleLoadingStateEntry(),o.then(function(e){i._transitionCompleted(e)},function(e){\"UnrecognizedURLError\"===e.name}),o},_scheduleLoadingStateEntry:function(){this._loadingStateActive||(this._shouldEnterLoadingState=!0,Ember.run.scheduleOnce(\"routerTransitions\",this,this._enterLoadingState))},_enterLoadingState:function(){if(!this._loadingStateActive&&this._shouldEnterLoadingState){var
        e=this.router.getHandler(\"loading\");e&&(e.enter&&e.enter(),e.setup&&e.setup(),this._loadingStateActive=!0)}},_exitLoadingState:function(){if(this._shouldEnterLoadingState=!1,this._loadingStateActive){var
        e=this.router.getHandler(\"loading\");e&&e.exit&&e.exit(),this._loadingStateActive=!1}},_transitionCompleted:function(){this.notifyPropertyChange(\"url\"),this._exitLoadingState()}}),Ember.Router.reopenClass({router:null,map:function(t){var
        i=this.router;i||(i=new r,i.callbacks=[],i.triggerEvent=e,this.reopenClass({router:i})),n(this,\"namespace.LOG_TRANSITIONS_INTERNAL\")&&(i.log=Ember.Logger.debug);var
        o=Ember.RouterDSL.map(function(){this.resource(\"application\",{path:\"/\"},function(){for(var
        e=0;e<i.callbacks.length;e++)i.callbacks[e].call(this);t.call(this)})});return
        i.callbacks.push(t),i.map(o.generate()),i},_defaultErrorHandler:function(e){Ember.Logger.error(\"Error
        while loading route:\",e),setTimeout(function(){throw e})},_routePath:function(e){for(var
        t=[],r=1,n=e.length;n>r;r++){var i=e[r].name,o=i.split(\".\");t.push(o[o.length-1])}return
        t.join(\".\")}})}(),function(){function e(e){var t=e.router.router.targetHandlerInfos;if(t)for(var
        r,n,i=0,o=t.length;o>i;i++){if(n=t[i].handler,n===e)return r;r=n}}function
        t(r){var n,i=e(r);if(i)return(n=i.lastRenderedTemplate)?n:t(i)}function r(e,r,n,i){i=i||{},i.into=i.into?i.into.replace(/\\//g,\".\"):t(e),i.outlet=i.outlet||\"main\",i.name=r,i.template=n,i.LOG_VIEW_LOOKUPS=a(e.router,\"namespace.LOG_VIEW_LOOKUPS\");var
        o,s=i.controller;return s=i.controller?i.controller:(o=e.container.lookup(\"controller:\"+r))?o:e.controllerName||e.routeName,\"string\"==typeof
        s&&(s=e.container.lookup(\"controller:\"+s)),i.controller=s,i}function n(e,t,r){if(e)r.LOG_VIEW_LOOKUPS&&Ember.Logger.info(\"Rendering
        \"+r.name+\" with \"+e,{fullName:\"view:\"+r.name});else{var n=r.into?\"view:default\":\"view:toplevel\";e=t.lookup(n),r.LOG_VIEW_LOOKUPS&&Ember.Logger.info(\"Rendering
        \"+r.name+\" with default view \"+e,{fullName:\"view:\"+r.name})}return a(e,\"templateName\")||(u(e,\"template\",r.template),u(e,\"_debugTemplateName\",r.name)),u(e,\"renderedName\",r.name),u(e,\"controller\",r.controller),e}function
        i(e,t,r){if(r.into){var n=e.router._lookupActiveView(r.into),i=s(n,r.outlet);e.teardownOutletViews||(e.teardownOutletViews=[]),h(e.teardownOutletViews,0,0,[i]),n.connectOutlet(r.outlet,t)}else{var
        u=a(e,\"router.namespace.rootElement\");e.teardownTopLevelView&&e.teardownTopLevelView(),e.router._connectActiveView(r.name,t),e.teardownTopLevelView=o(t),t.appendTo(u)}}function
        o(e){return function(){e.destroy()}}function s(e,t){return function(){e.disconnectOutlet(t)}}var
        a=Ember.get,u=Ember.set,c=Ember.getProperties,l=(Ember.String.classify,Ember.String.fmt,Ember.EnumerableUtils.forEach),h=Ember.EnumerableUtils.replace;Ember.Route=Ember.Object.extend(Ember.ActionHandler,{exit:function(){this.deactivate(),this.teardownViews()},enter:function(){this.activate()},actions:null,events:null,mergedProperties:[\"events\"],deactivate:Ember.K,activate:Ember.K,transitionTo:function(){var
        e=this.router;return e.transitionTo.apply(e,arguments)},replaceWith:function(){return
        this.router,this.router.replaceWith.apply(this.router,arguments)},send:function(){return
        this.router.send.apply(this.router,arguments)},setup:function(e){var t=this.controllerName||this.routeName,r=this.controllerFor(t,!0);r||(r=this.generateController(t,e)),this.controller=r,this.setupControllers?this.setupControllers(r,e):this.setupController(r,e),this.renderTemplates?this.renderTemplates(e):this.renderTemplate(r,e)},redirect:Ember.K,beforeModel:Ember.K,afterModel:function(e,t){this.redirect(e,t)},contextDidChange:function(){this.currentModel=this.context},model:function(e){var
        t,r,n,i;for(var o in e)(t=o.match(/^(.*)_id$/))&&(r=t[1],i=e[o]),n=!0;if(!r&&n)return
        e;if(r)return this.findModel(r,i)},findModel:function(){var e=a(this,\"store\");return
        e.find.apply(e,arguments)},store:Ember.computed(function(){var e=this.container;return
        this.routeName,a(this,\"router.namespace\"),{find:function(t,r){var n=e.lookupFactory(\"model:\"+t);return
        n.find(r)}}}),serialize:function(e,t){if(!(t.length<1)){var r=t[0],n={};return/_id$/.test(r)&&1===t.length?n[r]=a(e,\"id\"):n=c(e,t),n}},setupController:function(e,t){e&&void
        0!==t&&u(e,\"model\",t)},controllerFor:function(e){var t,r=this.container,n=r.lookup(\"route:\"+e);return
        n&&n.controllerName&&(e=n.controllerName),t=r.lookup(\"controller:\"+e)},generateController:function(e,t){var
        r=this.container;return t=t||this.modelFor(e),Ember.generateController(r,e,t)},modelFor:function(e){var
        t=this.container.lookup(\"route:\"+e),r=this.router.router.activeTransition;if(r){var
        n=t&&t.routeName||e;if(r.resolvedModels.hasOwnProperty(n))return r.resolvedModels[n]}return
        t&&t.currentModel},renderTemplate:function(){this.render()},render:function(e,t){\"object\"!=typeof
        e||t||(t=e,e=this.routeName),t=t||{},e=e?e.replace(/\\//g,\".\"):this.routeName;var
        o=t.view||this.viewName||e,s=this.templateName||e,u=this.container,c=u.lookup(\"view:\"+o),l=c?c.get(\"template\"):null;return
        l||(l=u.lookup(\"template:\"+s)),c||l?(t=r(this,e,l,t),c=n(c,u,t),\"main\"===t.outlet&&(this.lastRenderedTemplate=e),i(this,c,t),void
        0):(a(this.router,\"namespace.LOG_VIEW_LOOKUPS\")&&Ember.Logger.info('Could
        not find \"'+e+'\" template or view. Nothing will be rendered',{fullName:\"template:\"+e}),void
        0)},disconnectOutlet:function(e){e=e||{},e.parentView=e.parentView?e.parentView.replace(/\\//g,\".\"):t(this),e.outlet=e.outlet||\"main\";var
        r=this.router._lookupActiveView(e.parentView);r.disconnectOutlet(e.outlet)},willDestroy:function(){this.teardownViews()},teardownViews:function(){this.teardownTopLevelView&&this.teardownTopLevelView();var
        e=this.teardownOutletViews||[];l(e,function(e){e()}),delete this.teardownTopLevelView,delete
        this.teardownOutletViews,delete this.lastRenderedTemplate}})}(),function(){Ember.onLoad(\"Ember.Handlebars\",function(){function
        e(e,r,i){return n.call(t(e,r,i),function(t,n){return null===t?r[n]:o(e,t,i)})}function
        t(e,t,o){function s(e,t){return\"controller\"===t?t:Ember.ControllerMixin.detect(e)?s(i(e,\"model\"),t?t+\".model\":\"model\"):t}var
        a=r(e,t,o),u=o.types;return n.call(a,function(e,r){return\"ID\"===u[r]?s(e,t[r]):null})}var
        r=Ember.Handlebars.resolveParams,n=Ember.ArrayPolyfills.map,i=Ember.get,o=Ember.Handlebars.get;Ember.Router.resolveParams=e,Ember.Router.resolvePaths=t})}(),function(){var
        e=Ember.get;Ember.set,Ember.String.fmt,Ember.onLoad(\"Ember.Handlebars\",function(){function
        t(e,t){return e.hasRoute(t)||(t+=\".index\"),t}function r(e){var t=e.options.types,r=e.options.data;return
        i(e.context,e.params,{types:t,data:r})}var n=Ember.Router.resolveParams,i=Ember.Router.resolvePaths,o=Ember.ViewUtils.isSimpleClick,s=Ember.LinkView=Ember.View.extend({tagName:\"a\",currentWhen:null,title:null,rel:null,activeClass:\"active\",loadingClass:\"loading\",disabledClass:\"disabled\",_isDisabled:!1,replace:!1,attributeBindings:[\"href\",\"title\",\"rel\"],classNameBindings:[\"active\",\"loading\",\"disabled\"],eventName:\"click\",init:function(){this._super.apply(this,arguments);var
        t=e(this,\"eventName\");this.on(t,this,this._invoke);var n,i,o=this.parameters,s=o.context,a=r(o),u=a.length;for(i=0;u>i;i++)if(n=a[i],null!==n){var
        c=Ember.Handlebars.normalizePath(s,n,o.options.data);this.registerObserver(c.root,c.path,this,this._paramsChanged)}},_paramsChanged:function(){this.notifyPropertyChange(\"resolvedParams\")},concreteView:Ember.computed(function(){return
        e(this,\"parentView\")}).property(\"parentView\"),disabled:Ember.computed(function(t,r){return
        void 0!==r&&this.set(\"_isDisabled\",r),r?e(this,\"disabledClass\"):!1}),active:Ember.computed(function(){if(e(this,\"loading\"))return!1;var
        t=e(this,\"router\"),r=e(this,\"routeArgs\"),n=r.slice(1),i=e(this,\"resolvedParams\"),o=this.currentWhen||i[0],s=o+\".index\",a=t.isActive.apply(t,[o].concat(n))||t.isActive.apply(t,[s].concat(n));return
        a?e(this,\"activeClass\"):void 0}).property(\"resolvedParams\",\"routeArgs\",\"router.url\"),loading:Ember.computed(function(){return
        e(this,\"routeArgs\")?void 0:e(this,\"loadingClass\")}).property(\"routeArgs\"),router:Ember.computed(function(){return
        e(this,\"controller\").container.lookup(\"router:main\")}),_invoke:function(t){if(!o(t))return!0;if(t.preventDefault(),this.bubbles===!1&&t.stopPropagation(),e(this,\"_isDisabled\"))return!1;if(e(this,\"loading\"))return
        Ember.Logger.warn(\"This link-to is in an inactive loading state because at
        least one of its parameters presently has a null/undefined value, or the provided
        route name is invalid.\"),!1;var r=e(this,\"router\"),n=e(this,\"routeArgs\");e(this,\"replace\")?r.replaceWith.apply(r,n):r.transitionTo.apply(r,n)},resolvedParams:Ember.computed(function(){var
        e=this.parameters,t=e.options,r=t.types,i=t.data;return n(e.context,e.params,{types:r,data:i})}).property(),routeArgs:Ember.computed(function(){var
        r=e(this,\"resolvedParams\").slice(0),n=e(this,\"router\"),i=r[0];if(i){i=t(n,i),r[0]=i;for(var
        o=1,s=r.length;s>o;++o){var a=r[o];if(null===a||\"undefined\"==typeof a)return}return
        r}}).property(\"resolvedParams\"),href:Ember.computed(function(){if(\"a\"===e(this,\"tagName\")){var
        t=e(this,\"router\"),r=e(this,\"routeArgs\");return r?t.generate.apply(t,r):e(this,\"loadingHref\")}}).property(\"routeArgs\"),loadingHref:\"#\"});s.toString=function(){return\"LinkView\"},Ember.Handlebars.registerHelper(\"link-to\",function(){var
        e=[].slice.call(arguments,-1)[0],t=[].slice.call(arguments,0,-1),r=e.hash;\nreturn
        r.disabledBinding=r.disabledWhen,r.parameters={context:this,options:e,params:t},Ember.Handlebars.helpers.view.call(this,s,e)}),Ember.Handlebars.registerHelper(\"linkTo\",Ember.Handlebars.helpers[\"link-to\"])})}(),function(){Ember.get,Ember.set,Ember.onLoad(\"Ember.Handlebars\",function(e){e.OutletView=Ember.ContainerView.extend(Ember._Metamorph),e.registerHelper(\"outlet\",function(t,r){var
        n,i;for(t&&t.data&&t.data.isRenderData&&(r=t,t=\"main\"),n=r.data.view;!n.get(\"template.isTop\");)n=n.get(\"_parentView\");return
        i=r.hash.viewClass||e.OutletView,r.data.view.set(\"outletSource\",n),r.hash.currentViewBinding=\"_view.outletSource._outlets.\"+t,e.helpers.view.call(this,i,r)})})}(),function(){Ember.get,Ember.set,Ember.onLoad(\"Ember.Handlebars\",function(){Ember.Handlebars.registerHelper(\"render\",function(e,t,r){var
        n,i,o,s,a,u,c=3===arguments.length;2===arguments.length&&(r=t,t=void 0),\"string\"==typeof
        t&&(a=Ember.Handlebars.get(r.contexts[1],t,r),u={singleton:!1}),e=e.replace(/\\//g,\".\"),n=r.data.keywords.controller.container,i=n.lookup(\"router:main\"),s=n.lookup(\"view:\"+e)||n.lookup(\"view:default\");var
        l=r.hash.controller;o=l?n.lookup(\"controller:\"+l,u):n.lookup(\"controller:\"+e,u)||Ember.generateController(n,e,a),o&&c&&o.set(\"model\",a);var
        h=r.contexts[1];h&&s.registerObserver(h,t,function(){o.set(\"model\",Ember.Handlebars.get(h,t,r))}),o.set(\"target\",r.data.keywords.controller),r.hash.viewName=Ember.String.camelize(e),r.hash.template=n.lookup(\"template:\"+e),r.hash.controller=o,i&&!a&&i._connectActiveView(e,s),Ember.Handlebars.helpers.view.call(this,s,r)})})}(),function(){Ember.onLoad(\"Ember.Handlebars\",function(){function
        e(e,r){var n=[];r&&n.push(r);var i=e.options.types.slice(1),o=e.options.data;return
        n.concat(t(e.context,e.params,{types:i,data:o}))}var t=Ember.Router.resolveParams,r=Ember.ViewUtils.isSimpleClick,n=Ember.Handlebars,i=n.get,o=n.SafeString,s=Ember.ArrayPolyfills.forEach,a=(Ember.get,Array.prototype.slice),u=n.ActionHelper={registeredActions:{}},c=[\"alt\",\"shift\",\"meta\",\"ctrl\"],l=function(e,t){if(\"undefined\"==typeof
        t)return r(e);if(t.indexOf(\"any\")>=0)return!0;var n=!0;return s.call(c,function(r){e[r+\"Key\"]&&-1===t.indexOf(r)&&(n=!1)}),n};u.registerAction=function(t,r,n){var
        o=(++Ember.uuid).toString();return u.registeredActions[o]={eventName:r.eventName,handler:function(o){if(!l(o,n))return!0;o.preventDefault(),r.bubbles===!1&&o.stopPropagation();var
        s=r.target;s=s.target?i(s.root,s.target,s.options):s.root,Ember.run(function(){s.send?s.send.apply(s,e(r.parameters,t)):s[t].apply(s,e(r.parameters))})}},r.view.on(\"willClearRender\",function(){delete
        u.registeredActions[o]}),o},n.registerHelper(\"action\",function(e){var t,r=arguments[arguments.length-1],n=a.call(arguments,1,-1),i=r.hash,s={eventName:i.on||\"click\"};s.parameters={context:this,options:r,params:n},s.view=r.data.view;var
        c,l;i.target?(c=this,l=i.target):(t=r.data.keywords.controller)&&(c=t),s.target={root:c,target:l,options:r},s.bubbles=i.bubbles;var
        h=u.registerAction(e,s,i.allowedKeys);return new o('data-ember-action=\"'+h+'\"')})})}(),function(){if(Ember.ENV.EXPERIMENTAL_CONTROL_HELPER){var
        e=Ember.get,t=Ember.set;Ember.Handlebars.registerHelper(\"control\",function(r,n,i){function
        o(){var e=Ember.Handlebars.get(this,n,i);t(p,\"model\",e),f.rerender()}2===arguments.length&&(i=n,n=void
        0);var s;n&&(s=Ember.Handlebars.get(this,n,i));var a,u,c=i.data.keywords.controller,l=(i.data.keywords.view,e(c,\"_childContainers\")),h=i.hash.controlID;l.hasOwnProperty(h)?u=l[h]:(a=e(c,\"container\"),u=a.child(),l[h]=u);var
        m=r.replace(/\\//g,\".\"),f=u.lookup(\"view:\"+m)||u.lookup(\"view:default\"),p=u.lookup(\"controller:\"+m),d=u.lookup(\"template:\"+r);t(p,\"target\",c),t(p,\"model\",s),i.hash.template=d,i.hash.controller=p,n&&(Ember.addObserver(this,n,o),f.one(\"willDestroyElement\",this,function(){Ember.removeObserver(this,n,o)})),Ember.Handlebars.helpers.view.call(this,f,i)})}}(),function(){var
        e=Ember.get;Ember.set,Ember.ControllerMixin.reopen({transitionToRoute:function(){var
        t=e(this,\"target\"),r=t.transitionToRoute||t.transitionTo;return r.apply(t,arguments)},transitionTo:function(){return
        this.transitionToRoute.apply(this,arguments)},replaceRoute:function(){var
        t=e(this,\"target\"),r=t.replaceRoute||t.replaceWith;return r.apply(t,arguments)},replaceWith:function(){return
        this.replaceRoute.apply(this,arguments)}})}(),function(){var e=Ember.get,t=Ember.set;Ember.View.reopen({init:function(){t(this,\"_outlets\",{}),this._super()},connectOutlet:function(r,n){if(this._pendingDisconnections&&delete
        this._pendingDisconnections[r],this._hasEquivalentView(r,n))return n.destroy(),void
        0;var i=e(this,\"_outlets\"),o=e(this,\"container\"),s=o&&o.lookup(\"router:main\"),a=e(n,\"renderedName\");t(i,r,n),s&&a&&s._connectActiveView(a,n)},_hasEquivalentView:function(t,r){var
        n=e(this,\"_outlets.\"+t);return n&&n.constructor===r.constructor&&n.get(\"template\")===r.get(\"template\")&&n.get(\"context\")===r.get(\"context\")},disconnectOutlet:function(e){this._pendingDisconnections||(this._pendingDisconnections={}),this._pendingDisconnections[e]=!0,Ember.run.once(this,\"_finishDisconnections\")},_finishDisconnections:function(){var
        r=e(this,\"_outlets\"),n=this._pendingDisconnections;this._pendingDisconnections=null;for(var
        i in n)t(r,i,null)}})}(),function(){var e=Ember.run.queues,t=Ember.ArrayPolyfills.indexOf;e.splice(t.call(e,\"actions\")+1,0,\"routerTransitions\")}(),function(){Ember.get,Ember.set,Ember.Location={create:function(e){var
        t=e&&e.implementation,r=this.implementations[t];return r.create.apply(r,arguments)},registerImplementation:function(e,t){this.implementations[e]=t},implementations:{}}}(),function(){var
        e=Ember.get,t=Ember.set;Ember.NoneLocation=Ember.Object.extend({path:\"\",getURL:function(){return
        e(this,\"path\")},setURL:function(e){t(this,\"path\",e)},onUpdateURL:function(e){this.updateCallback=e},handleURL:function(e){t(this,\"path\",e),this.updateCallback(e)},formatURL:function(e){return
        e}}),Ember.Location.registerImplementation(\"none\",Ember.NoneLocation)}(),function(){var
        e=Ember.get,t=Ember.set;Ember.HashLocation=Ember.Object.extend({init:function(){t(this,\"location\",e(this,\"location\")||window.location)},getURL:function(){return
        e(this,\"location\").hash.substr(1)},setURL:function(r){e(this,\"location\").hash=r,t(this,\"lastSetURL\",r)},replaceURL:function(t){e(this,\"location\").replace(\"#\"+t)},onUpdateURL:function(r){var
        n=this,i=Ember.guidFor(this);Ember.$(window).on(\"hashchange.ember-location-\"+i,function(){Ember.run(function(){var
        i=location.hash.substr(1);e(n,\"lastSetURL\")!==i&&(t(n,\"lastSetURL\",null),r(i))})})},formatURL:function(e){return\"#\"+e},willDestroy:function(){var
        e=Ember.guidFor(this);Ember.$(window).off(\"hashchange.ember-location-\"+e)}}),Ember.Location.registerImplementation(\"hash\",Ember.HashLocation)}(),function(){var
        e=Ember.get,t=Ember.set,r=!1,n=window.history&&\"state\"in window.history;Ember.HistoryLocation=Ember.Object.extend({init:function(){t(this,\"location\",e(this,\"location\")||window.location),this.initState()},initState:function(){t(this,\"history\",e(this,\"history\")||window.history),this.replaceState(this.formatURL(this.getURL()))},rootURL:\"/\",getURL:function(){var
        t=e(this,\"rootURL\"),r=e(this,\"location\").pathname;return t=t.replace(/\\/$/,\"\"),r=r.replace(t,\"\")},setURL:function(e){var
        t=this.getState();e=this.formatURL(e),t&&t.path!==e&&this.pushState(e)},replaceURL:function(e){var
        t=this.getState();e=this.formatURL(e),t&&t.path!==e&&this.replaceState(e)},getState:function(){return
        n?e(this,\"history\").state:this._historyState},pushState:function(t){var
        r={path:t};e(this,\"history\").pushState(r,null,t),n||(this._historyState=r),this._previousURL=this.getURL()},replaceState:function(t){var
        r={path:t};e(this,\"history\").replaceState(r,null,t),n||(this._historyState=r),this._previousURL=this.getURL()},onUpdateURL:function(e){var
        t=Ember.guidFor(this),n=this;Ember.$(window).on(\"popstate.ember-location-\"+t,function(){(r||(r=!0,n.getURL()!==n._previousURL))&&e(n.getURL())})},formatURL:function(t){var
        r=e(this,\"rootURL\");return\"\"!==t&&(r=r.replace(/\\/$/,\"\")),r+t},willDestroy:function(){var
        e=Ember.guidFor(this);Ember.$(window).off(\"popstate.ember-location-\"+e)}}),Ember.Location.registerImplementation(\"history\",Ember.HistoryLocation)}(),function(){function
        e(t,r,n,i){var o,s=t.name,a=t.incoming,u=t.incomingNames,c=u.length;if(n||(n={}),i||(i=[]),!n.hasOwnProperty(s)){for(i.push(s),n[s]=!0,o=0;c>o;o++)e(a[u[o]],r,n,i);r(t,i),i.pop()}}function
        t(){this.names=[],this.vertices={}}t.prototype.add=function(e){if(e){if(this.vertices.hasOwnProperty(e))return
        this.vertices[e];var t={name:e,incoming:{},incomingNames:[],hasOutgoing:!1,value:null};return
        this.vertices[e]=t,this.names.push(e),t}},t.prototype.map=function(e,t){this.add(e).value=t},t.prototype.addEdge=function(t,r){function
        n(e,t){if(e.name===r)throw new Ember.Error(\"cycle detected: \"+r+\" <- \"+t.join(\"
        <- \"))}if(t&&r&&t!==r){var i=this.add(t),o=this.add(r);o.incoming.hasOwnProperty(t)||(e(i,n),i.hasOutgoing=!0,o.incoming[t]=i,o.incomingNames.push(t))}},t.prototype.topsort=function(t){var
        r,n,i={},o=this.vertices,s=this.names,a=s.length;for(r=0;a>r;r++)n=o[s[r]],n.hasOutgoing||e(n,t,i)},t.prototype.addEdges=function(e,t,r,n){var
        i;if(this.map(e,t),r)if(\"string\"==typeof r)this.addEdge(e,r);else for(i=0;i<r.length;i++)this.addEdge(e,r[i]);if(n)if(\"string\"==typeof
        n)this.addEdge(n,e);else for(i=0;i<n.length;i++)this.addEdge(n[i],e)},Ember.DAG=t}(),function(){var
        e=Ember.get,t=Ember.String.classify,r=Ember.String.capitalize,n=Ember.String.decamelize;Ember.DefaultResolver=Ember.Object.extend({namespace:null,normalize:function(e){var
        t=e.split(\":\",2),r=t[0],n=t[1];if(\"template\"!==r){var i=n;return i.indexOf(\".\")>-1&&(i=i.replace(/\\.(.)/g,function(e){return
        e.charAt(1).toUpperCase()})),n.indexOf(\"_\")>-1&&(i=i.replace(/_(.)/g,function(e){return
        e.charAt(1).toUpperCase()})),r+\":\"+i}return e},resolve:function(e){var t=this.parseName(e),r=this[t.resolveMethodName];if(!t.name||!t.type)throw
        new TypeError(\"Invalid fullName: `\"+e+\"`, must of of the form `type:name`
        \");if(r){var n=r.call(this,t);if(n)return n}return this.resolveOther(t)},parseName:function(n){var
        i=n.split(\":\"),o=i[0],s=i[1],a=s,u=e(this,\"namespace\"),c=u;if(\"template\"!==o&&-1!==a.indexOf(\"/\")){var
        l=a.split(\"/\");a=l[l.length-1];var h=r(l.slice(0,-1).join(\".\"));c=Ember.Namespace.byName(h)}return{fullName:n,type:o,fullNameWithoutType:s,name:a,root:c,resolveMethodName:\"resolve\"+t(o)}},resolveTemplate:function(e){var
        t=e.fullNameWithoutType.replace(/\\./g,\"/\");return Ember.TEMPLATES[t]?Ember.TEMPLATES[t]:(t=n(t),Ember.TEMPLATES[t]?Ember.TEMPLATES[t]:void
        0)},useRouterNaming:function(e){e.name=e.name.replace(/\\./g,\"_\"),\"basic\"===e.name&&(e.name=\"\")},resolveController:function(e){return
        this.useRouterNaming(e),this.resolveOther(e)},resolveRoute:function(e){return
        this.useRouterNaming(e),this.resolveOther(e)},resolveView:function(e){return
        this.useRouterNaming(e),this.resolveOther(e)},resolveModel:function(r){var
        n=t(r.name),i=e(r.root,n);return i?i:void 0},resolveOther:function(r){var
        n=t(r.name)+t(r.type),i=e(r.root,n);return i?i:void 0},lookupDescription:function(e){var
        r=this.parseName(e);if(\"template\"===r.type)return\"template at \"+r.fullNameWithoutType.replace(/\\./g,\"/\");var
        n=r.root+\".\"+t(r.name);return\"model\"!==r.type&&(n+=t(r.type)),n},makeToString:function(e){return
        e.toString()}})}(),function(){function e(e){this._container=e}function t(e){function
        t(e){return n.resolve(e)}e.get(\"resolver\");var r=e.get(\"resolver\")||e.get(\"Resolver\")||Ember.DefaultResolver,n=r.create({namespace:e});return
        t.describe=function(e){return n.lookupDescription(e)},t.makeToString=function(e,t){return
        n.makeToString(e,t)},t.normalize=function(e){return n.normalize?n.normalize(e):e},t}var
        r=Ember.get,n=Ember.set;e.deprecate=function(e){return function(){var t=this._container;return
        t[e].apply(t,arguments)}},e.prototype={_container:null,lookup:e.deprecate(\"lookup\"),resolve:e.deprecate(\"resolve\"),register:e.deprecate(\"register\")};var
        i=Ember.Application=Ember.Namespace.extend(Ember.DeferredMixin,{rootElement:\"body\",eventDispatcher:null,customEvents:null,_readinessDeferrals:1,init:function(){if(this.$||(this.$=Ember.$),this.__container__=this.buildContainer(),this.Router=this.Router||this.defaultRouter(),this.Router&&(this.Router.namespace=this),this._super(),this.scheduleInitialize(),Ember.libraries.registerCoreLibrary(\"Handlebars\",Ember.Handlebars.VERSION),Ember.libraries.registerCoreLibrary(\"jQuery\",Ember.$().jquery),Ember.LOG_VERSION){Ember.LOG_VERSION=!1;var
        e=Math.max.apply(this,Ember.A(Ember.libraries).mapBy(\"name.length\"));Ember.libraries.each(function(t){new
        Array(e-t.length+1).join(\" \")})}},buildContainer:function(){var e=this.__container__=i.buildContainer(this);return
        e},defaultRouter:function(){return void 0===this.router?Ember.Router.extend():void
        0},scheduleInitialize:function(){var e=this;!this.$||this.$.isReady?Ember.run.schedule(\"actions\",e,\"_initialize\"):this.$().ready(function(){Ember.run(e,\"_initialize\")})},deferReadiness:function(){this._readinessDeferrals++},advanceReadiness:function(){this._readinessDeferrals--,0===this._readinessDeferrals&&Ember.run.once(this,this.didBecomeReady)},register:function(){var
        e=this.__container__;e.register.apply(e,arguments)},inject:function(){var
        e=this.__container__;e.injection.apply(e,arguments)},initialize:function(){},_initialize:function(){return
        this.isDestroyed?void 0:(this.Router&&this.register(\"router:main\",this.Router),this.runInitializers(),Ember.runLoadHooks(\"application\",this),this.advanceReadiness(),this)},reset:function(){function
        e(){var e=this.__container__.lookup(\"router:main\");e.reset(),Ember.run(this.__container__,\"destroy\"),this.buildContainer(),Ember.run.schedule(\"actions\",this,function(){this._initialize()})}this._readinessDeferrals=1,Ember.run.join(this,e)},runInitializers:function(){var
        e,t,n=r(this.constructor,\"initializers\"),i=this.__container__,o=new Ember.DAG,s=this;for(e
        in n)t=n[e],o.addEdges(t.name,t.initialize,t.before,t.after);o.topsort(function(e){var
        t=e.value;t(i,s)})},didBecomeReady:function(){this.setupEventDispatcher(),this.ready(),this.startRouting(),Ember.testing||(Ember.Namespace.processAll(),Ember.BOOTED=!0),this.resolve(this)},setupEventDispatcher:function(){var
        e=r(this,\"customEvents\"),t=r(this,\"rootElement\"),i=this.__container__.lookup(\"event_dispatcher:main\");n(this,\"eventDispatcher\",i),i.setup(e,t)},startRouting:function(){var
        e=this.__container__.lookup(\"router:main\");e&&e.startRouting()},handleURL:function(e){var
        t=this.__container__.lookup(\"router:main\");t.handleURL(e)},ready:Ember.K,resolver:null,Resolver:null,willDestroy:function(){Ember.BOOTED=!1,this.__container__.destroy()},initializer:function(e){this.constructor.initializer(e)}});Ember.Application.reopenClass({initializers:{},initializer:function(e){void
        0!==this.superclass.initializers&&this.superclass.initializers===this.initializers&&this.reopenClass({initializers:Ember.create(this.initializers)}),this.initializers[e.name]=e},buildContainer:function(r){var
        n=new Ember.Container;return Ember.Container.defaultContainer=new e(n),n.set=Ember.set,n.resolver=t(r),n.normalize=n.resolver.normalize,n.describe=n.resolver.describe,n.makeToString=n.resolver.makeToString,n.optionsForType(\"component\",{singleton:!1}),n.optionsForType(\"view\",{singleton:!1}),n.optionsForType(\"template\",{instantiate:!1}),n.register(\"application:main\",r,{instantiate:!1}),n.register(\"controller:basic\",Ember.Controller,{instantiate:!1}),n.register(\"controller:object\",Ember.ObjectController,{instantiate:!1}),n.register(\"controller:array\",Ember.ArrayController,{instantiate:!1}),n.register(\"route:basic\",Ember.Route,{instantiate:!1}),n.register(\"event_dispatcher:main\",Ember.EventDispatcher),n.injection(\"router:main\",\"namespace\",\"application:main\"),n.injection(\"controller\",\"target\",\"router:main\"),n.injection(\"controller\",\"namespace\",\"application:main\"),n.injection(\"route\",\"router\",\"router:main\"),n}}),Ember.runLoadHooks(\"Ember.Application\",Ember.Application)}(),function(){function
        e(e,t,r){var n,i,o;for(i=0,o=r.length;o>i;i++)n=r[i],-1===n.indexOf(\":\")&&(n=\"controller:\"+n),!t.has(n)}var
        t=Ember.get;Ember.set,Ember.ControllerMixin.reopen({concatenatedProperties:[\"needs\"],needs:[],init:function(){var
        r=t(this,\"needs\"),n=t(r,\"length\");n>0&&(e(this,this.container,r),t(this,\"controllers\")),this._super.apply(this,arguments)},controllerFor:function(e){return
        Ember.controllerFor(t(this,\"container\"),e)},controllers:Ember.computed(function(){var
        e=this;return{needs:t(e,\"needs\"),container:t(e,\"container\"),unknownProperty:function(t){var
        r,n,i,o=this.needs;for(n=0,i=o.length;i>n;n++)if(r=o[n],r===t)return this.container.lookup(\"controller:\"+t);var
        s=Ember.inspect(e)+\"#needs does not include `\"+t+\"`. To access the \"+t+\"
        controller from \"+Ember.inspect(e)+\", \"+Ember.inspect(e)+\" should have
        a `needs` property that is an array of the controllers it has access to.\";throw
        new ReferenceError(s)}}}).readOnly()})}(),function(){Ember.DataAdapter=Ember.Object.extend({init:function(){this._super(),this.releaseMethods=Ember.A()},container:null,attributeLimit:3,releaseMethods:Ember.A(),getFilters:function(){return
        Ember.A()},watchModelTypes:function(e,t){var r,n=this.getModelTypes(),i=this,o=Ember.A();r=n.map(function(e){var
        r=i.wrapModelType(e);return o.push(i.observeModelType(e,t)),r}),e(r);var s=function(){o.forEach(function(e){e()}),i.releaseMethods.removeObject(s)};return
        this.releaseMethods.pushObject(s),s},watchRecords:function(e,t,r,n){var i,o=this,s=Ember.A(),a=this.getRecords(e),u=function(e){r([e])},c=a.map(function(e){return
        s.push(o.observeRecord(e,u)),o.wrapRecord(e)}),l=function(e,r,i,a){for(var
        c=r;r+a>c;c++){var l=e.objectAt(c),h=o.wrapRecord(l);s.push(o.observeRecord(l,u)),t([h])}i&&n(r,i)},h={didChange:l,willChange:Ember.K};return
        a.addArrayObserver(o,h),i=function(){s.forEach(function(e){e()}),a.removeArrayObserver(o,h),o.releaseMethods.removeObject(i)},t(c),this.releaseMethods.pushObject(i),i},willDestroy:function(){this._super(),this.releaseMethods.forEach(function(e){e()})},detect:function(){return!1},columnsForType:function(){return
        Ember.A()},observeModelType:function(e,t){var r=this,n=this.getRecords(e),i=function(){t([r.wrapModelType(e)])},o={didChange:function(){Ember.run.scheduleOnce(\"actions\",this,i)},willChange:Ember.K};n.addArrayObserver(this,o);var
        s=function(){n.removeArrayObserver(r,o)};return s},wrapModelType:function(e){var
        t,r=this.getRecords(e);return t={name:e.toString(),count:Ember.get(r,\"length\"),columns:this.columnsForType(e),object:e}},getModelTypes:function(){var
        e=Ember.A(Ember.Namespace.NAMESPACES),t=Ember.A(),r=this;return e.forEach(function(e){for(var
        n in e)if(e.hasOwnProperty(n)){var i=e[n];r.detect(i)&&t.push(i)}}),t},getRecords:function(){return
        Ember.A()},wrapRecord:function(e){var t={object:e};return t.columnValues=this.getRecordColumnValues(e),t.searchKeywords=this.getRecordKeywords(e),t.filterValues=this.getRecordFilterValues(e),t.color=this.getRecordColor(e),t},getRecordColumnValues:function(){return{}},getRecordKeywords:function(){return
        Ember.A()},getRecordFilterValues:function(){return{}},getRecordColor:function(){return
        null},observeRecord:function(){return function(){}}})}()}(),\"undefined\"==typeof
        location||\"localhost\"!==location.hostname&&\"127.0.0.1\"!==location.hostname||Ember.Logger.warn(\"You
        are running a production build of Ember on localhost and won't receive detailed
        error messages. If you want full error messages please use the non-minified
        build provided on the Ember website.\");"
    http_version: 
  recorded_at: Thu, 31 Oct 2013 20:27:42 GMT
- request:
    method: get
    uri: http://builds.emberjs.com/release/ember-data.js
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - ! '*/*'
      User-Agent:
      - Ruby
  response:
    status:
      code: 404
      message: Not Found
    headers:
      X-Amz-Request-Id:
      - 03A0B2B192D148A0
      X-Amz-Id-2:
      - Nr2cPpW5M9Lz/qo5z0RjkWf1uaWMfh/PLhkAnVfpr+Kw/VNNKnfBw2GbjsTA4H3r
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '344'
      Date:
      - Thu, 31 Oct 2013 20:34:25 GMT
      Server:
      - AmazonS3
    body:
      encoding: US-ASCII
      string: ! '<html>

        <head><title>404 Not Found</title></head>

        <body>

        <h1>404 Not Found</h1>

        <ul>

        <li>Code: NoSuchKey</li>

        <li>Message: The specified key does not exist.</li>

        <li>Key: release/ember-data.js</li>

        <li>RequestId: 03A0B2B192D148A0</li>

        <li>HostId: Nr2cPpW5M9Lz/qo5z0RjkWf1uaWMfh/PLhkAnVfpr+Kw/VNNKnfBw2GbjsTA4H3r</li>

        </ul>

        <hr/>

        </body>

        </html>

'
    http_version: 
  recorded_at: Thu, 31 Oct 2013 20:34:24 GMT
- request:
    method: get
    uri: http://builds.emberjs.com/beta/ember-data.js
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - ! '*/*'
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: !binary |-
        T0s=
    headers:
      !binary "WC1BbXotSWQtMg==":
      - !binary |-
        SS9DZ1FXT2RySmZRMVZYTnpyc3V1STJ3a1ZiY0JnNEdmK2ZxcXhKbDZqZEo0
        aFNMVzgvR2pmd2tmSVVKZUk3RQ==
      !binary "WC1BbXotUmVxdWVzdC1JZA==":
      - !binary |-
        M0VBOUYyMzhEQzg3RUM0OQ==
      !binary "RGF0ZQ==":
      - !binary |-
        V2VkLCAyNyBOb3YgMjAxMyAxOToyMzowMCBHTVQ=
      !binary "TGFzdC1Nb2RpZmllZA==":
      - !binary |-
        VGh1LCAxNCBOb3YgMjAxMyAwNDo1NjozNiBHTVQ=
      !binary "RXRhZw==":
      - !binary |-
        Ijc4YjNhNjdjYjI3NmRhOTNlMTUyZGU2YjA5YTVhNTcxIg==
      !binary "Q29udGVudC1UeXBl":
      - !binary |-
        dGV4dC9qYXZhc2NyaXB0
      !binary "Q29udGVudC1MZW5ndGg=":
      - !binary |-
        MjE1NDE2
      !binary "U2VydmVy":
      - !binary |-
        QW1hem9uUzM=
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
        PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gUHJvamVjdDog
        ICBFbWJlciBEYXRhCi8vIENvcHlyaWdodDogwqkyMDExLTIwMTIgVGlsZGUg
        SW5jLiBhbmQgY29udHJpYnV0b3JzLgovLyAgICAgICAgICAgIFBvcnRpb25z
        IMKpMjAxMSBMaXZpbmcgU29jaWFsIEluYy4gYW5kIGNvbnRyaWJ1dG9ycy4K
        Ly8gTGljZW5zZTogICBMaWNlbnNlZCB1bmRlciBNSVQgbGljZW5zZSAoc2Vl
        IGxpY2Vuc2UuanMpCi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09
        PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
        CgoKCi8vIFZlcnNpb246IHYxLjAuMC1iZXRhLjMtNC1nMTY5NzkzZQovLyBM
        YXN0IGNvbW1pdDogMTY5NzkzZSAoMjAxMy0xMS0xMyAyMDo1Mzo1NCAtMDgw
        MCkKCgooZnVuY3Rpb24oKSB7CnZhciBkZWZpbmUsIHJlcXVpcmVNb2R1bGU7
        CgooZnVuY3Rpb24oKSB7CiAgdmFyIHJlZ2lzdHJ5ID0ge30sIHNlZW4gPSB7
        fTsKCiAgZGVmaW5lID0gZnVuY3Rpb24obmFtZSwgZGVwcywgY2FsbGJhY2sp
        IHsKICAgIHJlZ2lzdHJ5W25hbWVdID0geyBkZXBzOiBkZXBzLCBjYWxsYmFj
        azogY2FsbGJhY2sgfTsKICB9OwoKICByZXF1aXJlTW9kdWxlID0gZnVuY3Rp
        b24obmFtZSkgewogICAgaWYgKHNlZW5bbmFtZV0pIHsgcmV0dXJuIHNlZW5b
        bmFtZV07IH0KICAgIHNlZW5bbmFtZV0gPSB7fTsKCiAgICB2YXIgbW9kLCBk
        ZXBzLCBjYWxsYmFjaywgcmVpZmllZCAsIGV4cG9ydHM7CgogICAgbW9kID0g
        cmVnaXN0cnlbbmFtZV07CgogICAgaWYgKCFtb2QpIHsKICAgICAgdGhyb3cg
        bmV3IEVycm9yKCJNb2R1bGUgJyIgKyBuYW1lICsgIicgbm90IGZvdW5kLiIp
        OwogICAgfQoKICAgIGRlcHMgPSBtb2QuZGVwczsKICAgIGNhbGxiYWNrID0g
        bW9kLmNhbGxiYWNrOwogICAgcmVpZmllZCA9IFtdOwogICAgZXhwb3J0czsK
        CiAgICBmb3IgKHZhciBpPTAsIGw9ZGVwcy5sZW5ndGg7IGk8bDsgaSsrKSB7
        CiAgICAgIGlmIChkZXBzW2ldID09PSAnZXhwb3J0cycpIHsKICAgICAgICBy
        ZWlmaWVkLnB1c2goZXhwb3J0cyA9IHt9KTsKICAgICAgfSBlbHNlIHsKICAg
        ICAgICByZWlmaWVkLnB1c2gocmVxdWlyZU1vZHVsZShkZXBzW2ldKSk7CiAg
        ICAgIH0KICAgIH0KCiAgICB2YXIgdmFsdWUgPSBjYWxsYmFjay5hcHBseSh0
        aGlzLCByZWlmaWVkKTsKICAgIHJldHVybiBzZWVuW25hbWVdID0gZXhwb3J0
        cyB8fCB2YWx1ZTsKICB9Owp9KSgpOwooZnVuY3Rpb24oKSB7Ci8qKgogIEBt
        b2R1bGUgZW1iZXItZGF0YQoqLwoKLyoqCiAgQWxsIEVtYmVyIERhdGEgbWV0
        aG9kcyBhbmQgZnVuY3Rpb25zIGFyZSBkZWZpbmVkIGluc2lkZSBvZiB0aGlz
        IG5hbWVzcGFjZS4KCiAgQGNsYXNzIERTCiAgQHN0YXRpYwoqLwoKaWYgKCd1
        bmRlZmluZWQnID09PSB0eXBlb2YgRFMpIHsKICBEUyA9IEVtYmVyLk5hbWVz
        cGFjZS5jcmVhdGUoewogICAgVkVSU0lPTjogJzEuMC4wLWJldGEuMycKICB9
        KTsKCiAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2Ygd2luZG93KSB7CiAg
        ICB3aW5kb3cuRFMgPSBEUzsKICB9CgogIGlmIChFbWJlci5saWJyYXJpZXMp
        IHsKICAgIEVtYmVyLmxpYnJhcmllcy5yZWdpc3RlckNvcmVMaWJyYXJ5KCdF
        bWJlciBEYXRhJywgRFMuVkVSU0lPTik7CiAgfQp9Cgp9KSgpOwoKCgooZnVu
        Y3Rpb24oKSB7CnZhciBnZXQgPSBFbWJlci5nZXQsIHNldCA9IEVtYmVyLnNl
        dCwgaXNOb25lID0gRW1iZXIuaXNOb25lOwoKLy8gU2ltcGxlIGRpc3BhdGNo
        ZXIgdG8gc3VwcG9ydCBvdmVycmlkaW5nIHRoZSBhbGlhc2VkCi8vIG1ldGhv
        ZCBpbiBzdWJjbGFzc2VzLgpmdW5jdGlvbiBhbGlhc01ldGhvZChtZXRob2RO
        YW1lKSB7CiAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXNb
        bWV0aG9kTmFtZV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9CgpE
        Uy5KU09OU2VyaWFsaXplciA9IEVtYmVyLk9iamVjdC5leHRlbmQoewogIHBy
        aW1hcnlLZXk6ICdpZCcsCgogIGFwcGx5VHJhbnNmb3JtczogZnVuY3Rpb24o
        dHlwZSwgZGF0YSkgewogICAgdHlwZS5lYWNoVHJhbnNmb3JtZWRBdHRyaWJ1
        dGUoZnVuY3Rpb24oa2V5LCB0eXBlKSB7CiAgICAgIHZhciB0cmFuc2Zvcm0g
        PSB0aGlzLnRyYW5zZm9ybUZvcih0eXBlKTsKICAgICAgZGF0YVtrZXldID0g
        dHJhbnNmb3JtLmRlc2VyaWFsaXplKGRhdGFba2V5XSk7CiAgICB9LCB0aGlz
        KTsKCiAgICByZXR1cm4gZGF0YTsKICB9LAoKICBub3JtYWxpemU6IGZ1bmN0
        aW9uKHR5cGUsIGhhc2gpIHsKICAgIGlmICghaGFzaCkgeyByZXR1cm4gaGFz
        aDsgfQoKICAgIHRoaXMuYXBwbHlUcmFuc2Zvcm1zKHR5cGUsIGhhc2gpOwog
        ICAgcmV0dXJuIGhhc2g7CiAgfSwKCiAgLy8gU0VSSUFMSVpFCgogIHNlcmlh
        bGl6ZTogZnVuY3Rpb24ocmVjb3JkLCBvcHRpb25zKSB7CiAgICB2YXIganNv
        biA9IHt9OwoKICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZUlk
        KSB7CiAgICAgIHZhciBpZCA9IGdldChyZWNvcmQsICdpZCcpOwoKICAgICAg
        aWYgKGlkKSB7CiAgICAgICAganNvbltnZXQodGhpcywgJ3ByaW1hcnlLZXkn
        KV0gPSBnZXQocmVjb3JkLCAnaWQnKTsKICAgICAgfQogICAgfQoKICAgIHJl
        Y29yZC5lYWNoQXR0cmlidXRlKGZ1bmN0aW9uKGtleSwgYXR0cmlidXRlKSB7
        CiAgICAgIHRoaXMuc2VyaWFsaXplQXR0cmlidXRlKHJlY29yZCwganNvbiwg
        a2V5LCBhdHRyaWJ1dGUpOwogICAgfSwgdGhpcyk7CgogICAgcmVjb3JkLmVh
        Y2hSZWxhdGlvbnNoaXAoZnVuY3Rpb24oa2V5LCByZWxhdGlvbnNoaXApIHsK
        ICAgICAgaWYgKHJlbGF0aW9uc2hpcC5raW5kID09PSAnYmVsb25nc1RvJykg
        ewogICAgICAgIHRoaXMuc2VyaWFsaXplQmVsb25nc1RvKHJlY29yZCwganNv
        biwgcmVsYXRpb25zaGlwKTsKICAgICAgfSBlbHNlIGlmIChyZWxhdGlvbnNo
        aXAua2luZCA9PT0gJ2hhc01hbnknKSB7CiAgICAgICAgdGhpcy5zZXJpYWxp
        emVIYXNNYW55KHJlY29yZCwganNvbiwgcmVsYXRpb25zaGlwKTsKICAgICAg
        fQogICAgfSwgdGhpcyk7CgogICAgcmV0dXJuIGpzb247CiAgfSwKCiAgc2Vy
        aWFsaXplQXR0cmlidXRlOiBmdW5jdGlvbihyZWNvcmQsIGpzb24sIGtleSwg
        YXR0cmlidXRlKSB7CiAgICB2YXIgYXR0cnMgPSBnZXQodGhpcywgJ2F0dHJz
        Jyk7CiAgICB2YXIgdmFsdWUgPSBnZXQocmVjb3JkLCBrZXkpLCB0eXBlID0g
        YXR0cmlidXRlLnR5cGU7CgogICAgaWYgKHR5cGUpIHsKICAgICAgdmFyIHRy
        YW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtRm9yKHR5cGUpOwogICAgICB2YWx1
        ZSA9IHRyYW5zZm9ybS5zZXJpYWxpemUodmFsdWUpOwogICAgfQoKICAgIC8v
        IGlmIHByb3ZpZGVkLCB1c2UgdGhlIG1hcHBpbmcgcHJvdmlkZWQgYnkgYGF0
        dHJzYCBpbgogICAgLy8gdGhlIHNlcmlhbGl6ZXIKICAgIGtleSA9IGF0dHJz
        ICYmIGF0dHJzW2tleV0gfHwgKHRoaXMua2V5Rm9yQXR0cmlidXRlID8gdGhp
        cy5rZXlGb3JBdHRyaWJ1dGUoa2V5KSA6IGtleSk7CgogICAganNvbltrZXld
        ID0gdmFsdWU7CiAgfSwKCiAgc2VyaWFsaXplQmVsb25nc1RvOiBmdW5jdGlv
        bihyZWNvcmQsIGpzb24sIHJlbGF0aW9uc2hpcCkgewogICAgdmFyIGtleSA9
        IHJlbGF0aW9uc2hpcC5rZXk7CgogICAgdmFyIGJlbG9uZ3NUbyA9IGdldChy
        ZWNvcmQsIGtleSk7CgogICAga2V5ID0gdGhpcy5rZXlGb3JSZWxhdGlvbnNo
        aXAgPyB0aGlzLmtleUZvclJlbGF0aW9uc2hpcChrZXksICJiZWxvbmdzVG8i
        KSA6IGtleTsKCiAgICBpZiAoaXNOb25lKGJlbG9uZ3NUbykpIHsKICAgICAg
        anNvbltrZXldID0gYmVsb25nc1RvOwogICAgfSBlbHNlIHsKICAgICAganNv
        bltrZXldID0gZ2V0KGJlbG9uZ3NUbywgJ2lkJyk7CiAgICB9CgogICAgaWYg
        KHJlbGF0aW9uc2hpcC5vcHRpb25zLnBvbHltb3JwaGljKSB7CiAgICAgIHRo
        aXMuc2VyaWFsaXplUG9seW1vcnBoaWNUeXBlKHJlY29yZCwganNvbiwgcmVs
        YXRpb25zaGlwKTsKICAgIH0KICB9LAoKICBzZXJpYWxpemVIYXNNYW55OiBm
        dW5jdGlvbihyZWNvcmQsIGpzb24sIHJlbGF0aW9uc2hpcCkgewogICAgdmFy
        IGtleSA9IHJlbGF0aW9uc2hpcC5rZXk7CgogICAgdmFyIHJlbGF0aW9uc2hp
        cFR5cGUgPSBEUy5SZWxhdGlvbnNoaXBDaGFuZ2UuZGV0ZXJtaW5lUmVsYXRp
        b25zaGlwVHlwZShyZWNvcmQuY29uc3RydWN0b3IsIHJlbGF0aW9uc2hpcCk7
        CgogICAgaWYgKHJlbGF0aW9uc2hpcFR5cGUgPT09ICdtYW55VG9Ob25lJyB8
        fCByZWxhdGlvbnNoaXBUeXBlID09PSAnbWFueVRvTWFueScpIHsKICAgICAg
        anNvbltrZXldID0gZ2V0KHJlY29yZCwga2V5KS5tYXBCeSgnaWQnKTsKICAg
        ICAgLy8gVE9ETyBzdXBwb3J0IGZvciBwb2x5bW9ycGhpYyBtYW55VG9Ob25l
        IGFuZCBtYW55VG9NYW55IHJlbGF0aW9uc2hpcHMKICAgIH0KICB9LAoKICAv
        KioKICAgIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIGN1c3RvbWl6ZSBo
        b3cgcG9seW1vcnBoaWMgb2JqZWN0cyBhcmUgc2VyaWFsaXplZC4KICAqLwog
        IHNlcmlhbGl6ZVBvbHltb3JwaGljVHlwZTogRW1iZXIuSywKCiAgLy8gRVhU
        UkFDVAoKICBleHRyYWN0OiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcGF5bG9h
        ZCwgaWQsIHJlcXVlc3RUeXBlKSB7CiAgICB0aGlzLmV4dHJhY3RNZXRhKHN0
        b3JlLCB0eXBlLCBwYXlsb2FkKTsKCiAgICB2YXIgc3BlY2lmaWNFeHRyYWN0
        ID0gImV4dHJhY3QiICsgcmVxdWVzdFR5cGUuY2hhckF0KDApLnRvVXBwZXJD
        YXNlKCkgKyByZXF1ZXN0VHlwZS5zdWJzdHIoMSk7CiAgICByZXR1cm4gdGhp
        c1tzcGVjaWZpY0V4dHJhY3RdKHN0b3JlLCB0eXBlLCBwYXlsb2FkLCBpZCwg
        cmVxdWVzdFR5cGUpOwogIH0sCgogIGV4dHJhY3RGaW5kQWxsOiBhbGlhc01l
        dGhvZCgnZXh0cmFjdEFycmF5JyksCiAgZXh0cmFjdEZpbmRRdWVyeTogYWxp
        YXNNZXRob2QoJ2V4dHJhY3RBcnJheScpLAogIGV4dHJhY3RGaW5kTWFueTog
        YWxpYXNNZXRob2QoJ2V4dHJhY3RBcnJheScpLAogIGV4dHJhY3RGaW5kSGFz
        TWFueTogYWxpYXNNZXRob2QoJ2V4dHJhY3RBcnJheScpLAoKICBleHRyYWN0
        Q3JlYXRlUmVjb3JkOiBhbGlhc01ldGhvZCgnZXh0cmFjdFNhdmUnKSwKICBl
        eHRyYWN0VXBkYXRlUmVjb3JkOiBhbGlhc01ldGhvZCgnZXh0cmFjdFNhdmUn
        KSwKICBleHRyYWN0RGVsZXRlUmVjb3JkOiBhbGlhc01ldGhvZCgnZXh0cmFj
        dFNhdmUnKSwKCiAgZXh0cmFjdEZpbmQ6IGFsaWFzTWV0aG9kKCdleHRyYWN0
        U2luZ2xlJyksCiAgZXh0cmFjdEZpbmRCZWxvbmdzVG86IGFsaWFzTWV0aG9k
        KCdleHRyYWN0U2luZ2xlJyksCiAgZXh0cmFjdFNhdmU6IGFsaWFzTWV0aG9k
        KCdleHRyYWN0U2luZ2xlJyksCgogIGV4dHJhY3RTaW5nbGU6IGZ1bmN0aW9u
        KHN0b3JlLCB0eXBlLCBwYXlsb2FkKSB7CiAgICByZXR1cm4gdGhpcy5ub3Jt
        YWxpemUodHlwZSwgcGF5bG9hZCk7CiAgfSwKCiAgZXh0cmFjdEFycmF5OiBm
        dW5jdGlvbihzdG9yZSwgdHlwZSwgcGF5bG9hZCkgewogICAgcmV0dXJuIHRo
        aXMubm9ybWFsaXplKHR5cGUsIHBheWxvYWQpOwogIH0sCgogIGV4dHJhY3RN
        ZXRhOiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcGF5bG9hZCkgewogICAgaWYg
        KHBheWxvYWQgJiYgcGF5bG9hZC5tZXRhKSB7CiAgICAgIHN0b3JlLm1ldGFG
        b3JUeXBlKHR5cGUsIHBheWxvYWQubWV0YSk7CiAgICAgIGRlbGV0ZSBwYXls
        b2FkLm1ldGE7CiAgICB9CiAgfSwKCiAgLy8gSEVMUEVSUwoKICB0cmFuc2Zv
        cm1Gb3I6IGZ1bmN0aW9uKGF0dHJpYnV0ZVR5cGUpIHsKICAgIHJldHVybiB0
        aGlzLmNvbnRhaW5lci5sb29rdXAoJ3RyYW5zZm9ybTonICsgYXR0cmlidXRl
        VHlwZSk7CiAgfQp9KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAg
        QG1vZHVsZSBlbWJlci1kYXRhCiovCnZhciBnZXQgPSBFbWJlci5nZXQsIGNh
        cGl0YWxpemUgPSBFbWJlci5TdHJpbmcuY2FwaXRhbGl6ZSwgdW5kZXJzY29y
        ZSA9IEVtYmVyLlN0cmluZy51bmRlcnNjb3JlLCBEUyA9IHdpbmRvdy5EUyA7
        CgovKioKICBFeHRlbmQgYEVtYmVyLkRhdGFBZGFwdGVyYCB3aXRoIEVEIHNw
        ZWNpZmljIGNvZGUuCgogIEBjbGFzcyBEZWJ1Z0FkYXB0ZXIKICBAbmFtZXNw
        YWNlIERTCiAgQGV4dGVuZHMgRW1iZXIuRGF0YUFkYXB0ZXIKICBAcHJpdmF0
        ZQoqLwpEUy5EZWJ1Z0FkYXB0ZXIgPSBFbWJlci5EYXRhQWRhcHRlci5leHRl
        bmQoewogIGdldEZpbHRlcnM6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIFsK
        ICAgICAgeyBuYW1lOiAnaXNOZXcnLCBkZXNjOiAnTmV3JyB9LAogICAgICB7
        IG5hbWU6ICdpc01vZGlmaWVkJywgZGVzYzogJ01vZGlmaWVkJyB9LAogICAg
        ICB7IG5hbWU6ICdpc0NsZWFuJywgZGVzYzogJ0NsZWFuJyB9CiAgICBdOwog
        IH0sCgogIGRldGVjdDogZnVuY3Rpb24oa2xhc3MpIHsKICAgIHJldHVybiBr
        bGFzcyAhPT0gRFMuTW9kZWwgJiYgRFMuTW9kZWwuZGV0ZWN0KGtsYXNzKTsK
        ICB9LAoKICBjb2x1bW5zRm9yVHlwZTogZnVuY3Rpb24odHlwZSkgewogICAg
        dmFyIGNvbHVtbnMgPSBbeyBuYW1lOiAnaWQnLCBkZXNjOiAnSWQnIH1dLCBj
        b3VudCA9IDAsIHNlbGYgPSB0aGlzOwogICAgZ2V0KHR5cGUsICdhdHRyaWJ1
        dGVzJykuZm9yRWFjaChmdW5jdGlvbihuYW1lLCBtZXRhKSB7CiAgICAgICAg
        aWYgKGNvdW50KysgPiBzZWxmLmF0dHJpYnV0ZUxpbWl0KSB7IHJldHVybiBm
        YWxzZTsgfQogICAgICAgIHZhciBkZXNjID0gY2FwaXRhbGl6ZSh1bmRlcnNj
        b3JlKG5hbWUpLnJlcGxhY2UoJ18nLCAnICcpKTsKICAgICAgICBjb2x1bW5z
        LnB1c2goeyBuYW1lOiBuYW1lLCBkZXNjOiBkZXNjIH0pOwogICAgfSk7CiAg
        ICByZXR1cm4gY29sdW1uczsKICB9LAoKICBnZXRSZWNvcmRzOiBmdW5jdGlv
        bih0eXBlKSB7CiAgICByZXR1cm4gdGhpcy5nZXQoJ3N0b3JlJykuYWxsKHR5
        cGUpOwogIH0sCgogIGdldFJlY29yZENvbHVtblZhbHVlczogZnVuY3Rpb24o
        cmVjb3JkKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsIGNvdW50ID0gMCwKICAg
        ICAgICBjb2x1bW5WYWx1ZXMgPSB7IGlkOiBnZXQocmVjb3JkLCAnaWQnKSB9
        OwoKICAgIHJlY29yZC5lYWNoQXR0cmlidXRlKGZ1bmN0aW9uKGtleSkgewog
        ICAgICBpZiAoY291bnQrKyA+IHNlbGYuYXR0cmlidXRlTGltaXQpIHsKICAg
        ICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgdmFyIHZhbHVlID0g
        Z2V0KHJlY29yZCwga2V5KTsKICAgICAgY29sdW1uVmFsdWVzW2tleV0gPSB2
        YWx1ZTsKICAgIH0pOwogICAgcmV0dXJuIGNvbHVtblZhbHVlczsKICB9LAoK
        ICBnZXRSZWNvcmRLZXl3b3JkczogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICB2
        YXIga2V5d29yZHMgPSBbXSwga2V5cyA9IEVtYmVyLkEoWydpZCddKTsKICAg
        IHJlY29yZC5lYWNoQXR0cmlidXRlKGZ1bmN0aW9uKGtleSkgewogICAgICBr
        ZXlzLnB1c2goa2V5KTsKICAgIH0pOwogICAga2V5cy5mb3JFYWNoKGZ1bmN0
        aW9uKGtleSkgewogICAgICBrZXl3b3Jkcy5wdXNoKGdldChyZWNvcmQsIGtl
        eSkpOwogICAgfSk7CiAgICByZXR1cm4ga2V5d29yZHM7CiAgfSwKCiAgZ2V0
        UmVjb3JkRmlsdGVyVmFsdWVzOiBmdW5jdGlvbihyZWNvcmQpIHsKICAgIHJl
        dHVybiB7CiAgICAgIGlzTmV3OiByZWNvcmQuZ2V0KCdpc05ldycpLAogICAg
        ICBpc01vZGlmaWVkOiByZWNvcmQuZ2V0KCdpc0RpcnR5JykgJiYgIXJlY29y
        ZC5nZXQoJ2lzTmV3JyksCiAgICAgIGlzQ2xlYW46ICFyZWNvcmQuZ2V0KCdp
        c0RpcnR5JykKICAgIH07CiAgfSwKCiAgZ2V0UmVjb3JkQ29sb3I6IGZ1bmN0
        aW9uKHJlY29yZCkgewogICAgdmFyIGNvbG9yID0gJ2JsYWNrJzsKICAgIGlm
        IChyZWNvcmQuZ2V0KCdpc05ldycpKSB7CiAgICAgIGNvbG9yID0gJ2dyZWVu
        JzsKICAgIH0gZWxzZSBpZiAocmVjb3JkLmdldCgnaXNEaXJ0eScpKSB7CiAg
        ICAgIGNvbG9yID0gJ2JsdWUnOwogICAgfQogICAgcmV0dXJuIGNvbG9yOwog
        IH0sCgogIG9ic2VydmVSZWNvcmQ6IGZ1bmN0aW9uKHJlY29yZCwgcmVjb3Jk
        VXBkYXRlZCkgewogICAgdmFyIHJlbGVhc2VNZXRob2RzID0gRW1iZXIuQSgp
        LCBzZWxmID0gdGhpcywKICAgICAgICBrZXlzVG9PYnNlcnZlID0gRW1iZXIu
        QShbJ2lkJywgJ2lzTmV3JywgJ2lzRGlydHknXSk7CgogICAgcmVjb3JkLmVh
        Y2hBdHRyaWJ1dGUoZnVuY3Rpb24oa2V5KSB7CiAgICAgIGtleXNUb09ic2Vy
        dmUucHVzaChrZXkpOwogICAgfSk7CgogICAga2V5c1RvT2JzZXJ2ZS5mb3JF
        YWNoKGZ1bmN0aW9uKGtleSkgewogICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0
        aW9uKCkgewogICAgICAgIHJlY29yZFVwZGF0ZWQoc2VsZi53cmFwUmVjb3Jk
        KHJlY29yZCkpOwogICAgICB9OwogICAgICBFbWJlci5hZGRPYnNlcnZlcihy
        ZWNvcmQsIGtleSwgaGFuZGxlcik7CiAgICAgIHJlbGVhc2VNZXRob2RzLnB1
        c2goZnVuY3Rpb24oKSB7CiAgICAgICAgRW1iZXIucmVtb3ZlT2JzZXJ2ZXIo
        cmVjb3JkLCBrZXksIGhhbmRsZXIpOwogICAgICB9KTsKICAgIH0pOwoKICAg
        IHZhciByZWxlYXNlID0gZnVuY3Rpb24oKSB7CiAgICAgIHJlbGVhc2VNZXRo
        b2RzLmZvckVhY2goZnVuY3Rpb24oZm4pIHsgZm4oKTsgfSApOwogICAgfTsK
        CiAgICByZXR1cm4gcmVsZWFzZTsKICB9Cgp9KTsKCn0pKCk7CgoKCihmdW5j
        dGlvbigpIHsKRFMuVHJhbnNmb3JtID0gRW1iZXIuT2JqZWN0LmV4dGVuZCh7
        CgogIHNlcmlhbGl6ZTogRW1iZXIucmVxdWlyZWQoKSwKICAKICBkZXNlcmlh
        bGl6ZTogRW1iZXIucmVxdWlyZWQoKQoKfSk7Cn0pKCk7CgoKCihmdW5jdGlv
        bigpIHsKCkRTLkJvb2xlYW5UcmFuc2Zvcm0gPSBEUy5UcmFuc2Zvcm0uZXh0
        ZW5kKHsKICBkZXNlcmlhbGl6ZTogZnVuY3Rpb24oc2VyaWFsaXplZCkgewog
        ICAgdmFyIHR5cGUgPSB0eXBlb2Ygc2VyaWFsaXplZDsKCiAgICBpZiAodHlw
        ZSA9PT0gImJvb2xlYW4iKSB7CiAgICAgIHJldHVybiBzZXJpYWxpemVkOwog
        ICAgfSBlbHNlIGlmICh0eXBlID09PSAic3RyaW5nIikgewogICAgICByZXR1
        cm4gc2VyaWFsaXplZC5tYXRjaCgvXnRydWUkfF50JHxeMSQvaSkgIT09IG51
        bGw7CiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICJudW1iZXIiKSB7CiAgICAg
        IHJldHVybiBzZXJpYWxpemVkID09PSAxOwogICAgfSBlbHNlIHsKICAgICAg
        cmV0dXJuIGZhbHNlOwogICAgfQogIH0sCgogIHNlcmlhbGl6ZTogZnVuY3Rp
        b24oZGVzZXJpYWxpemVkKSB7CiAgICByZXR1cm4gQm9vbGVhbihkZXNlcmlh
        bGl6ZWQpOwogIH0KfSk7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7CkRTLkRh
        dGVUcmFuc2Zvcm0gPSBEUy5UcmFuc2Zvcm0uZXh0ZW5kKHsKCiAgZGVzZXJp
        YWxpemU6IGZ1bmN0aW9uKHNlcmlhbGl6ZWQpIHsKICAgIHZhciB0eXBlID0g
        dHlwZW9mIHNlcmlhbGl6ZWQ7CgogICAgaWYgKHR5cGUgPT09ICJzdHJpbmci
        KSB7CiAgICAgIHJldHVybiBuZXcgRGF0ZShFbWJlci5EYXRlLnBhcnNlKHNl
        cmlhbGl6ZWQpKTsKICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gIm51bWJlciIp
        IHsKICAgICAgcmV0dXJuIG5ldyBEYXRlKHNlcmlhbGl6ZWQpOwogICAgfSBl
        bHNlIGlmIChzZXJpYWxpemVkID09PSBudWxsIHx8IHNlcmlhbGl6ZWQgPT09
        IHVuZGVmaW5lZCkgewogICAgICAvLyBpZiB0aGUgdmFsdWUgaXMgbm90IHBy
        ZXNlbnQgaW4gdGhlIGRhdGEsCiAgICAgIC8vIHJldHVybiB1bmRlZmluZWQs
        IG5vdCBudWxsLgogICAgICByZXR1cm4gc2VyaWFsaXplZDsKICAgIH0gZWxz
        ZSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH0sCgogIHNlcmlhbGl6
        ZTogZnVuY3Rpb24oZGF0ZSkgewogICAgaWYgKGRhdGUgaW5zdGFuY2VvZiBE
        YXRlKSB7CiAgICAgIHZhciBkYXlzID0gWyJTdW4iLCAiTW9uIiwgIlR1ZSIs
        ICJXZWQiLCAiVGh1IiwgIkZyaSIsICJTYXQiXTsKICAgICAgdmFyIG1vbnRo
        cyA9IFsiSmFuIiwgIkZlYiIsICJNYXIiLCAiQXByIiwgIk1heSIsICJKdW4i
        LCAiSnVsIiwgIkF1ZyIsICJTZXAiLCAiT2N0IiwgIk5vdiIsICJEZWMiXTsK
        CiAgICAgIHZhciBwYWQgPSBmdW5jdGlvbihudW0pIHsKICAgICAgICByZXR1
        cm4gbnVtIDwgMTAgPyAiMCIrbnVtIDogIiIrbnVtOwogICAgICB9OwoKICAg
        ICAgdmFyIHV0Y1llYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCksCiAgICAg
        ICAgICB1dGNNb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKSwKICAgICAgICAg
        IHV0Y0RheU9mTW9udGggPSBkYXRlLmdldFVUQ0RhdGUoKSwKICAgICAgICAg
        IHV0Y0RheSA9IGRhdGUuZ2V0VVRDRGF5KCksCiAgICAgICAgICB1dGNIb3Vy
        cyA9IGRhdGUuZ2V0VVRDSG91cnMoKSwKICAgICAgICAgIHV0Y01pbnV0ZXMg
        PSBkYXRlLmdldFVUQ01pbnV0ZXMoKSwKICAgICAgICAgIHV0Y1NlY29uZHMg
        PSBkYXRlLmdldFVUQ1NlY29uZHMoKTsKCgogICAgICB2YXIgZGF5T2ZXZWVr
        ID0gZGF5c1t1dGNEYXldOwogICAgICB2YXIgZGF5T2ZNb250aCA9IHBhZCh1
        dGNEYXlPZk1vbnRoKTsKICAgICAgdmFyIG1vbnRoID0gbW9udGhzW3V0Y01v
        bnRoXTsKCiAgICAgIHJldHVybiBkYXlPZldlZWsgKyAiLCAiICsgZGF5T2ZN
        b250aCArICIgIiArIG1vbnRoICsgIiAiICsgdXRjWWVhciArICIgIiArCiAg
        ICAgICAgICAgICBwYWQodXRjSG91cnMpICsgIjoiICsgcGFkKHV0Y01pbnV0
        ZXMpICsgIjoiICsgcGFkKHV0Y1NlY29uZHMpICsgIiBHTVQiOwogICAgfSBl
        bHNlIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfSAKCn0pOwoKfSko
        KTsKCgoKKGZ1bmN0aW9uKCkgewp2YXIgZW1wdHkgPSBFbWJlci5pc0VtcHR5
        OwoKRFMuTnVtYmVyVHJhbnNmb3JtID0gRFMuVHJhbnNmb3JtLmV4dGVuZCh7
        CgogIGRlc2VyaWFsaXplOiBmdW5jdGlvbihzZXJpYWxpemVkKSB7CiAgICBy
        ZXR1cm4gZW1wdHkoc2VyaWFsaXplZCkgPyBudWxsIDogTnVtYmVyKHNlcmlh
        bGl6ZWQpOwogIH0sCgogIHNlcmlhbGl6ZTogZnVuY3Rpb24oZGVzZXJpYWxp
        emVkKSB7CiAgICByZXR1cm4gZW1wdHkoZGVzZXJpYWxpemVkKSA/IG51bGwg
        OiBOdW1iZXIoZGVzZXJpYWxpemVkKTsKICB9Cn0pOwp9KSgpOwoKCgooZnVu
        Y3Rpb24oKSB7CnZhciBub25lID0gRW1iZXIuaXNOb25lOwoKRFMuU3RyaW5n
        VHJhbnNmb3JtID0gRFMuVHJhbnNmb3JtLmV4dGVuZCh7CgogIGRlc2VyaWFs
        aXplOiBmdW5jdGlvbihzZXJpYWxpemVkKSB7CiAgICByZXR1cm4gbm9uZShz
        ZXJpYWxpemVkKSA/IG51bGwgOiBTdHJpbmcoc2VyaWFsaXplZCk7CiAgfSwK
        CiAgc2VyaWFsaXplOiBmdW5jdGlvbihkZXNlcmlhbGl6ZWQpIHsKICAgIHJl
        dHVybiBub25lKGRlc2VyaWFsaXplZCkgPyBudWxsIDogU3RyaW5nKGRlc2Vy
        aWFsaXplZCk7CiAgfQoKfSk7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Cgp9
        KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0
        YQoqLwoKdmFyIHNldCA9IEVtYmVyLnNldDsKCi8qCiAgVGhpcyBjb2RlIHJl
        Z2lzdGVycyBhbiBpbmplY3Rpb24gZm9yIEVtYmVyLkFwcGxpY2F0aW9uLgoK
        ICBJZiBhbiBFbWJlci5qcyBkZXZlbG9wZXIgZGVmaW5lcyBhIHN1YmNsYXNz
        IG9mIERTLlN0b3JlIG9uIHRoZWlyIGFwcGxpY2F0aW9uLAogIHRoaXMgY29k
        ZSB3aWxsIGF1dG9tYXRpY2FsbHkgaW5zdGFudGlhdGUgaXQgYW5kIG1ha2Ug
        aXQgYXZhaWxhYmxlIG9uIHRoZQogIHJvdXRlci4KCiAgQWRkaXRpb25hbGx5
        LCBhZnRlciBhbiBhcHBsaWNhdGlvbidzIGNvbnRyb2xsZXJzIGhhdmUgYmVl
        biBpbmplY3RlZCwgdGhleSB3aWxsCiAgZWFjaCBoYXZlIHRoZSBzdG9yZSBt
        YWRlIGF2YWlsYWJsZSB0byB0aGVtLgoKICBGb3IgZXhhbXBsZSwgaW1hZ2lu
        ZSBhbiBFbWJlci5qcyBhcHBsaWNhdGlvbiB3aXRoIHRoZSBmb2xsb3dpbmcg
        Y2xhc3NlczoKCiAgQXBwLlN0b3JlID0gRFMuU3RvcmUuZXh0ZW5kKHsKICAg
        IGFkYXB0ZXI6ICdjdXN0b20nCiAgfSk7CgogIEFwcC5Qb3N0c0NvbnRyb2xs
        ZXIgPSBFbWJlci5BcnJheUNvbnRyb2xsZXIuZXh0ZW5kKHsKICAgIC8vIC4u
        LgogIH0pOwoKICBXaGVuIHRoZSBhcHBsaWNhdGlvbiBpcyBpbml0aWFsaXpl
        ZCwgYEFwcC5TdG9yZWAgd2lsbCBhdXRvbWF0aWNhbGx5IGJlCiAgaW5zdGFu
        dGlhdGVkLCBhbmQgdGhlIGluc3RhbmNlIG9mIGBBcHAuUG9zdHNDb250cm9s
        bGVyYCB3aWxsIGhhdmUgaXRzIGBzdG9yZWAKICBwcm9wZXJ0eSBzZXQgdG8g
        dGhhdCBpbnN0YW5jZS4KCiAgTm90ZSB0aGF0IHRoaXMgY29kZSB3aWxsIG9u
        bHkgYmUgcnVuIGlmIHRoZSBgZW1iZXItYXBwbGljYXRpb25gIHBhY2thZ2Ug
        aXMKICBsb2FkZWQuIElmIEVtYmVyIERhdGEgaXMgYmVpbmcgdXNlZCBpbiBh
        biBlbnZpcm9ubWVudCBvdGhlciB0aGFuIGEKICB0eXBpY2FsIGFwcGxpY2F0
        aW9uIChlLmcuLCBub2RlLmpzIHdoZXJlIG9ubHkgYGVtYmVyLXJ1bnRpbWVg
        IGlzIGF2YWlsYWJsZSksCiAgdGhpcyBjb2RlIHdpbGwgYmUgaWdub3JlZC4K
        Ki8KCkVtYmVyLm9uTG9hZCgnRW1iZXIuQXBwbGljYXRpb24nLCBmdW5jdGlv
        bihBcHBsaWNhdGlvbikgewogIEFwcGxpY2F0aW9uLmluaXRpYWxpemVyKHsK
        ICAgIG5hbWU6ICJzdG9yZSIsCgogICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24o
        Y29udGFpbmVyLCBhcHBsaWNhdGlvbikgewogICAgICBhcHBsaWNhdGlvbi5y
        ZWdpc3Rlcignc3RvcmU6bWFpbicsIGFwcGxpY2F0aW9uLlN0b3JlIHx8IERT
        LlN0b3JlKTsKICAgICAgYXBwbGljYXRpb24ucmVnaXN0ZXIoJ3NlcmlhbGl6
        ZXI6X2RlZmF1bHQnLCBEUy5KU09OU2VyaWFsaXplcik7CiAgICAgIGFwcGxp
        Y2F0aW9uLnJlZ2lzdGVyKCdzZXJpYWxpemVyOl9yZXN0JywgRFMuUkVTVFNl
        cmlhbGl6ZXIpOwogICAgICBhcHBsaWNhdGlvbi5yZWdpc3RlcignYWRhcHRl
        cjpfcmVzdCcsIERTLlJFU1RBZGFwdGVyKTsKCiAgICAgIC8vIEVhZ2VybHkg
        Z2VuZXJhdGUgdGhlIHN0b3JlIHNvIGRlZmF1bHRTdG9yZSBpcyBwb3B1bGF0
        ZWQuCiAgICAgIC8vIFRPRE86IERvIHRoaXMgaW4gYSBmaW5pc2hlciBob29r
        CiAgICAgIGNvbnRhaW5lci5sb29rdXAoJ3N0b3JlOm1haW4nKTsKICAgIH0K
        ICB9KTsKCiAgQXBwbGljYXRpb24uaW5pdGlhbGl6ZXIoewogICAgbmFtZTog
        InRyYW5zZm9ybXMiLAoKICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGNvbnRh
        aW5lciwgYXBwbGljYXRpb24pIHsKICAgICAgYXBwbGljYXRpb24ucmVnaXN0
        ZXIoJ3RyYW5zZm9ybTpib29sZWFuJywgRFMuQm9vbGVhblRyYW5zZm9ybSk7
        CiAgICAgIGFwcGxpY2F0aW9uLnJlZ2lzdGVyKCd0cmFuc2Zvcm06ZGF0ZScs
        IERTLkRhdGVUcmFuc2Zvcm0pOwogICAgICBhcHBsaWNhdGlvbi5yZWdpc3Rl
        cigndHJhbnNmb3JtOm51bWJlcicsIERTLk51bWJlclRyYW5zZm9ybSk7CiAg
        ICAgIGFwcGxpY2F0aW9uLnJlZ2lzdGVyKCd0cmFuc2Zvcm06c3RyaW5nJywg
        RFMuU3RyaW5nVHJhbnNmb3JtKTsKICAgIH0KICB9KTsKCiAgQXBwbGljYXRp
        b24uaW5pdGlhbGl6ZXIoewogICAgbmFtZTogImRhdGFBZGFwdGVyIiwKCiAg
        ICBpbml0aWFsaXplOiBmdW5jdGlvbihjb250YWluZXIsIGFwcGxpY2F0aW9u
        KSB7CiAgICAgIGFwcGxpY2F0aW9uLnJlZ2lzdGVyKCdkYXRhQWRhcHRlcjpt
        YWluJywgRFMuRGVidWdBZGFwdGVyKTsKICAgIH0KICB9KTsKCiAgQXBwbGlj
        YXRpb24uaW5pdGlhbGl6ZXIoewogICAgbmFtZTogImluamVjdFN0b3JlIiwK
        CiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihjb250YWluZXIsIGFwcGxpY2F0
        aW9uKSB7CiAgICAgIGFwcGxpY2F0aW9uLmluamVjdCgnY29udHJvbGxlcics
        ICdzdG9yZScsICdzdG9yZTptYWluJyk7CiAgICAgIGFwcGxpY2F0aW9uLmlu
        amVjdCgncm91dGUnLCAnc3RvcmUnLCAnc3RvcmU6bWFpbicpOwogICAgICBh
        cHBsaWNhdGlvbi5pbmplY3QoJ3NlcmlhbGl6ZXInLCAnc3RvcmUnLCAnc3Rv
        cmU6bWFpbicpOwogICAgICBhcHBsaWNhdGlvbi5pbmplY3QoJ2RhdGFBZGFw
        dGVyJywgJ3N0b3JlJywgJ3N0b3JlOm1haW4nKTsKICAgIH0KICB9KTsKCn0p
        OwoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewovKioKICBAbW9kdWxlIGVtYmVy
        LWRhdGEKKi8KCi8qKgogIERhdGUucGFyc2Ugd2l0aCBwcm9ncmVzc2l2ZSBl
        bmhhbmNlbWVudCBmb3IgSVNPIDg2MDEgPGh0dHBzOi8vZ2l0aHViLmNvbS9j
        c25vdmVyL2pzLWlzbzg2MDE+CgogIMKpIDIwMTEgQ29saW4gU25vdmVyIDxo
        dHRwOi8vemV0YWZsZWV0LmNvbT4KCiAgUmVsZWFzZWQgdW5kZXIgTUlUIGxp
        Y2Vuc2UuCgogIEBjbGFzcyBEYXRlCiAgQG5hbWVzcGFjZSBFbWJlcgogIEBz
        dGF0aWMKKi8KRW1iZXIuRGF0ZSA9IEVtYmVyLkRhdGUgfHwge307Cgp2YXIg
        b3JpZ1BhcnNlID0gRGF0ZS5wYXJzZSwgbnVtZXJpY0tleXMgPSBbIDEsIDQs
        IDUsIDYsIDcsIDEwLCAxMSBdOwoKLyoqCiAgQG1ldGhvZCBwYXJzZQogIEBw
        YXJhbSBkYXRlCiovCkVtYmVyLkRhdGUucGFyc2UgPSBmdW5jdGlvbiAoZGF0
        ZSkgewogICAgdmFyIHRpbWVzdGFtcCwgc3RydWN0LCBtaW51dGVzT2Zmc2V0
        ID0gMDsKCiAgICAvLyBFUzUgwqcxNS45LjQuMiBzdGF0ZXMgdGhhdCB0aGUg
        c3RyaW5nIHNob3VsZCBhdHRlbXB0IHRvIGJlIHBhcnNlZCBhcyBhIERhdGUg
        VGltZSBTdHJpbmcgRm9ybWF0IHN0cmluZwogICAgLy8gYmVmb3JlIGZhbGxp
        bmcgYmFjayB0byBhbnkgaW1wbGVtZW50YXRpb24tc3BlY2lmaWMgZGF0ZSBw
        YXJzaW5nLCBzbyB0aGF04oCZcyB3aGF0IHdlIGRvLCBldmVuIGlmIG5hdGl2
        ZQogICAgLy8gaW1wbGVtZW50YXRpb25zIGNvdWxkIGJlIGZhc3RlcgogICAg
        Ly8gICAgICAgICAgICAgIDEgWVlZWSAgICAgICAgICAgICAgICAyIE1NICAg
        ICAgIDMgREQgICAgICAgICAgIDQgSEggICAgNSBtbSAgICAgICA2IHNzICAg
        ICAgICA3IG1zZWMgICAgICAgIDggWiA5IMKxICAgIDEwIHR6SEggICAgMTEg
        dHptbQogICAgaWYgKChzdHJ1Y3QgPSAvXihcZHs0fXxbK1wtXVxkezZ9KSg/
        Oi0oXGR7Mn0pKD86LShcZHsyfSkpPyk/KD86VChcZHsyfSk6KFxkezJ9KSg/
        OjooXGR7Mn0pKD86XC4oXGR7M30pKT8pPyg/OihaKXwoWytcLV0pKFxkezJ9
        KSg/OjooXGR7Mn0pKT8pPyk/JC8uZXhlYyhkYXRlKSkpIHsKICAgICAgICAv
        LyBhdm9pZCBOYU4gdGltZXN0YW1wcyBjYXVzZWQgYnkg4oCcdW5kZWZpbmVk
        4oCdIHZhbHVlcyBiZWluZyBwYXNzZWQgdG8gRGF0ZS5VVEMKICAgICAgICBm
        b3IgKHZhciBpID0gMCwgazsgKGsgPSBudW1lcmljS2V5c1tpXSk7ICsraSkg
        ewogICAgICAgICAgICBzdHJ1Y3Rba10gPSArc3RydWN0W2tdIHx8IDA7CiAg
        ICAgICAgfQoKICAgICAgICAvLyBhbGxvdyB1bmRlZmluZWQgZGF5cyBhbmQg
        bW9udGhzCiAgICAgICAgc3RydWN0WzJdID0gKCtzdHJ1Y3RbMl0gfHwgMSkg
        LSAxOwogICAgICAgIHN0cnVjdFszXSA9ICtzdHJ1Y3RbM10gfHwgMTsKCiAg
        ICAgICAgaWYgKHN0cnVjdFs4XSAhPT0gJ1onICYmIHN0cnVjdFs5XSAhPT0g
        dW5kZWZpbmVkKSB7CiAgICAgICAgICAgIG1pbnV0ZXNPZmZzZXQgPSBzdHJ1
        Y3RbMTBdICogNjAgKyBzdHJ1Y3RbMTFdOwoKICAgICAgICAgICAgaWYgKHN0
        cnVjdFs5XSA9PT0gJysnKSB7CiAgICAgICAgICAgICAgICBtaW51dGVzT2Zm
        c2V0ID0gMCAtIG1pbnV0ZXNPZmZzZXQ7CiAgICAgICAgICAgIH0KICAgICAg
        ICB9CgogICAgICAgIHRpbWVzdGFtcCA9IERhdGUuVVRDKHN0cnVjdFsxXSwg
        c3RydWN0WzJdLCBzdHJ1Y3RbM10sIHN0cnVjdFs0XSwgc3RydWN0WzVdICsg
        bWludXRlc09mZnNldCwgc3RydWN0WzZdLCBzdHJ1Y3RbN10pOwogICAgfQog
        ICAgZWxzZSB7CiAgICAgICAgdGltZXN0YW1wID0gb3JpZ1BhcnNlID8gb3Jp
        Z1BhcnNlKGRhdGUpIDogTmFOOwogICAgfQoKICAgIHJldHVybiB0aW1lc3Rh
        bXA7Cn07CgppZiAoRW1iZXIuRVhURU5EX1BST1RPVFlQRVMgPT09IHRydWUg
        fHwgRW1iZXIuRVhURU5EX1BST1RPVFlQRVMuRGF0ZSkgewogIERhdGUucGFy
        c2UgPSBFbWJlci5EYXRlLnBhcnNlOwp9Cgp9KSgpOwoKCgooZnVuY3Rpb24o
        KSB7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1i
        ZXItZGF0YQoqLwoKdmFyIGdldCA9IEVtYmVyLmdldCwgc2V0ID0gRW1iZXIu
        c2V0OwoKLyoqCiAgQSByZWNvcmQgYXJyYXkgaXMgYW4gYXJyYXkgdGhhdCBj
        b250YWlucyByZWNvcmRzIG9mIGEgY2VydGFpbiB0eXBlLiBUaGUgcmVjb3Jk
        CiAgYXJyYXkgbWF0ZXJpYWxpemVzIHJlY29yZHMgYXMgbmVlZGVkIHdoZW4g
        dGhleSBhcmUgcmV0cmlldmVkIGZvciB0aGUgZmlyc3QKICB0aW1lLiBZb3Ug
        c2hvdWxkIG5vdCBjcmVhdGUgcmVjb3JkIGFycmF5cyB5b3Vyc2VsZi4gSW5z
        dGVhZCwgYW4gaW5zdGFuY2Ugb2YKICBEUy5SZWNvcmRBcnJheSBvciBpdHMg
        c3ViY2xhc3NlcyB3aWxsIGJlIHJldHVybmVkIGJ5IHlvdXIgYXBwbGljYXRp
        b24ncyBzdG9yZQogIGluIHJlc3BvbnNlIHRvIHF1ZXJpZXMuCgogIEBjbGFz
        cyBSZWNvcmRBcnJheQogIEBuYW1lc3BhY2UgRFMKICBAZXh0ZW5kcyBFbWJl
        ci5BcnJheVByb3h5CiAgQHVzZXMgRW1iZXIuRXZlbnRlZAoqLwoKRFMuUmVj
        b3JkQXJyYXkgPSBFbWJlci5BcnJheVByb3h5LmV4dGVuZChFbWJlci5FdmVu
        dGVkLCB7CiAgLyoqCiAgICBUaGUgbW9kZWwgdHlwZSBjb250YWluZWQgYnkg
        dGhpcyByZWNvcmQgYXJyYXkuCgogICAgQHByb3BlcnR5IHR5cGUKICAgIEB0
        eXBlIERTLk1vZGVsCiAgKi8KICB0eXBlOiBudWxsLAoKICAvLyBUaGUgYXJy
        YXkgb2YgY2xpZW50IGlkcyBiYWNraW5nIHRoZSByZWNvcmQgYXJyYXkuIFdo
        ZW4gYQogIC8vIHJlY29yZCBpcyByZXF1ZXN0ZWQgZnJvbSB0aGUgcmVjb3Jk
        IGFycmF5LCB0aGUgcmVjb3JkCiAgLy8gZm9yIHRoZSBjbGllbnQgaWQgYXQg
        dGhlIHNhbWUgaW5kZXggaXMgbWF0ZXJpYWxpemVkLCBpZgogIC8vIG5lY2Vz
        c2FyeSwgYnkgdGhlIHN0b3JlLgogIGNvbnRlbnQ6IG51bGwsCgogIGlzTG9h
        ZGVkOiBmYWxzZSwKICBpc1VwZGF0aW5nOiBmYWxzZSwKCiAgLy8gVGhlIHN0
        b3JlIHRoYXQgY3JlYXRlZCB0aGlzIHJlY29yZCBhcnJheS4KICBzdG9yZTog
        bnVsbCwKCiAgb2JqZWN0QXRDb250ZW50OiBmdW5jdGlvbihpbmRleCkgewog
        ICAgdmFyIGNvbnRlbnQgPSBnZXQodGhpcywgJ2NvbnRlbnQnKTsKCiAgICBy
        ZXR1cm4gY29udGVudC5vYmplY3RBdChpbmRleCk7CiAgfSwKCiAgdXBkYXRl
        OiBmdW5jdGlvbigpIHsKICAgIGlmIChnZXQodGhpcywgJ2lzVXBkYXRpbmcn
        KSkgeyByZXR1cm47IH0KCiAgICB2YXIgc3RvcmUgPSBnZXQodGhpcywgJ3N0
        b3JlJyksCiAgICAgICAgdHlwZSA9IGdldCh0aGlzLCAndHlwZScpOwoKICAg
        IHN0b3JlLmZldGNoQWxsKHR5cGUsIHRoaXMpOwogIH0sCgogIGFkZFJlY29y
        ZDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICBnZXQodGhpcywgJ2NvbnRlbnQn
        KS5hZGRPYmplY3QocmVjb3JkKTsKICB9LAoKICByZW1vdmVSZWNvcmQ6IGZ1
        bmN0aW9uKHJlY29yZCkgewogICAgZ2V0KHRoaXMsICdjb250ZW50JykucmVt
        b3ZlT2JqZWN0KHJlY29yZCk7CiAgfSwKCiAgc2F2ZTogZnVuY3Rpb24oKSB7
        CiAgICB2YXIgcHJvbWlzZSA9IEVtYmVyLlJTVlAuYWxsKHRoaXMuaW52b2tl
        KCJzYXZlIikpLnRoZW4oZnVuY3Rpb24oYXJyYXkpIHsKICAgICAgcmV0dXJu
        IEVtYmVyLkEoYXJyYXkpOwogICAgfSk7CgogICAgcmV0dXJuIERTLlByb21p
        c2VBcnJheS5jcmVhdGUoeyBwcm9taXNlOiBwcm9taXNlIH0pOwogIH0KfSk7
        Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXIt
        ZGF0YQoqLwoKdmFyIGdldCA9IEVtYmVyLmdldDsKCi8qKgogIEBjbGFzcyBG
        aWx0ZXJlZFJlY29yZEFycmF5CiAgQG5hbWVzcGFjZSBEUwogIEBleHRlbmRz
        IERTLlJlY29yZEFycmF5CiovCkRTLkZpbHRlcmVkUmVjb3JkQXJyYXkgPSBE
        Uy5SZWNvcmRBcnJheS5leHRlbmQoewogIGZpbHRlckZ1bmN0aW9uOiBudWxs
        LAogIGlzTG9hZGVkOiB0cnVlLAoKICByZXBsYWNlOiBmdW5jdGlvbigpIHsK
        ICAgIHZhciB0eXBlID0gZ2V0KHRoaXMsICd0eXBlJykudG9TdHJpbmcoKTsK
        ICAgIHRocm93IG5ldyBFcnJvcigiVGhlIHJlc3VsdCBvZiBhIGNsaWVudC1z
        aWRlIGZpbHRlciAob24gIiArIHR5cGUgKyAiKSBpcyBpbW11dGFibGUuIik7
        CiAgfSwKCiAgdXBkYXRlRmlsdGVyOiBFbWJlci5vYnNlcnZlcihmdW5jdGlv
        bigpIHsKICAgIHZhciBtYW5hZ2VyID0gZ2V0KHRoaXMsICdtYW5hZ2VyJyk7
        CiAgICBtYW5hZ2VyLnVwZGF0ZUZpbHRlcih0aGlzLCBnZXQodGhpcywgJ3R5
        cGUnKSwgZ2V0KHRoaXMsICdmaWx0ZXJGdW5jdGlvbicpKTsKICB9LCAnZmls
        dGVyRnVuY3Rpb24nKQp9KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoq
        CiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp2YXIgZ2V0ID0gRW1iZXIuZ2V0
        LCBzZXQgPSBFbWJlci5zZXQ7CgovKioKICBAY2xhc3MgQWRhcHRlclBvcHVs
        YXRlZFJlY29yZEFycmF5CiAgQG5hbWVzcGFjZSBEUwogIEBleHRlbmRzIERT
        LlJlY29yZEFycmF5CiovCkRTLkFkYXB0ZXJQb3B1bGF0ZWRSZWNvcmRBcnJh
        eSA9IERTLlJlY29yZEFycmF5LmV4dGVuZCh7CiAgcXVlcnk6IG51bGwsCgog
        IHJlcGxhY2U6IGZ1bmN0aW9uKCkgewogICAgdmFyIHR5cGUgPSBnZXQodGhp
        cywgJ3R5cGUnKS50b1N0cmluZygpOwogICAgdGhyb3cgbmV3IEVycm9yKCJU
        aGUgcmVzdWx0IG9mIGEgc2VydmVyIHF1ZXJ5IChvbiAiICsgdHlwZSArICIp
        IGlzIGltbXV0YWJsZS4iKTsKICB9LAoKICBsb2FkOiBmdW5jdGlvbihkYXRh
        KSB7CiAgICB2YXIgc3RvcmUgPSBnZXQodGhpcywgJ3N0b3JlJyksCiAgICAg
        ICAgdHlwZSA9IGdldCh0aGlzLCAndHlwZScpLAogICAgICAgIHJlY29yZHMg
        PSBzdG9yZS5wdXNoTWFueSh0eXBlLCBkYXRhKSwKICAgICAgICBtZXRhID0g
        c3RvcmUubWV0YWRhdGFGb3IodHlwZSk7CgogICAgdGhpcy5zZXRQcm9wZXJ0
        aWVzKHsKICAgICAgY29udGVudDogRW1iZXIuQShyZWNvcmRzKSwKICAgICAg
        aXNMb2FkZWQ6IHRydWUsCiAgICAgIG1ldGE6IG1ldGEKICAgIH0pOwoKICAg
        IC8vIFRPRE86IGRvZXMgdHJpZ2dlcmluZyBkaWRMb2FkIGV2ZW50IHNob3Vs
        ZCBiZSB0aGUgbGFzdCBhY3Rpb24gb2YgdGhlIHJ1bkxvb3A/CiAgICBFbWJl
        ci5ydW4ub25jZSh0aGlzLCAndHJpZ2dlcicsICdkaWRMb2FkJyk7CiAgfQp9
        KTsKCn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJl
        ci1kYXRhCiovCgp2YXIgZ2V0ID0gRW1iZXIuZ2V0LCBzZXQgPSBFbWJlci5z
        ZXQ7CnZhciBtYXAgPSBFbWJlci5FbnVtZXJhYmxlVXRpbHMubWFwOwoKLyoq
        CiAgQSBNYW55QXJyYXkgaXMgYSBSZWNvcmRBcnJheSB0aGF0IHJlcHJlc2Vu
        dHMgdGhlIGNvbnRlbnRzIG9mIGEgaGFzLW1hbnkKICByZWxhdGlvbnNoaXAu
        CgogIFRoZSBNYW55QXJyYXkgaXMgaW5zdGFudGlhdGVkIGxhemlseSB0aGUg
        Zmlyc3QgdGltZSB0aGUgcmVsYXRpb25zaGlwIGlzCiAgcmVxdWVzdGVkLgoK
        ICAjIyMgSW52ZXJzZXMKCiAgT2Z0ZW4sIHRoZSByZWxhdGlvbnNoaXBzIGlu
        IEVtYmVyIERhdGEgYXBwbGljYXRpb25zIHdpbGwgaGF2ZQogIGFuIGludmVy
        c2UuIEZvciBleGFtcGxlLCBpbWFnaW5lIHRoZSBmb2xsb3dpbmcgbW9kZWxz
        IGFyZQogIGRlZmluZWQ6CgogICAgICBBcHAuUG9zdCA9IERTLk1vZGVsLmV4
        dGVuZCh7CiAgICAgICAgY29tbWVudHM6IERTLmhhc01hbnkoJ2NvbW1lbnQn
        KQogICAgICB9KTsKCiAgICAgIEFwcC5Db21tZW50ID0gRFMuTW9kZWwuZXh0
        ZW5kKHsKICAgICAgICBwb3N0OiBEUy5iZWxvbmdzVG8oJ3Bvc3QnKQogICAg
        ICB9KTsKCiAgSWYgeW91IGNyZWF0ZWQgYSBuZXcgaW5zdGFuY2Ugb2YgYEFw
        cC5Qb3N0YCBhbmQgYWRkZWQKICBhIGBBcHAuQ29tbWVudGAgcmVjb3JkIHRv
        IGl0cyBgY29tbWVudHNgIGhhcy1tYW55CiAgcmVsYXRpb25zaGlwLCB5b3Ug
        d291bGQgZXhwZWN0IHRoZSBjb21tZW50J3MgYHBvc3RgCiAgcHJvcGVydHkg
        dG8gYmUgc2V0IHRvIHRoZSBwb3N0IHRoYXQgY29udGFpbmVkCiAgdGhlIGhh
        cy1tYW55LgoKICBXZSBjYWxsIHRoZSByZWNvcmQgdG8gd2hpY2ggYSByZWxh
        dGlvbnNoaXAgYmVsb25ncyB0aGUKICByZWxhdGlvbnNoaXAncyBfb3duZXJf
        LgoKICBAY2xhc3MgTWFueUFycmF5CiAgQG5hbWVzcGFjZSBEUwogIEBleHRl
        bmRzIERTLlJlY29yZEFycmF5CiovCkRTLk1hbnlBcnJheSA9IERTLlJlY29y
        ZEFycmF5LmV4dGVuZCh7CiAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICB0aGlz
        Ll9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgdGhpcy5fY2hh
        bmdlc1RvU3luYyA9IEVtYmVyLk9yZGVyZWRTZXQuY3JlYXRlKCk7CiAgfSwK
        CiAgLyoqCiAgICBUaGUgcmVjb3JkIHRvIHdoaWNoIHRoaXMgcmVsYXRpb25z
        aGlwIGJlbG9uZ3MuCgogICAgQHByb3BlcnR5IHtEUy5Nb2RlbH0KICAgIEBw
        cml2YXRlCiAgKi8KICBvd25lcjogbnVsbCwKCiAgLyoqCiAgICBgdHJ1ZWAg
        aWYgdGhlIHJlbGF0aW9uc2hpcCBpcyBwb2x5bW9ycGhpYywgYGZhbHNlYCBv
        dGhlcndpc2UuCgogICAgQHByb3BlcnR5IHtCb29sZWFufQogICAgQHByaXZh
        dGUKICAqLwogIGlzUG9seW1vcnBoaWM6IGZhbHNlLAoKICAvLyBMT0FESU5H
        IFNUQVRFCgogIGlzTG9hZGVkOiBmYWxzZSwKCiAgbG9hZGluZ1JlY29yZHND
        b3VudDogZnVuY3Rpb24oY291bnQpIHsKICAgIHRoaXMubG9hZGluZ1JlY29y
        ZHNDb3VudCA9IGNvdW50OwogIH0sCgogIGxvYWRlZFJlY29yZDogZnVuY3Rp
        b24oKSB7CiAgICB0aGlzLmxvYWRpbmdSZWNvcmRzQ291bnQtLTsKICAgIGlm
        ICh0aGlzLmxvYWRpbmdSZWNvcmRzQ291bnQgPT09IDApIHsKICAgICAgc2V0
        KHRoaXMsICdpc0xvYWRlZCcsIHRydWUpOwogICAgICB0aGlzLnRyaWdnZXIo
        J2RpZExvYWQnKTsKICAgIH0KICB9LAoKICBmZXRjaDogZnVuY3Rpb24oKSB7
        CiAgICB2YXIgcmVjb3JkcyA9IGdldCh0aGlzLCAnY29udGVudCcpLAogICAg
        ICAgIHN0b3JlID0gZ2V0KHRoaXMsICdzdG9yZScpLAogICAgICAgIG93bmVy
        ID0gZ2V0KHRoaXMsICdvd25lcicpLAogICAgICAgIHJlc29sdmVyID0gRW1i
        ZXIuUlNWUC5kZWZlcigpOwoKICAgIHZhciB1bmxvYWRlZFJlY29yZHMgPSBy
        ZWNvcmRzLmZpbHRlclByb3BlcnR5KCdpc0VtcHR5JywgdHJ1ZSk7CiAgICBz
        dG9yZS5mZXRjaE1hbnkodW5sb2FkZWRSZWNvcmRzLCBvd25lciwgcmVzb2x2
        ZXIpOwogIH0sCgogIC8vIE92ZXJyaWRlcyBFbWJlci5BcnJheSdzIHJlcGxh
        Y2UgbWV0aG9kIHRvIGltcGxlbWVudAogIHJlcGxhY2VDb250ZW50OiBmdW5j
        dGlvbihpbmRleCwgcmVtb3ZlZCwgYWRkZWQpIHsKICAgIC8vIE1hcCB0aGUg
        YXJyYXkgb2YgcmVjb3JkIG9iamVjdHMgaW50byBhbiBhcnJheSBvZiAgY2xp
        ZW50IGlkcy4KICAgIGFkZGVkID0gbWFwKGFkZGVkLCBmdW5jdGlvbihyZWNv
        cmQpIHsKICAgICAgRW1iZXIuYXNzZXJ0KCJZb3UgY2Fubm90IGFkZCAnIiAr
        IHJlY29yZC5jb25zdHJ1Y3Rvci50eXBlS2V5ICsgIicgcmVjb3JkcyB0byB0
        aGlzIHJlbGF0aW9uc2hpcCAob25seSAnIiArIHRoaXMudHlwZS50eXBlS2V5
        ICsgIicgYWxsb3dlZCkiLCAhdGhpcy50eXBlIHx8IHJlY29yZCBpbnN0YW5j
        ZW9mIHRoaXMudHlwZSk7CiAgICAgIHJldHVybiByZWNvcmQ7CiAgICB9LCB0
        aGlzKTsKCiAgICB0aGlzLl9zdXBlcihpbmRleCwgcmVtb3ZlZCwgYWRkZWQp
        OwogIH0sCgogIGFycmFuZ2VkQ29udGVudERpZENoYW5nZTogZnVuY3Rpb24o
        KSB7CiAgICBFbWJlci5ydW4ub25jZSh0aGlzLCAnZmV0Y2gnKTsKICB9LAoK
        ICBhcnJheUNvbnRlbnRXaWxsQ2hhbmdlOiBmdW5jdGlvbihpbmRleCwgcmVt
        b3ZlZCwgYWRkZWQpIHsKICAgIHZhciBvd25lciA9IGdldCh0aGlzLCAnb3du
        ZXInKSwKICAgICAgICBuYW1lID0gZ2V0KHRoaXMsICduYW1lJyk7CgogICAg
        aWYgKCFvd25lci5fc3VzcGVuZGVkUmVsYXRpb25zaGlwcykgewogICAgICAv
        LyBUaGlzIGNvZGUgaXMgdGhlIGZpcnN0IGhhbGYgb2YgY29kZSB0aGF0IGNv
        bnRpbnVlcyBpbnNpZGUKICAgICAgLy8gb2YgYXJyYXlDb250ZW50RGlkQ2hh
        bmdlLiBJdCBnZXRzIG9yIGNyZWF0ZXMgYSBjaGFuZ2UgZnJvbQogICAgICAv
        LyB0aGUgY2hpbGQgb2JqZWN0LCBhZGRzIHRoZSBjdXJyZW50IG93bmVyIGFz
        IHRoZSBvbGQKICAgICAgLy8gcGFyZW50IGlmIHRoaXMgaXMgdGhlIGZpcnN0
        IHRpbWUgdGhlIG9iamVjdCB3YXMgcmVtb3ZlZAogICAgICAvLyBmcm9tIGEg
        TWFueUFycmF5LCBhbmQgc2V0cyBgbmV3UGFyZW50YCB0byBudWxsLgogICAg
        ICAvLwogICAgICAvLyBMYXRlciwgaWYgdGhlIG9iamVjdCBpcyBhZGRlZCB0
        byBhbm90aGVyIE1hbnlBcnJheSwKICAgICAgLy8gdGhlIGBhcnJheUNvbnRl
        bnREaWRDaGFuZ2VgIHdpbGwgc2V0IGBuZXdQYXJlbnRgIG9uCiAgICAgIC8v
        IHRoZSBjaGFuZ2UuCiAgICAgIGZvciAodmFyIGk9aW5kZXg7IGk8aW5kZXgr
        cmVtb3ZlZDsgaSsrKSB7CiAgICAgICAgdmFyIHJlY29yZCA9IGdldCh0aGlz
        LCAnY29udGVudCcpLm9iamVjdEF0KGkpOwoKICAgICAgICB2YXIgY2hhbmdl
        ID0gRFMuUmVsYXRpb25zaGlwQ2hhbmdlLmNyZWF0ZUNoYW5nZShvd25lciwg
        cmVjb3JkLCBnZXQodGhpcywgJ3N0b3JlJyksIHsKICAgICAgICAgIHBhcmVu
        dFR5cGU6IG93bmVyLmNvbnN0cnVjdG9yLAogICAgICAgICAgY2hhbmdlVHlw
        ZTogInJlbW92ZSIsCiAgICAgICAgICBraW5kOiAiaGFzTWFueSIsCiAgICAg
        ICAgICBrZXk6IG5hbWUKICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5fY2hh
        bmdlc1RvU3luYy5hZGQoY2hhbmdlKTsKICAgICAgfQogICAgfQoKICAgIHJl
        dHVybiB0aGlzLl9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0s
        CgogIGFycmF5Q29udGVudERpZENoYW5nZTogZnVuY3Rpb24oaW5kZXgsIHJl
        bW92ZWQsIGFkZGVkKSB7CiAgICB0aGlzLl9zdXBlci5hcHBseSh0aGlzLCBh
        cmd1bWVudHMpOwoKICAgIHZhciBvd25lciA9IGdldCh0aGlzLCAnb3duZXIn
        KSwKICAgICAgICBuYW1lID0gZ2V0KHRoaXMsICduYW1lJyksCiAgICAgICAg
        c3RvcmUgPSBnZXQodGhpcywgJ3N0b3JlJyk7CgogICAgaWYgKCFvd25lci5f
        c3VzcGVuZGVkUmVsYXRpb25zaGlwcykgewogICAgICAvLyBUaGlzIGNvZGUg
        aXMgdGhlIHNlY29uZCBoYWxmIG9mIGNvZGUgdGhhdCBzdGFydGVkIGluCiAg
        ICAgIC8vIGBhcnJheUNvbnRlbnRXaWxsQ2hhbmdlYC4gSXQgZ2V0cyBvciBj
        cmVhdGVzIGEgY2hhbmdlCiAgICAgIC8vIGZyb20gdGhlIGNoaWxkIG9iamVj
        dCwgYW5kIGFkZHMgdGhlIGN1cnJlbnQgb3duZXIgYXMKICAgICAgLy8gdGhl
        IG5ldyBwYXJlbnQuCiAgICAgIGZvciAodmFyIGk9aW5kZXg7IGk8aW5kZXgr
        YWRkZWQ7IGkrKykgewogICAgICAgIHZhciByZWNvcmQgPSBnZXQodGhpcywg
        J2NvbnRlbnQnKS5vYmplY3RBdChpKTsKCiAgICAgICAgdmFyIGNoYW5nZSA9
        IERTLlJlbGF0aW9uc2hpcENoYW5nZS5jcmVhdGVDaGFuZ2Uob3duZXIsIHJl
        Y29yZCwgc3RvcmUsIHsKICAgICAgICAgIHBhcmVudFR5cGU6IG93bmVyLmNv
        bnN0cnVjdG9yLAogICAgICAgICAgY2hhbmdlVHlwZTogImFkZCIsCiAgICAg
        ICAgICBraW5kOiJoYXNNYW55IiwKICAgICAgICAgIGtleTogbmFtZQogICAg
        ICAgIH0pOwogICAgICAgIGNoYW5nZS5oYXNNYW55TmFtZSA9IG5hbWU7Cgog
        ICAgICAgIHRoaXMuX2NoYW5nZXNUb1N5bmMuYWRkKGNoYW5nZSk7CiAgICAg
        IH0KCiAgICAgIC8vIFdlIHdhaXQgdW50aWwgdGhlIGFycmF5IGhhcyBmaW5p
        c2hlZCBiZWluZwogICAgICAvLyBtdXRhdGVkIGJlZm9yZSBzeW5jaW5nIHRo
        ZSBPbmVUb01hbnlDaGFuZ2VzIGNyZWF0ZWQKICAgICAgLy8gaW4gYXJyYXlD
        b250ZW50V2lsbENoYW5nZSwgc28gdGhhdCB0aGUgYXJyYXkKICAgICAgLy8g
        bWVtYmVyc2hpcCB0ZXN0IGluIHRoZSBzeW5jKCkgbG9naWMgb3BlcmF0ZXMK
        ICAgICAgLy8gb24gdGhlIGZpbmFsIHJlc3VsdHMuCiAgICAgIHRoaXMuX2No
        YW5nZXNUb1N5bmMuZm9yRWFjaChmdW5jdGlvbihjaGFuZ2UpIHsKICAgICAg
        ICBjaGFuZ2Uuc3luYygpOwogICAgICB9KTsKCiAgICAgIHRoaXMuX2NoYW5n
        ZXNUb1N5bmMuY2xlYXIoKTsKICAgIH0KICB9LAoKICAvLyBDcmVhdGUgYSBj
        aGlsZCByZWNvcmQgd2l0aGluIHRoZSBvd25lcgogIGNyZWF0ZVJlY29yZDog
        ZnVuY3Rpb24oaGFzaCkgewogICAgdmFyIG93bmVyID0gZ2V0KHRoaXMsICdv
        d25lcicpLAogICAgICAgIHN0b3JlID0gZ2V0KG93bmVyLCAnc3RvcmUnKSwK
        ICAgICAgICB0eXBlID0gZ2V0KHRoaXMsICd0eXBlJyksCiAgICAgICAgcmVj
        b3JkOwoKICAgIEVtYmVyLmFzc2VydCgiWW91IGNhbm5vdCBhZGQgJyIgKyB0
        eXBlLnR5cGVLZXkgKyAiJyByZWNvcmRzIHRvIHRoaXMgcG9seW1vcnBoaWMg
        cmVsYXRpb25zaGlwLiIsICFnZXQodGhpcywgJ2lzUG9seW1vcnBoaWMnKSk7
        CgogICAgcmVjb3JkID0gc3RvcmUuY3JlYXRlUmVjb3JkLmNhbGwoc3RvcmUs
        IHR5cGUsIGhhc2gpOwogICAgdGhpcy5wdXNoT2JqZWN0KHJlY29yZCk7Cgog
        ICAgcmV0dXJuIHJlY29yZDsKICB9Cgp9KTsKCn0pKCk7CgoKCihmdW5jdGlv
        bigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp9KSgpOwoKCgoo
        ZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoKdmFy
        IGdldCA9IEVtYmVyLmdldDsKdmFyIGZvckVhY2ggPSBFbWJlci5BcnJheVBv
        bHlmaWxscy5mb3JFYWNoOwoKdmFyIHJlc29sdmVNYXBDb25mbGljdCA9IGZ1
        bmN0aW9uKG9sZFZhbHVlLCBuZXdWYWx1ZSkgewogIHJldHVybiBvbGRWYWx1
        ZTsKfTsKCnZhciB0cmFuc2Zvcm1NYXBLZXkgPSBmdW5jdGlvbihrZXksIHZh
        bHVlKSB7CiAgcmV0dXJuIGtleTsKfTsKCnZhciB0cmFuc2Zvcm1NYXBWYWx1
        ZSA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICByZXR1cm4gdmFsdWU7Cn07
        CgovKioKICBUaGUgTWFwcGFibGUgbWl4aW4gaXMgZGVzaWduZWQgZm9yIGNs
        YXNzZXMgdGhhdCB3b3VsZCBsaWtlIHRvCiAgYmVoYXZlIGFzIGEgbWFwIGZv
        ciBjb25maWd1cmF0aW9uIHB1cnBvc2VzLgoKICBGb3IgZXhhbXBsZSwgdGhl
        IERTLkFkYXB0ZXIgY2xhc3MgY2FuIGJlaGF2ZSBsaWtlIGEgbWFwLCB3aXRo
        CiAgbW9yZSBzZW1hbnRpYyBBUEksIHZpYSB0aGUgYG1hcGAgQVBJOgoKICAg
        IERTLkFkYXB0ZXIubWFwKCdBcHAuUGVyc29uJywgeyBmaXJzdE5hbWU6IHsg
        a2V5OiAnRklSU1QnIH0gfSk7CgogIENsYXNzIGNvbmZpZ3VyYXRpb24gdmlh
        IGEgbWFwLWxpa2UgQVBJIGhhcyBhIGZldyBjb21tb24gcmVxdWlyZW1lbnRz
        CiAgdGhhdCBkaWZmZXJlbnRpYXRlIGl0IGZyb20gdGhlIHN0YW5kYXJkIEVt
        YmVyLk1hcCBpbXBsZW1lbnRhdGlvbi4KCiAgRmlyc3QsIHZhbHVlcyBvZnRl
        biBhcmUgcHJvdmlkZWQgYXMgc3RyaW5ncyB0aGF0IHNob3VsZCBiZSBub3Jt
        YWxpemVkCiAgaW50byBjbGFzc2VzIHRoZSBmaXJzdCB0aW1lIHRoZSBjb25m
        aWd1cmF0aW9uIG9wdGlvbnMgYXJlIHVzZWQuCgogIFNlY29uZCwgdGhlIHZh
        bHVlcyBjb25maWd1cmVkIG9uIHBhcmVudCBjbGFzc2VzIHNob3VsZCBhbHNv
        IGJlIHRha2VuCiAgaW50byBhY2NvdW50LgoKICBGaW5hbGx5LCBzZXR0aW5n
        IHRoZSB2YWx1ZSBvZiBhIGtleSBzb21ldGltZXMgc2hvdWxkIG1lcmdlIHdp
        dGggdGhlCiAgcHJldmlvdXMgdmFsdWUsIHJhdGhlciB0aGFuIHJlcGxhY2lu
        ZyBpdC4KCiAgVGhpcyBtaXhpbiBwcm92aWRlcyBhIGluc3RhbmNlIG1ldGhv
        ZCwgYGNyZWF0ZUluc3RhbmNlTWFwRm9yYCwgdGhhdAogIHdpbGwgcmVpZnkg
        YWxsIG9mIHRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgc2V0IG9uIGFuIGlu
        c3RhbmNlJ3MKICBjb25zdHJ1Y3RvciBhbmQgcHJvdmlkZSBpdCBmb3IgdGhl
        IGluc3RhbmNlIHRvIHVzZS4KCiAgQ2xhc3NlcyBjYW4gaW1wbGVtZW50IGNl
        cnRhaW4gaG9va3MgdGhhdCBhbGxvdyB0aGVtIHRvIGN1c3RvbWl6ZQogIHRo
        ZSByZXF1aXJlbWVudHMgbGlzdGVkIGFib3ZlOgoKICAqIGByZXNvbHZlTWFw
        Q29uZmxpY3RgIC0gY2FsbGVkIHdoZW4gYSB2YWx1ZSBpcyBzZXQgZm9yIGFu
        IGV4aXN0aW5nCiAgICB2YWx1ZQogICogYHRyYW5zZm9ybU1hcEtleWAgLSBh
        bGxvd3MgYSBrZXkgbmFtZSAoZm9yIGV4YW1wbGUsIGEgZ2xvYmFsIHBhdGgK
        ICAgIHRvIGEgY2xhc3MpIHRvIGJlIG5vcm1hbGl6ZWQKICAqIGB0cmFuc2Zv
        cm1NYXBWYWx1ZWAgLSBhbGxvd3MgYSB2YWx1ZSAoZm9yIGV4YW1wbGUsIGEg
        Y2xhc3MgdGhhdAogICAgc2hvdWxkIGJlIGluc3RhbnRpYXRlZCkgdG8gYmUg
        bm9ybWFsaXplZAoKICBDbGFzc2VzIHRoYXQgaW1wbGVtZW50IHRoaXMgbWl4
        aW4gc2hvdWxkIGFsc28gaW1wbGVtZW50IGEgY2xhc3MKICBtZXRob2QgYnVp
        bHQgdXNpbmcgdGhlIGBnZW5lcmF0ZU1hcEZ1bmN0aW9uRm9yYCBtZXRob2Q6
        CgogICAgRFMuQWRhcHRlci5yZW9wZW5DbGFzcyh7CiAgICAgIG1hcDogRFMu
        TWFwcGFibGUuZ2VuZXJhdGVNYXBGdW5jdGlvbkZvcignYXR0cmlidXRlcycs
        IGZ1bmN0aW9uKGtleSwgbmV3VmFsdWUsIG1hcCkgewogICAgICAgIHZhciBl
        eGlzdGluZ1ZhbHVlID0gbWFwLmdldChrZXkpOwoKICAgICAgICBmb3IgKHZh
        ciBwcm9wIGluIG5ld1ZhbHVlKSB7CiAgICAgICAgICBpZiAoIW5ld1ZhbHVl
        Lmhhc093blByb3BlcnR5KHByb3ApKSB7IGNvbnRpbnVlOyB9CiAgICAgICAg
        ICBleGlzdGluZ1ZhbHVlW3Byb3BdID0gbmV3VmFsdWVbcHJvcF07CiAgICAg
        ICAgfQogICAgICB9KQogICAgfSk7CgogIFRoZSBmdW5jdGlvbiBwYXNzZWQg
        dG8gYGdlbmVyYXRlTWFwRnVuY3Rpb25Gb3JgIGlzIGludm9rZWQgZXZlcnkg
        dGltZSBhCiAgbmV3IHZhbHVlIGlzIGFkZGVkIHRvIHRoZSBtYXAuCgogIEBj
        bGFzcyBfTWFwcGFibGUKICBAcHJpdmF0ZQogIEBuYW1lc3BhY2UgRFMKKiov
        CkRTLl9NYXBwYWJsZSA9IEVtYmVyLk1peGluLmNyZWF0ZSh7CiAgY3JlYXRl
        SW5zdGFuY2VNYXBGb3I6IGZ1bmN0aW9uKG1hcE5hbWUpIHsKICAgIHZhciBp
        bnN0YW5jZU1ldGEgPSBnZXRNYXBwYWJsZU1ldGEodGhpcyk7CgogICAgaW5z
        dGFuY2VNZXRhLnZhbHVlcyA9IGluc3RhbmNlTWV0YS52YWx1ZXMgfHwge307
        CgogICAgaWYgKGluc3RhbmNlTWV0YS52YWx1ZXNbbWFwTmFtZV0pIHsgcmV0
        dXJuIGluc3RhbmNlTWV0YS52YWx1ZXNbbWFwTmFtZV07IH0KCiAgICB2YXIg
        aW5zdGFuY2VNYXAgPSBpbnN0YW5jZU1ldGEudmFsdWVzW21hcE5hbWVdID0g
        bmV3IEVtYmVyLk1hcCgpOwoKICAgIHZhciBrbGFzcyA9IHRoaXMuY29uc3Ry
        dWN0b3I7CgogICAgd2hpbGUgKGtsYXNzICYmIGtsYXNzICE9PSBEUy5TdG9y
        ZSkgewogICAgICB0aGlzLl9jb3B5TWFwKG1hcE5hbWUsIGtsYXNzLCBpbnN0
        YW5jZU1hcCk7CiAgICAgIGtsYXNzID0ga2xhc3Muc3VwZXJjbGFzczsKICAg
        IH0KCiAgICBpbnN0YW5jZU1ldGEudmFsdWVzW21hcE5hbWVdID0gaW5zdGFu
        Y2VNYXA7CiAgICByZXR1cm4gaW5zdGFuY2VNYXA7CiAgfSwKCiAgX2NvcHlN
        YXA6IGZ1bmN0aW9uKG1hcE5hbWUsIGtsYXNzLCBpbnN0YW5jZU1hcCkgewog
        ICAgdmFyIGNsYXNzTWV0YSA9IGdldE1hcHBhYmxlTWV0YShrbGFzcyk7Cgog
        ICAgdmFyIGNsYXNzTWFwID0gY2xhc3NNZXRhW21hcE5hbWVdOwogICAgaWYg
        KGNsYXNzTWFwKSB7CiAgICAgIGZvckVhY2guY2FsbChjbGFzc01hcCwgZWFj
        aE1hcCwgdGhpcyk7CiAgICB9CgogICAgZnVuY3Rpb24gZWFjaE1hcChrZXks
        IHZhbHVlKSB7CiAgICAgIHZhciB0cmFuc2Zvcm1lZEtleSA9IChrbGFzcy50
        cmFuc2Zvcm1NYXBLZXkgfHwgdHJhbnNmb3JtTWFwS2V5KShrZXksIHZhbHVl
        KTsKICAgICAgdmFyIHRyYW5zZm9ybWVkVmFsdWUgPSAoa2xhc3MudHJhbnNm
        b3JtTWFwVmFsdWUgfHwgdHJhbnNmb3JtTWFwVmFsdWUpKGtleSwgdmFsdWUp
        OwoKICAgICAgdmFyIG9sZFZhbHVlID0gaW5zdGFuY2VNYXAuZ2V0KHRyYW5z
        Zm9ybWVkS2V5KTsKICAgICAgdmFyIG5ld1ZhbHVlID0gdHJhbnNmb3JtZWRW
        YWx1ZTsKCiAgICAgIGlmIChvbGRWYWx1ZSkgewogICAgICAgIG5ld1ZhbHVl
        ID0gKHRoaXMuY29uc3RydWN0b3IucmVzb2x2ZU1hcENvbmZsaWN0IHx8IHJl
        c29sdmVNYXBDb25mbGljdCkob2xkVmFsdWUsIG5ld1ZhbHVlKTsKICAgICAg
        fQoKICAgICAgaW5zdGFuY2VNYXAuc2V0KHRyYW5zZm9ybWVkS2V5LCBuZXdW
        YWx1ZSk7CiAgICB9CiAgfQoKfSk7CgpEUy5fTWFwcGFibGUuZ2VuZXJhdGVN
        YXBGdW5jdGlvbkZvciA9IGZ1bmN0aW9uKG1hcE5hbWUsIHRyYW5zZm9ybSkg
        ewogIHJldHVybiBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICB2YXIgbWV0
        YSA9IGdldE1hcHBhYmxlTWV0YSh0aGlzKTsKCiAgICB2YXIgbWFwID0gbWV0
        YVttYXBOYW1lXSB8fCBFbWJlci5NYXBXaXRoRGVmYXVsdC5jcmVhdGUoewog
        ICAgICBkZWZhdWx0VmFsdWU6IGZ1bmN0aW9uKCkgeyByZXR1cm4ge307IH0K
        ICAgIH0pOwoKICAgIHRyYW5zZm9ybS5jYWxsKHRoaXMsIGtleSwgdmFsdWUs
        IG1hcCk7CgogICAgbWV0YVttYXBOYW1lXSA9IG1hcDsKICB9Owp9OwoKZnVu
        Y3Rpb24gZ2V0TWFwcGFibGVNZXRhKG9iaikgewogIHZhciBtZXRhID0gRW1i
        ZXIubWV0YShvYmosIHRydWUpLAogICAgICBrZXlOYW1lID0gJ0RTLk1hcHBh
        YmxlJywKICAgICAgdmFsdWUgPSBtZXRhW2tleU5hbWVdOwoKICBpZiAoIXZh
        bHVlKSB7IG1ldGFba2V5TmFtZV0gPSB7fTsgfQoKICBpZiAoIW1ldGEuaGFz
        T3duUHJvcGVydHkoa2V5TmFtZSkpIHsKICAgIG1ldGFba2V5TmFtZV0gPSBF
        bWJlci5jcmVhdGUobWV0YVtrZXlOYW1lXSk7CiAgfQoKICByZXR1cm4gbWV0
        YVtrZXlOYW1lXTsKfQoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewovKmdsb2Jh
        bHMgRW1iZXIqLwovKmpzaGludCBlcW51bGw6dHJ1ZSovCi8qKgogIEBtb2R1
        bGUgZW1iZXItZGF0YQoqLwoKdmFyIGdldCA9IEVtYmVyLmdldCwgc2V0ID0g
        RW1iZXIuc2V0Owp2YXIgb25jZSA9IEVtYmVyLnJ1bi5vbmNlOwp2YXIgaXNO
        b25lID0gRW1iZXIuaXNOb25lOwp2YXIgZm9yRWFjaCA9IEVtYmVyLkVudW1l
        cmFibGVVdGlscy5mb3JFYWNoOwp2YXIgaW5kZXhPZiA9IEVtYmVyLkVudW1l
        cmFibGVVdGlscy5pbmRleE9mOwp2YXIgbWFwID0gRW1iZXIuRW51bWVyYWJs
        ZVV0aWxzLm1hcDsKdmFyIHJlc29sdmUgPSBFbWJlci5SU1ZQLnJlc29sdmU7
        CgovLyBJbXBsZW1lbnRvcnMgTm90ZToKLy8KLy8gICBUaGUgdmFyaWFibGVz
        IGluIHRoaXMgZmlsZSBhcmUgY29uc2lzdGVudGx5IG5hbWVkIGFjY29yZGlu
        ZyB0byB0aGUgZm9sbG93aW5nCi8vICAgc2NoZW1lOgovLwovLyAgICogK2lk
        KyBtZWFucyBhbiBpZGVudGlmaWVyIG1hbmFnZWQgYnkgYW4gZXh0ZXJuYWwg
        c291cmNlLCBwcm92aWRlZCBpbnNpZGUKLy8gICAgIHRoZSBkYXRhIHByb3Zp
        ZGVkIGJ5IHRoYXQgc291cmNlLiBUaGVzZSBhcmUgYWx3YXlzIGNvZXJjZWQg
        dG8gYmUgc3RyaW5ncwovLyAgICAgYmVmb3JlIGJlaW5nIHVzZWQgaW50ZXJu
        YWxseS4KLy8gICAqICtjbGllbnRJZCsgbWVhbnMgYSB0cmFuc2llbnQgbnVt
        ZXJpY2FsIGlkZW50aWZpZXIgZ2VuZXJhdGVkIGF0IHJ1bnRpbWUgYnkKLy8g
        ICAgIHRoZSBkYXRhIHN0b3JlLiBJdCBpcyBpbXBvcnRhbnQgcHJpbWFyaWx5
        IGJlY2F1c2UgbmV3bHkgY3JlYXRlZCBvYmplY3RzIG1heQovLyAgICAgbm90
        IHlldCBoYXZlIGFuIGV4dGVybmFsbHkgZ2VuZXJhdGVkIGlkLgovLyAgICog
        K3JlZmVyZW5jZSsgbWVhbnMgYSByZWNvcmQgcmVmZXJlbmNlIG9iamVjdCwg
        d2hpY2ggaG9sZHMgbWV0YWRhdGEgYWJvdXQgYQovLyAgICAgcmVjb3JkLCBl
        dmVuIGlmIGl0IGhhcyBub3QgeWV0IGJlZW4gZnVsbHkgbWF0ZXJpYWxpemVk
        LgovLyAgICogK3R5cGUrIG1lYW5zIGEgc3ViY2xhc3Mgb2YgRFMuTW9kZWwu
        CgovLyBVc2VkIGJ5IHRoZSBzdG9yZSB0byBub3JtYWxpemUgSURzIGVudGVy
        aW5nIHRoZSBzdG9yZS4gIERlc3BpdGUgdGhlIGZhY3QKLy8gdGhhdCBkZXZl
        bG9wZXJzIG1heSBwcm92aWRlIElEcyBhcyBudW1iZXJzIChlLmcuLCBgc3Rv
        cmUuZmluZChQZXJzb24sIDEpYCksCi8vIGl0IGlzIGltcG9ydGFudCB0aGF0
        IGludGVybmFsbHkgd2UgdXNlIHN0cmluZ3MsIHNpbmNlIElEcyBtYXkgYmUg
        c2VyaWFsaXplZAovLyBhbmQgbG9zZSB0eXBlIGluZm9ybWF0aW9uLiAgRm9y
        IGV4YW1wbGUsIEVtYmVyJ3Mgcm91dGVyIG1heSBwdXQgYSByZWNvcmQncwov
        LyBJRCBpbnRvIHRoZSBVUkwsIGFuZCBpZiB3ZSBsYXRlciB0cnkgdG8gZGVz
        ZXJpYWxpemUgdGhhdCBVUkwgYW5kIGZpbmQgdGhlCi8vIGNvcnJlc3BvbmRp
        bmcgcmVjb3JkLCB3ZSB3aWxsIG5vdCBrbm93IGlmIGl0IGlzIGEgc3RyaW5n
        IG9yIGEgbnVtYmVyLgp2YXIgY29lcmNlSWQgPSBmdW5jdGlvbihpZCkgewog
        IHJldHVybiBpZCA9PSBudWxsID8gbnVsbCA6IGlkKycnOwp9OwoKLyoqCiAg
        VGhlIHN0b3JlIGNvbnRhaW5zIGFsbCBvZiB0aGUgZGF0YSBmb3IgcmVjb3Jk
        cyBsb2FkZWQgZnJvbSB0aGUgc2VydmVyLgogIEl0IGlzIGFsc28gcmVzcG9u
        c2libGUgZm9yIGNyZWF0aW5nIGluc3RhbmNlcyBvZiBEUy5Nb2RlbCB0aGF0
        IHdyYXAKICB0aGUgaW5kaXZpZHVhbCBkYXRhIGZvciBhIHJlY29yZCwgc28g
        dGhhdCB0aGV5IGNhbiBiZSBib3VuZCB0byBpbiB5b3VyCiAgSGFuZGxlYmFy
        cyB0ZW1wbGF0ZXMuCgogIERlZmluZSB5b3VyIGFwcGxpY2F0aW9uJ3Mgc3Rv
        cmUgbGlrZSB0aGlzOgoKICAgICAgIE15QXBwLlN0b3JlID0gRFMuU3RvcmUu
        ZXh0ZW5kKCk7CgogIE1vc3QgRW1iZXIuanMgYXBwbGljYXRpb25zIHdpbGwg
        b25seSBoYXZlIGEgc2luZ2xlIGBEUy5TdG9yZWAgdGhhdCBpcwogIGF1dG9t
        YXRpY2FsbHkgY3JlYXRlZCBieSB0aGVpciBgRW1iZXIuQXBwbGljYXRpb25g
        LgoKICBZb3UgY2FuIHJldHJpZXZlIG1vZGVscyBmcm9tIHRoZSBzdG9yZSBp
        biBzZXZlcmFsIHdheXMuIFRvIHJldHJpZXZlIGEgcmVjb3JkCiAgZm9yIGEg
        c3BlY2lmaWMgaWQsIHVzZSBgRFMuTW9kZWxgJ3MgYGZpbmQoKWAgbWV0aG9k
        OgoKICAgICAgIHZhciBwZXJzb24gPSBBcHAuUGVyc29uLmZpbmQoMTIzKTsK
        CiAgSWYgeW91ciBhcHBsaWNhdGlvbiBoYXMgbXVsdGlwbGUgYERTLlN0b3Jl
        YCBpbnN0YW5jZXMgKGFuIHVudXN1YWwgY2FzZSksIHlvdSBjYW4KICBzcGVj
        aWZ5IHdoaWNoIHN0b3JlIHNob3VsZCBiZSB1c2VkOgoKICAgICAgdmFyIHBl
        cnNvbiA9IHN0b3JlLmZpbmQoQXBwLlBlcnNvbiwgMTIzKTsKCiAgSW4gZ2Vu
        ZXJhbCwgeW91IHNob3VsZCByZXRyaWV2ZSBtb2RlbHMgdXNpbmcgdGhlIG1l
        dGhvZHMgb24gYERTLk1vZGVsYDsgeW91IHNob3VsZAogIHJhcmVseSBuZWVk
        IHRvIGludGVyYWN0IHdpdGggdGhlIHN0b3JlIGRpcmVjdGx5LgoKICBCeSBk
        ZWZhdWx0LCB0aGUgc3RvcmUgd2lsbCB0YWxrIHRvIHlvdXIgYmFja2VuZCB1
        c2luZyBhIHN0YW5kYXJkIFJFU1QgbWVjaGFuaXNtLgogIFlvdSBjYW4gY3Vz
        dG9taXplIGhvdyB0aGUgc3RvcmUgdGFsa3MgdG8geW91ciBiYWNrZW5kIGJ5
        IHNwZWNpZnlpbmcgYSBjdXN0b20gYWRhcHRlcjoKCiAgICAgICBNeUFwcC5z
        dG9yZSA9IERTLlN0b3JlLmNyZWF0ZSh7CiAgICAgICAgIGFkYXB0ZXI6ICdN
        eUFwcC5DdXN0b21BZGFwdGVyJwogICAgICAgfSk7CgogIFlvdSBjYW4gbGVh
        cm4gbW9yZSBhYm91dCB3cml0aW5nIGEgY3VzdG9tIGFkYXB0ZXIgYnkgcmVh
        ZGluZyB0aGUgYERTLkFkYXB0ZXJgCiAgZG9jdW1lbnRhdGlvbi4KCiAgQGNs
        YXNzIFN0b3JlCiAgQG5hbWVzcGFjZSBEUwogIEBleHRlbmRzIEVtYmVyLk9i
        amVjdAogIEB1c2VzIERTLl9NYXBwYWJsZQoqLwpEUy5TdG9yZSA9IEVtYmVy
        Lk9iamVjdC5leHRlbmQoRFMuX01hcHBhYmxlLCB7CgogIC8qKgogICAgQG1l
        dGhvZCBpbml0CiAgICBAcHJpdmF0ZQogICovCiAgaW5pdDogZnVuY3Rpb24o
        KSB7CiAgICAvLyBpbnRlcm5hbCBib29ra2VlcGluZzsgbm90IG9ic2VydmFi
        bGUKICAgIHRoaXMudHlwZU1hcHMgPSB7fTsKICAgIHRoaXMucmVjb3JkQXJy
        YXlNYW5hZ2VyID0gRFMuUmVjb3JkQXJyYXlNYW5hZ2VyLmNyZWF0ZSh7CiAg
        ICAgIHN0b3JlOiB0aGlzCiAgICB9KTsKICAgIHRoaXMuX3JlbGF0aW9uc2hp
        cENoYW5nZXMgPSB7fTsKICAgIHRoaXMuX3BlbmRpbmdTYXZlID0gW107CiAg
        fSwKCiAgLyoqCiAgICBUaGUgYWRhcHRlciB0byB1c2UgdG8gY29tbXVuaWNh
        dGUgdG8gYSBiYWNrZW5kIHNlcnZlciBvciBvdGhlciBwZXJzaXN0ZW5jZSBs
        YXllci4KCiAgICBUaGlzIGNhbiBiZSBzcGVjaWZpZWQgYXMgYW4gaW5zdGFu
        Y2UsIGNsYXNzLCBvciBzdHJpbmcuCgogICAgSWYgeW91IHdhbnQgdG8gc3Bl
        Y2lmeSBgQXBwLkN1c3RvbUFkYXB0ZXJgIGFzIGEgc3RyaW5nLCBkbzoKCiAg
        ICBgYGBqcwogICAgYWRhcHRlcjogJ2N1c3RvbScKICAgIGBgYAoKICAgIEBw
        cm9wZXJ0eSBhZGFwdGVyCiAgICBAZGVmYXVsdCBEUy5SRVNUQWRhcHRlcgog
        ICAgQHR5cGUge0RTLkFkYXB0ZXJ8U3RyaW5nfQogICovCiAgYWRhcHRlcjog
        J19yZXN0JywKCiAgLyoqCiAgICBSZXR1cm5zIGEgSlNPTiByZXByZXNlbnRh
        dGlvbiBvZiB0aGUgcmVjb3JkIHVzaW5nIGEgY3VzdG9tCiAgICB0eXBlLXNw
        ZWNpZmljIHNlcmlhbGl6ZXIsIGlmIG9uZSBleGlzdHMuCgogICAgVGhlIGF2
        YWlsYWJsZSBvcHRpb25zIGFyZToKCiAgICAqIGBpbmNsdWRlSWRgOiBgdHJ1
        ZWAgaWYgdGhlIHJlY29yZCdzIElEIHNob3VsZCBiZSBpbmNsdWRlZCBpbgog
        ICAgICB0aGUgSlNPTiByZXByZXNlbnRhdGlvbgoKICAgIEBtZXRob2Qgc2Vy
        aWFsaXplCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVj
        b3JkIHRoZSByZWNvcmQgdG8gc2VyaWFsaXplCiAgICBAcGFyYW0ge09iamVj
        dH0gb3B0aW9ucyBhbiBvcHRpb25zIGhhc2gKICAqLwogIHNlcmlhbGl6ZTog
        ZnVuY3Rpb24ocmVjb3JkLCBvcHRpb25zKSB7CiAgICByZXR1cm4gdGhpcy5z
        ZXJpYWxpemVyRm9yKHJlY29yZC5jb25zdHJ1Y3Rvci50eXBlS2V5KS5zZXJp
        YWxpemUocmVjb3JkLCBvcHRpb25zKTsKICB9LAoKICAvKioKICAgIFRoaXMg
        cHJvcGVydHkgcmV0dXJucyB0aGUgYWRhcHRlciwgYWZ0ZXIgcmVzb2x2aW5n
        IGEgcG9zc2libGUKICAgIHN0cmluZyBrZXkuCgogICAgSWYgdGhlIHN1cHBs
        aWVkIGBhZGFwdGVyYCB3YXMgYSBjbGFzcywgb3IgYSBTdHJpbmcgcHJvcGVy
        dHkKICAgIHBhdGggcmVzb2x2ZWQgdG8gYSBjbGFzcywgdGhpcyBwcm9wZXJ0
        eSB3aWxsIGluc3RhbnRpYXRlIHRoZQogICAgY2xhc3MuCgogICAgVGhpcyBw
        cm9wZXJ0eSBpcyBjYWNoZWFibGUsIHNvIHRoZSBzYW1lIGluc3RhbmNlIG9m
        IGEgc3BlY2lmaWVkCiAgICBhZGFwdGVyIGNsYXNzIHNob3VsZCBiZSB1c2Vk
        IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHN0b3JlLgoKICAgIEBwcm9wZXJ0
        eSBkZWZhdWx0QWRhcHRlcgogICAgQHByaXZhdGUKICAgIEByZXR1cm5zIERT
        LkFkYXB0ZXIKICAqLwogIGRlZmF1bHRBZGFwdGVyOiBFbWJlci5jb21wdXRl
        ZChmdW5jdGlvbigpIHsKICAgIHZhciBhZGFwdGVyID0gZ2V0KHRoaXMsICdh
        ZGFwdGVyJyk7CgogICAgRW1iZXIuYXNzZXJ0KCdZb3UgdHJpZWQgdG8gc2V0
        IGBhZGFwdGVyYCBwcm9wZXJ0eSB0byBhbiBpbnN0YW5jZSBvZiBgRFMuQWRh
        cHRlcmAsIHdoZXJlIGl0IHNob3VsZCBiZSBhIG5hbWUgb3IgYSBmYWN0b3J5
        JywgIShhZGFwdGVyIGluc3RhbmNlb2YgRFMuQWRhcHRlcikpOwoKICAgIGlm
        ICh0eXBlb2YgYWRhcHRlciA9PT0gJ3N0cmluZycpIHsKICAgICAgYWRhcHRl
        ciA9IHRoaXMuY29udGFpbmVyLmxvb2t1cCgnYWRhcHRlcjonICsgYWRhcHRl
        cikgfHwgdGhpcy5jb250YWluZXIubG9va3VwKCdhZGFwdGVyOmFwcGxpY2F0
        aW9uJykgfHwgdGhpcy5jb250YWluZXIubG9va3VwKCdhZGFwdGVyOl9yZXN0
        Jyk7CiAgICB9CgogICAgaWYgKERTLkFkYXB0ZXIuZGV0ZWN0KGFkYXB0ZXIp
        KSB7CiAgICAgIGFkYXB0ZXIgPSBhZGFwdGVyLmNyZWF0ZSh7IGNvbnRhaW5l
        cjogdGhpcy5jb250YWluZXIgfSk7CiAgICB9CgogICAgcmV0dXJuIGFkYXB0
        ZXI7CiAgfSkucHJvcGVydHkoJ2FkYXB0ZXInKSwKCiAgLy8gLi4uLi4uLi4u
        Li4uLi4uLi4uLi4uCiAgLy8gLiBDUkVBVEUgTkVXIFJFQ09SRCAuCiAgLy8g
        Li4uLi4uLi4uLi4uLi4uLi4uLi4uCgogIC8qKgogICAgQ3JlYXRlIGEgbmV3
        IHJlY29yZCBpbiB0aGUgY3VycmVudCBzdG9yZS4gVGhlIHByb3BlcnRpZXMg
        cGFzc2VkCiAgICB0byB0aGlzIG1ldGhvZCBhcmUgc2V0IG9uIHRoZSBuZXds
        eSBjcmVhdGVkIHJlY29yZC4KCiAgICBUbyBjcmVhdGUgYSBuZXcgaW5zdGFu
        Y2Ugb2YgYEFwcC5Qb3N0YDoKCiAgICBgYGBqcwogICAgc3RvcmUuY3JlYXRl
        UmVjb3JkKCdwb3N0JywgewogICAgICB0aXRsZTogIlJhaWxzIGlzIG9tYWth
        c2UiCiAgICB9KTsKICAgIGBgYAoKICAgIEBtZXRob2QgY3JlYXRlUmVjb3Jk
        CiAgICBAcGFyYW0ge1N0cmluZ30gdHlwZQogICAgQHBhcmFtIHtPYmplY3R9
        IHByb3BlcnRpZXMgYSBoYXNoIG9mIHByb3BlcnRpZXMgdG8gc2V0IG9uIHRo
        ZQogICAgICBuZXdseSBjcmVhdGVkIHJlY29yZC4KICAgIEByZXR1cm5zIERT
        Lk1vZGVsCiAgKi8KICBjcmVhdGVSZWNvcmQ6IGZ1bmN0aW9uKHR5cGUsIHBy
        b3BlcnRpZXMpIHsKICAgIHR5cGUgPSB0aGlzLm1vZGVsRm9yKHR5cGUpOwoK
        ICAgIHByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzIHx8IHt9OwoKICAgIC8vIElm
        IHRoZSBwYXNzZWQgcHJvcGVydGllcyBkbyBub3QgaW5jbHVkZSBhIHByaW1h
        cnkga2V5LAogICAgLy8gZ2l2ZSB0aGUgYWRhcHRlciBhbiBvcHBvcnR1bml0
        eSB0byBnZW5lcmF0ZSBvbmUuIFR5cGljYWxseSwKICAgIC8vIGNsaWVudC1z
        aWRlIElEIGdlbmVyYXRvcnMgd2lsbCB1c2Ugc29tZXRoaW5nIGxpa2UgdXVp
        ZC5qcwogICAgLy8gdG8gYXZvaWQgY29uZmxpY3RzLgoKICAgIGlmIChpc05v
        bmUocHJvcGVydGllcy5pZCkpIHsKICAgICAgcHJvcGVydGllcy5pZCA9IHRo
        aXMuX2dlbmVyYXRlSWQodHlwZSk7CiAgICB9CgogICAgLy8gQ29lcmNlIElE
        IHRvIGEgc3RyaW5nCiAgICBwcm9wZXJ0aWVzLmlkID0gY29lcmNlSWQocHJv
        cGVydGllcy5pZCk7CgogICAgdmFyIHJlY29yZCA9IHRoaXMuYnVpbGRSZWNv
        cmQodHlwZSwgcHJvcGVydGllcy5pZCk7CgogICAgLy8gTW92ZSB0aGUgcmVj
        b3JkIG91dCBvZiBpdHMgaW5pdGlhbCBgZW1wdHlgIHN0YXRlIGludG8KICAg
        IC8vIHRoZSBgbG9hZGVkYCBzdGF0ZS4KICAgIHJlY29yZC5sb2FkZWREYXRh
        KCk7CgogICAgLy8gU2V0IHRoZSBwcm9wZXJ0aWVzIHNwZWNpZmllZCBvbiB0
        aGUgcmVjb3JkLgogICAgcmVjb3JkLnNldFByb3BlcnRpZXMocHJvcGVydGll
        cyk7CgogICAgcmV0dXJuIHJlY29yZDsKICB9LAoKICAvKioKICAgIElmIHBv
        c3NpYmxlLCB0aGlzIG1ldGhvZCBhc2tzIHRoZSBhZGFwdGVyIHRvIGdlbmVy
        YXRlIGFuIElEIGZvcgogICAgYSBuZXdseSBjcmVhdGVkIHJlY29yZC4KCiAg
        ICBAbWV0aG9kIGdlbmVyYXRlSWQKICAgIEBwYXJhbSB7U3RyaW5nfSB0eXBl
        CiAgICBAcmV0dXJucyBTdHJpbmcgaWYgdGhlIGFkYXB0ZXIgY2FuIGdlbmVy
        YXRlIG9uZSwgYW4gSUQKICAqLwogIF9nZW5lcmF0ZUlkOiBmdW5jdGlvbih0
        eXBlKSB7CiAgICB2YXIgYWRhcHRlciA9IHRoaXMuYWRhcHRlckZvcih0eXBl
        KTsKCiAgICBpZiAoYWRhcHRlciAmJiBhZGFwdGVyLmdlbmVyYXRlSWRGb3JS
        ZWNvcmQpIHsKICAgICAgcmV0dXJuIGFkYXB0ZXIuZ2VuZXJhdGVJZEZvclJl
        Y29yZCh0aGlzKTsKICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9LAoKICAv
        LyAuLi4uLi4uLi4uLi4uLi4uLgogIC8vIC4gREVMRVRFIFJFQ09SRCAuCiAg
        Ly8gLi4uLi4uLi4uLi4uLi4uLi4KCiAgLyoqCiAgICBGb3Igc3ltbWV0cnks
        IGEgcmVjb3JkIGNhbiBiZSBkZWxldGVkIHZpYSB0aGUgc3RvcmUuCgogICAg
        QG1ldGhvZCBkZWxldGVSZWNvcmQKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJl
        Y29yZAogICovCiAgZGVsZXRlUmVjb3JkOiBmdW5jdGlvbihyZWNvcmQpIHsK
        ICAgIHJlY29yZC5kZWxldGVSZWNvcmQoKTsKICB9LAoKICAvKioKICAgIEZv
        ciBzeW1tZXRyeSwgYSByZWNvcmQgY2FuIGJlIHVubG9hZGVkIHZpYSB0aGUg
        c3RvcmUuCgogICAgQG1ldGhvZCB1bmxvYWRSZWNvcmQKICAgIEBwYXJhbSB7
        RFMuTW9kZWx9IHJlY29yZAogICovCiAgdW5sb2FkUmVjb3JkOiBmdW5jdGlv
        bihyZWNvcmQpIHsKICAgIHJlY29yZC51bmxvYWRSZWNvcmQoKTsKICB9LAoK
        ICAvLyAuLi4uLi4uLi4uLi4uLi4uCiAgLy8gLiBGSU5EIFJFQ09SRFMgLgog
        IC8vIC4uLi4uLi4uLi4uLi4uLi4KCiAgLyoqCiAgICBUaGlzIGlzIHRoZSBt
        YWluIGVudHJ5IHBvaW50IGludG8gZmluZGluZyByZWNvcmRzLiBUaGUgZmly
        c3QgcGFyYW1ldGVyIHRvCiAgICB0aGlzIG1ldGhvZCBpcyB0aGUgbW9kZWwn
        cyBuYW1lIGFzIGEgc3RyaW5nLgoKICAgIC0tLQoKICAgIFRvIGZpbmQgYSBy
        ZWNvcmQgYnkgSUQsIHBhc3MgdGhlIGBpZGAgYXMgdGhlIHNlY29uZCBwYXJh
        bWV0ZXI6CgogICAgICAgIHN0b3JlLmZpbmQoJ3BlcnNvbicsIDEpOwoKICAg
        IFRoZSBgZmluZGAgbWV0aG9kIHdpbGwgYWx3YXlzIHJldHVybiBhICoqcHJv
        bWlzZSoqIHRoYXQgd2lsbCBiZSByZXNvbHZlZAogICAgd2l0aCB0aGUgcmVj
        b3JkLiBJZiB0aGUgcmVjb3JkIHdhcyBhbHJlYWR5IGluIHRoZSBzdG9yZSwg
        dGhlIHByb21pc2Ugd2lsbAogICAgYmUgcmVzb2x2ZWQgaW1tZWRpYXRlbHku
        IE90aGVyd2lzZSwgdGhlIHN0b3JlIHdpbGwgYXNrIHRoZSBhZGFwdGVyJ3Mg
        YGZpbmRgCiAgICBtZXRob2QgdG8gZmluZCB0aGUgbmVjZXNzYXJ5IGRhdGEu
        CgogICAgVGhlIGBmaW5kYCBtZXRob2Qgd2lsbCBhbHdheXMgcmVzb2x2ZSBp
        dHMgcHJvbWlzZSB3aXRoIHRoZSBzYW1lIG9iamVjdCBmb3IKICAgIGEgZ2l2
        ZW4gdHlwZSBhbmQgYGlkYC4KCiAgICAtLS0KCiAgICBUbyBmaW5kIGFsbCBy
        ZWNvcmRzIGZvciBhIHR5cGUsIGNhbGwgYGZpbmRgIHdpdGggbm8gYWRkaXRp
        b25hbCBwYXJhbWV0ZXJzOgoKICAgICAgICBzdG9yZS5maW5kKCdwZXJzb24n
        KTsKCiAgICBUaGlzIHdpbGwgYXNrIHRoZSBhZGFwdGVyJ3MgYGZpbmRBbGxg
        IG1ldGhvZCB0byBmaW5kIHRoZSByZWNvcmRzIGZvciB0aGUKICAgIGdpdmVu
        IHR5cGUsIGFuZCByZXR1cm4gYSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNv
        bHZlZCBvbmNlIHRoZSBzZXJ2ZXIKICAgIHJldHVybnMgdGhlIHZhbHVlcy4K
        CiAgICAtLS0KCiAgICBUbyBmaW5kIGEgcmVjb3JkIGJ5IGEgcXVlcnksIGNh
        bGwgYGZpbmRgIHdpdGggYSBoYXNoIGFzIHRoZSBzZWNvbmQKICAgIHBhcmFt
        ZXRlcjoKCiAgICAgICAgc3RvcmUuZmluZChBcHAuUGVyc29uLCB7IHBhZ2U6
        IDEgfSk7CgogICAgVGhpcyB3aWxsIGFzayB0aGUgYWRhcHRlcidzIGBmaW5k
        UXVlcnlgIG1ldGhvZCB0byBmaW5kIHRoZSByZWNvcmRzIGZvcgogICAgdGhl
        IHF1ZXJ5LCBhbmQgcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVz
        b2x2ZWQgb25jZSB0aGUgc2VydmVyCiAgICByZXNwb25kcy4KCiAgICBAbWV0
        aG9kIGZpbmQKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHR5cGUKICAgIEBwYXJh
        bSB7T2JqZWN0fFN0cmluZ3xJbnRlZ2VyfG51bGx9IGlkCiAgKi8KICBmaW5k
        OiBmdW5jdGlvbih0eXBlLCBpZCkgewogICAgaWYgKGlkID09PSB1bmRlZmlu
        ZWQpIHsKICAgICAgcmV0dXJuIHRoaXMuZmluZEFsbCh0eXBlKTsKICAgIH0K
        CiAgICAvLyBXZSBhcmUgcGFzc2VkIGEgcXVlcnkgaW5zdGVhZCBvZiBhbiBp
        ZC4KICAgIGlmIChFbWJlci50eXBlT2YoaWQpID09PSAnb2JqZWN0Jykgewog
        ICAgICByZXR1cm4gdGhpcy5maW5kUXVlcnkodHlwZSwgaWQpOwogICAgfQoK
        ICAgIHJldHVybiB0aGlzLmZpbmRCeUlkKHR5cGUsIGNvZXJjZUlkKGlkKSk7
        CiAgfSwKCiAgLyoqCiAgICBUaGlzIG1ldGhvZCByZXR1cm5zIGEgcmVjb3Jk
        IGZvciBhIGdpdmVuIHR5cGUgYW5kIGlkIGNvbWJpbmF0aW9uLgoKICAgIEBt
        ZXRob2QgZmluZEJ5SWQKICAgIEBwcml2YXRlCiAgICBAcGFyYW0gdHlwZQog
        ICAgQHBhcmFtIGlkCiAgKi8KICBmaW5kQnlJZDogZnVuY3Rpb24odHlwZSwg
        aWQpIHsKICAgIHR5cGUgPSB0aGlzLm1vZGVsRm9yKHR5cGUpOwoKICAgIHZh
        ciByZWNvcmQgPSB0aGlzLnJlY29yZEZvcklkKHR5cGUsIGlkKTsKCiAgICB2
        YXIgcHJvbWlzZSA9IHRoaXMuZmV0Y2hSZWNvcmQocmVjb3JkKSB8fCByZXNv
        bHZlKHJlY29yZCk7CiAgICByZXR1cm4gcHJvbWlzZU9iamVjdChwcm9taXNl
        KTsKICB9LAoKICAvKioKICAgIFRoaXMgbWV0aG9kIG1ha2VzIGEgc2VyaWVz
        IG9mIHJlcXVlc3RzIHRvIHRoZSBhZGFwdGVyJ3MgYGZpbmRgIG1ldGhvZAog
        ICAgYW5kIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSB0
        aGV5IGFyZSBhbGwgbG9hZGVkLgoKICAgIEBtZXRob2QgZmluZEJ5SWRzCiAg
        ICBAcGFyYW0ge1N0cmluZ30gdHlwZQogICAgQHBhcmFtIHtBcnJheX0gaWRz
        CiAgICBAcmV0dXJucyBQcm9taXNlCiAgKi8KICBmaW5kQnlJZHM6IGZ1bmN0
        aW9uKHR5cGUsIGlkcykgewogICAgdmFyIHN0b3JlID0gdGhpczsKCiAgICBy
        ZXR1cm4gcHJvbWlzZUFycmF5KEVtYmVyLlJTVlAuYWxsKG1hcChpZHMsIGZ1
        bmN0aW9uKGlkKSB7CiAgICAgIHJldHVybiBzdG9yZS5maW5kQnlJZCh0eXBl
        LCBpZCk7CiAgICB9KSkudGhlbihmdW5jdGlvbihhcnJheSkgewogICAgICBy
        ZXR1cm4gRW1iZXIuQShhcnJheSk7CiAgICB9KSk7CiAgfSwKCiAgLyoqCiAg
        ICBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgYGZpbmRCeUlkYCBpZiBpdCBk
        aXNjb3ZlcnMgdGhhdCBhIHBhcnRpY3VsYXIKICAgIHR5cGUvaWQgcGFpciBo
        YXNuJ3QgYmVlbiBsb2FkZWQgeWV0IHRvIGtpY2sgb2ZmIGEgcmVxdWVzdCB0
        byB0aGUKICAgIGFkYXB0ZXIuCgogICAgQG1ldGhvZCBmZXRjaFJlY29yZAog
        ICAgQHByaXZhdGUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAg
        QHJldHVybnMgUHJvbWlzZQogICovCiAgZmV0Y2hSZWNvcmQ6IGZ1bmN0aW9u
        KHJlY29yZCkgewogICAgaWYgKGlzTm9uZShyZWNvcmQpKSB7IHJldHVybiBu
        dWxsOyB9CiAgICBpZiAocmVjb3JkLl9sb2FkaW5nUHJvbWlzZSkgeyByZXR1
        cm4gcmVjb3JkLl9sb2FkaW5nUHJvbWlzZTsgfQogICAgaWYgKCFnZXQocmVj
        b3JkLCAnaXNFbXB0eScpKSB7IHJldHVybiBudWxsOyB9CgogICAgdmFyIHR5
        cGUgPSByZWNvcmQuY29uc3RydWN0b3IsCiAgICAgICAgaWQgPSBnZXQocmVj
        b3JkLCAnaWQnKSwKICAgICAgICByZXNvbHZlciA9IEVtYmVyLlJTVlAuZGVm
        ZXIoKTsKCiAgICByZWNvcmQubG9hZGluZ0RhdGEocmVzb2x2ZXIucHJvbWlz
        ZSk7CgogICAgdmFyIGFkYXB0ZXIgPSB0aGlzLmFkYXB0ZXJGb3IodHlwZSk7
        CgogICAgRW1iZXIuYXNzZXJ0KCJZb3UgdHJpZWQgdG8gZmluZCBhIHJlY29y
        ZCBidXQgeW91IGhhdmUgbm8gYWRhcHRlciAoZm9yICIgKyB0eXBlICsgIiki
        LCBhZGFwdGVyKTsKICAgIEVtYmVyLmFzc2VydCgiWW91IHRyaWVkIHRvIGZp
        bmQgYSByZWNvcmQgYnV0IHlvdXIgYWRhcHRlciAoZm9yICIgKyB0eXBlICsg
        IikgZG9lcyBub3QgaW1wbGVtZW50ICdmaW5kJyIsIGFkYXB0ZXIuZmluZCk7
        CgogICAgX2ZpbmQoYWRhcHRlciwgdGhpcywgdHlwZSwgaWQsIHJlc29sdmVy
        KTsKCiAgICByZXR1cm4gcmVzb2x2ZXIucHJvbWlzZTsKICB9LAoKICAvKioK
        ICAgIEdldCBhIHJlY29yZCBieSBhIGdpdmVuIHR5cGUgYW5kIElEIHdpdGhv
        dXQgdHJpZ2dlcmluZyBhIGZldGNoLgoKICAgIFRoaXMgbWV0aG9kIHdpbGwg
        c3luY2hyb25vdXNseSByZXR1cm4gdGhlIHJlY29yZCBpZiBpdCdzIGF2YWls
        YWJsZS4KICAgIE90aGVyd2lzZSwgaXQgd2lsbCByZXR1cm4gbnVsbC4KCiAg
        ICBgYGBqcwogICAgdmFyIHBvc3QgPSBzdG9yZS5nZXRCeUlkKCdwb3N0Jywg
        MSk7CiAgICBgYGAKCiAgICBAbWV0aG9kIGdldEJ5SWQKICAgIEBwYXJhbSB0
        eXBlCiAgICBAcGFyYW0gaWQKICAqLwogIGdldEJ5SWQ6IGZ1bmN0aW9uKHR5
        cGUsIGlkKSB7CiAgICB0eXBlID0gdGhpcy5tb2RlbEZvcih0eXBlKTsKCiAg
        ICBpZiAodGhpcy5oYXNSZWNvcmRGb3JJZCh0eXBlLCBpZCkpIHsKICAgICAg
        cmV0dXJuIHRoaXMucmVjb3JkRm9ySWQodHlwZSwgaWQpOwogICAgfSBlbHNl
        IHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfSwKCiAgLyoqCiAgICBU
        aGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgdGhlIHJlY29yZCdzIGByZWxvYWRg
        IG1ldGhvZC4gVGhlIHJlY29yZCdzIGByZWxvYWRgCiAgICBwYXNzZXMgaW4g
        YSByZXNvbHZlciBmb3IgdGhlIHByb21pc2UgaXQgcmV0dXJucy4KCiAgICBU
        aGlzIG1ldGhvZCBjYWxscyB0aGUgYWRhcHRlcidzIGBmaW5kYCBtZXRob2Qs
        IHdoaWNoIHJldHVybnMgYSBwcm9taXNlLiBXaGVuCiAgICAqKnRoYXQqKiBw
        cm9taXNlIHJlc29sdmVzLCBgcmVsb2FkUmVjb3JkYCB3aWxsIHJlc29sdmUg
        dGhlIHByb21pc2UgcmV0dXJuZWQKICAgIGJ5IHRoZSByZWNvcmQncyBgcmVs
        b2FkYC4KCiAgICBAbWV0aG9kIHJlbG9hZFJlY29yZAogICAgQHByaXZhdGUK
        ICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHBhcmFtIHtSZXNv
        bHZlcn0gcmVzb2x2ZXIKICAqLwogIHJlbG9hZFJlY29yZDogZnVuY3Rpb24o
        cmVjb3JkLCByZXNvbHZlcikgewogICAgdmFyIHR5cGUgPSByZWNvcmQuY29u
        c3RydWN0b3IsCiAgICAgICAgYWRhcHRlciA9IHRoaXMuYWRhcHRlckZvcih0
        eXBlKSwKICAgICAgICBpZCA9IGdldChyZWNvcmQsICdpZCcpOwoKICAgIEVt
        YmVyLmFzc2VydCgiWW91IGNhbm5vdCByZWxvYWQgYSByZWNvcmQgd2l0aG91
        dCBhbiBJRCIsIGlkKTsKICAgIEVtYmVyLmFzc2VydCgiWW91IHRyaWVkIHRv
        IHJlbG9hZCBhIHJlY29yZCBidXQgeW91IGhhdmUgbm8gYWRhcHRlciAoZm9y
        ICIgKyB0eXBlICsgIikiLCBhZGFwdGVyKTsKICAgIEVtYmVyLmFzc2VydCgi
        WW91IHRyaWVkIHRvIHJlbG9hZCBhIHJlY29yZCBidXQgeW91ciBhZGFwdGVy
        IGRvZXMgbm90IGltcGxlbWVudCBgZmluZGAiLCBhZGFwdGVyLmZpbmQpOwoK
        ICAgIHJldHVybiBfZmluZChhZGFwdGVyLCB0aGlzLCB0eXBlLCBpZCwgcmVz
        b2x2ZXIpOwogIH0sCgogIC8qKgogICAgVGhpcyBtZXRob2QgdGFrZXMgYSBs
        aXN0IG9mIHJlY29yZHMsIGdyb3VwcyB0aGUgcmVjb3JkcyBieSB0eXBlLAog
        ICAgY29udmVydHMgdGhlIHJlY29yZHMgaW50byBJRHMsIGFuZCB0aGVuIGlu
        dm9rZXMgdGhlIGFkYXB0ZXIncyBgZmluZE1hbnlgCiAgICBtZXRob2QuCgog
        ICAgVGhlIHJlY29yZHMgYXJlIGdyb3VwZWQgYnkgdHlwZSB0byBpbnZva2Ug
        YGZpbmRNYW55YCBvbiBhZGFwdGVycwogICAgZm9yIGVhY2ggdW5pcXVlIHR5
        cGUgaW4gcmVjb3Jkcy4KCiAgICBJdCBpcyB1c2VkIGJvdGggYnkgYSBicmFu
        ZCBuZXcgcmVsYXRpb25zaGlwICh2aWEgdGhlIGBmaW5kTWFueWAKICAgIG1l
        dGhvZCkgb3Igd2hlbiB0aGUgZGF0YSB1bmRlcmx5aW5nIGFuIGV4aXN0aW5n
        IHJlbGF0aW9uc2hpcAogICAgY2hhbmdlcy4KCiAgICBAbWV0aG9kIGZldGNo
        TWFueQogICAgQHByaXZhdGUKICAgIEBwYXJhbSByZWNvcmRzCiAgICBAcGFy
        YW0gb3duZXIKICAqLwogIGZldGNoTWFueTogZnVuY3Rpb24ocmVjb3Jkcywg
        b3duZXIsIHJlc29sdmVyKSB7CiAgICBpZiAoIXJlY29yZHMubGVuZ3RoKSB7
        IHJldHVybjsgfQoKICAgIC8vIEdyb3VwIEJ5IFR5cGUKICAgIHZhciByZWNv
        cmRzQnlUeXBlTWFwID0gRW1iZXIuTWFwV2l0aERlZmF1bHQuY3JlYXRlKHsK
        ICAgICAgZGVmYXVsdFZhbHVlOiBmdW5jdGlvbigpIHsgcmV0dXJuIEVtYmVy
        LkEoKTsgfQogICAgfSk7CgogICAgZm9yRWFjaChyZWNvcmRzLCBmdW5jdGlv
        bihyZWNvcmQpIHsKICAgICAgcmVjb3Jkc0J5VHlwZU1hcC5nZXQocmVjb3Jk
        LmNvbnN0cnVjdG9yKS5wdXNoKHJlY29yZCk7CiAgICB9KTsKCiAgICBmb3JF
        YWNoKHJlY29yZHNCeVR5cGVNYXAsIGZ1bmN0aW9uKHR5cGUsIHJlY29yZHMp
        IHsKICAgICAgdmFyIGlkcyA9IHJlY29yZHMubWFwUHJvcGVydHkoJ2lkJyks
        CiAgICAgICAgICBhZGFwdGVyID0gdGhpcy5hZGFwdGVyRm9yKHR5cGUpOwoK
        ICAgICAgRW1iZXIuYXNzZXJ0KCJZb3UgdHJpZWQgdG8gbG9hZCBtYW55IHJl
        Y29yZHMgYnV0IHlvdSBoYXZlIG5vIGFkYXB0ZXIgKGZvciAiICsgdHlwZSAr
        ICIpIiwgYWRhcHRlcik7CiAgICAgIEVtYmVyLmFzc2VydCgiWW91IHRyaWVk
        IHRvIGxvYWQgbWFueSByZWNvcmRzIGJ1dCB5b3VyIGFkYXB0ZXIgZG9lcyBu
        b3QgaW1wbGVtZW50IGBmaW5kTWFueWAiLCBhZGFwdGVyLmZpbmRNYW55KTsK
        CiAgICAgIF9maW5kTWFueShhZGFwdGVyLCB0aGlzLCB0eXBlLCBpZHMsIG93
        bmVyLCByZXNvbHZlcik7CiAgICB9LCB0aGlzKTsKICB9LAoKICAvKioKICAg
        IFJldHVybnMgdHJ1ZSBpZiBhIHJlY29yZCBmb3IgYSBnaXZlbiB0eXBlIGFu
        ZCBJRCBpcyBhbHJlYWR5IGxvYWRlZC4KCiAgICBAbWV0aG9kIGhhc1JlY29y
        ZEZvcklkCiAgICBAcGFyYW0ge1N0cmluZ30gdHlwZQogICAgQHBhcmFtIHtT
        dHJpbmd8SW50ZWdlcn0gaWQKICAgIEByZXR1cm5zIEJvb2xlYW4KICAqLwog
        IGhhc1JlY29yZEZvcklkOiBmdW5jdGlvbih0eXBlLCBpZCkgewogICAgaWQg
        PSBjb2VyY2VJZChpZCk7CgogICAgcmV0dXJuICEhdGhpcy50eXBlTWFwRm9y
        KHR5cGUpLmlkVG9SZWNvcmRbaWRdOwogIH0sCgogIC8qKgogICAgUmV0dXJu
        cyBpZCByZWNvcmQgZm9yIGEgZ2l2ZW4gdHlwZSBhbmQgSUQuIElmIG9uZSBp
        c24ndCBhbHJlYWR5IGxvYWRlZCwKICAgIGl0IGJ1aWxkcyBhIG5ldyByZWNv
        cmQgYW5kIGxlYXZlcyBpdCBpbiB0aGUgYGVtcHR5YCBzdGF0ZS4KCiAgICBA
        bWV0aG9kIHJlY29yZEZvcklkCiAgICBAcGFyYW0ge1N0cmluZ30gdHlwZQog
        ICAgQHBhcmFtIHtTdHJpbmd8SW50ZWdlcn0gaWQKICAgIEByZXR1cm5zIERT
        Lk1vZGVsCiAgKi8KICByZWNvcmRGb3JJZDogZnVuY3Rpb24odHlwZSwgaWQp
        IHsKICAgIHR5cGUgPSB0aGlzLm1vZGVsRm9yKHR5cGUpOwoKICAgIGlkID0g
        Y29lcmNlSWQoaWQpOwoKICAgIHZhciByZWNvcmQgPSB0aGlzLnR5cGVNYXBG
        b3IodHlwZSkuaWRUb1JlY29yZFtpZF07CgogICAgaWYgKCFyZWNvcmQpIHsK
        ICAgICAgcmVjb3JkID0gdGhpcy5idWlsZFJlY29yZCh0eXBlLCBpZCk7CiAg
        ICB9CgogICAgcmV0dXJuIHJlY29yZDsKICB9LAoKICAvKioKICAgIEBtZXRo
        b2QgZmluZE1hbnkKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge0RTLk1vZGVs
        fSBvd25lcgogICAgQHBhcmFtIHtBcnJheTxEUy5Nb2RlbD59IHJlY29yZHMK
        ICAgIEBwYXJhbSB7U3RyaW5nfSB0eXBlCiAgICBAcGFyYW0ge1Jlc29sdmVy
        fSByZXNvbHZlcgogICAgQHJldHVybiBEUy5NYW55QXJyYXkKICAqLwogIGZp
        bmRNYW55OiBmdW5jdGlvbihvd25lciwgcmVjb3JkcywgdHlwZSwgcmVzb2x2
        ZXIpIHsKICAgIHR5cGUgPSB0aGlzLm1vZGVsRm9yKHR5cGUpOwoKICAgIHJl
        Y29yZHMgPSBFbWJlci5BKHJlY29yZHMpOwoKICAgIHZhciB1bmxvYWRlZFJl
        Y29yZHMgPSByZWNvcmRzLmZpbHRlclByb3BlcnR5KCdpc0VtcHR5JywgdHJ1
        ZSksCiAgICAgICAgbWFueUFycmF5ID0gdGhpcy5yZWNvcmRBcnJheU1hbmFn
        ZXIuY3JlYXRlTWFueUFycmF5KHR5cGUsIHJlY29yZHMpOwoKICAgIGZvckVh
        Y2godW5sb2FkZWRSZWNvcmRzLCBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAg
        cmVjb3JkLmxvYWRpbmdEYXRhKCk7CiAgICB9KTsKCiAgICBtYW55QXJyYXku
        bG9hZGluZ1JlY29yZHNDb3VudCA9IHVubG9hZGVkUmVjb3Jkcy5sZW5ndGg7
        CgogICAgaWYgKHVubG9hZGVkUmVjb3Jkcy5sZW5ndGgpIHsKICAgICAgZm9y
        RWFjaCh1bmxvYWRlZFJlY29yZHMsIGZ1bmN0aW9uKHJlY29yZCkgewogICAg
        ICAgIHRoaXMucmVjb3JkQXJyYXlNYW5hZ2VyLnJlZ2lzdGVyV2FpdGluZ1Jl
        Y29yZEFycmF5KHJlY29yZCwgbWFueUFycmF5KTsKICAgICAgfSwgdGhpcyk7
        CgogICAgICB0aGlzLmZldGNoTWFueSh1bmxvYWRlZFJlY29yZHMsIG93bmVy
        LCByZXNvbHZlcik7CiAgICB9IGVsc2UgewogICAgICBpZiAocmVzb2x2ZXIp
        IHsgcmVzb2x2ZXIucmVzb2x2ZSgpOyB9CiAgICAgIG1hbnlBcnJheS5zZXQo
        J2lzTG9hZGVkJywgdHJ1ZSk7CiAgICAgIEVtYmVyLnJ1bi5vbmNlKG1hbnlB
        cnJheSwgJ3RyaWdnZXInLCAnZGlkTG9hZCcpOwogICAgfQoKICAgIHJldHVy
        biBtYW55QXJyYXk7CiAgfSwKCiAgLyoqCiAgICBJZiBhIHJlbGF0aW9uc2hp
        cCB3YXMgb3JpZ2luYWxseSBwb3B1bGF0ZWQgYnkgdGhlIGFkYXB0ZXIgYXMg
        YSBsaW5rCiAgICAoYXMgb3Bwb3NlZCB0byBhIGxpc3Qgb2YgSURzKSwgdGhp
        cyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlCiAgICByZWxhdGlvbnNoaXAg
        aXMgZmV0Y2hlZC4KCiAgICBUaGUgbGluayAod2hpY2ggaXMgdXN1YWxseSBh
        IFVSTCkgaXMgcGFzc2VkIHRocm91Z2ggdW5jaGFuZ2VkLCBzbyB0aGUKICAg
        IGFkYXB0ZXIgY2FuIG1ha2Ugd2hhdGV2ZXIgcmVxdWVzdCBpdCB3YW50cy4K
        CiAgICBUaGUgdXN1YWwgdXNlLWNhc2UgaXMgZm9yIHRoZSBzZXJ2ZXIgdG8g
        cmVnaXN0ZXIgYSBVUkwgYXMgYSBsaW5rLCBhbmQKICAgIHRoZW4gdXNlIHRo
        YXQgVVJMIGluIHRoZSBmdXR1cmUgdG8gbWFrZSBhIHJlcXVlc3QgZm9yIHRo
        ZSByZWxhdGlvbnNoaXAuCgogICAgQG1ldGhvZCBmaW5kSGFzTWFueQogICAg
        QHByaXZhdGUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IG93bmVyCiAgICBAcGFy
        YW0ge2FueX0gbGluawogICAgQHBhcmFtIHtTdHJpbmd9IHR5cGUKICAgIEBw
        YXJhbSB7UmVzb2x2ZXJ9IHJlc29sdmVyCiAgICBAcmV0dXJuIERTLk1hbnlB
        cnJheQogICovCiAgZmluZEhhc01hbnk6IGZ1bmN0aW9uKG93bmVyLCBsaW5r
        LCByZWxhdGlvbnNoaXAsIHJlc29sdmVyKSB7CiAgICB2YXIgYWRhcHRlciA9
        IHRoaXMuYWRhcHRlckZvcihvd25lci5jb25zdHJ1Y3Rvcik7CgogICAgRW1i
        ZXIuYXNzZXJ0KCJZb3UgdHJpZWQgdG8gbG9hZCBhIGhhc01hbnkgcmVsYXRp
        b25zaGlwIGJ1dCB5b3UgaGF2ZSBubyBhZGFwdGVyIChmb3IgIiArIG93bmVy
        LmNvbnN0cnVjdG9yICsgIikiLCBhZGFwdGVyKTsKICAgIEVtYmVyLmFzc2Vy
        dCgiWW91IHRyaWVkIHRvIGxvYWQgYSBoYXNNYW55IHJlbGF0aW9uc2hpcCBm
        cm9tIGEgc3BlY2lmaWVkIGBsaW5rYCBpbiB0aGUgb3JpZ2luYWwgcGF5bG9h
        ZCBidXQgeW91ciBhZGFwdGVyIGRvZXMgbm90IGltcGxlbWVudCBgZmluZEhh
        c01hbnlgIiwgYWRhcHRlci5maW5kSGFzTWFueSk7CgogICAgdmFyIHJlY29y
        ZHMgPSB0aGlzLnJlY29yZEFycmF5TWFuYWdlci5jcmVhdGVNYW55QXJyYXko
        cmVsYXRpb25zaGlwLnR5cGUsIEVtYmVyLkEoW10pKTsKICAgIF9maW5kSGFz
        TWFueShhZGFwdGVyLCB0aGlzLCBvd25lciwgbGluaywgcmVsYXRpb25zaGlw
        LCByZXNvbHZlcik7CiAgICByZXR1cm4gcmVjb3JkczsKICB9LAoKICBmaW5k
        QmVsb25nc1RvOiBmdW5jdGlvbihvd25lciwgbGluaywgcmVsYXRpb25zaGlw
        LCByZXNvbHZlcikgewogICAgdmFyIGFkYXB0ZXIgPSB0aGlzLmFkYXB0ZXJG
        b3Iob3duZXIuY29uc3RydWN0b3IpOwoKICAgIEVtYmVyLmFzc2VydCgiWW91
        IHRyaWVkIHRvIGxvYWQgYSBiZWxvbmdzVG8gcmVsYXRpb25zaGlwIGJ1dCB5
        b3UgaGF2ZSBubyBhZGFwdGVyIChmb3IgIiArIG93bmVyLmNvbnN0cnVjdG9y
        ICsgIikiLCBhZGFwdGVyKTsKICAgIEVtYmVyLmFzc2VydCgiWW91IHRyaWVk
        IHRvIGxvYWQgYSBiZWxvbmdzVG8gcmVsYXRpb25zaGlwIGZyb20gYSBzcGVj
        aWZpZWQgYGxpbmtgIGluIHRoZSBvcmlnaW5hbCBwYXlsb2FkIGJ1dCB5b3Vy
        IGFkYXB0ZXIgZG9lcyBub3QgaW1wbGVtZW50IGBmaW5kQmVsb25nc1RvYCIs
        IGFkYXB0ZXIuZmluZEJlbG9uZ3NUbyk7CgogICAgX2ZpbmRCZWxvbmdzVG8o
        YWRhcHRlciwgdGhpcywgb3duZXIsIGxpbmssIHJlbGF0aW9uc2hpcCwgcmVz
        b2x2ZXIpOwogIH0sCgogIC8qKgogICAgVGhpcyBtZXRob2QgZGVsZWdhdGVz
        IGEgcXVlcnkgdG8gdGhlIGFkYXB0ZXIuIFRoaXMgaXMgdGhlIG9uZSBwbGFj
        ZSB3aGVyZQogICAgYWRhcHRlci1sZXZlbCBzZW1hbnRpY3MgYXJlIGV4cG9z
        ZWQgdG8gdGhlIGFwcGxpY2F0aW9uLgoKICAgIEV4cG9zaW5nIHF1ZXJpZXMg
        dGhpcyB3YXkgc2VlbXMgcHJlZmVyYWJsZSB0byBjcmVhdGluZyBhbiBhYnN0
        cmFjdCBxdWVyeQogICAgbGFuZ3VhZ2UgZm9yIGFsbCBzZXJ2ZXItc2lkZSBx
        dWVyaWVzLCBhbmQgdGhlbiByZXF1aXJlIGFsbCBhZGFwdGVycyB0bwogICAg
        aW1wbGVtZW50IHRoZW0uCgogICAgVGhpcyBtZXRob2QgcmV0dXJucyBhIHBy
        b21pc2UsIHdoaWNoIGlzIHJlc29sdmVkIHdpdGggYSBgUmVjb3JkQXJyYXlg
        CiAgICBvbmNlIHRoZSBzZXJ2ZXIgcmV0dXJucy4KCiAgICBAbWV0aG9kIGZp
        bmRRdWVyeQogICAgQHByaXZhdGUKICAgIEBwYXJhbSB7U3RyaW5nfSB0eXBl
        CiAgICBAcGFyYW0ge2FueX0gcXVlcnkgYW4gb3BhcXVlIHF1ZXJ5IHRvIGJl
        IHVzZWQgYnkgdGhlIGFkYXB0ZXIKICAgIEByZXR1cm4gUHJvbWlzZQogICov
        CiAgZmluZFF1ZXJ5OiBmdW5jdGlvbih0eXBlLCBxdWVyeSkgewogICAgdHlw
        ZSA9IHRoaXMubW9kZWxGb3IodHlwZSk7CgogICAgdmFyIGFycmF5ID0gRFMu
        QWRhcHRlclBvcHVsYXRlZFJlY29yZEFycmF5LmNyZWF0ZSh7CiAgICAgIHR5
        cGU6IHR5cGUsCiAgICAgIHF1ZXJ5OiBxdWVyeSwKICAgICAgY29udGVudDog
        RW1iZXIuQSgpLAogICAgICBzdG9yZTogdGhpcwogICAgfSk7CgogICAgdmFy
        IGFkYXB0ZXIgPSB0aGlzLmFkYXB0ZXJGb3IodHlwZSksCiAgICAgICAgcmVz
        b2x2ZXIgPSBFbWJlci5SU1ZQLmRlZmVyKCk7CgogICAgRW1iZXIuYXNzZXJ0
        KCJZb3UgdHJpZWQgdG8gbG9hZCBhIHF1ZXJ5IGJ1dCB5b3UgaGF2ZSBubyBh
        ZGFwdGVyIChmb3IgIiArIHR5cGUgKyAiKSIsIGFkYXB0ZXIpOwogICAgRW1i
        ZXIuYXNzZXJ0KCJZb3UgdHJpZWQgdG8gbG9hZCBhIHF1ZXJ5IGJ1dCB5b3Vy
        IGFkYXB0ZXIgZG9lcyBub3QgaW1wbGVtZW50IGBmaW5kUXVlcnlgIiwgYWRh
        cHRlci5maW5kUXVlcnkpOwoKICAgIF9maW5kUXVlcnkoYWRhcHRlciwgdGhp
        cywgdHlwZSwgcXVlcnksIGFycmF5LCByZXNvbHZlcik7CgogICAgcmV0dXJu
        IHByb21pc2VBcnJheShyZXNvbHZlci5wcm9taXNlKTsKICB9LAoKICAvKioK
        ICAgIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gYXJyYXkgb2YgYWxsIHJlY29y
        ZHMgYWRhcHRlciBjYW4gZmluZC4KICAgIEl0IHRyaWdnZXJzIHRoZSBhZGFw
        dGVyJ3MgYGZpbmRBbGxgIG1ldGhvZCB0byBnaXZlIGl0IGFuIG9wcG9ydHVu
        aXR5IHRvIHBvcHVsYXRlCiAgICB0aGUgYXJyYXkgd2l0aCByZWNvcmRzIG9m
        IHRoYXQgdHlwZS4KCiAgICBAbWV0aG9kIGZpbmRBbGwKICAgIEBwcml2YXRl
        CiAgICBAcGFyYW0ge0NsYXNzfSB0eXBlCiAgICBAcmV0dXJuIHtEUy5BZGFw
        dGVyUG9wdWxhdGVkUmVjb3JkQXJyYXl9CiAgKi8KICBmaW5kQWxsOiBmdW5j
        dGlvbih0eXBlKSB7CiAgICB0eXBlID0gdGhpcy5tb2RlbEZvcih0eXBlKTsK
        CiAgICByZXR1cm4gdGhpcy5mZXRjaEFsbCh0eXBlLCB0aGlzLmFsbCh0eXBl
        KSk7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIGZldGNoQWxsCiAgICBAcHJp
        dmF0ZQogICAgQHBhcmFtIHR5cGUKICAgIEBwYXJhbSBhcnJheQogICAgQHJl
        dHVybnMgUHJvbWlzZQogICovCiAgZmV0Y2hBbGw6IGZ1bmN0aW9uKHR5cGUs
        IGFycmF5KSB7CiAgICB2YXIgYWRhcHRlciA9IHRoaXMuYWRhcHRlckZvcih0
        eXBlKSwKICAgICAgICBzaW5jZVRva2VuID0gdGhpcy50eXBlTWFwRm9yKHR5
        cGUpLm1ldGFkYXRhLnNpbmNlLAogICAgICAgIHJlc29sdmVyID0gRW1iZXIu
        UlNWUC5kZWZlcigpOwoKICAgIHNldChhcnJheSwgJ2lzVXBkYXRpbmcnLCB0
        cnVlKTsKCiAgICBFbWJlci5hc3NlcnQoIllvdSB0cmllZCB0byBsb2FkIGFs
        bCByZWNvcmRzIGJ1dCB5b3UgaGF2ZSBubyBhZGFwdGVyIChmb3IgIiArIHR5
        cGUgKyAiKSIsIGFkYXB0ZXIpOwogICAgRW1iZXIuYXNzZXJ0KCJZb3UgdHJp
        ZWQgdG8gbG9hZCBhbGwgcmVjb3JkcyBidXQgeW91ciBhZGFwdGVyIGRvZXMg
        bm90IGltcGxlbWVudCBgZmluZEFsbGAiLCBhZGFwdGVyLmZpbmRBbGwpOwoK
        ICAgIF9maW5kQWxsKGFkYXB0ZXIsIHRoaXMsIHR5cGUsIHNpbmNlVG9rZW4s
        IHJlc29sdmVyKTsKCiAgICByZXR1cm4gcHJvbWlzZUFycmF5KHJlc29sdmVy
        LnByb21pc2UpOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCBkaWRVcGRhdGVB
        bGwKICAgIEBwYXJhbSB0eXBlCiAgKi8KICBkaWRVcGRhdGVBbGw6IGZ1bmN0
        aW9uKHR5cGUpIHsKICAgIHZhciBmaW5kQWxsQ2FjaGUgPSB0aGlzLnR5cGVN
        YXBGb3IodHlwZSkuZmluZEFsbENhY2hlOwogICAgc2V0KGZpbmRBbGxDYWNo
        ZSwgJ2lzVXBkYXRpbmcnLCBmYWxzZSk7CiAgfSwKCiAgLyoqCiAgICBUaGlz
        IG1ldGhvZCByZXR1cm5zIGEgZmlsdGVyZWQgYXJyYXkgdGhhdCBjb250YWlu
        cyBhbGwgb2YgdGhlIGtub3duIHJlY29yZHMKICAgIGZvciBhIGdpdmVuIHR5
        cGUuCgogICAgTm90ZSB0aGF0IGJlY2F1c2UgaXQncyBqdXN0IGEgZmlsdGVy
        LCBpdCB3aWxsIGhhdmUgYW55IGxvY2FsbHkKICAgIGNyZWF0ZWQgcmVjb3Jk
        cyBvZiB0aGUgdHlwZS4KCiAgICBBbHNvIG5vdGUgdGhhdCBtdWx0aXBsZSBj
        YWxscyB0byBgYWxsYCBmb3IgYSBnaXZlbiB0eXBlIHdpbGwgYWx3YXlzCiAg
        ICByZXR1cm4gdGhlIHNhbWUgUmVjb3JkQXJyYXkuCgogICAgQG1ldGhvZCBh
        bGwKICAgIEBwYXJhbSB7Q2xhc3N9IHR5cGUKICAgIEByZXR1cm4ge0RTLlJl
        Y29yZEFycmF5fQogICovCiAgYWxsOiBmdW5jdGlvbih0eXBlKSB7CiAgICB0
        eXBlID0gdGhpcy5tb2RlbEZvcih0eXBlKTsKCiAgICB2YXIgdHlwZU1hcCA9
        IHRoaXMudHlwZU1hcEZvcih0eXBlKSwKICAgICAgICBmaW5kQWxsQ2FjaGUg
        PSB0eXBlTWFwLmZpbmRBbGxDYWNoZTsKCiAgICBpZiAoZmluZEFsbENhY2hl
        KSB7IHJldHVybiBmaW5kQWxsQ2FjaGU7IH0KCiAgICB2YXIgYXJyYXkgPSBE
        Uy5SZWNvcmRBcnJheS5jcmVhdGUoewogICAgICB0eXBlOiB0eXBlLAogICAg
        ICBjb250ZW50OiBFbWJlci5BKCksCiAgICAgIHN0b3JlOiB0aGlzLAogICAg
        ICBpc0xvYWRlZDogdHJ1ZQogICAgfSk7CgogICAgdGhpcy5yZWNvcmRBcnJh
        eU1hbmFnZXIucmVnaXN0ZXJGaWx0ZXJlZFJlY29yZEFycmF5KGFycmF5LCB0
        eXBlKTsKCiAgICB0eXBlTWFwLmZpbmRBbGxDYWNoZSA9IGFycmF5OwogICAg
        cmV0dXJuIGFycmF5OwogIH0sCgoKICAvKioKICAgIFRoaXMgbWV0aG9kIHVu
        bG9hZHMgYWxsIG9mIHRoZSBrbm93biByZWNvcmRzIGZvciBhIGdpdmVuIHR5
        cGUuCgogICAgQG1ldGhvZCB1bmxvYWRBbGwKICAgIEBwYXJhbSB7Q2xhc3N9
        IHR5cGUKICAqLwogIHVubG9hZEFsbDogZnVuY3Rpb24odHlwZSkgewogICAg
        dHlwZSA9IHRoaXMubW9kZWxGb3IodHlwZSk7CgogICAgdmFyIHR5cGVNYXAg
        PSB0aGlzLnR5cGVNYXBGb3IodHlwZSksCiAgICAgICAgcmVjb3JkcyA9IHR5
        cGVNYXAucmVjb3JkcywgcmVjb3JkOwoKICAgIHdoaWxlKHJlY29yZCA9IHJl
        Y29yZHMucG9wKCkpIHsKICAgICAgcmVjb3JkLnVubG9hZFJlY29yZCgpOwog
        ICAgfQogIH0sCgogIC8qKgogICAgVGFrZXMgYSB0eXBlIGFuZCBmaWx0ZXIg
        ZnVuY3Rpb24sIGFuZCByZXR1cm5zIGEgbGl2ZSBSZWNvcmRBcnJheSB0aGF0
        CiAgICByZW1haW5zIHVwIHRvIGRhdGUgYXMgbmV3IHJlY29yZHMgYXJlIGxv
        YWRlZCBpbnRvIHRoZSBzdG9yZSBvciBjcmVhdGVkCiAgICBsb2NhbGx5LgoK
        ICAgIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0YWtlcyBhIG1hdGVyaWFsaXpl
        ZCByZWNvcmQsIGFuZCByZXR1cm5zIHRydWUKICAgIGlmIHRoZSByZWNvcmQg
        c2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZSBmaWx0ZXIgYW5kIGZhbHNlIGlm
        IGl0IHNob3VsZAogICAgbm90LgoKICAgIFRoZSBmaWx0ZXIgZnVuY3Rpb24g
        aXMgY2FsbGVkIG9uY2Ugb24gYWxsIHJlY29yZHMgZm9yIHRoZSB0eXBlIHdo
        ZW4KICAgIGl0IGlzIGNyZWF0ZWQsIGFuZCB0aGVuIG9uY2Ugb24gZWFjaCBu
        ZXdseSBsb2FkZWQgb3IgY3JlYXRlZCByZWNvcmQuCgogICAgSWYgYW55IG9m
        IGEgcmVjb3JkJ3MgcHJvcGVydGllcyBjaGFuZ2UsIG9yIGlmIGl0IGNoYW5n
        ZXMgc3RhdGUsIHRoZQogICAgZmlsdGVyIGZ1bmN0aW9uIHdpbGwgYmUgaW52
        b2tlZCBhZ2FpbiB0byBkZXRlcm1pbmUgd2hldGhlciBpdCBzaG91bGQKICAg
        IHN0aWxsIGJlIGluIHRoZSBhcnJheS4KCiAgICBAbWV0aG9kIGZpbHRlcgog
        ICAgQHBhcmFtIHtDbGFzc30gdHlwZQogICAgQHBhcmFtIHtGdW5jdGlvbn0g
        ZmlsdGVyCiAgICBAcmV0dXJuIHtEUy5GaWx0ZXJlZFJlY29yZEFycmF5fQog
        ICovCiAgZmlsdGVyOiBmdW5jdGlvbih0eXBlLCBxdWVyeSwgZmlsdGVyKSB7
        CiAgICB2YXIgcHJvbWlzZTsKCiAgICAvLyBhbGxvdyBhbiBvcHRpb25hbCBz
        ZXJ2ZXIgcXVlcnkKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7
        CiAgICAgIHByb21pc2UgPSB0aGlzLmZpbmRRdWVyeSh0eXBlLCBxdWVyeSk7
        CiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHsKICAg
        ICAgZmlsdGVyID0gcXVlcnk7CiAgICB9CgogICAgdHlwZSA9IHRoaXMubW9k
        ZWxGb3IodHlwZSk7CgogICAgdmFyIGFycmF5ID0gRFMuRmlsdGVyZWRSZWNv
        cmRBcnJheS5jcmVhdGUoewogICAgICB0eXBlOiB0eXBlLAogICAgICBjb250
        ZW50OiBFbWJlci5BKCksCiAgICAgIHN0b3JlOiB0aGlzLAogICAgICBtYW5h
        Z2VyOiB0aGlzLnJlY29yZEFycmF5TWFuYWdlciwKICAgICAgZmlsdGVyRnVu
        Y3Rpb246IGZpbHRlcgogICAgfSk7CgogICAgdGhpcy5yZWNvcmRBcnJheU1h
        bmFnZXIucmVnaXN0ZXJGaWx0ZXJlZFJlY29yZEFycmF5KGFycmF5LCB0eXBl
        LCBmaWx0ZXIpOwoKICAgIGlmIChwcm9taXNlKSB7CiAgICAgIHJldHVybiBw
        cm9taXNlLnRoZW4oZnVuY3Rpb24oKSB7IHJldHVybiBhcnJheTsgfSk7CiAg
        ICB9IGVsc2UgewogICAgICByZXR1cm4gYXJyYXk7CiAgICB9CiAgfSwKCiAg
        LyoqCiAgICBUaGlzIG1ldGhvZCByZXR1cm5zIGlmIGEgY2VydGFpbiByZWNv
        cmQgaXMgYWxyZWFkeSBsb2FkZWQKICAgIGluIHRoZSBzdG9yZS4gVXNlIHRo
        aXMgZnVuY3Rpb24gdG8ga25vdyBiZWZvcmVoYW5kIGlmIGEgZmluZCgpCiAg
        ICB3aWxsIHJlc3VsdCBpbiBhIHJlcXVlc3Qgb3IgdGhhdCBpdCB3aWxsIGJl
        IGEgY2FjaGUgaGl0LgoKICAgIEBtZXRob2QgcmVjb3JkSXNMb2FkZWQKICAg
        IEBwYXJhbSB7Q2xhc3N9IHR5cGUKICAgIEBwYXJhbSB7c3RyaW5nfSBpZAog
        ICAgQHJldHVybiB7Ym9vbGVhbn0KICAqLwogIHJlY29yZElzTG9hZGVkOiBm
        dW5jdGlvbih0eXBlLCBpZCkgewogICAgaWYgKCF0aGlzLmhhc1JlY29yZEZv
        cklkKHR5cGUsIGlkKSkgeyByZXR1cm4gZmFsc2U7IH0KICAgIHJldHVybiAh
        Z2V0KHRoaXMucmVjb3JkRm9ySWQodHlwZSwgaWQpLCAnaXNFbXB0eScpOwog
        IH0sCgogIC8qKgogICAgVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgbWV0YWRh
        dGEgZm9yIGEgc3BlY2lmaWMgdHlwZS4KCiAgICBAbWV0aG9kIG1ldGFkYXRh
        Rm9yCiAgICBAcGFyYW0ge3N0cmluZ30gdHlwZQogICAgQHJldHVybiB7b2Jq
        ZWN0fQogICovCiAgbWV0YWRhdGFGb3I6IGZ1bmN0aW9uKHR5cGUpIHsKICAg
        IHR5cGUgPSB0aGlzLm1vZGVsRm9yKHR5cGUpOwogICAgcmV0dXJuIHRoaXMu
        dHlwZU1hcEZvcih0eXBlKS5tZXRhZGF0YTsKICB9LAoKICAvLyAuLi4uLi4u
        Li4uLi4KICAvLyAuIFVQREFUSU5HIC4KICAvLyAuLi4uLi4uLi4uLi4KCiAg
        LyoqCiAgICBJZiB0aGUgYWRhcHRlciB1cGRhdGVzIGF0dHJpYnV0ZXMgb3Ig
        YWNrbm93bGVkZ2VzIGNyZWF0aW9uCiAgICBvciBkZWxldGlvbiwgdGhlIHJl
        Y29yZCB3aWxsIG5vdGlmeSB0aGUgc3RvcmUgdG8gdXBkYXRlIGl0cwogICAg
        bWVtYmVyc2hpcCBpbiBhbnkgZmlsdGVycy4KCiAgICBUbyBhdm9pZCB0aHJh
        c2hpbmcsIHRoaXMgbWV0aG9kIGlzIGludm9rZWQgb25seSBvbmNlIHBlcgog
        ICAgcnVuIGxvb3AgcGVyIHJlY29yZC4KCiAgICBAbWV0aG9kIGRhdGFXYXNV
        cGRhdGVkCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtDbGFzc30gdHlwZQog
        ICAgQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSBjbGllbnRJZAogICAgQHBhcmFt
        IHtEUy5Nb2RlbH0gcmVjb3JkCiAgKi8KICBkYXRhV2FzVXBkYXRlZDogZnVu
        Y3Rpb24odHlwZSwgcmVjb3JkKSB7CiAgICAvLyBCZWNhdXNlIGRhdGEgdXBk
        YXRlcyBhcmUgaW52b2tlZCBhdCB0aGUgZW5kIG9mIHRoZSBydW4gbG9vcCwK
        ICAgIC8vIGl0IGlzIHBvc3NpYmxlIHRoYXQgYSByZWNvcmQgbWlnaHQgYmUg
        ZGVsZXRlZCBhZnRlciBpdHMgZGF0YQogICAgLy8gaGFzIGJlZW4gbW9kaWZp
        ZWQgYW5kIHRoaXMgbWV0aG9kIHdhcyBzY2hlZHVsZWQgdG8gYmUgY2FsbGVk
        LgogICAgLy8KICAgIC8vIElmIHRoYXQncyB0aGUgY2FzZSwgdGhlIHJlY29y
        ZCB3b3VsZCBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkCiAgICAvLyBmcm9t
        IGFsbCByZWNvcmQgYXJyYXlzOyBjYWxsaW5nIHVwZGF0ZVJlY29yZEFycmF5
        cyB3b3VsZCBqdXN0CiAgICAvLyBhZGQgaXQgYmFjay4gSWYgdGhlIHJlY29y
        ZCBpcyBkZWxldGVkLCBqdXN0IGJhaWwuIEl0IHNob3VsZG4ndAogICAgLy8g
        Z2l2ZSB1cyBhbnkgbW9yZSB0cm91YmxlIGFmdGVyIHRoaXMuCgogICAgaWYg
        KGdldChyZWNvcmQsICdpc0RlbGV0ZWQnKSkgeyByZXR1cm47IH0KCiAgICBp
        ZiAoZ2V0KHJlY29yZCwgJ2lzTG9hZGVkJykpIHsKICAgICAgdGhpcy5yZWNv
        cmRBcnJheU1hbmFnZXIucmVjb3JkRGlkQ2hhbmdlKHJlY29yZCk7CiAgICB9
        CiAgfSwKCiAgLy8gLi4uLi4uLi4uLi4uLi4KICAvLyAuIFBFUlNJU1RJTkcg
        LgogIC8vIC4uLi4uLi4uLi4uLi4uCgogIC8qKgogICAgVGhpcyBtZXRob2Qg
        aXMgY2FsbGVkIGJ5IGByZWNvcmQuc2F2ZWAsIGFuZCBnZXRzIHBhc3NlZCBh
        CiAgICByZXNvbHZlciBmb3IgdGhlIHByb21pc2UgdGhhdCBgcmVjb3JkLnNh
        dmVgIHJldHVybnMuCgogICAgSXQgc2NoZWR1bGVzIHNhdmluZyB0byBoYXBw
        ZW4gYXQgdGhlIGVuZCBvZiB0aGUgcnVuIGxvb3AuCgogICAgQG1ldGhvZCBz
        Y2hlZHVsZVNhdmUKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge0RTLk1vZGVs
        fSByZWNvcmQKICAgIEBwYXJhbSB7UmVzb2x2ZXJ9IHJlc29sdmVyCiAgKi8K
        ICBzY2hlZHVsZVNhdmU6IGZ1bmN0aW9uKHJlY29yZCwgcmVzb2x2ZXIpIHsK
        ICAgIHJlY29yZC5hZGFwdGVyV2lsbENvbW1pdCgpOwogICAgdGhpcy5fcGVu
        ZGluZ1NhdmUucHVzaChbcmVjb3JkLCByZXNvbHZlcl0pOwogICAgb25jZSh0
        aGlzLCAnZmx1c2hQZW5kaW5nU2F2ZScpOwogIH0sCgogIC8qKgogICAgVGhp
        cyBtZXRob2QgaXMgY2FsbGVkIGF0IHRoZSBlbmQgb2YgdGhlIHJ1biBsb29w
        LCBhbmQKICAgIGZsdXNoZXMgYW55IHJlY29yZHMgcGFzc2VkIGludG8gYHNj
        aGVkdWxlU2F2ZWAKCiAgICBAbWV0aG9kIGZsdXNoUGVuZGluZ1NhdmUKICAg
        IEBwcml2YXRlCiAgKi8KICBmbHVzaFBlbmRpbmdTYXZlOiBmdW5jdGlvbigp
        IHsKICAgIHZhciBwZW5kaW5nID0gdGhpcy5fcGVuZGluZ1NhdmUuc2xpY2Uo
        KTsKICAgIHRoaXMuX3BlbmRpbmdTYXZlID0gW107CgogICAgZm9yRWFjaChw
        ZW5kaW5nLCBmdW5jdGlvbih0dXBsZSkgewogICAgICB2YXIgcmVjb3JkID0g
        dHVwbGVbMF0sIHJlc29sdmVyID0gdHVwbGVbMV0sCiAgICAgICAgICBhZGFw
        dGVyID0gdGhpcy5hZGFwdGVyRm9yKHJlY29yZC5jb25zdHJ1Y3RvciksCiAg
        ICAgICAgICBvcGVyYXRpb247CgogICAgICBpZiAoZ2V0KHJlY29yZCwgJ2lz
        TmV3JykpIHsKICAgICAgICBvcGVyYXRpb24gPSAnY3JlYXRlUmVjb3JkJzsK
        ICAgICAgfSBlbHNlIGlmIChnZXQocmVjb3JkLCAnaXNEZWxldGVkJykpIHsK
        ICAgICAgICBvcGVyYXRpb24gPSAnZGVsZXRlUmVjb3JkJzsKICAgICAgfSBl
        bHNlIHsKICAgICAgICBvcGVyYXRpb24gPSAndXBkYXRlUmVjb3JkJzsKICAg
        ICAgfQoKICAgICAgX2NvbW1pdChhZGFwdGVyLCB0aGlzLCBvcGVyYXRpb24s
        IHJlY29yZCwgcmVzb2x2ZXIpOwogICAgfSwgdGhpcyk7CiAgfSwKCiAgLyoq
        CiAgICBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgb25jZSB0aGUgcHJvbWlzZSBy
        ZXR1cm5lZCBieSBhbgogICAgYWRhcHRlcidzIGBjcmVhdGVSZWNvcmRgLCBg
        dXBkYXRlUmVjb3JkYCBvciBgZGVsZXRlUmVjb3JkYAogICAgaXMgcmVzb2x2
        ZWQuCgogICAgSWYgdGhlIGRhdGEgcHJvdmlkZXMgYSBzZXJ2ZXItZ2VuZXJh
        dGVkIElELCBpdCB3aWxsCiAgICB1cGRhdGUgdGhlIHJlY29yZCBhbmQgdGhl
        IHN0b3JlJ3MgaW5kZXhlcy4KCiAgICBAbWV0aG9kIGRpZFNhdmVSZWNvcmQK
        ICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge0RTLk1vZGVsfSByZWNvcmQgdGhl
        IGluLWZsaWdodCByZWNvcmQKICAgIEBwYXJhbSB7T2JqZWN0fSBkYXRhIG9w
        dGlvbmFsIGRhdGEgKHNlZSBhYm92ZSkKICAqLwogIGRpZFNhdmVSZWNvcmQ6
        IGZ1bmN0aW9uKHJlY29yZCwgZGF0YSkgewogICAgaWYgKGRhdGEpIHsKICAg
        ICAgLy8gbm9ybWFsaXplIHJlbGF0aW9uc2hpcCBJRHMgaW50byByZWNvcmRz
        CiAgICAgIGRhdGEgPSBub3JtYWxpemVSZWxhdGlvbnNoaXBzKHRoaXMsIHJl
        Y29yZC5jb25zdHJ1Y3RvciwgZGF0YSwgcmVjb3JkKTsKCiAgICAgIHRoaXMu
        dXBkYXRlSWQocmVjb3JkLCBkYXRhKTsKICAgIH0KCiAgICByZWNvcmQuYWRh
        cHRlckRpZENvbW1pdChkYXRhKTsKICB9LAoKICAvKioKICAgIFRoaXMgbWV0
        aG9kIGlzIGNhbGxlZCBvbmNlIHRoZSBwcm9taXNlIHJldHVybmVkIGJ5IGFu
        CiAgICBhZGFwdGVyJ3MgYGNyZWF0ZVJlY29yZGAsIGB1cGRhdGVSZWNvcmRg
        IG9yIGBkZWxldGVSZWNvcmRgCiAgICBpcyByZWplY3RlZCB3aXRoIGEgYERT
        LkludmFsaWRFcnJvcmAuCgogICAgQG1ldGhvZCByZWNvcmRXYXNJbnZhbGlk
        CiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAg
        ICBAcGFyYW0ge09iamVjdH0gZXJyb3JzCiAgKi8KICByZWNvcmRXYXNJbnZh
        bGlkOiBmdW5jdGlvbihyZWNvcmQsIGVycm9ycykgewogICAgcmVjb3JkLmFk
        YXB0ZXJEaWRJbnZhbGlkYXRlKGVycm9ycyk7CiAgfSwKCiAgLyoqCiAgICBU
        aGlzIG1ldGhvZCBpcyBjYWxsZWQgb25jZSB0aGUgcHJvbWlzZSByZXR1cm5l
        ZCBieSBhbgogICAgYWRhcHRlcidzIGBjcmVhdGVSZWNvcmRgLCBgdXBkYXRl
        UmVjb3JkYCBvciBgZGVsZXRlUmVjb3JkYAogICAgaXMgcmVqZWN0ZWQgKHdp
        dGggYW55dGhpbmcgb3RoZXIgdGhhbiBhIGBEUy5JbnZhbGlkRXJyb3JgKS4K
        CiAgICBAbWV0aG9kIHJlY29yZFdhc0Vycm9yCiAgICBAcHJpdmF0ZQogICAg
        QHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgKi8KICByZWNvcmRXYXNFcnJv
        cjogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICByZWNvcmQuYWRhcHRlckRpZEVy
        cm9yKCk7CiAgfSwKCiAgLyoqCiAgICBXaGVuIGFuIGFkYXB0ZXIncyBgY3Jl
        YXRlUmVjb3JkYCwgYHVwZGF0ZVJlY29yZGAgb3IgYGRlbGV0ZVJlY29yZGAK
        ICAgIHJlc29sdmVzIHdpdGggZGF0YSwgdGhpcyBtZXRob2QgZXh0cmFjdHMg
        dGhlIElEIGZyb20gdGhlIHN1cHBsaWVkCiAgICBkYXRhLgoKICAgIEBtZXRo
        b2QgdXBkYXRlSWQKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge0RTLk1vZGVs
        fSByZWNvcmQKICAgIEBwYXJhbSB7T2JqZWN0fSBkYXRhCiAgKi8KICB1cGRh
        dGVJZDogZnVuY3Rpb24ocmVjb3JkLCBkYXRhKSB7CiAgICB2YXIgb2xkSWQg
        PSBnZXQocmVjb3JkLCAnaWQnKSwKICAgICAgICBpZCA9IGNvZXJjZUlkKGRh
        dGEuaWQpOwoKICAgIEVtYmVyLmFzc2VydCgiQW4gYWRhcHRlciBjYW5ub3Qg
        YXNzaWduIGEgbmV3IGlkIHRvIGEgcmVjb3JkIHRoYXQgYWxyZWFkeSBoYXMg
        YW4gaWQuICIgKyByZWNvcmQgKyAiIGhhZCBpZDogIiArIG9sZElkICsgIiBh
        bmQgeW91IHRyaWVkIHRvIHVwZGF0ZSBpdCB3aXRoICIgKyBpZCArICIuIFRo
        aXMgbGlrZWx5IGhhcHBlbmVkIGJlY2F1c2UgeW91ciBzZXJ2ZXIgcmV0dXJu
        ZWQgZGF0YSBpbiByZXNwb25zZSB0byBhIGZpbmQgb3IgdXBkYXRlIHRoYXQg
        aGFkIGEgZGlmZmVyZW50IGlkIHRoYW4gdGhlIG9uZSB5b3Ugc2VudC4iLCBv
        bGRJZCA9PT0gbnVsbCB8fCBpZCA9PT0gb2xkSWQpOwoKICAgIHRoaXMudHlw
        ZU1hcEZvcihyZWNvcmQuY29uc3RydWN0b3IpLmlkVG9SZWNvcmRbaWRdID0g
        cmVjb3JkOwoKICAgIHNldChyZWNvcmQsICdpZCcsIGlkKTsKICB9LAoKICAv
        KioKICAgIFJldHVybnMgYSBtYXAgb2YgSURzIHRvIGNsaWVudCBJRHMgZm9y
        IGEgZ2l2ZW4gdHlwZS4KCiAgICBAbWV0aG9kIHR5cGVNYXBGb3IKICAgIEBw
        cml2YXRlCiAgICBAcGFyYW0gdHlwZQogICovCiAgdHlwZU1hcEZvcjogZnVu
        Y3Rpb24odHlwZSkgewogICAgdmFyIHR5cGVNYXBzID0gZ2V0KHRoaXMsICd0
        eXBlTWFwcycpLAogICAgICAgIGd1aWQgPSBFbWJlci5ndWlkRm9yKHR5cGUp
        LAogICAgICAgIHR5cGVNYXA7CgogICAgdHlwZU1hcCA9IHR5cGVNYXBzW2d1
        aWRdOwoKICAgIGlmICh0eXBlTWFwKSB7IHJldHVybiB0eXBlTWFwOyB9Cgog
        ICAgdHlwZU1hcCA9IHsKICAgICAgaWRUb1JlY29yZDoge30sCiAgICAgIHJl
        Y29yZHM6IFtdLAogICAgICBtZXRhZGF0YToge30KICAgIH07CgogICAgdHlw
        ZU1hcHNbZ3VpZF0gPSB0eXBlTWFwOwoKICAgIHJldHVybiB0eXBlTWFwOwog
        IH0sCgogIC8vIC4uLi4uLi4uLi4uLi4uLi4KICAvLyAuIExPQURJTkcgREFU
        QSAuCiAgLy8gLi4uLi4uLi4uLi4uLi4uLgoKICAvKioKICAgIFRoaXMgaW50
        ZXJuYWwgbWV0aG9kIGlzIHVzZWQgYnkgYHB1c2hgLgoKICAgIEBtZXRob2Qg
        X2xvYWQKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge0RTLk1vZGVsfSB0eXBl
        CiAgICBAcGFyYW0ge09iamVjdH0gZGF0YQogICAgQHBhcmFtIHtCb29sZWFu
        fSBwYXJ0aWFsIHRoZSBkYXRhIHNob3VsZCBiZSBtZXJnZWQgaW50bwogICAg
        ICB0aGUgZXhpc3RpbmcgZGF0YSwgbm90IHJlcGxhY2UgaXQuCiAgKi8KICBf
        bG9hZDogZnVuY3Rpb24odHlwZSwgZGF0YSwgcGFydGlhbCkgewogICAgdmFy
        IGlkID0gY29lcmNlSWQoZGF0YS5pZCksCiAgICAgICAgcmVjb3JkID0gdGhp
        cy5yZWNvcmRGb3JJZCh0eXBlLCBpZCk7CgogICAgcmVjb3JkLnNldHVwRGF0
        YShkYXRhLCBwYXJ0aWFsKTsKICAgIHRoaXMucmVjb3JkQXJyYXlNYW5hZ2Vy
        LnJlY29yZERpZENoYW5nZShyZWNvcmQpOwoKICAgIHJldHVybiByZWNvcmQ7
        CiAgfSwKCiAgLyoqCiAgICBSZXR1cm5zIGEgbW9kZWwgY2xhc3MgZm9yIGEg
        cGFydGljdWxhciBrZXkuIFVzZWQgYnkKICAgIG1ldGhvZHMgdGhhdCB0YWtl
        IGEgdHlwZSBrZXkgKGxpa2UgYGZpbmRgLCBgY3JlYXRlUmVjb3JkYCwKICAg
        IGV0Yy4pCgogICAgQG1ldGhvZCBtb2RlbEZvcgogICAgQHBhcmFtIHtTdHJp
        bmd9IGtleQogICAgQHJldHVybnMge3N1YmNsYXNzIG9mIERTLk1vZGVsfQog
        ICovCiAgbW9kZWxGb3I6IGZ1bmN0aW9uKGtleSkgewogICAgaWYgKHR5cGVv
        ZiBrZXkgIT09ICdzdHJpbmcnKSB7CiAgICAgIHJldHVybiBrZXk7CiAgICB9
        CgogICAgdmFyIGZhY3RvcnkgPSB0aGlzLmNvbnRhaW5lci5sb29rdXBGYWN0
        b3J5KCdtb2RlbDonK2tleSk7CgogICAgRW1iZXIuYXNzZXJ0KCJObyBtb2Rl
        bCB3YXMgZm91bmQgZm9yICciICsga2V5ICsgIiciLCBmYWN0b3J5KTsKCiAg
        ICBmYWN0b3J5LnN0b3JlID0gdGhpczsKICAgIGZhY3RvcnkudHlwZUtleSA9
        IGtleTsKCiAgICByZXR1cm4gZmFjdG9yeTsKICB9LAoKICAvKioKICAgIFB1
        c2ggc29tZSBkYXRhIGZvciBhIGdpdmVuIHR5cGUgaW50byB0aGUgc3RvcmUu
        CgogICAgVGhpcyBtZXRob2QgZXhwZWN0cyBub3JtYWxpemVkIGRhdGE6Cgog
        ICAgKiBUaGUgSUQgaXMgYSBrZXkgbmFtZWQgYGlkYCAoYW4gSUQgaXMgbWFu
        ZGF0b3J5KQogICAgKiBUaGUgbmFtZXMgb2YgYXR0cmlidXRlcyBhcmUgdGhl
        IG9uZXMgeW91IHVzZWQgaW4KICAgICAgeW91ciBtb2RlbCdzIGBEUy5hdHRy
        YHMuCiAgICAqIFlvdXIgcmVsYXRpb25zaGlwcyBtdXN0IGJlOgogICAgICAq
        IHJlcHJlc2VudGVkIGFzIElEcyBvciBBcnJheXMgb2YgSURzCiAgICAgICog
        cmVwcmVzZW50ZWQgYXMgbW9kZWwgaW5zdGFuY2VzCiAgICAgICogcmVwcmVz
        ZW50ZWQgYXMgVVJMcywgdW5kZXIgdGhlIGBsaW5rc2Aga2V5CgogICAgRm9y
        IHRoaXMgbW9kZWw6CgogICAgYGBganMKICAgIEFwcC5QZXJzb24gPSBEUy5N
        b2RlbC5leHRlbmQoewogICAgICBmaXJzdE5hbWU6IERTLmF0dHIoKSwKICAg
        ICAgbGFzdE5hbWU6IERTLmF0dHIoKSwKCiAgICAgIGNoaWxkcmVuOiBEUy5o
        YXNNYW55KCdwZXJzb24nKQogICAgfSk7CiAgICBgYGAKCiAgICBUbyByZXBy
        ZXNlbnQgdGhlIGNoaWxkcmVuIGFzIElEczoKCiAgICBgYGBqcwogICAgewog
        ICAgICBpZDogMSwKICAgICAgZmlyc3ROYW1lOiAiVG9tIiwKICAgICAgbGFz
        dE5hbWU6ICJEYWxlIiwKICAgICAgY2hpbGRyZW46IFsxLCAyLCAzXQogICAg
        fQogICAgYGBgCgogICAgVG8gcmVwcmVzZW50IHRoZSBjaGlsZHJlbiByZWxh
        dGlvbnNoaXAgYXMgYSBVUkw6CgogICAgYGBganMKICAgIHsKICAgICAgaWQ6
        IDEsCiAgICAgIGZpcnN0TmFtZTogIlRvbSIsCiAgICAgIGxhc3ROYW1lOiAi
        RGFsZSIsCiAgICAgIGxpbmtzOiB7CiAgICAgICAgY2hpbGRyZW46ICIvcGVv
        cGxlLzEvY2hpbGRyZW4iCiAgICAgIH0KICAgIH0KICAgIGBgYAoKICAgIElm
        IHlvdSdyZSBzdHJlYW1pbmcgZGF0YSBvciBpbXBsZW1lbnRpbmcgYW4gYWRh
        cHRlciwKICAgIG1ha2Ugc3VyZSB0aGF0IHlvdSBoYXZlIGNvbnZlcnRlZCB0
        aGUgaW5jb21pbmcgZGF0YQogICAgaW50byB0aGlzIGZvcm0uCgogICAgVGhp
        cyBtZXRob2QgY2FuIGJlIHVzZWQgYm90aCB0byBwdXNoIGluIGJyYW5kIG5l
        dwogICAgcmVjb3JkcywgYXMgd2VsbCBhcyB0byB1cGRhdGUgZXhpc3Rpbmcg
        cmVjb3Jkcy4KCiAgICBAbWV0aG9kIHB1c2gKICAgIEBwYXJhbSB7U3RyaW5n
        fSB0eXBlCiAgICBAcGFyYW0ge09iamVjdH0gZGF0YQogICAgQHJldHVybnMg
        RFMuTW9kZWwgdGhlIHJlY29yZCB0aGF0IHdhcyBjcmVhdGVkIG9yCiAgICAg
        IHVwZGF0ZWQuCiAgKi8KICBwdXNoOiBmdW5jdGlvbih0eXBlLCBkYXRhLCBf
        cGFydGlhbCkgewogICAgLy8gX3BhcnRpYWwgaXMgYW4gaW50ZXJuYWwgcGFy
        YW0gdXNlZCBieSBgdXBkYXRlYC4KICAgIC8vIElmIHBhc3NlZCwgaXQgbWVh
        bnMgdGhhdCB0aGUgZGF0YSBzaG91bGQgYmUKICAgIC8vIG1lcmdlZCBpbnRv
        IHRoZSBleGlzdGluZyBkYXRhLCBub3QgcmVwbGFjZSBpdC4KCiAgICBFbWJl
        ci5hc3NlcnQoIllvdSBtdXN0IGluY2x1ZGUgYW4gYGlkYCBpbiBhIGhhc2gg
        cGFzc2VkIHRvIGBwdXNoYCIsIGRhdGEuaWQgIT0gbnVsbCk7CgogICAgdHlw
        ZSA9IHRoaXMubW9kZWxGb3IodHlwZSk7CgogICAgLy8gbm9ybWFsaXplIHJl
        bGF0aW9uc2hpcCBJRHMgaW50byByZWNvcmRzCiAgICBkYXRhID0gbm9ybWFs
        aXplUmVsYXRpb25zaGlwcyh0aGlzLCB0eXBlLCBkYXRhKTsKCiAgICB0aGlz
        Ll9sb2FkKHR5cGUsIGRhdGEsIF9wYXJ0aWFsKTsKCiAgICByZXR1cm4gdGhp
        cy5yZWNvcmRGb3JJZCh0eXBlLCBkYXRhLmlkKTsKICB9LAoKICAvKioKICAg
        IFB1c2ggc29tZSByYXcgZGF0YSBpbnRvIHRoZSBzdG9yZS4KCiAgICBUaGUg
        ZGF0YSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZGVzZXJpYWxpemVkIHVzaW5n
        IHRoZQogICAgc2VyaWFsaXplciBmb3IgdGhlIGB0eXBlYCBwYXJhbS4KCiAg
        ICBUaGlzIG1ldGhvZCBjYW4gYmUgdXNlZCBib3RoIHRvIHB1c2ggaW4gYnJh
        bmQgbmV3CiAgICByZWNvcmRzLCBhcyB3ZWxsIGFzIHRvIHVwZGF0ZSBleGlz
        dGluZyByZWNvcmRzLgoKICAgIFlvdSBjYW4gcHVzaCBpbiBtb3JlIHRoYW4g
        b25lIHR5cGUgb2Ygb2JqZWN0IGF0IG9uY2UuCiAgICBBbGwgb2JqZWN0cyBz
        aG91bGQgYmUgaW4gdGhlIGZvcm1hdCBleHBlY3RlZCBieSB0aGUKICAgIHNl
        cmlhbGl6ZXIuCgogICAgYGBganMKICAgIEFwcC5BcHBsaWNhdGlvblNlcmlh
        bGl6ZXIgPSBEUy5BY3RpdmVNb2RlbFNlcmlhbGl6ZXI7CgogICAgdmFyIHB1
        c2hEYXRhID0gewogICAgICBwb3N0czogWwogICAgICAgIHtpZDogMSwgcG9z
        dF90aXRsZTogIkdyZWF0IHBvc3QiLCBjb21tZW50X2lkczogWzJdfQogICAg
        ICBdLAogICAgICBjb21tZW50czogWwogICAgICAgIHtpZDogMiwgY29tbWVu
        dF9ib2R5OiAiSW5zaWdodGZ1bCBjb21tZW50In0KICAgICAgXQogICAgfQoK
        ICAgIHN0b3JlLnB1c2hQYXlsb2FkKCdwb3N0JywgcHVzaERhdGEpOwogICAg
        YGBgCgogICAgQG1ldGhvZCBwdXNoCiAgICBAcGFyYW0ge1N0cmluZ30gdHlw
        ZQogICAgQHBhcmFtIHtPYmplY3R9IHBheWxvYWQKICAqLwoKICBwdXNoUGF5
        bG9hZDogZnVuY3Rpb24gKHR5cGUsIHBheWxvYWQpIHsKICAgIHZhciBzZXJp
        YWxpemVyID0gdGhpcy5zZXJpYWxpemVyRm9yKHR5cGUpOwogICAgc2VyaWFs
        aXplci5wdXNoUGF5bG9hZCh0aGlzLCBwYXlsb2FkKTsKICB9LAoKICB1cGRh
        dGU6IGZ1bmN0aW9uKHR5cGUsIGRhdGEpIHsKICAgIEVtYmVyLmFzc2VydCgi
        WW91IG11c3QgaW5jbHVkZSBhbiBgaWRgIGluIGEgaGFzaCBwYXNzZWQgdG8g
        YHVwZGF0ZWAiLCBkYXRhLmlkICE9IG51bGwpOwoKICAgIHJldHVybiB0aGlz
        LnB1c2godHlwZSwgZGF0YSwgdHJ1ZSk7CiAgfSwKCiAgLyoqCiAgICBJZiB5
        b3UgaGF2ZSBhbiBBcnJheSBvZiBub3JtYWxpemVkIGRhdGEgdG8gcHVzaCwK
        ICAgIHlvdSBjYW4gY2FsbCBgcHVzaE1hbnlgIHdpdGggdGhlIEFycmF5LCBh
        bmQgaXQgd2lsbAogICAgY2FsbCBgcHVzaGAgcmVwZWF0ZWRseSBmb3IgeW91
        LgoKICAgIEBtZXRob2QgcHVzaE1hbnkKICAgIEBwYXJhbSB7U3RyaW5nfSB0
        eXBlCiAgICBAcGFyYW0ge0FycmF5fSBkYXRhcwogICAgQHJldHVybiB7QXJy
        YXk8RFMuTW9kZWw+fQogICovCiAgcHVzaE1hbnk6IGZ1bmN0aW9uKHR5cGUs
        IGRhdGFzKSB7CiAgICByZXR1cm4gbWFwKGRhdGFzLCBmdW5jdGlvbihkYXRh
        KSB7CiAgICAgIHJldHVybiB0aGlzLnB1c2godHlwZSwgZGF0YSk7CiAgICB9
        LCB0aGlzKTsKICB9LAoKICAvKioKICAgIElmIHlvdSBoYXZlIHNvbWUgbWV0
        YWRhdGEgdG8gc2V0IGZvciBhIHR5cGUKICAgIHlvdSBjYW4gY2FsbCBgbWV0
        YUZvclR5cGVgLgoKICAgIEBtZXRob2QgbWV0YUZvclR5cGUKICAgIEBwYXJh
        bSB7U3RyaW5nfSB0eXBlCiAgICBAcGFyYW0ge09iamVjdH0gbWV0YWRhdGEK
        ICAqLwogIG1ldGFGb3JUeXBlOiBmdW5jdGlvbih0eXBlLCBtZXRhZGF0YSkg
        ewogICAgdHlwZSA9IHRoaXMubW9kZWxGb3IodHlwZSk7CgogICAgRW1iZXIu
        bWVyZ2UodGhpcy50eXBlTWFwRm9yKHR5cGUpLm1ldGFkYXRhLCBtZXRhZGF0
        YSk7CiAgfSwKCiAgLyoqCiAgICBCdWlsZCBhIGJyYW5kIG5ldyByZWNvcmQg
        Zm9yIGEgZ2l2ZW4gdHlwZSwgSUQsIGFuZAogICAgaW5pdGlhbCBkYXRhLgoK
        ICAgIEBtZXRob2QgYnVpbGRSZWNvcmQKICAgIEBwcml2YXRlCiAgICBAcGFy
        YW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge1N0
        cmluZ30gaWQKICAgIEBwYXJhbSB7T2JqZWN0fSBkYXRhCiAgICBAcmV0dXJu
        cyBEUy5Nb2RlbAogICovCiAgYnVpbGRSZWNvcmQ6IGZ1bmN0aW9uKHR5cGUs
        IGlkLCBkYXRhKSB7CiAgICB2YXIgdHlwZU1hcCA9IHRoaXMudHlwZU1hcEZv
        cih0eXBlKSwKICAgICAgICBpZFRvUmVjb3JkID0gdHlwZU1hcC5pZFRvUmVj
        b3JkOwoKICAgIEVtYmVyLmFzc2VydCgnVGhlIGlkICcgKyBpZCArICcgaGFz
        IGFscmVhZHkgYmVlbiB1c2VkIHdpdGggYW5vdGhlciByZWNvcmQgb2YgdHlw
        ZSAnICsgdHlwZS50b1N0cmluZygpICsgJy4nLCAhaWQgfHwgIWlkVG9SZWNv
        cmRbaWRdKTsKCiAgICAvLyBsb29rdXBGYWN0b3J5IHNob3VsZCByZWFsbHkg
        cmV0dXJuIGFuIG9iamVjdCB0aGF0IGNyZWF0ZXMKICAgIC8vIGluc3RhbmNl
        cyB3aXRoIHRoZSBpbmplY3Rpb25zIGFwcGxpZWQKICAgIHZhciByZWNvcmQg
        PSB0eXBlLl9jcmVhdGUoewogICAgICBpZDogaWQsCiAgICAgIHN0b3JlOiB0
        aGlzLAogICAgICBjb250YWluZXI6IHRoaXMuY29udGFpbmVyCiAgICB9KTsK
        CiAgICBpZiAoZGF0YSkgewogICAgICByZWNvcmQuc2V0dXBEYXRhKGRhdGEp
        OwogICAgfQoKICAgIC8vIGlmIHdlJ3JlIGNyZWF0aW5nIGFuIGl0ZW0sIHRo
        aXMgcHJvY2VzcyB3aWxsIGJlIGRvbmUKICAgIC8vIGxhdGVyLCBvbmNlIHRo
        ZSBvYmplY3QgaGFzIGJlZW4gcGVyc2lzdGVkLgogICAgaWYgKGlkKSB7CiAg
        ICAgIGlkVG9SZWNvcmRbaWRdID0gcmVjb3JkOwogICAgfQoKICAgIHR5cGVN
        YXAucmVjb3Jkcy5wdXNoKHJlY29yZCk7CgogICAgcmV0dXJuIHJlY29yZDsK
        ICB9LAoKICAvLyAuLi4uLi4uLi4uLi4uLi4KICAvLyAuIERFU1RSVUNUSU9O
        IC4KICAvLyAuLi4uLi4uLi4uLi4uLi4KCiAgLyoqCiAgICBXaGVuIGEgcmVj
        b3JkIGlzIGRlc3Ryb3llZCwgdGhpcyB1bi1pbmRleGVzIGl0IGFuZAogICAg
        cmVtb3ZlcyBpdCBmcm9tIGFueSByZWNvcmQgYXJyYXlzIHNvIGl0IGNhbiBi
        ZSBHQ2VkLgoKICAgIEBtZXRob2QgZGVtYXRlcmlhbGl6ZVJlY29yZAogICAg
        QHByaXZhdGUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICovCiAg
        ZGVtYXRlcmlhbGl6ZVJlY29yZDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICB2
        YXIgdHlwZSA9IHJlY29yZC5jb25zdHJ1Y3RvciwKICAgICAgICB0eXBlTWFw
        ID0gdGhpcy50eXBlTWFwRm9yKHR5cGUpLAogICAgICAgIGlkID0gZ2V0KHJl
        Y29yZCwgJ2lkJyk7CgogICAgcmVjb3JkLnVwZGF0ZVJlY29yZEFycmF5cygp
        OwoKICAgIGlmIChpZCkgewogICAgICBkZWxldGUgdHlwZU1hcC5pZFRvUmVj
        b3JkW2lkXTsKICAgIH0KCiAgICB2YXIgbG9jID0gaW5kZXhPZih0eXBlTWFw
        LnJlY29yZHMsIHJlY29yZCk7CiAgICB0eXBlTWFwLnJlY29yZHMuc3BsaWNl
        KGxvYywgMSk7CiAgfSwKCiAgLy8gLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4u
        CiAgLy8gLiBSRUxBVElPTlNISVAgQ0hBTkdFUyAuCiAgLy8gLi4uLi4uLi4u
        Li4uLi4uLi4uLi4uLi4uCgogIGFkZFJlbGF0aW9uc2hpcENoYW5nZUZvcjog
        ZnVuY3Rpb24oY2hpbGRSZWNvcmQsIGNoaWxkS2V5LCBwYXJlbnRSZWNvcmQs
        IHBhcmVudEtleSwgY2hhbmdlKSB7CiAgICB2YXIgY2xpZW50SWQgPSBjaGls
        ZFJlY29yZC5jbGllbnRJZCwKICAgICAgICBwYXJlbnRDbGllbnRJZCA9IHBh
        cmVudFJlY29yZCA/IHBhcmVudFJlY29yZCA6IHBhcmVudFJlY29yZDsKICAg
        IHZhciBrZXkgPSBjaGlsZEtleSArIHBhcmVudEtleTsKICAgIHZhciBjaGFu
        Z2VzID0gdGhpcy5fcmVsYXRpb25zaGlwQ2hhbmdlczsKICAgIGlmICghKGNs
        aWVudElkIGluIGNoYW5nZXMpKSB7CiAgICAgIGNoYW5nZXNbY2xpZW50SWRd
        ID0ge307CiAgICB9CiAgICBpZiAoIShwYXJlbnRDbGllbnRJZCBpbiBjaGFu
        Z2VzW2NsaWVudElkXSkpIHsKICAgICAgY2hhbmdlc1tjbGllbnRJZF1bcGFy
        ZW50Q2xpZW50SWRdID0ge307CiAgICB9CiAgICBpZiAoIShrZXkgaW4gY2hh
        bmdlc1tjbGllbnRJZF1bcGFyZW50Q2xpZW50SWRdKSkgewogICAgICBjaGFu
        Z2VzW2NsaWVudElkXVtwYXJlbnRDbGllbnRJZF1ba2V5XSA9IHt9OwogICAg
        fQogICAgY2hhbmdlc1tjbGllbnRJZF1bcGFyZW50Q2xpZW50SWRdW2tleV1b
        Y2hhbmdlLmNoYW5nZVR5cGVdID0gY2hhbmdlOwogIH0sCgogIHJlbW92ZVJl
        bGF0aW9uc2hpcENoYW5nZUZvcjogZnVuY3Rpb24oY2xpZW50UmVjb3JkLCBj
        aGlsZEtleSwgcGFyZW50UmVjb3JkLCBwYXJlbnRLZXksIHR5cGUpIHsKICAg
        IHZhciBjbGllbnRJZCA9IGNsaWVudFJlY29yZC5jbGllbnRJZCwKICAgICAg
        ICBwYXJlbnRDbGllbnRJZCA9IHBhcmVudFJlY29yZCA/IHBhcmVudFJlY29y
        ZC5jbGllbnRJZCA6IHBhcmVudFJlY29yZDsKICAgIHZhciBjaGFuZ2VzID0g
        dGhpcy5fcmVsYXRpb25zaGlwQ2hhbmdlczsKICAgIHZhciBrZXkgPSBjaGls
        ZEtleSArIHBhcmVudEtleTsKICAgIGlmICghKGNsaWVudElkIGluIGNoYW5n
        ZXMpIHx8ICEocGFyZW50Q2xpZW50SWQgaW4gY2hhbmdlc1tjbGllbnRJZF0p
        IHx8ICEoa2V5IGluIGNoYW5nZXNbY2xpZW50SWRdW3BhcmVudENsaWVudElk
        XSkpewogICAgICByZXR1cm47CiAgICB9CiAgICBkZWxldGUgY2hhbmdlc1tj
        bGllbnRJZF1bcGFyZW50Q2xpZW50SWRdW2tleV1bdHlwZV07CiAgfSwKCiAg
        cmVsYXRpb25zaGlwQ2hhbmdlUGFpcnNGb3I6IGZ1bmN0aW9uKHJlY29yZCl7
        CiAgICB2YXIgdG9SZXR1cm4gPSBbXTsKCiAgICBpZiggIXJlY29yZCApIHsg
        cmV0dXJuIHRvUmV0dXJuOyB9CgogICAgLy9UT0RPKElnb3IpIFdoYXQgYWJv
        dXQgdGhlIG90aGVyIHNpZGUKICAgIHZhciBjaGFuZ2VzT2JqZWN0ID0gdGhp
        cy5fcmVsYXRpb25zaGlwQ2hhbmdlc1tyZWNvcmQuY2xpZW50SWRdOwogICAg
        Zm9yICh2YXIgb2JqS2V5IGluIGNoYW5nZXNPYmplY3QpewogICAgICBpZihj
        aGFuZ2VzT2JqZWN0Lmhhc093blByb3BlcnR5KG9iaktleSkpewogICAgICAg
        IGZvciAodmFyIGNoYW5nZUtleSBpbiBjaGFuZ2VzT2JqZWN0W29iaktleV0p
        ewogICAgICAgICAgaWYoY2hhbmdlc09iamVjdFtvYmpLZXldLmhhc093blBy
        b3BlcnR5KGNoYW5nZUtleSkpewogICAgICAgICAgICB0b1JldHVybi5wdXNo
        KGNoYW5nZXNPYmplY3Rbb2JqS2V5XVtjaGFuZ2VLZXldKTsKICAgICAgICAg
        IH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB0b1JldHVy
        bjsKICB9LAoKICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uCiAgLy8gLiBQ
        RVItVFlQRSBBREFQVEVSUwogIC8vIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4K
        CiAgLyoqCiAgICBSZXR1cm5zIHRoZSBhZGFwdGVyIGZvciBhIGdpdmVuIHR5
        cGUuCgogICAgQG1ldGhvZCBhZGFwdGVyRm9yCiAgICBAcHJpdmF0ZQogICAg
        QHBhcmFtIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHJldHVy
        bnMgRFMuQWRhcHRlcgogICovCiAgYWRhcHRlckZvcjogZnVuY3Rpb24odHlw
        ZSkgewogICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLCBhZGFw
        dGVyOwoKICAgIGlmIChjb250YWluZXIpIHsKICAgICAgYWRhcHRlciA9IGNv
        bnRhaW5lci5sb29rdXAoJ2FkYXB0ZXI6JyArIHR5cGUudHlwZUtleSkgfHwg
        Y29udGFpbmVyLmxvb2t1cCgnYWRhcHRlcjphcHBsaWNhdGlvbicpOwogICAg
        fQoKICAgIHJldHVybiBhZGFwdGVyIHx8IGdldCh0aGlzLCAnZGVmYXVsdEFk
        YXB0ZXInKTsKICB9LAoKICAvLyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4u
        Li4uLi4KICAvLyAuIFJFQ09SRCBDSEFOR0UgTk9USUZJQ0FUSU9OIC4KICAv
        LyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KCiAgLyoqCiAgICBS
        ZXR1cm5zIGFuIGluc3RhbmNlIG9mIHRoZSBzZXJpYWxpemVyIGZvciBhIGdp
        dmVuIHR5cGUuIEZvcgogICAgZXhhbXBsZSwgYHNlcmlhbGl6ZXJGb3IoJ3Bl
        cnNvbicpYCB3aWxsIHJldHVybiBhbiBpbnN0YW5jZSBvZgogICAgYEFwcC5Q
        ZXJzb25TZXJpYWxpemVyYC4KCiAgICBJZiBubyBgQXBwLlBlcnNvblNlcmlh
        bGl6ZXJgIGlzIGZvdW5kLCB0aGlzIG1ldGhvZCB3aWxsIGxvb2sKICAgIGZv
        ciBhbiBgQXBwLkFwcGxpY2F0aW9uU2VyaWFsaXplcmAgKHRoZSBkZWZhdWx0
        IHNlcmlhbGl6ZXIgZm9yCiAgICB5b3VyIGVudGlyZSBhcHBsaWNhdGlvbiku
        CgogICAgSWYgbm8gYEFwcC5BcHBsaWNhdGlvblNlcmlhbGl6ZXJgIGlzIGZv
        dW5kLCBpdCB3aWxsIGZhbGwgYmFjawogICAgdG8gYW4gaW5zdGFuY2Ugb2Yg
        YERTLkpTT05TZXJpYWxpemVyYC4KCiAgICBAbWV0aG9kIHNlcmlhbGl6ZXJG
        b3IKICAgIEBwcml2YXRlCiAgICBAcGFyYW0ge1N0cmluZ30gdHlwZSB0aGUg
        cmVjb3JkIHRvIHNlcmlhbGl6ZQogICovCiAgc2VyaWFsaXplckZvcjogZnVu
        Y3Rpb24odHlwZSkgewogICAgdHlwZSA9IHRoaXMubW9kZWxGb3IodHlwZSk7
        CiAgICB2YXIgYWRhcHRlciA9IHRoaXMuYWRhcHRlckZvcih0eXBlKTsKCiAg
        ICByZXR1cm4gc2VyaWFsaXplckZvcih0aGlzLmNvbnRhaW5lciwgdHlwZS50
        eXBlS2V5LCBhZGFwdGVyICYmIGFkYXB0ZXIuZGVmYXVsdFNlcmlhbGl6ZXIp
        OwogIH0KfSk7CgpmdW5jdGlvbiBub3JtYWxpemVSZWxhdGlvbnNoaXBzKHN0
        b3JlLCB0eXBlLCBkYXRhLCByZWNvcmQpIHsKICB0eXBlLmVhY2hSZWxhdGlv
        bnNoaXAoZnVuY3Rpb24oa2V5LCByZWxhdGlvbnNoaXApIHsKICAgIC8vIEEg
        bGluayAodXN1YWxseSBhIFVSTCkgd2FzIGFscmVhZHkgcHJvdmlkZWQgaW4K
        ICAgIC8vIG5vcm1hbGl6ZWQgZm9ybQogICAgaWYgKGRhdGEubGlua3MgJiYg
        ZGF0YS5saW5rc1trZXldKSB7CiAgICAgIGlmIChyZWNvcmQgJiYgcmVsYXRp
        b25zaGlwLm9wdGlvbnMuYXN5bmMpIHsgcmVjb3JkLl9yZWxhdGlvbnNoaXBz
        W2tleV0gPSBudWxsOyB9CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIg
        a2luZCA9IHJlbGF0aW9uc2hpcC5raW5kLAogICAgICAgIHZhbHVlID0gZGF0
        YVtrZXldOwoKICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7IHJldHVybjsgfQoK
        ICAgIGlmIChraW5kID09PSAnYmVsb25nc1RvJykgewogICAgICBkZXNlcmlh
        bGl6ZVJlY29yZElkKHN0b3JlLCBkYXRhLCBrZXksIHJlbGF0aW9uc2hpcCwg
        dmFsdWUpOwogICAgfSBlbHNlIGlmIChraW5kID09PSAnaGFzTWFueScpIHsK
        ICAgICAgZGVzZXJpYWxpemVSZWNvcmRJZHMoc3RvcmUsIGRhdGEsIGtleSwg
        cmVsYXRpb25zaGlwLCB2YWx1ZSk7CiAgICB9CiAgfSk7CgogIHJldHVybiBk
        YXRhOwp9CgpmdW5jdGlvbiBkZXNlcmlhbGl6ZVJlY29yZElkKHN0b3JlLCBk
        YXRhLCBrZXksIHJlbGF0aW9uc2hpcCwgaWQpIHsKICBpZiAoaXNOb25lKGlk
        KSB8fCBpZCBpbnN0YW5jZW9mIERTLk1vZGVsKSB7CiAgICByZXR1cm47CiAg
        fQoKICB2YXIgdHlwZTsKCiAgaWYgKHR5cGVvZiBpZCA9PT0gJ251bWJlcicg
        fHwgdHlwZW9mIGlkID09PSAnc3RyaW5nJykgewogICAgdHlwZSA9IHR5cGVG
        b3IocmVsYXRpb25zaGlwLCBrZXksIGRhdGEpOwogICAgZGF0YVtrZXldID0g
        c3RvcmUucmVjb3JkRm9ySWQodHlwZSwgaWQpOwogIH0gZWxzZSBpZiAodHlw
        ZW9mIGlkID09PSAnb2JqZWN0JykgewogICAgLy8gcG9seW1vcnBoaWMKICAg
        IGRhdGFba2V5XSA9IHN0b3JlLnJlY29yZEZvcklkKGlkLnR5cGUsIGlkLmlk
        KTsKICB9Cn0KCmZ1bmN0aW9uIHR5cGVGb3IocmVsYXRpb25zaGlwLCBrZXks
        IGRhdGEpIHsKICBpZiAocmVsYXRpb25zaGlwLm9wdGlvbnMucG9seW1vcnBo
        aWMpIHsKICAgIHJldHVybiBkYXRhW2tleSArICJUeXBlIl07CiAgfSBlbHNl
        IHsKICAgIHJldHVybiByZWxhdGlvbnNoaXAudHlwZTsKICB9Cn0KCmZ1bmN0
        aW9uIGRlc2VyaWFsaXplUmVjb3JkSWRzKHN0b3JlLCBkYXRhLCBrZXksIHJl
        bGF0aW9uc2hpcCwgaWRzKSB7CiAgZm9yICh2YXIgaT0wLCBsPWlkcy5sZW5n
        dGg7IGk8bDsgaSsrKSB7CiAgICBkZXNlcmlhbGl6ZVJlY29yZElkKHN0b3Jl
        LCBpZHMsIGksIHJlbGF0aW9uc2hpcCwgaWRzW2ldKTsKICB9Cn0KCi8vIERl
        bGVnYXRpb24gdG8gdGhlIGFkYXB0ZXIgYW5kIHByb21pc2UgbWFuYWdlbWVu
        dAoKRFMuUHJvbWlzZUFycmF5ID0gRW1iZXIuQXJyYXlQcm94eS5leHRlbmQo
        RW1iZXIuUHJvbWlzZVByb3h5TWl4aW4pOwpEUy5Qcm9taXNlT2JqZWN0ID0g
        RW1iZXIuT2JqZWN0UHJveHkuZXh0ZW5kKEVtYmVyLlByb21pc2VQcm94eU1p
        eGluKTsKCmZ1bmN0aW9uIHByb21pc2VPYmplY3QocHJvbWlzZSkgewogIHJl
        dHVybiBEUy5Qcm9taXNlT2JqZWN0LmNyZWF0ZSh7IHByb21pc2U6IHByb21p
        c2UgfSk7Cn0KCmZ1bmN0aW9uIHByb21pc2VBcnJheShwcm9taXNlKSB7CiAg
        cmV0dXJuIERTLlByb21pc2VBcnJheS5jcmVhdGUoeyBwcm9taXNlOiBwcm9t
        aXNlIH0pOwp9CgpmdW5jdGlvbiBpc1RoZW5hYmxlKG9iamVjdCkgewogIHJl
        dHVybiBvYmplY3QgJiYgdHlwZW9mIG9iamVjdC50aGVuID09PSAnZnVuY3Rp
        b24nOwp9CgpmdW5jdGlvbiBzZXJpYWxpemVyRm9yKGNvbnRhaW5lciwgdHlw
        ZSwgZGVmYXVsdFNlcmlhbGl6ZXIpIHsKICByZXR1cm4gY29udGFpbmVyLmxv
        b2t1cCgnc2VyaWFsaXplcjonK3R5cGUpIHx8CiAgICAgICAgICAgICAgICAg
        Y29udGFpbmVyLmxvb2t1cCgnc2VyaWFsaXplcjphcHBsaWNhdGlvbicpIHx8
        CiAgICAgICAgICAgICAgICAgY29udGFpbmVyLmxvb2t1cCgnc2VyaWFsaXpl
        cjonICsgZGVmYXVsdFNlcmlhbGl6ZXIpIHx8CiAgICAgICAgICAgICAgICAg
        Y29udGFpbmVyLmxvb2t1cCgnc2VyaWFsaXplcjpfZGVmYXVsdCcpOwp9Cgpm
        dW5jdGlvbiBzZXJpYWxpemVyRm9yQWRhcHRlcihhZGFwdGVyLCB0eXBlKSB7
        CiAgdmFyIHNlcmlhbGl6ZXIgPSBhZGFwdGVyLnNlcmlhbGl6ZXIsCiAgICAg
        IGRlZmF1bHRTZXJpYWxpemVyID0gYWRhcHRlci5kZWZhdWx0U2VyaWFsaXpl
        ciwKICAgICAgY29udGFpbmVyID0gYWRhcHRlci5jb250YWluZXI7CgogIGlm
        IChjb250YWluZXIgJiYgc2VyaWFsaXplciA9PT0gdW5kZWZpbmVkKSB7CiAg
        ICBzZXJpYWxpemVyID0gc2VyaWFsaXplckZvcihjb250YWluZXIsIHR5cGUu
        dHlwZUtleSwgZGVmYXVsdFNlcmlhbGl6ZXIpOwogIH0KCiAgaWYgKHNlcmlh
        bGl6ZXIgPT09IG51bGwgfHwgc2VyaWFsaXplciA9PT0gdW5kZWZpbmVkKSB7
        CiAgICBzZXJpYWxpemVyID0gewogICAgICBleHRyYWN0OiBmdW5jdGlvbihz
        dG9yZSwgdHlwZSwgcGF5bG9hZCkgeyByZXR1cm4gcGF5bG9hZDsgfQogICAg
        fTsKICB9CgogIHJldHVybiBzZXJpYWxpemVyOwp9CgpmdW5jdGlvbiBfZmlu
        ZChhZGFwdGVyLCBzdG9yZSwgdHlwZSwgaWQsIHJlc29sdmVyKSB7CiAgdmFy
        IHByb21pc2UgPSBhZGFwdGVyLmZpbmQoc3RvcmUsIHR5cGUsIGlkKSwKICAg
        ICAgc2VyaWFsaXplciA9IHNlcmlhbGl6ZXJGb3JBZGFwdGVyKGFkYXB0ZXIs
        IHR5cGUpOwoKICByZXR1cm4gcmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0
        aW9uKHBheWxvYWQpIHsKICAgIEVtYmVyLmFzc2VydCgiWW91IG1hZGUgYSBy
        ZXF1ZXN0IGZvciBhICIgKyB0eXBlLnR5cGVLZXkgKyAiIHdpdGggaWQgIiAr
        IGlkICsgIiwgYnV0IHRoZSBhZGFwdGVyJ3MgcmVzcG9uc2UgZGlkIG5vdCBo
        YXZlIGFueSBkYXRhIiwgcGF5bG9hZCk7CiAgICBwYXlsb2FkID0gc2VyaWFs
        aXplci5leHRyYWN0KHN0b3JlLCB0eXBlLCBwYXlsb2FkLCBpZCwgJ2ZpbmQn
        KTsKCiAgICByZXR1cm4gc3RvcmUucHVzaCh0eXBlLCBwYXlsb2FkKTsKICB9
        LCBmdW5jdGlvbihlcnJvcikgewogICAgdmFyIHJlY29yZCA9IHN0b3JlLmdl
        dEJ5SWQodHlwZSwgaWQpOwogICAgcmVjb3JkLm5vdEZvdW5kKCk7CiAgICB0
        aHJvdyBlcnJvcjsKICB9KS50aGVuKHJlc29sdmVyLnJlc29sdmUsIHJlc29s
        dmVyLnJlamVjdCk7Cn0KCmZ1bmN0aW9uIF9maW5kTWFueShhZGFwdGVyLCBz
        dG9yZSwgdHlwZSwgaWRzLCBvd25lciwgcmVzb2x2ZXIpIHsKICB2YXIgcHJv
        bWlzZSA9IGFkYXB0ZXIuZmluZE1hbnkoc3RvcmUsIHR5cGUsIGlkcywgb3du
        ZXIpLAogICAgICBzZXJpYWxpemVyID0gc2VyaWFsaXplckZvckFkYXB0ZXIo
        YWRhcHRlciwgdHlwZSk7CgogIHJldHVybiByZXNvbHZlKHByb21pc2UpLnRo
        ZW4oZnVuY3Rpb24ocGF5bG9hZCkgewogICAgcGF5bG9hZCA9IHNlcmlhbGl6
        ZXIuZXh0cmFjdChzdG9yZSwgdHlwZSwgcGF5bG9hZCwgbnVsbCwgJ2ZpbmRN
        YW55Jyk7CgogICAgRW1iZXIuYXNzZXJ0KCJUaGUgcmVzcG9uc2UgZnJvbSBh
        IGZpbmRNYW55IG11c3QgYmUgYW4gQXJyYXksIG5vdCAiICsgRW1iZXIuaW5z
        cGVjdChwYXlsb2FkKSwgRW1iZXIudHlwZU9mKHBheWxvYWQpID09PSAnYXJy
        YXknKTsKCiAgICBzdG9yZS5wdXNoTWFueSh0eXBlLCBwYXlsb2FkKTsKICB9
        KS50aGVuKHJlc29sdmVyLnJlc29sdmUsIHJlc29sdmVyLnJlamVjdCk7Cn0K
        CmZ1bmN0aW9uIF9maW5kSGFzTWFueShhZGFwdGVyLCBzdG9yZSwgcmVjb3Jk
        LCBsaW5rLCByZWxhdGlvbnNoaXAsIHJlc29sdmVyKSB7CiAgdmFyIHByb21p
        c2UgPSBhZGFwdGVyLmZpbmRIYXNNYW55KHN0b3JlLCByZWNvcmQsIGxpbmss
        IHJlbGF0aW9uc2hpcCksCiAgICAgIHNlcmlhbGl6ZXIgPSBzZXJpYWxpemVy
        Rm9yQWRhcHRlcihhZGFwdGVyLCByZWxhdGlvbnNoaXAudHlwZSk7CgogIHJl
        dHVybiByZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24ocGF5bG9hZCkg
        ewogICAgcGF5bG9hZCA9IHNlcmlhbGl6ZXIuZXh0cmFjdChzdG9yZSwgcmVs
        YXRpb25zaGlwLnR5cGUsIHBheWxvYWQsIG51bGwsICdmaW5kSGFzTWFueScp
        OwoKICAgIEVtYmVyLmFzc2VydCgiVGhlIHJlc3BvbnNlIGZyb20gYSBmaW5k
        SGFzTWFueSBtdXN0IGJlIGFuIEFycmF5LCBub3QgIiArIEVtYmVyLmluc3Bl
        Y3QocGF5bG9hZCksIEVtYmVyLnR5cGVPZihwYXlsb2FkKSA9PT0gJ2FycmF5
        Jyk7CgogICAgdmFyIHJlY29yZHMgPSBzdG9yZS5wdXNoTWFueShyZWxhdGlv
        bnNoaXAudHlwZSwgcGF5bG9hZCk7CiAgICByZWNvcmQudXBkYXRlSGFzTWFu
        eShyZWxhdGlvbnNoaXAua2V5LCByZWNvcmRzKTsKICB9KS50aGVuKHJlc29s
        dmVyLnJlc29sdmUsIHJlc29sdmVyLnJlamVjdCk7Cn0KCmZ1bmN0aW9uIF9m
        aW5kQmVsb25nc1RvKGFkYXB0ZXIsIHN0b3JlLCByZWNvcmQsIGxpbmssIHJl
        bGF0aW9uc2hpcCwgcmVzb2x2ZXIpIHsKICB2YXIgcHJvbWlzZSA9IGFkYXB0
        ZXIuZmluZEJlbG9uZ3NUbyhzdG9yZSwgcmVjb3JkLCBsaW5rLCByZWxhdGlv
        bnNoaXApLAogICAgICBzZXJpYWxpemVyID0gc2VyaWFsaXplckZvckFkYXB0
        ZXIoYWRhcHRlciwgcmVsYXRpb25zaGlwLnR5cGUpOwoKICByZXR1cm4gcmVz
        b2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uKHBheWxvYWQpIHsKICAgIHBh
        eWxvYWQgPSBzZXJpYWxpemVyLmV4dHJhY3Qoc3RvcmUsIHJlbGF0aW9uc2hp
        cC50eXBlLCBwYXlsb2FkLCBudWxsLCAnZmluZEJlbG9uZ3NUbycpOwoKICAg
        IHZhciByZWNvcmQgPSBzdG9yZS5wdXNoKHJlbGF0aW9uc2hpcC50eXBlLCBw
        YXlsb2FkKTsKICAgIHJlY29yZC51cGRhdGVCZWxvbmdzVG8ocmVsYXRpb25z
        aGlwLmtleSwgcmVjb3JkKTsKICB9KS50aGVuKHJlc29sdmVyLnJlc29sdmUs
        IHJlc29sdmVyLnJlamVjdCk7Cn0KCmZ1bmN0aW9uIF9maW5kQWxsKGFkYXB0
        ZXIsIHN0b3JlLCB0eXBlLCBzaW5jZVRva2VuLCByZXNvbHZlcikgewogIHZh
        ciBwcm9taXNlID0gYWRhcHRlci5maW5kQWxsKHN0b3JlLCB0eXBlLCBzaW5j
        ZVRva2VuKSwKICAgICAgc2VyaWFsaXplciA9IHNlcmlhbGl6ZXJGb3JBZGFw
        dGVyKGFkYXB0ZXIsIHR5cGUpOwoKICByZXR1cm4gcmVzb2x2ZShwcm9taXNl
        KS50aGVuKGZ1bmN0aW9uKHBheWxvYWQpIHsKICAgIHBheWxvYWQgPSBzZXJp
        YWxpemVyLmV4dHJhY3Qoc3RvcmUsIHR5cGUsIHBheWxvYWQsIG51bGwsICdm
        aW5kQWxsJyk7CgogICAgRW1iZXIuYXNzZXJ0KCJUaGUgcmVzcG9uc2UgZnJv
        bSBhIGZpbmRBbGwgbXVzdCBiZSBhbiBBcnJheSwgbm90ICIgKyBFbWJlci5p
        bnNwZWN0KHBheWxvYWQpLCBFbWJlci50eXBlT2YocGF5bG9hZCkgPT09ICdh
        cnJheScpOwoKICAgIHN0b3JlLnB1c2hNYW55KHR5cGUsIHBheWxvYWQpOwog
        ICAgc3RvcmUuZGlkVXBkYXRlQWxsKHR5cGUpOwogICAgcmV0dXJuIHN0b3Jl
        LmFsbCh0eXBlKTsKICB9KS50aGVuKHJlc29sdmVyLnJlc29sdmUsIHJlc29s
        dmVyLnJlamVjdCk7Cn0KCmZ1bmN0aW9uIF9maW5kUXVlcnkoYWRhcHRlciwg
        c3RvcmUsIHR5cGUsIHF1ZXJ5LCByZWNvcmRBcnJheSwgcmVzb2x2ZXIpIHsK
        ICB2YXIgcHJvbWlzZSA9IGFkYXB0ZXIuZmluZFF1ZXJ5KHN0b3JlLCB0eXBl
        LCBxdWVyeSwgcmVjb3JkQXJyYXkpLAogICAgICBzZXJpYWxpemVyID0gc2Vy
        aWFsaXplckZvckFkYXB0ZXIoYWRhcHRlciwgdHlwZSk7CgogIHJldHVybiBy
        ZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24ocGF5bG9hZCkgewogICAg
        cGF5bG9hZCA9IHNlcmlhbGl6ZXIuZXh0cmFjdChzdG9yZSwgdHlwZSwgcGF5
        bG9hZCwgbnVsbCwgJ2ZpbmRBbGwnKTsKCiAgICBFbWJlci5hc3NlcnQoIlRo
        ZSByZXNwb25zZSBmcm9tIGEgZmluZFF1ZXJ5IG11c3QgYmUgYW4gQXJyYXks
        IG5vdCAiICsgRW1iZXIuaW5zcGVjdChwYXlsb2FkKSwgRW1iZXIudHlwZU9m
        KHBheWxvYWQpID09PSAnYXJyYXknKTsKCiAgICByZWNvcmRBcnJheS5sb2Fk
        KHBheWxvYWQpOwogICAgcmV0dXJuIHJlY29yZEFycmF5OwogIH0pLnRoZW4o
        cmVzb2x2ZXIucmVzb2x2ZSwgcmVzb2x2ZXIucmVqZWN0KTsKfQoKZnVuY3Rp
        b24gX2NvbW1pdChhZGFwdGVyLCBzdG9yZSwgb3BlcmF0aW9uLCByZWNvcmQs
        IHJlc29sdmVyKSB7CiAgdmFyIHR5cGUgPSByZWNvcmQuY29uc3RydWN0b3Is
        CiAgICAgIHByb21pc2UgPSBhZGFwdGVyW29wZXJhdGlvbl0oc3RvcmUsIHR5
        cGUsIHJlY29yZCksCiAgICAgIHNlcmlhbGl6ZXIgPSBzZXJpYWxpemVyRm9y
        QWRhcHRlcihhZGFwdGVyLCB0eXBlKTsKCiAgRW1iZXIuYXNzZXJ0KCJZb3Vy
        IGFkYXB0ZXIncyAnIiArIG9wZXJhdGlvbiArICInIG1ldGhvZCBtdXN0IHJl
        dHVybiBhIHByb21pc2UsIGJ1dCBpdCByZXR1cm5lZCAiICsgcHJvbWlzZSwg
        aXNUaGVuYWJsZShwcm9taXNlKSk7CgogIHJldHVybiBwcm9taXNlLnRoZW4o
        ZnVuY3Rpb24ocGF5bG9hZCkgewogICAgaWYgKHBheWxvYWQpIHsgcGF5bG9h
        ZCA9IHNlcmlhbGl6ZXIuZXh0cmFjdChzdG9yZSwgdHlwZSwgcGF5bG9hZCwg
        Z2V0KHJlY29yZCwgJ2lkJyksIG9wZXJhdGlvbik7IH0KICAgIHN0b3JlLmRp
        ZFNhdmVSZWNvcmQocmVjb3JkLCBwYXlsb2FkKTsKICAgIHJldHVybiByZWNv
        cmQ7CiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7CiAgICBpZiAocmVhc29uIGlu
        c3RhbmNlb2YgRFMuSW52YWxpZEVycm9yKSB7CiAgICAgIHN0b3JlLnJlY29y
        ZFdhc0ludmFsaWQocmVjb3JkLCByZWFzb24uZXJyb3JzKTsKICAgIH0gZWxz
        ZSB7CiAgICAgIHN0b3JlLnJlY29yZFdhc0Vycm9yKHJlY29yZCwgcmVhc29u
        KTsKICAgIH0KCiAgICB0aHJvdyByZWFzb247CiAgfSkudGhlbihyZXNvbHZl
        ci5yZXNvbHZlLCByZXNvbHZlci5yZWplY3QpOwp9Cgp9KSgpOwoKCgooZnVu
        Y3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoKdmFyIGdl
        dCA9IEVtYmVyLmdldCwgc2V0ID0gRW1iZXIuc2V0OwoKLyoKICBXQVJOSU5H
        OiBNdWNoIG9mIHRoZXNlIGRvY3MgYXJlIGluYWNjdXJhdGUgYXMgb2YgYmY4
        NDk3LgoKICBUaGlzIGZpbGUgZW5jYXBzdWxhdGVzIHRoZSB2YXJpb3VzIHN0
        YXRlcyB0aGF0IGEgcmVjb3JkIGNhbiB0cmFuc2l0aW9uCiAgdGhyb3VnaCBk
        dXJpbmcgaXRzIGxpZmVjeWNsZS4KCiAgIyMjIFN0YXRlIE1hbmFnZXIKCiAg
        QSByZWNvcmQncyBzdGF0ZSBtYW5hZ2VyIGV4cGxpY2l0bHkgdHJhY2tzIHdo
        YXQgc3RhdGUgYSByZWNvcmQgaXMgaW4KICBhdCBhbnkgZ2l2ZW4gdGltZS4g
        Rm9yIGluc3RhbmNlLCBpZiBhIHJlY29yZCBpcyBuZXdseSBjcmVhdGVkIGFu
        ZCBoYXMKICBub3QgeWV0IGJlZW4gc2VudCB0byB0aGUgYWRhcHRlciB0byBi
        ZSBzYXZlZCwgaXQgd291bGQgYmUgaW4gdGhlCiAgYGNyZWF0ZWQudW5jb21t
        aXR0ZWRgIHN0YXRlLiAgSWYgYSByZWNvcmQgaGFzIGhhZCBsb2NhbCBtb2Rp
        ZmljYXRpb25zCiAgbWFkZSB0byBpdCB0aGF0IGFyZSBpbiB0aGUgcHJvY2Vz
        cyBvZiBiZWluZyBzYXZlZCwgdGhlIHJlY29yZCB3b3VsZCBiZQogIGluIHRo
        ZSBgdXBkYXRlZC5pbkZsaWdodGAgc3RhdGUuIChUaGVzZSBzdGF0ZSBwYXRo
        cyB3aWxsIGJlIGV4cGxhaW5lZAogIGluIG1vcmUgZGV0YWlsIGJlbG93LikK
        CiAgRXZlbnRzIGFyZSBzZW50IGJ5IHRoZSByZWNvcmQgb3IgaXRzIHN0b3Jl
        IHRvIHRoZSByZWNvcmQncyBzdGF0ZSBtYW5hZ2VyLgogIEhvdyB0aGUgc3Rh
        dGUgbWFuYWdlciByZWFjdHMgdG8gdGhlc2UgZXZlbnRzIGlzIGRlcGVuZGVu
        dCBvbiB3aGljaCBzdGF0ZQogIGl0IGlzIGluLiBJbiBzb21lIHN0YXRlcywg
        Y2VydGFpbiBldmVudHMgd2lsbCBiZSBpbnZhbGlkIGFuZCB3aWxsIGNhdXNl
        CiAgYW4gZXhjZXB0aW9uIHRvIGJlIHJhaXNlZC4KCiAgU3RhdGVzIGFyZSBo
        aWVyYXJjaGljYWwuIEZvciBleGFtcGxlLCBhIHJlY29yZCBjYW4gYmUgaW4g
        dGhlCiAgYGRlbGV0ZWQuc3RhcnRgIHN0YXRlLCB0aGVuIHRyYW5zaXRpb24g
        aW50byB0aGUgYGRlbGV0ZWQuaW5GbGlnaHRgIHN0YXRlLgogIElmIGEgY2hp
        bGQgc3RhdGUgZG9lcyBub3QgaW1wbGVtZW50IGFuIGV2ZW50IGhhbmRsZXIs
        IHRoZSBzdGF0ZSBtYW5hZ2VyCiAgd2lsbCBhdHRlbXB0IHRvIGludm9rZSB0
        aGUgZXZlbnQgb24gYWxsIHBhcmVudCBzdGF0ZXMgdW50aWwgdGhlIHJvb3Qg
        c3RhdGUgaXMKICByZWFjaGVkLiBUaGUgc3RhdGUgaGllcmFyY2h5IG9mIGEg
        cmVjb3JkIGlzIGRlc2NyaWJlZCBpbiB0ZXJtcyBvZiBhIHBhdGgKICBzdHJp
        bmcuIFlvdSBjYW4gZGV0ZXJtaW5lIGEgcmVjb3JkJ3MgY3VycmVudCBzdGF0
        ZSBieSBnZXR0aW5nIGl0cyBtYW5hZ2VyJ3MKICBjdXJyZW50IHN0YXRlIHBh
        dGg6CgogICAgICByZWNvcmQuZ2V0KCdzdGF0ZU1hbmFnZXIuY3VycmVudFBh
        dGgnKTsKICAgICAgLy89PiAiY3JlYXRlZC51bmNvbW1pdHRlZCIKCiAgVGhl
        IGBEUy5Nb2RlbGAgc3RhdGVzIGFyZSB0aGVtc2VsdmVzIHN0YXRlbGVzcy4g
        V2hhdCB3ZSBtZWFuIGlzIHRoYXQsCiAgdGhvdWdoIGVhY2ggaW5zdGFuY2Ug
        b2YgYSByZWNvcmQgYWxzbyBoYXMgYSB1bmlxdWUgaW5zdGFuY2Ugb2YgYQog
        IGBEUy5TdGF0ZU1hbmFnZXJgLCB0aGUgaGllcmFyY2hpY2FsIHN0YXRlcyB0
        aGF0IGVhY2ggb2YgKnRob3NlKiBwb2ludHMKICB0byBpcyBhIHNoYXJlZCBk
        YXRhIHN0cnVjdHVyZS4gRm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIGluc3Rl
        YWQgb2YgZWFjaAogIHJlY29yZCBnZXR0aW5nIGl0cyBvd24gY29weSBvZiB0
        aGUgaGllcmFyY2h5IG9mIHN0YXRlcywgZWFjaCBzdGF0ZQogIG1hbmFnZXIg
        cG9pbnRzIHRvIHRoaXMgZ2xvYmFsLCBpbW11dGFibGUgc2hhcmVkIGluc3Rh
        bmNlLiBIb3cgZG9lcyBhCiAgc3RhdGUga25vdyB3aGljaCByZWNvcmQgaXQg
        c2hvdWxkIGJlIGFjdGluZyBvbj8gIFdlIHBhc3MgYSByZWZlcmVuY2UgdG8K
        ICB0aGUgY3VycmVudCBzdGF0ZSBtYW5hZ2VyIGFzIHRoZSBmaXJzdCBwYXJh
        bWV0ZXIgdG8gZXZlcnkgbWV0aG9kIGludm9rZWQKICBvbiBhIHN0YXRlLgoK
        ICBUaGUgc3RhdGUgbWFuYWdlciBwYXNzZWQgYXMgdGhlIGZpcnN0IHBhcmFt
        ZXRlciBpcyB3aGVyZSB5b3Ugc2hvdWxkIHN0YXNoCiAgc3RhdGUgYWJvdXQg
        dGhlIHJlY29yZCBpZiBuZWVkZWQ7IHlvdSBzaG91bGQgbmV2ZXIgc3RvcmUg
        ZGF0YSBvbiB0aGUgc3RhdGUKICBvYmplY3QgaXRzZWxmLiBJZiB5b3UgbmVl
        ZCBhY2Nlc3MgdG8gdGhlIHJlY29yZCBiZWluZyBhY3RlZCBvbiwgeW91IGNh
        bgogIHJldHJpZXZlIHRoZSBzdGF0ZSBtYW5hZ2VyJ3MgYHJlY29yZGAgcHJv
        cGVydHkuIEZvciBleGFtcGxlLCBpZiB5b3UgaGFkCiAgYW4gZXZlbnQgaGFu
        ZGxlciBgbXlFdmVudGA6CgogICAgICBteUV2ZW50OiBmdW5jdGlvbihtYW5h
        Z2VyKSB7CiAgICAgICAgdmFyIHJlY29yZCA9IG1hbmFnZXIuZ2V0KCdyZWNv
        cmQnKTsKICAgICAgICByZWNvcmQuZG9Tb21ldGhpbmcoKTsKICAgICAgfQoK
        ICBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBzdGF0ZSBtYW5hZ2VycyBp
        biBnZW5lcmFsLCBzZWUgdGhlIEVtYmVyLmpzCiAgZG9jdW1lbnRhdGlvbiBv
        biBgRW1iZXIuU3RhdGVNYW5hZ2VyYC4KCiAgIyMjIEV2ZW50cywgRmxhZ3Ms
        IGFuZCBUcmFuc2l0aW9ucwoKICBBIHN0YXRlIG1heSBpbXBsZW1lbnQgemVy
        byBvciBtb3JlIGV2ZW50cywgZmxhZ3MsIG9yIHRyYW5zaXRpb25zLgoKICAj
        IyMjIEV2ZW50cwoKICBFdmVudHMgYXJlIG5hbWVkIGZ1bmN0aW9ucyB0aGF0
        IGFyZSBpbnZva2VkIHdoZW4gc2VudCB0byBhIHJlY29yZC4gVGhlCiAgc3Rh
        dGUgbWFuYWdlciB3aWxsIGZpcnN0IGxvb2sgZm9yIGEgbWV0aG9kIHdpdGgg
        dGhlIGdpdmVuIG5hbWUgb24gdGhlCiAgY3VycmVudCBzdGF0ZS4gSWYgbm8g
        bWV0aG9kIGlzIGZvdW5kLCBpdCB3aWxsIHNlYXJjaCB0aGUgY3VycmVudCBz
        dGF0ZSdzCiAgcGFyZW50LCBhbmQgdGhlbiBpdHMgZ3JhbmRwYXJlbnQsIGFu
        ZCBzbyBvbiB1bnRpbCByZWFjaGluZyB0aGUgdG9wIG9mCiAgdGhlIGhpZXJh
        cmNoeS4gSWYgdGhlIHJvb3QgaXMgcmVhY2hlZCB3aXRob3V0IGFuIGV2ZW50
        IGhhbmRsZXIgYmVpbmcgZm91bmQsCiAgYW4gZXhjZXB0aW9uIHdpbGwgYmUg
        cmFpc2VkLiBUaGlzIGNhbiBiZSB2ZXJ5IGhlbHBmdWwgd2hlbiBkZWJ1Z2dp
        bmcgbmV3CiAgZmVhdHVyZXMuCgogIEhlcmUncyBhbiBleGFtcGxlIGltcGxl
        bWVudGF0aW9uIG9mIGEgc3RhdGUgd2l0aCBhIGBteUV2ZW50YCBldmVudCBo
        YW5kbGVyOgoKICAgICAgYVN0YXRlOiBEUy5TdGF0ZS5jcmVhdGUoewogICAg
        ICAgIG15RXZlbnQ6IGZ1bmN0aW9uKG1hbmFnZXIsIHBhcmFtKSB7CiAgICAg
        ICAgICBjb25zb2xlLmxvZygiUmVjZWl2ZWQgbXlFdmVudCB3aXRoICIrcGFy
        YW0pOwogICAgICAgIH0KICAgICAgfSkKCiAgVG8gdHJpZ2dlciB0aGlzIGV2
        ZW50OgoKICAgICAgcmVjb3JkLnNlbmQoJ215RXZlbnQnLCAnZm9vJyk7CiAg
        ICAgIC8vPT4gIlJlY2VpdmVkIG15RXZlbnQgd2l0aCBmb28iCgogIE5vdGUg
        dGhhdCBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgY2FuIGJlIHNlbnQgdG8gYSBy
        ZWNvcmQncyBgc2VuZCgpYCBtZXRob2QsCiAgd2hpY2ggd2lsbCBiZSBwYXNz
        ZWQgYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXIgdG8gdGhlIGV2ZW50IGhhbmRs
        ZXIuCgogIEV2ZW50cyBzaG91bGQgdHJhbnNpdGlvbiB0byBhIGRpZmZlcmVu
        dCBzdGF0ZSBpZiBhcHByb3ByaWF0ZS4gVGhpcyBjYW4gYmUKICBkb25lIGJ5
        IGNhbGxpbmcgdGhlIHN0YXRlIG1hbmFnZXIncyBgdHJhbnNpdGlvblRvKClg
        IG1ldGhvZCB3aXRoIGEgcGF0aCB0byB0aGUKICBkZXNpcmVkIHN0YXRlLiBU
        aGUgc3RhdGUgbWFuYWdlciB3aWxsIGF0dGVtcHQgdG8gcmVzb2x2ZSB0aGUg
        c3RhdGUgcGF0aAogIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHN0YXRlLiBJ
        ZiBubyBzdGF0ZSBpcyBmb3VuZCBhdCB0aGF0IHBhdGgsIGl0IHdpbGwKICBh
        dHRlbXB0IHRvIHJlc29sdmUgaXQgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQg
        c3RhdGUncyBwYXJlbnQsIGFuZCB0aGVuIGl0cwogIHBhcmVudCwgYW5kIHNv
        IG9uIHVudGlsIHRoZSByb290IGlzIHJlYWNoZWQuIEZvciBleGFtcGxlLCBp
        bWFnaW5lIGEgaGllcmFyY2h5CiAgbGlrZSB0aGlzOgoKICAgICAgKiBjcmVh
        dGVkCiAgICAgICAgKiBzdGFydCA8LS0gY3VycmVudFN0YXRlCiAgICAgICAg
        KiBpbkZsaWdodAogICAgICAqIHVwZGF0ZWQKICAgICAgICAqIGluRmxpZ2h0
        CgogIElmIHdlIGFyZSBjdXJyZW50bHkgaW4gdGhlIGBzdGFydGAgc3RhdGUs
        IGNhbGxpbmcKICBgdHJhbnNpdGlvblRvKCdpbkZsaWdodCcpYCB3b3VsZCB0
        cmFuc2l0aW9uIHRvIHRoZSBgY3JlYXRlZC5pbkZsaWdodGAgc3RhdGUsCiAg
        d2hpbGUgY2FsbGluZyBgdHJhbnNpdGlvblRvKCd1cGRhdGVkLmluRmxpZ2h0
        JylgIHdvdWxkIHRyYW5zaXRpb24gdG8KICB0aGUgYHVwZGF0ZWQuaW5GbGln
        aHRgIHN0YXRlLgoKICBSZW1lbWJlciB0aGF0ICpvbmx5IGV2ZW50cyogc2hv
        dWxkIGV2ZXIgY2F1c2UgYSBzdGF0ZSB0cmFuc2l0aW9uLiBZb3Ugc2hvdWxk
        CiAgbmV2ZXIgY2FsbCBgdHJhbnNpdGlvblRvKClgIGZyb20gb3V0c2lkZSBh
        IHN0YXRlJ3MgZXZlbnQgaGFuZGxlci4gSWYgeW91IGFyZQogIHRlbXB0ZWQg
        dG8gZG8gc28sIGNyZWF0ZSBhIG5ldyBldmVudCBhbmQgc2VuZCB0aGF0IHRv
        IHRoZSBzdGF0ZSBtYW5hZ2VyLgoKICAjIyMjIEZsYWdzCgogIEZsYWdzIGFy
        ZSBCb29sZWFuIHZhbHVlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIGludHJvc3Bl
        Y3QgYSByZWNvcmQncyBjdXJyZW50CiAgc3RhdGUgaW4gYSBtb3JlIHVzZXIt
        ZnJpZW5kbHkgd2F5IHRoYW4gZXhhbWluaW5nIGl0cyBzdGF0ZSBwYXRoLiBG
        b3IgZXhhbXBsZSwKICBpbnN0ZWFkIG9mIGRvaW5nIHRoaXM6CgogICAgICB2
        YXIgc3RhdGVQYXRoID0gcmVjb3JkLmdldCgnc3RhdGVNYW5hZ2VyLmN1cnJl
        bnRQYXRoJyk7CiAgICAgIGlmIChzdGF0ZVBhdGggPT09ICdjcmVhdGVkLmlu
        RmxpZ2h0JykgewogICAgICAgIGRvU29tZXRoaW5nKCk7CiAgICAgIH0KCiAg
        WW91IGNhbiBzYXk6CgogICAgICBpZiAocmVjb3JkLmdldCgnaXNOZXcnKSAm
        JiByZWNvcmQuZ2V0KCdpc1NhdmluZycpKSB7CiAgICAgICAgZG9Tb21ldGhp
        bmcoKTsKICAgICAgfQoKICBJZiB5b3VyIHN0YXRlIGRvZXMgbm90IHNldCBh
        IHZhbHVlIGZvciBhIGdpdmVuIGZsYWcsIHRoZSB2YWx1ZSB3aWxsCiAgYmUg
        aW5oZXJpdGVkIGZyb20gaXRzIHBhcmVudCAob3IgdGhlIGZpcnN0IHBsYWNl
        IGluIHRoZSBzdGF0ZSBoaWVyYXJjaHkKICB3aGVyZSBpdCBpcyBkZWZpbmVk
        KS4KCiAgVGhlIGN1cnJlbnQgc2V0IG9mIGZsYWdzIGFyZSBkZWZpbmVkIGJl
        bG93LiBJZiB5b3Ugd2FudCB0byBhZGQgYSBuZXcgZmxhZywKICBpbiBhZGRp
        dGlvbiB0byB0aGUgYXJlYSBiZWxvdywgeW91IHdpbGwgYWxzbyBuZWVkIHRv
        IGRlY2xhcmUgaXQgaW4gdGhlCiAgYERTLk1vZGVsYCBjbGFzcy4KCiAgIyMj
        IyBUcmFuc2l0aW9ucwoKICBUcmFuc2l0aW9ucyBhcmUgbGlrZSBldmVudCBo
        YW5kbGVycyBidXQgYXJlIGNhbGxlZCBhdXRvbWF0aWNhbGx5IHVwb24KICBl
        bnRlcmluZyBvciBleGl0aW5nIGEgc3RhdGUuIFRvIGltcGxlbWVudCBhIHRy
        YW5zaXRpb24sIGp1c3QgY2FsbCBhIG1ldGhvZAogIGVpdGhlciBgZW50ZXJg
        IG9yIGBleGl0YDoKCiAgICAgIG15U3RhdGU6IERTLlN0YXRlLmNyZWF0ZSh7
        CiAgICAgICAgLy8gR2V0cyBjYWxsZWQgYXV0b21hdGljYWxseSB3aGVuIGVu
        dGVyaW5nCiAgICAgICAgLy8gdGhpcyBzdGF0ZS4KICAgICAgICBlbnRlcjog
        ZnVuY3Rpb24obWFuYWdlcikgewogICAgICAgICAgY29uc29sZS5sb2coIkVu
        dGVyZWQgbXlTdGF0ZSIpOwogICAgICAgIH0KICAgICAgfSkKCiAgTm90ZSB0
        aGF0IGVudGVyIGFuZCBleGl0IGV2ZW50cyBhcmUgY2FsbGVkIG9uY2UgcGVy
        IHRyYW5zaXRpb24uIElmIHRoZQogIGN1cnJlbnQgc3RhdGUgY2hhbmdlcywg
        YnV0IGNoYW5nZXMgdG8gYW5vdGhlciBjaGlsZCBzdGF0ZSBvZiB0aGUgcGFy
        ZW50LAogIHRoZSB0cmFuc2l0aW9uIGV2ZW50IG9uIHRoZSBwYXJlbnQgd2ls
        bCBub3QgYmUgdHJpZ2dlcmVkLgoqLwoKdmFyIGhhc0RlZmluZWRQcm9wZXJ0
        aWVzID0gZnVuY3Rpb24ob2JqZWN0KSB7CiAgLy8gSWdub3JlIGludGVybmFs
        IHByb3BlcnR5IGRlZmluZWQgYnkgc2ltdWxhdGVkIGBFbWJlci5jcmVhdGVg
        LgogIHZhciBuYW1lcyA9IEVtYmVyLmtleXMob2JqZWN0KTsKICB2YXIgaSwg
        bCwgbmFtZTsKICBmb3IgKGkgPSAwLCBsID0gbmFtZXMubGVuZ3RoOyBpIDwg
        bDsgaSsrICkgewogICAgbmFtZSA9IG5hbWVzW2ldOwogICAgaWYgKG9iamVj
        dC5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBvYmplY3RbbmFtZV0pIHsgcmV0
        dXJuIHRydWU7IH0KICB9CgogIHJldHVybiBmYWxzZTsKfTsKCnZhciBkaWRT
        ZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uKHJlY29yZCwgY29udGV4dCkgewogIGlm
        IChjb250ZXh0LnZhbHVlID09PSBjb250ZXh0Lm9yaWdpbmFsVmFsdWUpIHsK
        ICAgIGRlbGV0ZSByZWNvcmQuX2F0dHJpYnV0ZXNbY29udGV4dC5uYW1lXTsK
        ICAgIHJlY29yZC5zZW5kKCdwcm9wZXJ0eVdhc1Jlc2V0JywgY29udGV4dC5u
        YW1lKTsKICB9IGVsc2UgaWYgKGNvbnRleHQudmFsdWUgIT09IGNvbnRleHQu
        b2xkVmFsdWUpIHsKICAgIHJlY29yZC5zZW5kKCdiZWNvbWVEaXJ0eScpOwog
        IH0KCiAgcmVjb3JkLnVwZGF0ZVJlY29yZEFycmF5c0xhdGVyKCk7Cn07Cgov
        LyBJbXBsZW1lbnRhdGlvbiBub3RlczoKLy8KLy8gRWFjaCBzdGF0ZSBoYXMg
        YSBib29sZWFuIHZhbHVlIGZvciBhbGwgb2YgdGhlIGZvbGxvd2luZyBmbGFn
        czoKLy8KLy8gKiBpc0xvYWRlZDogVGhlIHJlY29yZCBoYXMgYSBwb3B1bGF0
        ZWQgYGRhdGFgIHByb3BlcnR5LiBXaGVuIGEKLy8gICByZWNvcmQgaXMgbG9h
        ZGVkIHZpYSBgc3RvcmUuZmluZGAsIGBpc0xvYWRlZGAgaXMgZmFsc2UKLy8g
        ICB1bnRpbCB0aGUgYWRhcHRlciBzZXRzIGl0LiBXaGVuIGEgcmVjb3JkIGlz
        IGNyZWF0ZWQgbG9jYWxseSwKLy8gICBpdHMgYGlzTG9hZGVkYCBwcm9wZXJ0
        eSBpcyBhbHdheXMgdHJ1ZS4KLy8gKiBpc0RpcnR5OiBUaGUgcmVjb3JkIGhh
        cyBsb2NhbCBjaGFuZ2VzIHRoYXQgaGF2ZSBub3QgeWV0IGJlZW4KLy8gICBz
        YXZlZCBieSB0aGUgYWRhcHRlci4gVGhpcyBpbmNsdWRlcyByZWNvcmRzIHRo
        YXQgaGF2ZSBiZWVuCi8vICAgY3JlYXRlZCAoYnV0IG5vdCB5ZXQgc2F2ZWQp
        IG9yIGRlbGV0ZWQuCi8vICogaXNTYXZpbmc6IFRoZSByZWNvcmQgaGFzIGJl
        ZW4gY29tbWl0dGVkLCBidXQKLy8gICB0aGUgYWRhcHRlciBoYXMgbm90IHll
        dCBhY2tub3dsZWRnZWQgdGhhdCB0aGUgY2hhbmdlcyBoYXZlCi8vICAgYmVl
        biBwZXJzaXN0ZWQgdG8gdGhlIGJhY2tlbmQuCi8vICogaXNEZWxldGVkOiBU
        aGUgcmVjb3JkIHdhcyBtYXJrZWQgZm9yIGRlbGV0aW9uLiBXaGVuIGBpc0Rl
        bGV0ZWRgCi8vICAgaXMgdHJ1ZSBhbmQgYGlzRGlydHlgIGlzIHRydWUsIHRo
        ZSByZWNvcmQgaXMgZGVsZXRlZCBsb2NhbGx5Ci8vICAgYnV0IHRoZSBkZWxl
        dGlvbiB3YXMgbm90IHlldCBwZXJzaXN0ZWQuIFdoZW4gYGlzU2F2aW5nYCBp
        cwovLyAgIHRydWUsIHRoZSBjaGFuZ2UgaXMgaW4tZmxpZ2h0LiBXaGVuIGJv
        dGggYGlzRGlydHlgIGFuZAovLyAgIGBpc1NhdmluZ2AgYXJlIGZhbHNlLCB0
        aGUgY2hhbmdlIGhhcyBwZXJzaXN0ZWQuCi8vICogaXNFcnJvcjogVGhlIGFk
        YXB0ZXIgcmVwb3J0ZWQgdGhhdCBpdCB3YXMgdW5hYmxlIHRvIHNhdmUKLy8g
        ICBsb2NhbCBjaGFuZ2VzIHRvIHRoZSBiYWNrZW5kLiBUaGlzIG1heSBhbHNv
        IHJlc3VsdCBpbiB0aGUKLy8gICByZWNvcmQgaGF2aW5nIGl0cyBgaXNWYWxp
        ZGAgcHJvcGVydHkgYmVjb21lIGZhbHNlIGlmIHRoZQovLyAgIGFkYXB0ZXIg
        cmVwb3J0ZWQgdGhhdCBzZXJ2ZXItc2lkZSB2YWxpZGF0aW9ucyBmYWlsZWQu
        Ci8vICogaXNOZXc6IFRoZSByZWNvcmQgd2FzIGNyZWF0ZWQgb24gdGhlIGNs
        aWVudCBhbmQgdGhlIGFkYXB0ZXIKLy8gICBkaWQgbm90IHlldCByZXBvcnQg
        dGhhdCBpdCB3YXMgc3VjY2Vzc2Z1bGx5IHNhdmVkLgovLyAqIGlzVmFsaWQ6
        IE5vIGNsaWVudC1zaWRlIHZhbGlkYXRpb25zIGhhdmUgZmFpbGVkIGFuZCB0
        aGUKLy8gICBhZGFwdGVyIGRpZCBub3QgcmVwb3J0IGFueSBzZXJ2ZXItc2lk
        ZSB2YWxpZGF0aW9uIGZhaWx1cmVzLgoKLy8gVGhlIGRpcnR5IHN0YXRlIGlz
        IGEgYWJzdHJhY3Qgc3RhdGUgd2hvc2UgZnVuY3Rpb25hbGl0eSBpcwovLyBz
        aGFyZWQgYmV0d2VlbiB0aGUgYGNyZWF0ZWRgIGFuZCBgdXBkYXRlZGAgc3Rh
        dGVzLgovLwovLyBUaGUgZGVsZXRlZCBzdGF0ZSBzaGFyZXMgdGhlIGBpc0Rp
        cnR5YCBmbGFnIHdpdGggdGhlCi8vIHN1YmNsYXNzZXMgb2YgYERpcnR5U3Rh
        dGVgLCBidXQgd2l0aCBhIHZlcnkgZGlmZmVyZW50Ci8vIGltcGxlbWVudGF0
        aW9uLgovLwovLyBEaXJ0eSBzdGF0ZXMgaGF2ZSB0aHJlZSBjaGlsZCBzdGF0
        ZXM6Ci8vCi8vIGB1bmNvbW1pdHRlZGA6IHRoZSBzdG9yZSBoYXMgbm90IHll
        dCBoYW5kZWQgb2ZmIHRoZSByZWNvcmQKLy8gICB0byBiZSBzYXZlZC4KLy8g
        YGluRmxpZ2h0YDogdGhlIHN0b3JlIGhhcyBoYW5kZWQgb2ZmIHRoZSByZWNv
        cmQgdG8gYmUgc2F2ZWQsCi8vICAgYnV0IHRoZSBhZGFwdGVyIGhhcyBub3Qg
        eWV0IGFja25vd2xlZGdlZCBzdWNjZXNzLgovLyBgaW52YWxpZGA6IHRoZSBy
        ZWNvcmQgaGFzIGludmFsaWQgaW5mb3JtYXRpb24gYW5kIGNhbm5vdCBiZQov
        LyAgIHNlbmQgdG8gdGhlIGFkYXB0ZXIgeWV0Lgp2YXIgRGlydHlTdGF0ZSA9
        IHsKICBpbml0aWFsU3RhdGU6ICd1bmNvbW1pdHRlZCcsCgogIC8vIEZMQUdT
        CiAgaXNEaXJ0eTogdHJ1ZSwKCiAgLy8gU1VCU1RBVEVTCgogIC8vIFdoZW4g
        YSByZWNvcmQgZmlyc3QgYmVjb21lcyBkaXJ0eSwgaXQgaXMgYHVuY29tbWl0
        dGVkYC4KICAvLyBUaGlzIG1lYW5zIHRoYXQgdGhlcmUgYXJlIGxvY2FsIHBl
        bmRpbmcgY2hhbmdlcywgYnV0IHRoZXkKICAvLyBoYXZlIG5vdCB5ZXQgYmVn
        dW4gdG8gYmUgc2F2ZWQsIGFuZCBhcmUgbm90IGludmFsaWQuCiAgdW5jb21t
        aXR0ZWQ6IHsKICAgIC8vIEVWRU5UUwogICAgZGlkU2V0UHJvcGVydHk6IGRp
        ZFNldFByb3BlcnR5LAoKICAgIHByb3BlcnR5V2FzUmVzZXQ6IGZ1bmN0aW9u
        KHJlY29yZCwgbmFtZSkgewogICAgICB2YXIgc3RpbGxEaXJ0eSA9IGZhbHNl
        OwoKICAgICAgZm9yICh2YXIgcHJvcCBpbiByZWNvcmQuX2F0dHJpYnV0ZXMp
        IHsKICAgICAgICBzdGlsbERpcnR5ID0gdHJ1ZTsKICAgICAgICBicmVhazsK
        ICAgICAgfQoKICAgICAgaWYgKCFzdGlsbERpcnR5KSB7IHJlY29yZC5zZW5k
        KCdyb2xsZWRCYWNrJyk7IH0KICAgIH0sCgogICAgcHVzaGVkRGF0YTogRW1i
        ZXIuSywKCiAgICBiZWNvbWVEaXJ0eTogRW1iZXIuSywKCiAgICB3aWxsQ29t
        bWl0OiBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgcmVjb3JkLnRyYW5zaXRp
        b25UbygnaW5GbGlnaHQnKTsKICAgIH0sCgogICAgcmVsb2FkUmVjb3JkOiBm
        dW5jdGlvbihyZWNvcmQsIHJlc29sdmVyKSB7CiAgICAgIGdldChyZWNvcmQs
        ICdzdG9yZScpLnJlbG9hZFJlY29yZChyZWNvcmQsIHJlc29sdmVyKTsKICAg
        IH0sCgogICAgcm9sbGVkQmFjazogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAg
        IHJlY29yZC50cmFuc2l0aW9uVG8oJ2xvYWRlZC5zYXZlZCcpOwogICAgfSwK
        CiAgICBiZWNhbWVJbnZhbGlkOiBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAg
        cmVjb3JkLnRyYW5zaXRpb25UbygnaW52YWxpZCcpOwogICAgfSwKCiAgICBy
        b2xsYmFjazogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgIHJlY29yZC5yb2xs
        YmFjaygpOwogICAgfQogIH0sCgogIC8vIE9uY2UgYSByZWNvcmQgaGFzIGJl
        ZW4gaGFuZGVkIG9mZiB0byB0aGUgYWRhcHRlciB0byBiZQogIC8vIHNhdmVk
        LCBpdCBpcyBpbiB0aGUgJ2luIGZsaWdodCcgc3RhdGUuIENoYW5nZXMgdG8g
        dGhlCiAgLy8gcmVjb3JkIGNhbm5vdCBiZSBtYWRlIGR1cmluZyB0aGlzIHdp
        bmRvdy4KICBpbkZsaWdodDogewogICAgLy8gRkxBR1MKICAgIGlzU2F2aW5n
        OiB0cnVlLAoKICAgIC8vIEVWRU5UUwogICAgZGlkU2V0UHJvcGVydHk6IGRp
        ZFNldFByb3BlcnR5LAogICAgYmVjb21lRGlydHk6IEVtYmVyLkssCiAgICBw
        dXNoZWREYXRhOiBFbWJlci5LLAoKICAgIC8vIFRPRE86IE1vcmUgcm9idXN0
        IHNlbWFudGljcyBhcm91bmQgc2F2ZS13aGlsZS1pbi1mbGlnaHQKICAgIHdp
        bGxDb21taXQ6IEVtYmVyLkssCgogICAgZGlkQ29tbWl0OiBmdW5jdGlvbihy
        ZWNvcmQpIHsKICAgICAgdmFyIGRpcnR5VHlwZSA9IGdldCh0aGlzLCAnZGly
        dHlUeXBlJyk7CgogICAgICByZWNvcmQudHJhbnNpdGlvblRvKCdzYXZlZCcp
        OwogICAgICByZWNvcmQuc2VuZCgnaW52b2tlTGlmZWN5Y2xlQ2FsbGJhY2tz
        JywgZGlydHlUeXBlKTsKICAgIH0sCgogICAgYmVjYW1lSW52YWxpZDogZnVu
        Y3Rpb24ocmVjb3JkLCBlcnJvcnMpIHsKICAgICAgc2V0KHJlY29yZCwgJ2Vy
        cm9ycycsIGVycm9ycyk7CgogICAgICByZWNvcmQudHJhbnNpdGlvblRvKCdp
        bnZhbGlkJyk7CiAgICAgIHJlY29yZC5zZW5kKCdpbnZva2VMaWZlY3ljbGVD
        YWxsYmFja3MnKTsKICAgIH0sCgogICAgYmVjYW1lRXJyb3I6IGZ1bmN0aW9u
        KHJlY29yZCkgewogICAgICByZWNvcmQudHJhbnNpdGlvblRvKCd1bmNvbW1p
        dHRlZCcpOwogICAgICByZWNvcmQudHJpZ2dlckxhdGVyKCdiZWNhbWVFcnJv
        cicsIHJlY29yZCk7CiAgICB9CiAgfSwKCiAgLy8gQSByZWNvcmQgaXMgaW4g
        dGhlIGBpbnZhbGlkYCBzdGF0ZSB3aGVuIGl0cyBjbGllbnQtc2lkZQogIC8v
        IGludmFsaWRhdGlvbnMgaGF2ZSBmYWlsZWQsIG9yIGlmIHRoZSBhZGFwdGVy
        IGhhcyBpbmRpY2F0ZWQKICAvLyB0aGUgdGhlIHJlY29yZCBmYWlsZWQgc2Vy
        dmVyLXNpZGUgaW52YWxpZGF0aW9ucy4KICBpbnZhbGlkOiB7CiAgICAvLyBG
        TEFHUwogICAgaXNWYWxpZDogZmFsc2UsCgogICAgLy8gRVZFTlRTCiAgICBk
        ZWxldGVSZWNvcmQ6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICByZWNvcmQu
        dHJhbnNpdGlvblRvKCdkZWxldGVkLnVuY29tbWl0dGVkJyk7CiAgICAgIHJl
        Y29yZC5jbGVhclJlbGF0aW9uc2hpcHMoKTsKICAgIH0sCgogICAgZGlkU2V0
        UHJvcGVydHk6IGZ1bmN0aW9uKHJlY29yZCwgY29udGV4dCkgewogICAgICB2
        YXIgZXJyb3JzID0gZ2V0KHJlY29yZCwgJ2Vycm9ycycpLAogICAgICAgICAg
        a2V5ID0gY29udGV4dC5uYW1lOwoKICAgICAgc2V0KGVycm9ycywga2V5LCBu
        dWxsKTsKCiAgICAgIGlmICghaGFzRGVmaW5lZFByb3BlcnRpZXMoZXJyb3Jz
        KSkgewogICAgICAgIHJlY29yZC5zZW5kKCdiZWNhbWVWYWxpZCcpOwogICAg
        ICB9CgogICAgICBkaWRTZXRQcm9wZXJ0eShyZWNvcmQsIGNvbnRleHQpOwog
        ICAgfSwKCiAgICBiZWNvbWVEaXJ0eTogRW1iZXIuSywKCiAgICByb2xsYmFj
        azogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgIHJlY29yZC5zZW5kKCdiZWNh
        bWVWYWxpZCcpOwogICAgICByZWNvcmQuc2VuZCgncm9sbGJhY2snKTsKICAg
        IH0sCgogICAgYmVjYW1lVmFsaWQ6IGZ1bmN0aW9uKHJlY29yZCkgewogICAg
        ICByZWNvcmQudHJhbnNpdGlvblRvKCd1bmNvbW1pdHRlZCcpOwogICAgfSwK
        CiAgICBpbnZva2VMaWZlY3ljbGVDYWxsYmFja3M6IGZ1bmN0aW9uKHJlY29y
        ZCkgewogICAgICByZWNvcmQudHJpZ2dlckxhdGVyKCdiZWNhbWVJbnZhbGlk
        JywgcmVjb3JkKTsKICAgIH0KICB9Cn07CgovLyBUaGUgY3JlYXRlZCBhbmQg
        dXBkYXRlZCBzdGF0ZXMgYXJlIGNyZWF0ZWQgb3V0c2lkZSB0aGUgc3RhdGUK
        Ly8gY2hhcnQgc28gd2UgY2FuIHJlb3BlbiB0aGVpciBzdWJzdGF0ZXMgYW5k
        IGFkZCBtaXhpbnMgYXMKLy8gbmVjZXNzYXJ5LgoKZnVuY3Rpb24gZGVlcENs
        b25lKG9iamVjdCkgewogIHZhciBjbG9uZSA9IHt9LCB2YWx1ZTsKCiAgZm9y
        ICh2YXIgcHJvcCBpbiBvYmplY3QpIHsKICAgIHZhbHVlID0gb2JqZWN0W3By
        b3BdOwogICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVj
        dCcpIHsKICAgICAgY2xvbmVbcHJvcF0gPSBkZWVwQ2xvbmUodmFsdWUpOwog
        ICAgfSBlbHNlIHsKICAgICAgY2xvbmVbcHJvcF0gPSB2YWx1ZTsKICAgIH0K
        ICB9CgogIHJldHVybiBjbG9uZTsKfQoKZnVuY3Rpb24gbWl4aW4ob3JpZ2lu
        YWwsIGhhc2gpIHsKICBmb3IgKHZhciBwcm9wIGluIGhhc2gpIHsKICAgIG9y
        aWdpbmFsW3Byb3BdID0gaGFzaFtwcm9wXTsKICB9CgogIHJldHVybiBvcmln
        aW5hbDsKfQoKZnVuY3Rpb24gZGlydHlTdGF0ZShvcHRpb25zKSB7CiAgdmFy
        IG5ld1N0YXRlID0gZGVlcENsb25lKERpcnR5U3RhdGUpOwogIHJldHVybiBt
        aXhpbihuZXdTdGF0ZSwgb3B0aW9ucyk7Cn0KCnZhciBjcmVhdGVkU3RhdGUg
        PSBkaXJ0eVN0YXRlKHsKICBkaXJ0eVR5cGU6ICdjcmVhdGVkJywKCiAgLy8g
        RkxBR1MKICBpc05ldzogdHJ1ZQp9KTsKCmNyZWF0ZWRTdGF0ZS51bmNvbW1p
        dHRlZC5yb2xsZWRCYWNrID0gZnVuY3Rpb24ocmVjb3JkKSB7CiAgcmVjb3Jk
        LnRyYW5zaXRpb25UbygnZGVsZXRlZC5zYXZlZCcpOwp9OwoKdmFyIHVwZGF0
        ZWRTdGF0ZSA9IGRpcnR5U3RhdGUoewogIGRpcnR5VHlwZTogJ3VwZGF0ZWQn
        Cn0pOwoKY3JlYXRlZFN0YXRlLnVuY29tbWl0dGVkLmRlbGV0ZVJlY29yZCA9
        IGZ1bmN0aW9uKHJlY29yZCkgewogIHJlY29yZC5jbGVhclJlbGF0aW9uc2hp
        cHMoKTsKICByZWNvcmQudHJhbnNpdGlvblRvKCdkZWxldGVkLnNhdmVkJyk7
        Cn07CgpjcmVhdGVkU3RhdGUudW5jb21taXR0ZWQucm9sbGJhY2sgPSBmdW5j
        dGlvbihyZWNvcmQpIHsKICBEaXJ0eVN0YXRlLnVuY29tbWl0dGVkLnJvbGxi
        YWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgcmVjb3JkLnRyYW5zaXRp
        b25UbygnZGVsZXRlZC5zYXZlZCcpOwp9OwoKdXBkYXRlZFN0YXRlLnVuY29t
        bWl0dGVkLmRlbGV0ZVJlY29yZCA9IGZ1bmN0aW9uKHJlY29yZCkgewogIHJl
        Y29yZC50cmFuc2l0aW9uVG8oJ2RlbGV0ZWQudW5jb21taXR0ZWQnKTsKICBy
        ZWNvcmQuY2xlYXJSZWxhdGlvbnNoaXBzKCk7Cn07Cgp2YXIgUm9vdFN0YXRl
        ID0gewogIC8vIEZMQUdTCiAgaXNFbXB0eTogZmFsc2UsCiAgaXNMb2FkaW5n
        OiBmYWxzZSwKICBpc0xvYWRlZDogZmFsc2UsCiAgaXNEaXJ0eTogZmFsc2Us
        CiAgaXNTYXZpbmc6IGZhbHNlLAogIGlzRGVsZXRlZDogZmFsc2UsCiAgaXNO
        ZXc6IGZhbHNlLAogIGlzVmFsaWQ6IHRydWUsCgogIC8vIERFRkFVTFQgRVZF
        TlRTCgogIC8vIFRyeWluZyB0byByb2xsIGJhY2sgaWYgeW91J3JlIG5vdCBp
        biB0aGUgZGlydHkgc3RhdGUKICAvLyBkb2Vzbid0IGNoYW5nZSB5b3VyIHN0
        YXRlLiBGb3IgZXhhbXBsZSwgaWYgeW91J3JlIGluIHRoZQogIC8vIGluLWZs
        aWdodCBzdGF0ZSwgcm9sbGluZyBiYWNrIHRoZSByZWNvcmQgZG9lc24ndCBt
        b3ZlCiAgLy8geW91IG91dCBvZiB0aGUgaW4tZmxpZ2h0IHN0YXRlLgogIHJv
        bGxlZEJhY2s6IEVtYmVyLkssCgogIHByb3BlcnR5V2FzUmVzZXQ6IEVtYmVy
        LkssCgogIC8vIFNVQlNUQVRFUwoKICAvLyBBIHJlY29yZCBiZWdpbnMgaXRz
        IGxpZmVjeWNsZSBpbiB0aGUgYGVtcHR5YCBzdGF0ZS4KICAvLyBJZiBpdHMg
        ZGF0YSB3aWxsIGNvbWUgZnJvbSB0aGUgYWRhcHRlciwgaXQgd2lsbAogIC8v
        IHRyYW5zaXRpb24gaW50byB0aGUgYGxvYWRpbmdgIHN0YXRlLiBPdGhlcndp
        c2UsIGlmCiAgLy8gdGhlIHJlY29yZCBpcyBiZWluZyBjcmVhdGVkIG9uIHRo
        ZSBjbGllbnQsIGl0IHdpbGwKICAvLyB0cmFuc2l0aW9uIGludG8gdGhlIGBj
        cmVhdGVkYCBzdGF0ZS4KICBlbXB0eTogewogICAgaXNFbXB0eTogdHJ1ZSwK
        CiAgICAvLyBFVkVOVFMKICAgIGxvYWRpbmdEYXRhOiBmdW5jdGlvbihyZWNv
        cmQsIHByb21pc2UpIHsKICAgICAgcmVjb3JkLl9sb2FkaW5nUHJvbWlzZSA9
        IHByb21pc2U7CiAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ2xvYWRpbmcn
        KTsKICAgIH0sCgogICAgbG9hZGVkRGF0YTogZnVuY3Rpb24ocmVjb3JkKSB7
        CiAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ2xvYWRlZC5jcmVhdGVkLnVu
        Y29tbWl0dGVkJyk7CgogICAgICByZWNvcmQuc3VzcGVuZFJlbGF0aW9uc2hp
        cE9ic2VydmVycyhmdW5jdGlvbigpIHsKICAgICAgICByZWNvcmQubm90aWZ5
        UHJvcGVydHlDaGFuZ2UoJ2RhdGEnKTsKICAgICAgfSk7CiAgICB9LAoKICAg
        IHB1c2hlZERhdGE6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICByZWNvcmQu
        dHJhbnNpdGlvblRvKCdsb2FkZWQuc2F2ZWQnKTsKICAgICAgcmVjb3JkLnRy
        aWdnZXJMYXRlcignZGlkTG9hZCcpOwogICAgfQogIH0sCgogIC8vIEEgcmVj
        b3JkIGVudGVycyB0aGlzIHN0YXRlIHdoZW4gdGhlIHN0b3JlIGFza2VzCiAg
        Ly8gdGhlIGFkYXB0ZXIgZm9yIGl0cyBkYXRhLiBJdCByZW1haW5zIGluIHRo
        aXMgc3RhdGUKICAvLyB1bnRpbCB0aGUgYWRhcHRlciBwcm92aWRlcyB0aGUg
        cmVxdWVzdGVkIGRhdGEuCiAgLy8KICAvLyBVc3VhbGx5LCB0aGlzIHByb2Nl
        c3MgaXMgYXN5bmNocm9ub3VzLCB1c2luZyBhbgogIC8vIFhIUiB0byByZXRy
        aWV2ZSB0aGUgZGF0YS4KICBsb2FkaW5nOiB7CiAgICAvLyBGTEFHUwogICAg
        aXNMb2FkaW5nOiB0cnVlLAoKICAgIGV4aXQ6IGZ1bmN0aW9uKHJlY29yZCkg
        ewogICAgICByZWNvcmQuX2xvYWRpbmdQcm9taXNlID0gbnVsbDsKICAgIH0s
        CgogICAgLy8gRVZFTlRTCiAgICBwdXNoZWREYXRhOiBmdW5jdGlvbihyZWNv
        cmQpIHsKICAgICAgcmVjb3JkLnRyYW5zaXRpb25UbygnbG9hZGVkLnNhdmVk
        Jyk7CiAgICAgIHJlY29yZC50cmlnZ2VyTGF0ZXIoJ2RpZExvYWQnKTsKICAg
        ICAgc2V0KHJlY29yZCwgJ2lzRXJyb3InLCBmYWxzZSk7CiAgICB9LAoKICAg
        IGJlY2FtZUVycm9yOiBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgcmVjb3Jk
        LnRyaWdnZXJMYXRlcignYmVjYW1lRXJyb3InLCByZWNvcmQpOwogICAgfSwK
        CiAgICBub3RGb3VuZDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgIHJlY29y
        ZC50cmFuc2l0aW9uVG8oJ2VtcHR5Jyk7CiAgICB9CiAgfSwKCiAgLy8gQSBy
        ZWNvcmQgZW50ZXJzIHRoaXMgc3RhdGUgd2hlbiBpdHMgZGF0YSBpcyBwb3B1
        bGF0ZWQuCiAgLy8gTW9zdCBvZiBhIHJlY29yZCdzIGxpZmVjeWNsZSBpcyBz
        cGVudCBpbnNpZGUgc3Vic3RhdGVzCiAgLy8gb2YgdGhlIGBsb2FkZWRgIHN0
        YXRlLgogIGxvYWRlZDogewogICAgaW5pdGlhbFN0YXRlOiAnc2F2ZWQnLAoK
        ICAgIC8vIEZMQUdTCiAgICBpc0xvYWRlZDogdHJ1ZSwKCiAgICAvLyBTVUJT
        VEFURVMKCiAgICAvLyBJZiB0aGVyZSBhcmUgbm8gbG9jYWwgY2hhbmdlcyB0
        byBhIHJlY29yZCwgaXQgcmVtYWlucwogICAgLy8gaW4gdGhlIGBzYXZlZGAg
        c3RhdGUuCiAgICBzYXZlZDogewogICAgICBzZXR1cDogZnVuY3Rpb24ocmVj
        b3JkKSB7CiAgICAgICAgdmFyIGF0dHJzID0gcmVjb3JkLl9hdHRyaWJ1dGVz
        LAogICAgICAgICAgICBpc0RpcnR5ID0gZmFsc2U7CgogICAgICAgIGZvciAo
        dmFyIHByb3AgaW4gYXR0cnMpIHsKICAgICAgICAgIGlmIChhdHRycy5oYXNP
        d25Qcm9wZXJ0eShwcm9wKSkgewogICAgICAgICAgICBpc0RpcnR5ID0gdHJ1
        ZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQoK
        ICAgICAgICBpZiAoaXNEaXJ0eSkgewogICAgICAgICAgcmVjb3JkLmFkYXB0
        ZXJEaWREaXJ0eSgpOwogICAgICAgIH0KICAgICAgfSwKCiAgICAgIC8vIEVW
        RU5UUwogICAgICBkaWRTZXRQcm9wZXJ0eTogZGlkU2V0UHJvcGVydHksCgog
        ICAgICBwdXNoZWREYXRhOiBFbWJlci5LLAoKICAgICAgYmVjb21lRGlydHk6
        IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICAgIHJlY29yZC50cmFuc2l0aW9u
        VG8oJ3VwZGF0ZWQudW5jb21taXR0ZWQnKTsKICAgICAgfSwKCiAgICAgIHdp
        bGxDb21taXQ6IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICAgIHJlY29yZC50
        cmFuc2l0aW9uVG8oJ3VwZGF0ZWQuaW5GbGlnaHQnKTsKICAgICAgfSwKCiAg
        ICAgIHJlbG9hZFJlY29yZDogZnVuY3Rpb24ocmVjb3JkLCByZXNvbHZlcikg
        ewogICAgICAgIGdldChyZWNvcmQsICdzdG9yZScpLnJlbG9hZFJlY29yZChy
        ZWNvcmQsIHJlc29sdmVyKTsKICAgICAgfSwKCiAgICAgIGRlbGV0ZVJlY29y
        ZDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgICAgcmVjb3JkLnRyYW5zaXRp
        b25UbygnZGVsZXRlZC51bmNvbW1pdHRlZCcpOwogICAgICAgIHJlY29yZC5j
        bGVhclJlbGF0aW9uc2hpcHMoKTsKICAgICAgfSwKCiAgICAgIHVubG9hZFJl
        Y29yZDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgICAgLy8gY2xlYXIgcmVs
        YXRpb25zaGlwcyBiZWZvcmUgbW92aW5nIHRvIGRlbGV0ZWQgc3RhdGUKICAg
        ICAgICAvLyBvdGhlcndpc2UgaXQgZmFpbHMKICAgICAgICByZWNvcmQuY2xl
        YXJSZWxhdGlvbnNoaXBzKCk7CiAgICAgICAgcmVjb3JkLnRyYW5zaXRpb25U
        bygnZGVsZXRlZC5zYXZlZCcpOwogICAgICB9LAoKICAgICAgZGlkQ29tbWl0
        OiBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgICByZWNvcmQuc2VuZCgnaW52
        b2tlTGlmZWN5Y2xlQ2FsbGJhY2tzJywgZ2V0KHJlY29yZCwgJ2xhc3REaXJ0
        eVR5cGUnKSk7CiAgICAgIH0sCgogICAgfSwKCiAgICAvLyBBIHJlY29yZCBp
        cyBpbiB0aGlzIHN0YXRlIGFmdGVyIGl0IGhhcyBiZWVuIGxvY2FsbHkKICAg
        IC8vIGNyZWF0ZWQgYnV0IGJlZm9yZSB0aGUgYWRhcHRlciBoYXMgaW5kaWNh
        dGVkIHRoYXQKICAgIC8vIGl0IGhhcyBiZWVuIHNhdmVkLgogICAgY3JlYXRl
        ZDogY3JlYXRlZFN0YXRlLAoKICAgIC8vIEEgcmVjb3JkIGlzIGluIHRoaXMg
        c3RhdGUgaWYgaXQgaGFzIGFscmVhZHkgYmVlbgogICAgLy8gc2F2ZWQgdG8g
        dGhlIHNlcnZlciwgYnV0IHRoZXJlIGFyZSBuZXcgbG9jYWwgY2hhbmdlcwog
        ICAgLy8gdGhhdCBoYXZlIG5vdCB5ZXQgYmVlbiBzYXZlZC4KICAgIHVwZGF0
        ZWQ6IHVwZGF0ZWRTdGF0ZQogIH0sCgogIC8vIEEgcmVjb3JkIGlzIGluIHRo
        aXMgc3RhdGUgaWYgaXQgd2FzIGRlbGV0ZWQgZnJvbSB0aGUgc3RvcmUuCiAg
        ZGVsZXRlZDogewogICAgaW5pdGlhbFN0YXRlOiAndW5jb21taXR0ZWQnLAog
        ICAgZGlydHlUeXBlOiAnZGVsZXRlZCcsCgogICAgLy8gRkxBR1MKICAgIGlz
        RGVsZXRlZDogdHJ1ZSwKICAgIGlzTG9hZGVkOiB0cnVlLAogICAgaXNEaXJ0
        eTogdHJ1ZSwKCiAgICAvLyBUUkFOU0lUSU9OUwogICAgc2V0dXA6IGZ1bmN0
        aW9uKHJlY29yZCkgewogICAgICB2YXIgc3RvcmUgPSBnZXQocmVjb3JkLCAn
        c3RvcmUnKTsKCiAgICAgIHN0b3JlLnJlY29yZEFycmF5TWFuYWdlci5yZW1v
        dmUocmVjb3JkKTsKICAgIH0sCgogICAgLy8gU1VCU1RBVEVTCgogICAgLy8g
        V2hlbiBhIHJlY29yZCBpcyBkZWxldGVkLCBpdCBlbnRlcnMgdGhlIGBzdGFy
        dGAKICAgIC8vIHN0YXRlLiBJdCB3aWxsIGV4aXQgdGhpcyBzdGF0ZSB3aGVu
        IHRoZSByZWNvcmQKICAgIC8vIHN0YXJ0cyB0byBjb21taXQuCiAgICB1bmNv
        bW1pdHRlZDogewoKICAgICAgLy8gRVZFTlRTCgogICAgICB3aWxsQ29tbWl0
        OiBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgICByZWNvcmQudHJhbnNpdGlv
        blRvKCdpbkZsaWdodCcpOwogICAgICB9LAoKICAgICAgcm9sbGJhY2s6IGZ1
        bmN0aW9uKHJlY29yZCkgewogICAgICAgIHJlY29yZC5yb2xsYmFjaygpOwog
        ICAgICB9LAoKICAgICAgYmVjb21lRGlydHk6IEVtYmVyLkssCiAgICAgIGRl
        bGV0ZVJlY29yZDogRW1iZXIuSywKCiAgICAgIHJvbGxlZEJhY2s6IGZ1bmN0
        aW9uKHJlY29yZCkgewogICAgICAgIHJlY29yZC50cmFuc2l0aW9uVG8oJ2xv
        YWRlZC5zYXZlZCcpOwogICAgICB9CiAgICB9LAoKICAgIC8vIEFmdGVyIGEg
        cmVjb3JkIHN0YXJ0cyBjb21taXR0aW5nLCBidXQKICAgIC8vIGJlZm9yZSB0
        aGUgYWRhcHRlciBpbmRpY2F0ZXMgdGhhdCB0aGUgZGVsZXRpb24KICAgIC8v
        IGhhcyBzYXZlZCB0byB0aGUgc2VydmVyLCBhIHJlY29yZCBpcyBpbiB0aGUK
        ICAgIC8vIGBpbkZsaWdodGAgc3Vic3RhdGUgb2YgYGRlbGV0ZWRgLgogICAg
        aW5GbGlnaHQ6IHsKICAgICAgLy8gRkxBR1MKICAgICAgaXNTYXZpbmc6IHRy
        dWUsCgogICAgICAvLyBFVkVOVFMKCiAgICAgIC8vIFRPRE86IE1vcmUgcm9i
        dXN0IHNlbWFudGljcyBhcm91bmQgc2F2ZS13aGlsZS1pbi1mbGlnaHQKICAg
        ICAgd2lsbENvbW1pdDogRW1iZXIuSywKICAgICAgZGlkQ29tbWl0OiBmdW5j
        dGlvbihyZWNvcmQpIHsKICAgICAgICByZWNvcmQudHJhbnNpdGlvblRvKCdz
        YXZlZCcpOwoKICAgICAgICByZWNvcmQuc2VuZCgnaW52b2tlTGlmZWN5Y2xl
        Q2FsbGJhY2tzJyk7CiAgICAgIH0sCgogICAgICBiZWNhbWVFcnJvcjogZnVu
        Y3Rpb24ocmVjb3JkKSB7CiAgICAgICAgcmVjb3JkLnRyYW5zaXRpb25Ubygn
        dW5jb21taXR0ZWQnKTsKICAgICAgICByZWNvcmQudHJpZ2dlckxhdGVyKCdi
        ZWNhbWVFcnJvcicsIHJlY29yZCk7CiAgICAgIH0KICAgIH0sCgogICAgLy8g
        T25jZSB0aGUgYWRhcHRlciBpbmRpY2F0ZXMgdGhhdCB0aGUgZGVsZXRpb24g
        aGFzCiAgICAvLyBiZWVuIHNhdmVkLCB0aGUgcmVjb3JkIGVudGVycyB0aGUg
        YHNhdmVkYCBzdWJzdGF0ZQogICAgLy8gb2YgYGRlbGV0ZWRgLgogICAgc2F2
        ZWQ6IHsKICAgICAgLy8gRkxBR1MKICAgICAgaXNEaXJ0eTogZmFsc2UsCgog
        ICAgICBzZXR1cDogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgICAgdmFyIHN0
        b3JlID0gZ2V0KHJlY29yZCwgJ3N0b3JlJyk7CiAgICAgICAgc3RvcmUuZGVt
        YXRlcmlhbGl6ZVJlY29yZChyZWNvcmQpOwogICAgICB9LAoKICAgICAgaW52
        b2tlTGlmZWN5Y2xlQ2FsbGJhY2tzOiBmdW5jdGlvbihyZWNvcmQpIHsKICAg
        ICAgICByZWNvcmQudHJpZ2dlckxhdGVyKCdkaWREZWxldGUnLCByZWNvcmQp
        OwogICAgICAgIHJlY29yZC50cmlnZ2VyTGF0ZXIoJ2RpZENvbW1pdCcsIHJl
        Y29yZCk7CiAgICAgIH0KICAgIH0KICB9LAoKICBpbnZva2VMaWZlY3ljbGVD
        YWxsYmFja3M6IGZ1bmN0aW9uKHJlY29yZCwgZGlydHlUeXBlKSB7CiAgICBp
        ZiAoZGlydHlUeXBlID09PSAnY3JlYXRlZCcpIHsKICAgICAgcmVjb3JkLnRy
        aWdnZXJMYXRlcignZGlkQ3JlYXRlJywgcmVjb3JkKTsKICAgIH0gZWxzZSB7
        CiAgICAgIHJlY29yZC50cmlnZ2VyTGF0ZXIoJ2RpZFVwZGF0ZScsIHJlY29y
        ZCk7CiAgICB9CgogICAgcmVjb3JkLnRyaWdnZXJMYXRlcignZGlkQ29tbWl0
        JywgcmVjb3JkKTsKICB9Cn07CgpmdW5jdGlvbiB3aXJlU3RhdGUob2JqZWN0
        LCBwYXJlbnQsIG5hbWUpIHsKICAvKmpzaGludCBwcm90bzp0cnVlKi8KICAv
        LyBUT0RPOiBVc2UgT2JqZWN0LmNyZWF0ZSBhbmQgY29weSBpbnN0ZWFkCiAg
        b2JqZWN0ID0gbWl4aW4ocGFyZW50ID8gRW1iZXIuY3JlYXRlKHBhcmVudCkg
        OiB7fSwgb2JqZWN0KTsKICBvYmplY3QucGFyZW50U3RhdGUgPSBwYXJlbnQ7
        CiAgb2JqZWN0LnN0YXRlTmFtZSA9IG5hbWU7CgogIGZvciAodmFyIHByb3Ag
        aW4gb2JqZWN0KSB7CiAgICBpZiAoIW9iamVjdC5oYXNPd25Qcm9wZXJ0eShw
        cm9wKSB8fCBwcm9wID09PSAncGFyZW50U3RhdGUnIHx8IHByb3AgPT09ICdz
        dGF0ZU5hbWUnKSB7IGNvbnRpbnVlOyB9CiAgICBpZiAodHlwZW9mIG9iamVj
        dFtwcm9wXSA9PT0gJ29iamVjdCcpIHsKICAgICAgb2JqZWN0W3Byb3BdID0g
        d2lyZVN0YXRlKG9iamVjdFtwcm9wXSwgb2JqZWN0LCBuYW1lICsgIi4iICsg
        cHJvcCk7CiAgICB9CiAgfQoKICByZXR1cm4gb2JqZWN0Owp9CgpSb290U3Rh
        dGUgPSB3aXJlU3RhdGUoUm9vdFN0YXRlLCBudWxsLCAicm9vdCIpOwoKRFMu
        Um9vdFN0YXRlID0gUm9vdFN0YXRlOwoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkg
        ewovKioKICBAbW9kdWxlIGVtYmVyLWRhdGEKKi8KCnZhciBnZXQgPSBFbWJl
        ci5nZXQsIHNldCA9IEVtYmVyLnNldCwKICAgIG1lcmdlID0gRW1iZXIubWVy
        Z2UsIG9uY2UgPSBFbWJlci5ydW4ub25jZTsKCnZhciByZXRyaWV2ZUZyb21D
        dXJyZW50U3RhdGUgPSBFbWJlci5jb21wdXRlZChmdW5jdGlvbihrZXksIHZh
        bHVlKSB7CiAgcmV0dXJuIGdldChnZXQodGhpcywgJ2N1cnJlbnRTdGF0ZScp
        LCBrZXkpOwp9KS5wcm9wZXJ0eSgnY3VycmVudFN0YXRlJykucmVhZE9ubHko
        KTsKCi8qKgoKICBUaGUgbW9kZWwgY2xhc3MgdGhhdCBhbGwgRW1iZXIgRGF0
        YSByZWNvcmRzIGRlc2NlbmQgZnJvbS4KCiAgQGNsYXNzIE1vZGVsCiAgQG5h
        bWVzcGFjZSBEUwogIEBleHRlbmRzIEVtYmVyLk9iamVjdAogIEB1c2VzIEVt
        YmVyLkV2ZW50ZWQKKi8KRFMuTW9kZWwgPSBFbWJlci5PYmplY3QuZXh0ZW5k
        KEVtYmVyLkV2ZW50ZWQsIHsKICBpc0VtcHR5OiByZXRyaWV2ZUZyb21DdXJy
        ZW50U3RhdGUsCiAgaXNMb2FkaW5nOiByZXRyaWV2ZUZyb21DdXJyZW50U3Rh
        dGUsCiAgaXNMb2FkZWQ6IHJldHJpZXZlRnJvbUN1cnJlbnRTdGF0ZSwKICBp
        c0RpcnR5OiByZXRyaWV2ZUZyb21DdXJyZW50U3RhdGUsCiAgaXNTYXZpbmc6
        IHJldHJpZXZlRnJvbUN1cnJlbnRTdGF0ZSwKICBpc0RlbGV0ZWQ6IHJldHJp
        ZXZlRnJvbUN1cnJlbnRTdGF0ZSwKICBpc05ldzogcmV0cmlldmVGcm9tQ3Vy
        cmVudFN0YXRlLAogIGlzVmFsaWQ6IHJldHJpZXZlRnJvbUN1cnJlbnRTdGF0
        ZSwKICBkaXJ0eVR5cGU6IHJldHJpZXZlRnJvbUN1cnJlbnRTdGF0ZSwKCiAg
        aXNFcnJvcjogZmFsc2UsCiAgaXNSZWxvYWRpbmc6IGZhbHNlLAoKICBjbGll
        bnRJZDogbnVsbCwKICBpZDogbnVsbCwKICB0cmFuc2FjdGlvbjogbnVsbCwK
        ICBjdXJyZW50U3RhdGU6IG51bGwsCiAgZXJyb3JzOiBudWxsLAoKICAvKioK
        ICAgIENyZWF0ZSBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlY29y
        ZCwgdXNpbmcgdGhlIHNlcmlhbGl6YXRpb24KICAgIHN0cmF0ZWd5IG9mIHRo
        ZSBzdG9yZSdzIGFkYXB0ZXIuCgogICAgQG1ldGhvZCBzZXJpYWxpemUKICAg
        IEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEF2YWlsYWJsZSBvcHRpb25zOgoK
        ICAgICogYGluY2x1ZGVJZGA6IGB0cnVlYCBpZiB0aGUgcmVjb3JkJ3MgSUQg
        c2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZQogICAgICBKU09OIHJlcHJlc2Vu
        dGF0aW9uLgoKICAgIEByZXR1cm5zIHtPYmplY3R9IGFuIG9iamVjdCB3aG9z
        ZSB2YWx1ZXMgYXJlIHByaW1pdGl2ZSBKU09OIHZhbHVlcyBvbmx5CiAgKi8K
        ICBzZXJpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgIHZhciBzdG9y
        ZSA9IGdldCh0aGlzLCAnc3RvcmUnKTsKICAgIHJldHVybiBzdG9yZS5zZXJp
        YWxpemUodGhpcywgb3B0aW9ucyk7CiAgfSwKCiAgLyoqCiAgICBVc2Uge3sj
        Y3Jvc3NMaW5rICJEUy5KU09OU2VyaWFsaXplciJ9fURTLkpTT05TZXJpYWxp
        emVye3svY3Jvc3NMaW5rfX0gdG8KICAgIGdldCB0aGUgSlNPTiByZXByZXNl
        bnRhdGlvbiBvZiBhIHJlY29yZC4KCiAgICBAbWV0aG9kIHRvSlNPTgogICAg
        QHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQXZhaWxhYmxlIG9wdGlvbnM6Cgog
        ICAgKiBgaW5jbHVkZUlkYDogYHRydWVgIGlmIHRoZSByZWNvcmQncyBJRCBz
        aG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlCiAgICAgIEpTT04gcmVwcmVzZW50
        YXRpb24uCgogICAgQHJldHVybnMge09iamVjdH0gQSBKU09OIHJlcHJlc2Vu
        dGF0aW9uIG9mIHRoZSBvYmplY3QuCiAgKi8KICB0b0pTT046IGZ1bmN0aW9u
        KG9wdGlvbnMpIHsKICAgIC8vIGNvbnRhaW5lciBpcyBmb3IgbGF6eSB0cmFu
        c2Zvcm0gbG9va3VwcwogICAgdmFyIHNlcmlhbGl6ZXIgPSBEUy5KU09OU2Vy
        aWFsaXplci5jcmVhdGUoeyBjb250YWluZXI6IHRoaXMuY29udGFpbmVyIH0p
        OwogICAgcmV0dXJuIHNlcmlhbGl6ZXIuc2VyaWFsaXplKHRoaXMsIG9wdGlv
        bnMpOwogIH0sCgogIC8qKgogICAgRmlyZWQgd2hlbiB0aGUgcmVjb3JkIGlz
        IGxvYWRlZCBmcm9tIHRoZSBzZXJ2ZXIuCgogICAgQGV2ZW50IGRpZExvYWQK
        ICAqLwogIGRpZExvYWQ6IEVtYmVyLkssCgogIC8qKgogICAgRmlyZWQgd2hl
        biB0aGUgcmVjb3JkIGlzIHJlbG9hZGVkIGZyb20gdGhlIHNlcnZlci4KCiAg
        ICBAZXZlbnQgZGlkUmVsb2FkCiAgKi8KICBkaWRSZWxvYWQ6IEVtYmVyLkss
        CgogIC8qKgogICAgRmlyZWQgd2hlbiB0aGUgcmVjb3JkIGlzIHVwZGF0ZWQu
        CgogICAgQGV2ZW50IGRpZFVwZGF0ZQogICovCiAgZGlkVXBkYXRlOiBFbWJl
        ci5LLAoKICAvKioKICAgIEZpcmVkIHdoZW4gdGhlIHJlY29yZCBpcyBjcmVh
        dGVkLgoKICAgIEBldmVudCBkaWRDcmVhdGUKICAqLwogIGRpZENyZWF0ZTog
        RW1iZXIuSywKCiAgLyoqCiAgICBGaXJlZCB3aGVuIHRoZSByZWNvcmQgaXMg
        ZGVsZXRlZC4KCiAgICBAZXZlbnQgZGlkRGVsZXRlCiAgKi8KICBkaWREZWxl
        dGU6IEVtYmVyLkssCgogIC8qKgogICAgRmlyZWQgd2hlbiB0aGUgcmVjb3Jk
        IGJlY29tZXMgaW52YWxpZC4KCiAgICBAZXZlbnQgYmVjYW1lSW52YWxpZAog
        ICovCiAgYmVjYW1lSW52YWxpZDogRW1iZXIuSywKCiAgLyoqCiAgICBGaXJl
        ZCB3aGVuIHRoZSByZWNvcmQgZW50ZXJzIHRoZSBlcnJvciBzdGF0ZS4KCiAg
        ICBAZXZlbnQgYmVjYW1lRXJyb3IKICAqLwogIGJlY2FtZUVycm9yOiBFbWJl
        ci5LLAoKICBkYXRhOiBFbWJlci5jb21wdXRlZChmdW5jdGlvbigpIHsKICAg
        IHRoaXMuX2RhdGEgPSB0aGlzLl9kYXRhIHx8IHt9OwogICAgcmV0dXJuIHRo
        aXMuX2RhdGE7CiAgfSkucHJvcGVydHkoKSwKCiAgX2RhdGE6IG51bGwsCgog
        IGluaXQ6IGZ1bmN0aW9uKCkgewogICAgc2V0KHRoaXMsICdjdXJyZW50U3Rh
        dGUnLCBEUy5Sb290U3RhdGUuZW1wdHkpOwogICAgdGhpcy5fc3VwZXIoKTsK
        ICAgIHRoaXMuX3NldHVwKCk7CiAgfSwKCiAgX3NldHVwOiBmdW5jdGlvbigp
        IHsKICAgIHRoaXMuX2NoYW5nZXNUb1N5bmMgPSB7fTsKICAgIHRoaXMuX2Rl
        ZmVycmVkVHJpZ2dlcnMgPSBbXTsKICAgIHRoaXMuX2RhdGEgPSB7fTsKICAg
        IHRoaXMuX2F0dHJpYnV0ZXMgPSB7fTsKICAgIHRoaXMuX2luRmxpZ2h0QXR0
        cmlidXRlcyA9IHt9OwogICAgdGhpcy5fcmVsYXRpb25zaGlwcyA9IHt9Owog
        IH0sCgogIHNlbmQ6IGZ1bmN0aW9uKG5hbWUsIGNvbnRleHQpIHsKICAgIHZh
        ciBjdXJyZW50U3RhdGUgPSBnZXQodGhpcywgJ2N1cnJlbnRTdGF0ZScpOwoK
        ICAgIGlmICghY3VycmVudFN0YXRlW25hbWVdKSB7CiAgICAgIHRoaXMuX3Vu
        aGFuZGxlZEV2ZW50KGN1cnJlbnRTdGF0ZSwgbmFtZSwgY29udGV4dCk7CiAg
        ICB9CgogICAgcmV0dXJuIGN1cnJlbnRTdGF0ZVtuYW1lXSh0aGlzLCBjb250
        ZXh0KTsKICB9LAoKICB0cmFuc2l0aW9uVG86IGZ1bmN0aW9uKG5hbWUpIHsK
        ICAgIC8vIFBPU1NJQkxFIFRPRE86IFJlbW92ZSB0aGlzIGNvZGUgYW5kIHJl
        cGxhY2Ugd2l0aAogICAgLy8gYWx3YXlzIGhhdmluZyBkaXJlY3QgcmVmZXJl
        bmNlcyB0byBzdGF0ZSBvYmplY3RzCgogICAgdmFyIHBpdm90TmFtZSA9IG5h
        bWUuc3BsaXQoIi4iLCAxKSwKICAgICAgICBjdXJyZW50U3RhdGUgPSBnZXQo
        dGhpcywgJ2N1cnJlbnRTdGF0ZScpLAogICAgICAgIHN0YXRlID0gY3VycmVu
        dFN0YXRlOwoKICAgIGRvIHsKICAgICAgaWYgKHN0YXRlLmV4aXQpIHsgc3Rh
        dGUuZXhpdCh0aGlzKTsgfQogICAgICBzdGF0ZSA9IHN0YXRlLnBhcmVudFN0
        YXRlOwogICAgfSB3aGlsZSAoIXN0YXRlLmhhc093blByb3BlcnR5KHBpdm90
        TmFtZSkpOwoKICAgIHZhciBwYXRoID0gbmFtZS5zcGxpdCgiLiIpOwoKICAg
        IHZhciBzZXR1cHMgPSBbXSwgZW50ZXJzID0gW10sIGksIGw7CgogICAgZm9y
        IChpPTAsIGw9cGF0aC5sZW5ndGg7IGk8bDsgaSsrKSB7CiAgICAgIHN0YXRl
        ID0gc3RhdGVbcGF0aFtpXV07CgogICAgICBpZiAoc3RhdGUuZW50ZXIpIHsg
        ZW50ZXJzLnB1c2goc3RhdGUpOyB9CiAgICAgIGlmIChzdGF0ZS5zZXR1cCkg
        eyBzZXR1cHMucHVzaChzdGF0ZSk7IH0KICAgIH0KCiAgICBmb3IgKGk9MCwg
        bD1lbnRlcnMubGVuZ3RoOyBpPGw7IGkrKykgewogICAgICBlbnRlcnNbaV0u
        ZW50ZXIodGhpcyk7CiAgICB9CgogICAgc2V0KHRoaXMsICdjdXJyZW50U3Rh
        dGUnLCBzdGF0ZSk7CgogICAgZm9yIChpPTAsIGw9c2V0dXBzLmxlbmd0aDsg
        aTxsOyBpKyspIHsKICAgICAgc2V0dXBzW2ldLnNldHVwKHRoaXMpOwogICAg
        fQogIH0sCgogIF91bmhhbmRsZWRFdmVudDogZnVuY3Rpb24oc3RhdGUsIG5h
        bWUsIGNvbnRleHQpIHsKICAgIHZhciBlcnJvck1lc3NhZ2UgPSAiQXR0ZW1w
        dGVkIHRvIGhhbmRsZSBldmVudCBgIiArIG5hbWUgKyAiYCAiOwogICAgZXJy
        b3JNZXNzYWdlICAgICs9ICJvbiAiICsgU3RyaW5nKHRoaXMpICsgIiB3aGls
        ZSBpbiBzdGF0ZSAiOwogICAgZXJyb3JNZXNzYWdlICAgICs9IHN0YXRlLnN0
        YXRlTmFtZSArICIuICI7CgogICAgaWYgKGNvbnRleHQgIT09IHVuZGVmaW5l
        ZCkgewogICAgICBlcnJvck1lc3NhZ2UgICs9ICJDYWxsZWQgd2l0aCAiICsg
        RW1iZXIuaW5zcGVjdChjb250ZXh0KSArICIuIjsKICAgIH0KCiAgICB0aHJv
        dyBuZXcgRW1iZXIuRXJyb3IoZXJyb3JNZXNzYWdlKTsKICB9LAoKICB3aXRo
        VHJhbnNhY3Rpb246IGZ1bmN0aW9uKGZuKSB7CiAgICB2YXIgdHJhbnNhY3Rp
        b24gPSBnZXQodGhpcywgJ3RyYW5zYWN0aW9uJyk7CiAgICBpZiAodHJhbnNh
        Y3Rpb24pIHsgZm4odHJhbnNhY3Rpb24pOyB9CiAgfSwKCiAgbG9hZGluZ0Rh
        dGE6IGZ1bmN0aW9uKHByb21pc2UpIHsKICAgIHRoaXMuc2VuZCgnbG9hZGlu
        Z0RhdGEnLCBwcm9taXNlKTsKICB9LAoKICBsb2FkZWREYXRhOiBmdW5jdGlv
        bigpIHsKICAgIHRoaXMuc2VuZCgnbG9hZGVkRGF0YScpOwogIH0sCgogIG5v
        dEZvdW5kOiBmdW5jdGlvbigpIHsKICAgIHRoaXMuc2VuZCgnbm90Rm91bmQn
        KTsKICB9LAoKICBwdXNoZWREYXRhOiBmdW5jdGlvbigpIHsKICAgIHRoaXMu
        c2VuZCgncHVzaGVkRGF0YScpOwogIH0sCgogIGRlbGV0ZVJlY29yZDogZnVu
        Y3Rpb24oKSB7CiAgICB0aGlzLnNlbmQoJ2RlbGV0ZVJlY29yZCcpOwogIH0s
        CgogIHVubG9hZFJlY29yZDogZnVuY3Rpb24oKSB7CiAgICBFbWJlci5hc3Nl
        cnQoIllvdSBjYW4gb25seSB1bmxvYWQgYSBsb2FkZWQsIG5vbi1kaXJ0eSBy
        ZWNvcmQuIiwgIWdldCh0aGlzLCAnaXNEaXJ0eScpKTsKCiAgICB0aGlzLnNl
        bmQoJ3VubG9hZFJlY29yZCcpOwogIH0sCgogIGNsZWFyUmVsYXRpb25zaGlw
        czogZnVuY3Rpb24oKSB7CiAgICB0aGlzLmVhY2hSZWxhdGlvbnNoaXAoZnVu
        Y3Rpb24obmFtZSwgcmVsYXRpb25zaGlwKSB7CiAgICAgIGlmIChyZWxhdGlv
        bnNoaXAua2luZCA9PT0gJ2JlbG9uZ3NUbycpIHsKICAgICAgICBzZXQodGhp
        cywgbmFtZSwgbnVsbCk7CiAgICAgIH0gZWxzZSBpZiAocmVsYXRpb25zaGlw
        LmtpbmQgPT09ICdoYXNNYW55JykgewogICAgICAgIHZhciBoYXNNYW55ID0g
        dGhpcy5fcmVsYXRpb25zaGlwc1tyZWxhdGlvbnNoaXAubmFtZV07CiAgICAg
        ICAgaWYgKGhhc01hbnkpIHsgaGFzTWFueS5jbGVhcigpOyB9CiAgICAgIH0K
        ICAgIH0sIHRoaXMpOwogIH0sCgogIHVwZGF0ZVJlY29yZEFycmF5czogZnVu
        Y3Rpb24oKSB7CiAgICB2YXIgc3RvcmUgPSBnZXQodGhpcywgJ3N0b3JlJyk7
        CiAgICBpZiAoc3RvcmUpIHsKICAgICAgc3RvcmUuZGF0YVdhc1VwZGF0ZWQo
        dGhpcy5jb25zdHJ1Y3RvciwgdGhpcyk7CiAgICB9CiAgfSwKCiAgLyoqCiAg
        ICBHZXRzIHRoZSBkaWZmIGZvciB0aGUgY3VycmVudCBtb2RlbC4KCiAgICBA
        bWV0aG9kIGNoYW5nZWRBdHRyaWJ1dGVzCgogICAgQHJldHVybnMge09iamVj
        dH0gYW4gb2JqZWN0LCB3aG9zZSBrZXlzIGFyZSBjaGFuZ2VkIHByb3BlcnRp
        ZXMsCiAgICAgIGFuZCB2YWx1ZSBpcyBhbiBbb2xkUHJvcCwgbmV3UHJvcF0g
        YXJyYXkuCiAgKi8KICBjaGFuZ2VkQXR0cmlidXRlczogZnVuY3Rpb24oKSB7
        CiAgICB2YXIgb2xkRGF0YSA9IGdldCh0aGlzLCAnX2RhdGEnKSwKICAgICAg
        ICBuZXdEYXRhID0gZ2V0KHRoaXMsICdfYXR0cmlidXRlcycpLAogICAgICAg
        IGRpZmZEYXRhID0ge30sCiAgICAgICAgcHJvcDsKCiAgICBmb3IgKHByb3Ag
        aW4gbmV3RGF0YSkgewogICAgICBkaWZmRGF0YVtwcm9wXSA9IFtvbGREYXRh
        W3Byb3BdLCBuZXdEYXRhW3Byb3BdXTsKICAgIH0KCiAgICByZXR1cm4gZGlm
        ZkRhdGE7CiAgfSwKCiAgYWRhcHRlcldpbGxDb21taXQ6IGZ1bmN0aW9uKCkg
        ewogICAgdGhpcy5zZW5kKCd3aWxsQ29tbWl0Jyk7CiAgfSwKCiAgLyoqCiAg
        ICBJZiB0aGUgYWRhcHRlciBkaWQgbm90IHJldHVybiBhIGhhc2ggaW4gcmVz
        cG9uc2UgdG8gYSBjb21taXQsCiAgICBtZXJnZSB0aGUgY2hhbmdlZCBhdHRy
        aWJ1dGVzIGFuZCByZWxhdGlvbnNoaXBzIGludG8gdGhlIGV4aXN0aW5nCiAg
        ICBzYXZlZCBkYXRhLgoKICAgIEBtZXRob2QgYWRhcHRlckRpZENvbW1pdAog
        ICovCiAgYWRhcHRlckRpZENvbW1pdDogZnVuY3Rpb24oZGF0YSkgewogICAg
        c2V0KHRoaXMsICdpc0Vycm9yJywgZmFsc2UpOwoKICAgIGlmIChkYXRhKSB7
        CiAgICAgIHRoaXMuX2RhdGEgPSBkYXRhOwogICAgfSBlbHNlIHsKICAgICAg
        RW1iZXIubWl4aW4odGhpcy5fZGF0YSwgdGhpcy5faW5GbGlnaHRBdHRyaWJ1
        dGVzKTsKICAgIH0KCiAgICB0aGlzLl9pbkZsaWdodEF0dHJpYnV0ZXMgPSB7
        fTsKCiAgICB0aGlzLnNlbmQoJ2RpZENvbW1pdCcpOwogICAgdGhpcy51cGRh
        dGVSZWNvcmRBcnJheXNMYXRlcigpOwoKICAgIGlmICghZGF0YSkgeyByZXR1
        cm47IH0KCiAgICB0aGlzLnN1c3BlbmRSZWxhdGlvbnNoaXBPYnNlcnZlcnMo
        ZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMubm90aWZ5UHJvcGVydHlDaGFuZ2Uo
        J2RhdGEnKTsKICAgIH0pOwogIH0sCgogIGFkYXB0ZXJEaWREaXJ0eTogZnVu
        Y3Rpb24oKSB7CiAgICB0aGlzLnNlbmQoJ2JlY29tZURpcnR5Jyk7CiAgICB0
        aGlzLnVwZGF0ZVJlY29yZEFycmF5c0xhdGVyKCk7CiAgfSwKCiAgZGF0YURp
        ZENoYW5nZTogRW1iZXIub2JzZXJ2ZXIoZnVuY3Rpb24oKSB7CiAgICB0aGlz
        LnJlbG9hZEhhc01hbnlzKCk7CiAgfSwgJ2RhdGEnKSwKCiAgcmVsb2FkSGFz
        TWFueXM6IGZ1bmN0aW9uKCkgewogICAgdmFyIHJlbGF0aW9uc2hpcHMgPSBn
        ZXQodGhpcy5jb25zdHJ1Y3RvciwgJ3JlbGF0aW9uc2hpcHNCeU5hbWUnKTsK
        ICAgIHRoaXMudXBkYXRlUmVjb3JkQXJyYXlzTGF0ZXIoKTsKICAgIHJlbGF0
        aW9uc2hpcHMuZm9yRWFjaChmdW5jdGlvbihuYW1lLCByZWxhdGlvbnNoaXAp
        IHsKICAgICAgaWYgKHRoaXMuX2RhdGEubGlua3MgJiYgdGhpcy5fZGF0YS5s
        aW5rc1tuYW1lXSkgeyByZXR1cm47IH0KICAgICAgaWYgKHJlbGF0aW9uc2hp
        cC5raW5kID09PSAnaGFzTWFueScpIHsKICAgICAgICB0aGlzLmhhc01hbnlE
        aWRDaGFuZ2UocmVsYXRpb25zaGlwLmtleSk7CiAgICAgIH0KICAgIH0sIHRo
        aXMpOwogIH0sCgogIGhhc01hbnlEaWRDaGFuZ2U6IGZ1bmN0aW9uKGtleSkg
        ewogICAgdmFyIGhhc01hbnkgPSB0aGlzLl9yZWxhdGlvbnNoaXBzW2tleV07
        CgogICAgaWYgKGhhc01hbnkpIHsKICAgICAgdmFyIHJlY29yZHMgPSB0aGlz
        Ll9kYXRhW2tleV0gfHwgW107CgogICAgICBzZXQoaGFzTWFueSwgJ2NvbnRl
        bnQnLCBFbWJlci5BKHJlY29yZHMpKTsKICAgICAgc2V0KGhhc01hbnksICdp
        c0xvYWRlZCcsIHRydWUpOwogICAgICBoYXNNYW55LnRyaWdnZXIoJ2RpZExv
        YWQnKTsKICAgIH0KICB9LAoKICB1cGRhdGVSZWNvcmRBcnJheXNMYXRlcjog
        ZnVuY3Rpb24oKSB7CiAgICBFbWJlci5ydW4ub25jZSh0aGlzLCB0aGlzLnVw
        ZGF0ZVJlY29yZEFycmF5cyk7CiAgfSwKCiAgc2V0dXBEYXRhOiBmdW5jdGlv
        bihkYXRhLCBwYXJ0aWFsKSB7CiAgICBpZiAocGFydGlhbCkgewogICAgICBF
        bWJlci5tZXJnZSh0aGlzLl9kYXRhLCBkYXRhKTsKICAgIH0gZWxzZSB7CiAg
        ICAgIHRoaXMuX2RhdGEgPSBkYXRhOwogICAgfQoKICAgIHZhciByZWxhdGlv
        bnNoaXBzID0gdGhpcy5fcmVsYXRpb25zaGlwczsKCiAgICB0aGlzLmVhY2hS
        ZWxhdGlvbnNoaXAoZnVuY3Rpb24obmFtZSwgcmVsKSB7CiAgICAgIGlmIChk
        YXRhLmxpbmtzICYmIGRhdGEubGlua3NbbmFtZV0pIHsgcmV0dXJuOyB9CiAg
        ICAgIGlmIChyZWwub3B0aW9ucy5hc3luYykgeyByZWxhdGlvbnNoaXBzW25h
        bWVdID0gbnVsbDsgfQogICAgfSk7CgogICAgaWYgKGRhdGEpIHsgdGhpcy5w
        dXNoZWREYXRhKCk7IH0KCiAgICB0aGlzLnN1c3BlbmRSZWxhdGlvbnNoaXBP
        YnNlcnZlcnMoZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMubm90aWZ5UHJvcGVy
        dHlDaGFuZ2UoJ2RhdGEnKTsKICAgIH0pOwogIH0sCgogIG1hdGVyaWFsaXpl
        SWQ6IGZ1bmN0aW9uKGlkKSB7CiAgICBzZXQodGhpcywgJ2lkJywgaWQpOwog
        IH0sCgogIG1hdGVyaWFsaXplQXR0cmlidXRlczogZnVuY3Rpb24oYXR0cmli
        dXRlcykgewogICAgRW1iZXIuYXNzZXJ0KCJNdXN0IHBhc3MgYSBoYXNoIG9m
        IGF0dHJpYnV0ZXMgdG8gbWF0ZXJpYWxpemVBdHRyaWJ1dGVzIiwgISFhdHRy
        aWJ1dGVzKTsKICAgIG1lcmdlKHRoaXMuX2RhdGEsIGF0dHJpYnV0ZXMpOwog
        IH0sCgogIG1hdGVyaWFsaXplQXR0cmlidXRlOiBmdW5jdGlvbihuYW1lLCB2
        YWx1ZSkgewogICAgdGhpcy5fZGF0YVtuYW1lXSA9IHZhbHVlOwogIH0sCgog
        IHVwZGF0ZUhhc01hbnk6IGZ1bmN0aW9uKG5hbWUsIHJlY29yZHMpIHsKICAg
        IHRoaXMuX2RhdGFbbmFtZV0gPSByZWNvcmRzOwogICAgdGhpcy5oYXNNYW55
        RGlkQ2hhbmdlKG5hbWUpOwogIH0sCgogIHVwZGF0ZUJlbG9uZ3NUbzogZnVu
        Y3Rpb24obmFtZSwgcmVjb3JkKSB7CiAgICB0aGlzLl9kYXRhW25hbWVdID0g
        cmVjb3JkOwogIH0sCgogIHJvbGxiYWNrOiBmdW5jdGlvbigpIHsKICAgIHRo
        aXMuX2F0dHJpYnV0ZXMgPSB7fTsKCiAgICBpZiAoZ2V0KHRoaXMsICdpc0Vy
        cm9yJykpIHsKICAgICAgdGhpcy5faW5GbGlnaHRBdHRyaWJ1dGVzID0ge307
        CiAgICAgIHNldCh0aGlzLCAnaXNFcnJvcicsIGZhbHNlKTsKICAgIH0KCiAg
        ICB0aGlzLnNlbmQoJ3JvbGxlZEJhY2snKTsKCiAgICB0aGlzLnN1c3BlbmRS
        ZWxhdGlvbnNoaXBPYnNlcnZlcnMoZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMu
        bm90aWZ5UHJvcGVydHlDaGFuZ2UoJ2RhdGEnKTsKICAgIH0pOwogIH0sCgog
        IHRvU3RyaW5nRXh0ZW5zaW9uOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiBn
        ZXQodGhpcywgJ2lkJyk7CiAgfSwKCiAgLyoqCiAgICBUaGUgZ29hbCBvZiB0
        aGlzIG1ldGhvZCBpcyB0byB0ZW1wb3JhcmlseSBkaXNhYmxlIHNwZWNpZmlj
        IG9ic2VydmVycwogICAgdGhhdCB0YWtlIGFjdGlvbiBpbiByZXNwb25zZSB0
        byBhcHBsaWNhdGlvbiBjaGFuZ2VzLgoKICAgIFRoaXMgYWxsb3dzIHRoZSBz
        eXN0ZW0gdG8gbWFrZSBjaGFuZ2VzIChzdWNoIGFzIG1hdGVyaWFsaXphdGlv
        biBhbmQKICAgIHJvbGxiYWNrKSB0aGF0IHNob3VsZCBub3QgdHJpZ2dlciBz
        ZWNvbmRhcnkgYmVoYXZpb3IgKHN1Y2ggYXMgc2V0dGluZyBhbgogICAgaW52
        ZXJzZSByZWxhdGlvbnNoaXAgb3IgbWFya2luZyByZWNvcmRzIGFzIGRpcnR5
        KS4KCiAgICBUaGUgc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gd2lsbCBsaWtl
        bHkgY2hhbmdlIGFzIEVtYmVyIHByb3BlciBwcm92aWRlcwogICAgYmV0dGVy
        IGluZnJhc3RydWN0dXJlIGZvciBzdXNwZW5kaW5nIGdyb3VwcyBvZiBvYnNl
        cnZlcnMsIGFuZCBpZiBBcnJheQogICAgb2JzZXJ2YXRpb24gYmVjb21lcyBt
        b3JlIHVuaWZpZWQgd2l0aCByZWd1bGFyIG9ic2VydmVycy4KCiAgICBAbWV0
        aG9kIHN1c3BlbmRSZWxhdGlvbnNoaXBPYnNlcnZlcnMKICAgIEBwcml2YXRl
        CiAgICBAcGFyYW0gY2FsbGJhY2sKICAgIEBwYXJhbSBiaW5kaW5nCiAgKi8K
        ICBzdXNwZW5kUmVsYXRpb25zaGlwT2JzZXJ2ZXJzOiBmdW5jdGlvbihjYWxs
        YmFjaywgYmluZGluZykgewogICAgdmFyIG9ic2VydmVycyA9IGdldCh0aGlz
        LmNvbnN0cnVjdG9yLCAncmVsYXRpb25zaGlwTmFtZXMnKS5iZWxvbmdzVG87
        CiAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgdHJ5IHsKICAgICAgdGhpcy5f
        c3VzcGVuZGVkUmVsYXRpb25zaGlwcyA9IHRydWU7CiAgICAgIEVtYmVyLl9z
        dXNwZW5kT2JzZXJ2ZXJzKHNlbGYsIG9ic2VydmVycywgbnVsbCwgJ2JlbG9u
        Z3NUb0RpZENoYW5nZScsIGZ1bmN0aW9uKCkgewogICAgICAgIEVtYmVyLl9z
        dXNwZW5kQmVmb3JlT2JzZXJ2ZXJzKHNlbGYsIG9ic2VydmVycywgbnVsbCwg
        J2JlbG9uZ3NUb1dpbGxDaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAg
        IGNhbGxiYWNrLmNhbGwoYmluZGluZyB8fCBzZWxmKTsKICAgICAgICB9KTsK
        ICAgICAgfSk7CiAgICB9IGZpbmFsbHkgewogICAgICB0aGlzLl9zdXNwZW5k
        ZWRSZWxhdGlvbnNoaXBzID0gZmFsc2U7CiAgICB9CiAgfSwKCiAgLyoqCiAg
        ICBTYXZlIHRoZSByZWNvcmQuCgogICAgQG1ldGhvZCBzYXZlCiAgKi8KICBz
        YXZlOiBmdW5jdGlvbigpIHsKICAgIHZhciByZXNvbHZlciA9IEVtYmVyLlJT
        VlAuZGVmZXIoKTsKCiAgICB0aGlzLmdldCgnc3RvcmUnKS5zY2hlZHVsZVNh
        dmUodGhpcywgcmVzb2x2ZXIpOwogICAgdGhpcy5faW5GbGlnaHRBdHRyaWJ1
        dGVzID0gdGhpcy5fYXR0cmlidXRlczsKICAgIHRoaXMuX2F0dHJpYnV0ZXMg
        PSB7fTsKCiAgICByZXR1cm4gRFMuUHJvbWlzZU9iamVjdC5jcmVhdGUoeyBw
        cm9taXNlOiByZXNvbHZlci5wcm9taXNlIH0pOwogIH0sCgogIC8qKgogICAg
        UmVsb2FkIHRoZSByZWNvcmQgZnJvbSB0aGUgYWRhcHRlci4KCiAgICBUaGlz
        IHdpbGwgb25seSB3b3JrIGlmIHRoZSByZWNvcmQgaGFzIGFscmVhZHkgZmlu
        aXNoZWQgbG9hZGluZwogICAgYW5kIGhhcyBub3QgeWV0IGJlZW4gbW9kaWZp
        ZWQgKGBpc0xvYWRlZGAgYnV0IG5vdCBgaXNEaXJ0eWAsCiAgICBvciBgaXNT
        YXZpbmdgKS4KCiAgICBAbWV0aG9kIHJlbG9hZAogICovCiAgcmVsb2FkOiBm
        dW5jdGlvbigpIHsKICAgIHNldCh0aGlzLCAnaXNSZWxvYWRpbmcnLCB0cnVl
        KTsKCiAgICB2YXIgcmVzb2x2ZXIgPSBFbWJlci5SU1ZQLmRlZmVyKCksIHJl
        Y29yZCA9IHRoaXM7CgogICAgcmVzb2x2ZXIucHJvbWlzZSA9IHJlc29sdmVy
        LnByb21pc2UudGhlbihmdW5jdGlvbigpIHsKICAgICAgcmVjb3JkLnNldCgn
        aXNSZWxvYWRpbmcnLCBmYWxzZSk7CiAgICAgIHJlY29yZC5zZXQoJ2lzRXJy
        b3InLCBmYWxzZSk7CiAgICAgIHJldHVybiByZWNvcmQ7CiAgICB9LCBmdW5j
        dGlvbihyZWFzb24pIHsKICAgICAgcmVjb3JkLnNldCgnaXNFcnJvcicsIHRy
        dWUpOwogICAgICB0aHJvdyByZWFzb247CiAgICB9KTsKCiAgICB0aGlzLnNl
        bmQoJ3JlbG9hZFJlY29yZCcsIHJlc29sdmVyKTsKCiAgICByZXR1cm4gRFMu
        UHJvbWlzZU9iamVjdC5jcmVhdGUoeyBwcm9taXNlOiByZXNvbHZlci5wcm9t
        aXNlIH0pOwogIH0sCgogIC8vIEZPUiBVU0UgRFVSSU5HIENPTU1JVCBQUk9D
        RVNTCgogIGFkYXB0ZXJEaWRVcGRhdGVBdHRyaWJ1dGU6IGZ1bmN0aW9uKGF0
        dHJpYnV0ZU5hbWUsIHZhbHVlKSB7CgogICAgLy8gSWYgYSB2YWx1ZSBpcyBw
        YXNzZWQgaW4sIHVwZGF0ZSB0aGUgaW50ZXJuYWwgYXR0cmlidXRlcyBhbmQg
        Y2xlYXIKICAgIC8vIHRoZSBhdHRyaWJ1dGUgY2FjaGUgc28gaXQgcGlja3Mg
        dXAgdGhlIG5ldyB2YWx1ZS4gT3RoZXJ3aXNlLAogICAgLy8gY29sbGFwc2Ug
        dGhlIGN1cnJlbnQgdmFsdWUgaW50byB0aGUgaW50ZXJuYWwgYXR0cmlidXRl
        cyBiZWNhdXNlCiAgICAvLyB0aGUgYWRhcHRlciBoYXMgYWNrbm93bGVkZ2Vk
        IGl0LgogICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHsKICAgICAgdGhp
        cy5fZGF0YVthdHRyaWJ1dGVOYW1lXSA9IHZhbHVlOwogICAgICB0aGlzLm5v
        dGlmeVByb3BlcnR5Q2hhbmdlKGF0dHJpYnV0ZU5hbWUpOwogICAgfSBlbHNl
        IHsKICAgICAgdGhpcy5fZGF0YVthdHRyaWJ1dGVOYW1lXSA9IHRoaXMuX2lu
        RmxpZ2h0QXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTsKICAgIH0KCiAgICB0
        aGlzLnVwZGF0ZVJlY29yZEFycmF5c0xhdGVyKCk7CiAgfSwKCiAgYWRhcHRl
        ckRpZEludmFsaWRhdGU6IGZ1bmN0aW9uKGVycm9ycykgewogICAgdGhpcy5z
        ZW5kKCdiZWNhbWVJbnZhbGlkJywgZXJyb3JzKTsKICB9LAoKICBhZGFwdGVy
        RGlkRXJyb3I6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5zZW5kKCdiZWNhbWVF
        cnJvcicpOwogICAgc2V0KHRoaXMsICdpc0Vycm9yJywgdHJ1ZSk7CiAgfSwK
        CiAgLyoqCiAgICBPdmVycmlkZSB0aGUgZGVmYXVsdCBldmVudCBmaXJpbmcg
        ZnJvbSBFbWJlci5FdmVudGVkIHRvCiAgICBhbHNvIGNhbGwgbWV0aG9kcyB3
        aXRoIHRoZSBnaXZlbiBuYW1lLgoKICAgIEBtZXRob2QgdHJpZ2dlcgogICAg
        QHByaXZhdGUKICAgIEBwYXJhbSBuYW1lCiAgKi8KICB0cmlnZ2VyOiBmdW5j
        dGlvbihuYW1lKSB7CiAgICBFbWJlci50cnlJbnZva2UodGhpcywgbmFtZSwg
        W10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgIHRoaXMuX3N1cGVy
        LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfSwKCiAgdHJpZ2dlckxhdGVy
        OiBmdW5jdGlvbigpIHsKICAgIHRoaXMuX2RlZmVycmVkVHJpZ2dlcnMucHVz
        aChhcmd1bWVudHMpOwogICAgb25jZSh0aGlzLCAnX3RyaWdnZXJEZWZlcnJl
        ZFRyaWdnZXJzJyk7CiAgfSwKCiAgX3RyaWdnZXJEZWZlcnJlZFRyaWdnZXJz
        OiBmdW5jdGlvbigpIHsKICAgIGZvciAodmFyIGk9MCwgbD10aGlzLl9kZWZl
        cnJlZFRyaWdnZXJzLmxlbmd0aDsgaTxsOyBpKyspIHsKICAgICAgdGhpcy50
        cmlnZ2VyLmFwcGx5KHRoaXMsIHRoaXMuX2RlZmVycmVkVHJpZ2dlcnNbaV0p
        OwogICAgfQoKICAgIHRoaXMuX2RlZmVycmVkVHJpZ2dlcnMgPSBbXTsKICB9
        Cn0pOwoKRFMuTW9kZWwucmVvcGVuQ2xhc3MoewoKICAvKioKICAgIEFsaWFz
        IERTLk1vZGVsJ3MgYGNyZWF0ZWAgbWV0aG9kIHRvIGBfY3JlYXRlYC4gVGhp
        cyBhbGxvd3MgdXMgdG8gY3JlYXRlIERTLk1vZGVsCiAgICBpbnN0YW5jZXMg
        ZnJvbSB3aXRoaW4gdGhlIHN0b3JlLCBidXQgaWYgZW5kIHVzZXJzIGFjY2lk
        ZW50YWxseSBjYWxsIGBjcmVhdGUoKWAKICAgIChpbnN0ZWFkIG9mIGBjcmVh
        dGVSZWNvcmQoKWApLCB3ZSBjYW4gcmFpc2UgYW4gZXJyb3IuCgogICAgQG1l
        dGhvZCBfY3JlYXRlCiAgICBAcHJpdmF0ZQogICAgQHN0YXRpYwogICovCiAg
        X2NyZWF0ZTogRFMuTW9kZWwuY3JlYXRlLAoKICAvKioKICAgIE92ZXJyaWRl
        IHRoZSBjbGFzcycgYGNyZWF0ZSgpYCBtZXRob2QgdG8gcmFpc2UgYW4gZXJy
        b3IuIFRoaXMgcHJldmVudHMgZW5kIHVzZXJzCiAgICBmcm9tIGluYWR2ZXJ0
        ZW50bHkgY2FsbGluZyBgY3JlYXRlKClgIGluc3RlYWQgb2YgYGNyZWF0ZVJl
        Y29yZCgpYC4gVGhlIHN0b3JlIGlzCiAgICBzdGlsbCBhYmxlIHRvIGNyZWF0
        ZSBpbnN0YW5jZXMgYnkgY2FsbGluZyB0aGUgYF9jcmVhdGUoKWAgbWV0aG9k
        LgoKICAgIEBtZXRob2QgY3JlYXRlCiAgICBAcHJpdmF0ZQogICAgQHN0YXRp
        YwogICovCiAgY3JlYXRlOiBmdW5jdGlvbigpIHsKICAgIHRocm93IG5ldyBF
        bWJlci5FcnJvcigiWW91IHNob3VsZCBub3QgY2FsbCBgY3JlYXRlYCBvbiBh
        IG1vZGVsLiBJbnN0ZWFkLCBjYWxsIGBzdG9yZS5jcmVhdGVSZWNvcmRgIHdp
        dGggdGhlIGF0dHJpYnV0ZXMgeW91IHdvdWxkIGxpa2UgdG8gc2V0LiIpOwog
        IH0KfSk7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUg
        ZW1iZXItZGF0YQoqLwoKdmFyIGdldCA9IEVtYmVyLmdldDsKCi8qKgogIEBj
        bGFzcyBNb2RlbAogIEBuYW1lc3BhY2UgRFMKKi8KRFMuTW9kZWwucmVvcGVu
        Q2xhc3MoewogIGF0dHJpYnV0ZXM6IEVtYmVyLmNvbXB1dGVkKGZ1bmN0aW9u
        KCkgewogICAgdmFyIG1hcCA9IEVtYmVyLk1hcC5jcmVhdGUoKTsKCiAgICB0
        aGlzLmVhY2hDb21wdXRlZFByb3BlcnR5KGZ1bmN0aW9uKG5hbWUsIG1ldGEp
        IHsKICAgICAgaWYgKG1ldGEuaXNBdHRyaWJ1dGUpIHsKICAgICAgICBFbWJl
        ci5hc3NlcnQoIllvdSBtYXkgbm90IHNldCBgaWRgIGFzIGFuIGF0dHJpYnV0
        ZSBvbiB5b3VyIG1vZGVsLiBQbGVhc2UgcmVtb3ZlIGFueSBsaW5lcyB0aGF0
        IGxvb2sgbGlrZTogYGlkOiBEUy5hdHRyKCc8dHlwZT4nKWAgZnJvbSAiICsg
        dGhpcy50b1N0cmluZygpLCBuYW1lICE9PSAnaWQnKTsKCiAgICAgICAgbWV0
        YS5uYW1lID0gbmFtZTsKICAgICAgICBtYXAuc2V0KG5hbWUsIG1ldGEpOwog
        ICAgICB9CiAgICB9KTsKCiAgICByZXR1cm4gbWFwOwogIH0pLAoKICB0cmFu
        c2Zvcm1lZEF0dHJpYnV0ZXM6IEVtYmVyLmNvbXB1dGVkKGZ1bmN0aW9uKCkg
        ewogICAgdmFyIG1hcCA9IEVtYmVyLk1hcC5jcmVhdGUoKTsKCiAgICB0aGlz
        LmVhY2hBdHRyaWJ1dGUoZnVuY3Rpb24oa2V5LCBtZXRhKSB7CiAgICAgIGlm
        IChtZXRhLnR5cGUpIHsKICAgICAgICBtYXAuc2V0KGtleSwgbWV0YS50eXBl
        KTsKICAgICAgfQogICAgfSk7CgogICAgcmV0dXJuIG1hcDsKICB9KSwKCiAg
        ZWFjaEF0dHJpYnV0ZTogZnVuY3Rpb24oY2FsbGJhY2ssIGJpbmRpbmcpIHsK
        ICAgIGdldCh0aGlzLCAnYXR0cmlidXRlcycpLmZvckVhY2goZnVuY3Rpb24o
        bmFtZSwgbWV0YSkgewogICAgICBjYWxsYmFjay5jYWxsKGJpbmRpbmcsIG5h
        bWUsIG1ldGEpOwogICAgfSwgYmluZGluZyk7CiAgfSwKCiAgZWFjaFRyYW5z
        Zm9ybWVkQXR0cmlidXRlOiBmdW5jdGlvbihjYWxsYmFjaywgYmluZGluZykg
        ewogICAgZ2V0KHRoaXMsICd0cmFuc2Zvcm1lZEF0dHJpYnV0ZXMnKS5mb3JF
        YWNoKGZ1bmN0aW9uKG5hbWUsIHR5cGUpIHsKICAgICAgY2FsbGJhY2suY2Fs
        bChiaW5kaW5nLCBuYW1lLCB0eXBlKTsKICAgIH0pOwogIH0KfSk7CgoKRFMu
        TW9kZWwucmVvcGVuKHsKICBlYWNoQXR0cmlidXRlOiBmdW5jdGlvbihjYWxs
        YmFjaywgYmluZGluZykgewogICAgdGhpcy5jb25zdHJ1Y3Rvci5lYWNoQXR0
        cmlidXRlKGNhbGxiYWNrLCBiaW5kaW5nKTsKICB9Cn0pOwoKZnVuY3Rpb24g
        Z2V0RGVmYXVsdFZhbHVlKHJlY29yZCwgb3B0aW9ucywga2V5KSB7CiAgaWYg
        KHR5cGVvZiBvcHRpb25zLmRlZmF1bHRWYWx1ZSA9PT0gImZ1bmN0aW9uIikg
        ewogICAgcmV0dXJuIG9wdGlvbnMuZGVmYXVsdFZhbHVlKCk7CiAgfSBlbHNl
        IHsKICAgIHJldHVybiBvcHRpb25zLmRlZmF1bHRWYWx1ZTsKICB9Cn0KCmZ1
        bmN0aW9uIGhhc1ZhbHVlKHJlY29yZCwga2V5KSB7CiAgcmV0dXJuIHJlY29y
        ZC5fYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8CiAgICAgICAg
        IHJlY29yZC5faW5GbGlnaHRBdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGtl
        eSkgfHwKICAgICAgICAgcmVjb3JkLl9kYXRhLmhhc093blByb3BlcnR5KGtl
        eSk7Cn0KCmZ1bmN0aW9uIGdldFZhbHVlKHJlY29yZCwga2V5KSB7CiAgaWYg
        KHJlY29yZC5fYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAg
        ICByZXR1cm4gcmVjb3JkLl9hdHRyaWJ1dGVzW2tleV07CiAgfSBlbHNlIGlm
        IChyZWNvcmQuX2luRmxpZ2h0QXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShr
        ZXkpKSB7CiAgICByZXR1cm4gcmVjb3JkLl9pbkZsaWdodEF0dHJpYnV0ZXNb
        a2V5XTsKICB9IGVsc2UgewogICAgcmV0dXJuIHJlY29yZC5fZGF0YVtrZXld
        OwogIH0KfQoKLyoqCiAgYERTLmF0dHJgIGRlZmluZXMgYW4gYXR0cmlidXRl
        IG9uIGEgRFMuTW9kZWwuCiAgQnkgZGVmYXVsdCwgYXR0cmlidXRlcyBhcmUg
        cGFzc2VkIHRocm91Z2ggYXMtaXMsIGhvd2V2ZXIgeW91IGNhbiBzcGVjaWZ5
        IGFuCiAgb3B0aW9uYWwgdHlwZSB0byBoYXZlIHRoZSB2YWx1ZSBhdXRvbWF0
        aWNhbGx5IHRyYW5zZm9ybWVkLgogIEVtYmVyIERhdGEgc2hpcHMgd2l0aCBm
        b3VyIGJhc2ljIHRyYW5zZm9ybSB0eXBlczoKICAgICdzdHJpbmcnLCAnbnVt
        YmVyJywgJ2Jvb2xlYW4nIGFuZCAnZGF0ZScuCiAgWW91IGNhbiBkZWZpbmUg
        eW91ciBvd24gdHJhbnNmb3JtcyBieSBzdWJjbGFzc2luZyBEUy5UcmFuc2Zv
        cm0uCgogIERTLmF0dHIgdGFrZXMgYW4gb3B0aW9uYWwgaGFzaCBhcyBhIHNl
        Y29uZCBwYXJhbWV0ZXIsIGN1cnJlbnRseQogIHN1cHBvcnRlZCBvcHRpb25z
        IGFyZToKICAgICdkZWZhdWx0VmFsdWUnOiBQYXNzIGEgc3RyaW5nIG9yIGEg
        ZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHRvIHNldCB0aGUgYXR0cmlidXRlCiAg
        ICAgICAgICAgICAgICAgICAgdG8gYSBkZWZhdWx0IHZhbHVlIGlmIG5vbmUg
        aXMgc3VwcGxpZWQuCgogIEBtZXRob2QgYXR0cgogIEBwYXJhbSB7U3RyaW5n
        fSB0eXBlIHRoZSBhdHRyaWJ1dGUgdHlwZQogIEBwYXJhbSB7T2JqZWN0fSBv
        cHRpb25zIGEgaGFzaCBvZiBvcHRpb25zCiovCgpEUy5hdHRyID0gZnVuY3Rp
        b24odHlwZSwgb3B0aW9ucykgewogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9
        OwoKICB2YXIgbWV0YSA9IHsKICAgIHR5cGU6IHR5cGUsCiAgICBpc0F0dHJp
        YnV0ZTogdHJ1ZSwKICAgIG9wdGlvbnM6IG9wdGlvbnMKICB9OwoKICByZXR1
        cm4gRW1iZXIuY29tcHV0ZWQoZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAg
        aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7CiAgICAgIEVtYmVyLmFzc2Vy
        dCgiWW91IG1heSBub3Qgc2V0IGBpZGAgYXMgYW4gYXR0cmlidXRlIG9uIHlv
        dXIgbW9kZWwuIFBsZWFzZSByZW1vdmUgYW55IGxpbmVzIHRoYXQgbG9vayBs
        aWtlOiBgaWQ6IERTLmF0dHIoJzx0eXBlPicpYCBmcm9tICIgKyB0aGlzLmNv
        bnN0cnVjdG9yLnRvU3RyaW5nKCksIGtleSAhPT0gJ2lkJyk7CiAgICAgIHZh
        ciBvbGRWYWx1ZSA9IHRoaXMuX2F0dHJpYnV0ZXNba2V5XSB8fCB0aGlzLl9p
        bkZsaWdodEF0dHJpYnV0ZXNba2V5XSB8fCB0aGlzLl9kYXRhW2tleV07CiAg
        ICAgIHRoaXMuc2VuZCgnZGlkU2V0UHJvcGVydHknLCB7IG5hbWU6IGtleSwg
        b2xkVmFsdWU6IG9sZFZhbHVlLCBvcmlnaW5hbFZhbHVlOiB0aGlzLl9kYXRh
        W2tleV0sIHZhbHVlOiB2YWx1ZSB9KTsKICAgICAgdGhpcy5fYXR0cmlidXRl
        c1trZXldID0gdmFsdWU7CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0gZWxz
        ZSBpZiAoaGFzVmFsdWUodGhpcywga2V5KSkgewogICAgICByZXR1cm4gZ2V0
        VmFsdWUodGhpcywga2V5KTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBn
        ZXREZWZhdWx0VmFsdWUodGhpcywgb3B0aW9ucywga2V5KTsKICAgIH0KCiAg
        Ly8gYGRhdGFgIGlzIG5ldmVyIHNldCBkaXJlY3RseS4gSG93ZXZlciwgaXQg
        bWF5IGJlCiAgLy8gaW52YWxpZGF0ZWQgZnJvbSB0aGUgc3RhdGUgbWFuYWdl
        cidzIHNldERhdGEKICAvLyBldmVudC4KICB9KS5wcm9wZXJ0eSgnZGF0YScp
        Lm1ldGEobWV0YSk7Cn07CgoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewovKioK
        ICBAbW9kdWxlIGVtYmVyLWRhdGEKKi8KCn0pKCk7CgoKCihmdW5jdGlvbigp
        IHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgovKioKICBBbiBBdHRy
        aWJ1dGVDaGFuZ2Ugb2JqZWN0IGlzIGNyZWF0ZWQgd2hlbmV2ZXIgYSByZWNv
        cmQncwogIGF0dHJpYnV0ZSBjaGFuZ2VzIHZhbHVlLiBJdCBpcyB1c2VkIHRv
        IHRyYWNrIGNoYW5nZXMgdG8gYQogIHJlY29yZCBiZXR3ZWVuIHRyYW5zYWN0
        aW9uIGNvbW1pdHMuCgogIEBjbGFzcyBBdHRyaWJ1dGVDaGFuZ2UKICBAbmFt
        ZXNwYWNlIERTCiAgQHByaXZhdGUKICBAY29uc3RydWN0b3IKKi8KdmFyIEF0
        dHJpYnV0ZUNoYW5nZSA9IERTLkF0dHJpYnV0ZUNoYW5nZSA9IGZ1bmN0aW9u
        KG9wdGlvbnMpIHsKICB0aGlzLnJlY29yZCA9IG9wdGlvbnMucmVjb3JkOwog
        IHRoaXMuc3RvcmUgPSBvcHRpb25zLnN0b3JlOwogIHRoaXMubmFtZSA9IG9w
        dGlvbnMubmFtZTsKICB0aGlzLnZhbHVlID0gb3B0aW9ucy52YWx1ZTsKICB0
        aGlzLm9sZFZhbHVlID0gb3B0aW9ucy5vbGRWYWx1ZTsKfTsKCkF0dHJpYnV0
        ZUNoYW5nZS5jcmVhdGVDaGFuZ2UgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAg
        cmV0dXJuIG5ldyBBdHRyaWJ1dGVDaGFuZ2Uob3B0aW9ucyk7Cn07CgpBdHRy
        aWJ1dGVDaGFuZ2UucHJvdG90eXBlID0gewogIHN5bmM6IGZ1bmN0aW9uKCkg
        ewogICAgaWYgKHRoaXMudmFsdWUgIT09IHRoaXMub2xkVmFsdWUpIHsKICAg
        ICAgdGhpcy5yZWNvcmQuc2VuZCgnYmVjb21lRGlydHknKTsKICAgICAgdGhp
        cy5yZWNvcmQudXBkYXRlUmVjb3JkQXJyYXlzTGF0ZXIoKTsKICAgIH0KCiAg
        ICAvLyBUT0RPOiBVc2UgdGhpcyBvYmplY3QgaW4gdGhlIGNvbW1pdCBwcm9j
        ZXNzCiAgICB0aGlzLmRlc3Ryb3koKTsKICB9LAoKICAvKioKICAgIElmIHRo
        ZSBBdHRyaWJ1dGVDaGFuZ2UgaXMgZGVzdHJveWVkIChlaXRoZXIgYnkgYmVp
        bmcgcm9sbGVkIGJhY2sKICAgIG9yIGJlaW5nIGNvbW1pdHRlZCksIHJlbW92
        ZSBpdCBmcm9tIHRoZSBsaXN0IG9mIHBlbmRpbmcgY2hhbmdlcwogICAgb24g
        dGhlIHJlY29yZC4KCiAgICBAbWV0aG9kIGRlc3Ryb3kKICAqLwogIGRlc3Ry
        b3k6IGZ1bmN0aW9uKCkgewogICAgZGVsZXRlIHRoaXMucmVjb3JkLl9jaGFu
        Z2VzVG9TeW5jW3RoaXMubmFtZV07CiAgfQp9OwoKfSkoKTsKCgoKKGZ1bmN0
        aW9uKCkgewovKioKICBAbW9kdWxlIGVtYmVyLWRhdGEKKi8KCnZhciBnZXQg
        PSBFbWJlci5nZXQsIHNldCA9IEVtYmVyLnNldDsKdmFyIGZvckVhY2ggPSBF
        bWJlci5FbnVtZXJhYmxlVXRpbHMuZm9yRWFjaDsKCi8qKgogIEBjbGFzcyBS
        ZWxhdGlvbnNoaXBDaGFuZ2UKICBAbmFtZXNwYWNlIERTCiAgQHByaXZhdGUK
        ICBAY29uc3RydXRvcgoqLwpEUy5SZWxhdGlvbnNoaXBDaGFuZ2UgPSBmdW5j
        dGlvbihvcHRpb25zKSB7CiAgdGhpcy5wYXJlbnRSZWNvcmQgPSBvcHRpb25z
        LnBhcmVudFJlY29yZDsKICB0aGlzLmNoaWxkUmVjb3JkID0gb3B0aW9ucy5j
        aGlsZFJlY29yZDsKICB0aGlzLmZpcnN0UmVjb3JkID0gb3B0aW9ucy5maXJz
        dFJlY29yZDsKICB0aGlzLmZpcnN0UmVjb3JkS2luZCA9IG9wdGlvbnMuZmly
        c3RSZWNvcmRLaW5kOwogIHRoaXMuZmlyc3RSZWNvcmROYW1lID0gb3B0aW9u
        cy5maXJzdFJlY29yZE5hbWU7CiAgdGhpcy5zZWNvbmRSZWNvcmQgPSBvcHRp
        b25zLnNlY29uZFJlY29yZDsKICB0aGlzLnNlY29uZFJlY29yZEtpbmQgPSBv
        cHRpb25zLnNlY29uZFJlY29yZEtpbmQ7CiAgdGhpcy5zZWNvbmRSZWNvcmRO
        YW1lID0gb3B0aW9ucy5zZWNvbmRSZWNvcmROYW1lOwogIHRoaXMuY2hhbmdl
        VHlwZSA9IG9wdGlvbnMuY2hhbmdlVHlwZTsKICB0aGlzLnN0b3JlID0gb3B0
        aW9ucy5zdG9yZTsKCiAgdGhpcy5jb21taXR0ZWQgPSB7fTsKfTsKCi8qKgog
        IEBjbGFzcyBSZWxhdGlvbnNoaXBDaGFuZ2VBZGQKICBAbmFtZXNwYWNlIERT
        CiAgQHByaXZhdGUKICBAY29uc3RydXRvcgoqLwpEUy5SZWxhdGlvbnNoaXBD
        aGFuZ2VBZGQgPSBmdW5jdGlvbihvcHRpb25zKXsKICBEUy5SZWxhdGlvbnNo
        aXBDaGFuZ2UuY2FsbCh0aGlzLCBvcHRpb25zKTsKfTsKCi8qKgogIEBjbGFz
        cyBSZWxhdGlvbnNoaXBDaGFuZ2VSZW1vdmUKICBAbmFtZXNwYWNlIERTCiAg
        QHByaXZhdGUKICBAY29uc3RydXRvcgoqLwpEUy5SZWxhdGlvbnNoaXBDaGFu
        Z2VSZW1vdmUgPSBmdW5jdGlvbihvcHRpb25zKXsKICBEUy5SZWxhdGlvbnNo
        aXBDaGFuZ2UuY2FsbCh0aGlzLCBvcHRpb25zKTsKfTsKCkRTLlJlbGF0aW9u
        c2hpcENoYW5nZS5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgcmV0
        dXJuIG5ldyBEUy5SZWxhdGlvbnNoaXBDaGFuZ2Uob3B0aW9ucyk7Cn07CgpE
        Uy5SZWxhdGlvbnNoaXBDaGFuZ2VBZGQuY3JlYXRlID0gZnVuY3Rpb24ob3B0
        aW9ucykgewogIHJldHVybiBuZXcgRFMuUmVsYXRpb25zaGlwQ2hhbmdlQWRk
        KG9wdGlvbnMpOwp9OwoKRFMuUmVsYXRpb25zaGlwQ2hhbmdlUmVtb3ZlLmNy
        ZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICByZXR1cm4gbmV3IERTLlJl
        bGF0aW9uc2hpcENoYW5nZVJlbW92ZShvcHRpb25zKTsKfTsKCkRTLk9uZVRv
        TWFueUNoYW5nZSA9IHt9OwpEUy5PbmVUb05vbmVDaGFuZ2UgPSB7fTsKRFMu
        TWFueVRvTm9uZUNoYW5nZSA9IHt9OwpEUy5PbmVUb09uZUNoYW5nZSA9IHt9
        OwpEUy5NYW55VG9NYW55Q2hhbmdlID0ge307CgpEUy5SZWxhdGlvbnNoaXBD
        aGFuZ2UuX2NyZWF0ZUNoYW5nZSA9IGZ1bmN0aW9uKG9wdGlvbnMpewogIGlm
        KG9wdGlvbnMuY2hhbmdlVHlwZSA9PT0gImFkZCIpewogICAgcmV0dXJuIERT
        LlJlbGF0aW9uc2hpcENoYW5nZUFkZC5jcmVhdGUob3B0aW9ucyk7CiAgfQog
        IGlmKG9wdGlvbnMuY2hhbmdlVHlwZSA9PT0gInJlbW92ZSIpewogICAgcmV0
        dXJuIERTLlJlbGF0aW9uc2hpcENoYW5nZVJlbW92ZS5jcmVhdGUob3B0aW9u
        cyk7CiAgfQp9OwoKCkRTLlJlbGF0aW9uc2hpcENoYW5nZS5kZXRlcm1pbmVS
        ZWxhdGlvbnNoaXBUeXBlID0gZnVuY3Rpb24ocmVjb3JkVHlwZSwga25vd25T
        aWRlKXsKICB2YXIga25vd25LZXkgPSBrbm93blNpZGUua2V5LCBrZXksIG90
        aGVyS2luZDsKICB2YXIga25vd25LaW5kID0ga25vd25TaWRlLmtpbmQ7Cgog
        IHZhciBpbnZlcnNlID0gcmVjb3JkVHlwZS5pbnZlcnNlRm9yKGtub3duS2V5
        KTsKCiAgaWYgKGludmVyc2UpewogICAga2V5ID0gaW52ZXJzZS5uYW1lOwog
        ICAgb3RoZXJLaW5kID0gaW52ZXJzZS5raW5kOwogIH0KCiAgaWYgKCFpbnZl
        cnNlKXsKICAgIHJldHVybiBrbm93bktpbmQgPT09ICJiZWxvbmdzVG8iID8g
        Im9uZVRvTm9uZSIgOiAibWFueVRvTm9uZSI7CiAgfQogIGVsc2V7CiAgICBp
        ZihvdGhlcktpbmQgPT09ICJiZWxvbmdzVG8iKXsKICAgICAgcmV0dXJuIGtu
        b3duS2luZCA9PT0gImJlbG9uZ3NUbyIgPyAib25lVG9PbmUiIDogIm1hbnlU
        b09uZSI7CiAgICB9CiAgICBlbHNlewogICAgICByZXR1cm4ga25vd25LaW5k
        ID09PSAiYmVsb25nc1RvIiA/ICJvbmVUb01hbnkiIDogIm1hbnlUb01hbnki
        OwogICAgfQogIH0KCn07CgpEUy5SZWxhdGlvbnNoaXBDaGFuZ2UuY3JlYXRl
        Q2hhbmdlID0gZnVuY3Rpb24oZmlyc3RSZWNvcmQsIHNlY29uZFJlY29yZCwg
        c3RvcmUsIG9wdGlvbnMpewogIC8vIEdldCB0aGUgdHlwZSBvZiB0aGUgY2hp
        bGQgYmFzZWQgb24gdGhlIGNoaWxkJ3MgY2xpZW50IElECiAgdmFyIGZpcnN0
        UmVjb3JkVHlwZSA9IGZpcnN0UmVjb3JkLmNvbnN0cnVjdG9yLCBjaGFuZ2VU
        eXBlOwogIGNoYW5nZVR5cGUgPSBEUy5SZWxhdGlvbnNoaXBDaGFuZ2UuZGV0
        ZXJtaW5lUmVsYXRpb25zaGlwVHlwZShmaXJzdFJlY29yZFR5cGUsIG9wdGlv
        bnMpOwogIGlmIChjaGFuZ2VUeXBlID09PSAib25lVG9NYW55Iil7CiAgICBy
        ZXR1cm4gRFMuT25lVG9NYW55Q2hhbmdlLmNyZWF0ZUNoYW5nZShmaXJzdFJl
        Y29yZCwgc2Vjb25kUmVjb3JkLCBzdG9yZSwgb3B0aW9ucyk7CiAgfQogIGVs
        c2UgaWYgKGNoYW5nZVR5cGUgPT09ICJtYW55VG9PbmUiKXsKICAgIHJldHVy
        biBEUy5PbmVUb01hbnlDaGFuZ2UuY3JlYXRlQ2hhbmdlKHNlY29uZFJlY29y
        ZCwgZmlyc3RSZWNvcmQsIHN0b3JlLCBvcHRpb25zKTsKICB9CiAgZWxzZSBp
        ZiAoY2hhbmdlVHlwZSA9PT0gIm9uZVRvTm9uZSIpewogICAgcmV0dXJuIERT
        Lk9uZVRvTm9uZUNoYW5nZS5jcmVhdGVDaGFuZ2UoZmlyc3RSZWNvcmQsIHNl
        Y29uZFJlY29yZCwgc3RvcmUsIG9wdGlvbnMpOwogIH0KICBlbHNlIGlmIChj
        aGFuZ2VUeXBlID09PSAibWFueVRvTm9uZSIpewogICAgcmV0dXJuIERTLk1h
        bnlUb05vbmVDaGFuZ2UuY3JlYXRlQ2hhbmdlKGZpcnN0UmVjb3JkLCBzZWNv
        bmRSZWNvcmQsIHN0b3JlLCBvcHRpb25zKTsKICB9CiAgZWxzZSBpZiAoY2hh
        bmdlVHlwZSA9PT0gIm9uZVRvT25lIil7CiAgICByZXR1cm4gRFMuT25lVG9P
        bmVDaGFuZ2UuY3JlYXRlQ2hhbmdlKGZpcnN0UmVjb3JkLCBzZWNvbmRSZWNv
        cmQsIHN0b3JlLCBvcHRpb25zKTsKICB9CiAgZWxzZSBpZiAoY2hhbmdlVHlw
        ZSA9PT0gIm1hbnlUb01hbnkiKXsKICAgIHJldHVybiBEUy5NYW55VG9NYW55
        Q2hhbmdlLmNyZWF0ZUNoYW5nZShmaXJzdFJlY29yZCwgc2Vjb25kUmVjb3Jk
        LCBzdG9yZSwgb3B0aW9ucyk7CiAgfQp9OwoKRFMuT25lVG9Ob25lQ2hhbmdl
        LmNyZWF0ZUNoYW5nZSA9IGZ1bmN0aW9uKGNoaWxkUmVjb3JkLCBwYXJlbnRS
        ZWNvcmQsIHN0b3JlLCBvcHRpb25zKSB7CiAgdmFyIGtleSA9IG9wdGlvbnMu
        a2V5OwogIHZhciBjaGFuZ2UgPSBEUy5SZWxhdGlvbnNoaXBDaGFuZ2UuX2Ny
        ZWF0ZUNoYW5nZSh7CiAgICAgIHBhcmVudFJlY29yZDogcGFyZW50UmVjb3Jk
        LAogICAgICBjaGlsZFJlY29yZDogY2hpbGRSZWNvcmQsCiAgICAgIGZpcnN0
        UmVjb3JkOiBjaGlsZFJlY29yZCwKICAgICAgc3RvcmU6IHN0b3JlLAogICAg
        ICBjaGFuZ2VUeXBlOiBvcHRpb25zLmNoYW5nZVR5cGUsCiAgICAgIGZpcnN0
        UmVjb3JkTmFtZToga2V5LAogICAgICBmaXJzdFJlY29yZEtpbmQ6ICJiZWxv
        bmdzVG8iCiAgfSk7CgogIHN0b3JlLmFkZFJlbGF0aW9uc2hpcENoYW5nZUZv
        cihjaGlsZFJlY29yZCwga2V5LCBwYXJlbnRSZWNvcmQsIG51bGwsIGNoYW5n
        ZSk7CgogIHJldHVybiBjaGFuZ2U7Cn07CgpEUy5NYW55VG9Ob25lQ2hhbmdl
        LmNyZWF0ZUNoYW5nZSA9IGZ1bmN0aW9uKGNoaWxkUmVjb3JkLCBwYXJlbnRS
        ZWNvcmQsIHN0b3JlLCBvcHRpb25zKSB7CiAgdmFyIGtleSA9IG9wdGlvbnMu
        a2V5OwogIHZhciBjaGFuZ2UgPSBEUy5SZWxhdGlvbnNoaXBDaGFuZ2UuX2Ny
        ZWF0ZUNoYW5nZSh7CiAgICAgIHBhcmVudFJlY29yZDogY2hpbGRSZWNvcmQs
        CiAgICAgIGNoaWxkUmVjb3JkOiBwYXJlbnRSZWNvcmQsCiAgICAgIHNlY29u
        ZFJlY29yZDogY2hpbGRSZWNvcmQsCiAgICAgIHN0b3JlOiBzdG9yZSwKICAg
        ICAgY2hhbmdlVHlwZTogb3B0aW9ucy5jaGFuZ2VUeXBlLAogICAgICBzZWNv
        bmRSZWNvcmROYW1lOiBvcHRpb25zLmtleSwKICAgICAgc2Vjb25kUmVjb3Jk
        S2luZDogImhhc01hbnkiCiAgfSk7CgogIHN0b3JlLmFkZFJlbGF0aW9uc2hp
        cENoYW5nZUZvcihjaGlsZFJlY29yZCwga2V5LCBwYXJlbnRSZWNvcmQsIG51
        bGwsIGNoYW5nZSk7CiAgcmV0dXJuIGNoYW5nZTsKfTsKCgpEUy5NYW55VG9N
        YW55Q2hhbmdlLmNyZWF0ZUNoYW5nZSA9IGZ1bmN0aW9uKGNoaWxkUmVjb3Jk
        LCBwYXJlbnRSZWNvcmQsIHN0b3JlLCBvcHRpb25zKSB7CiAgLy8gSWYgdGhl
        IG5hbWUgb2YgdGhlIGJlbG9uZ3NUbyBzaWRlIG9mIHRoZSByZWxhdGlvbnNo
        aXAgaXMgc3BlY2lmaWVkLAogIC8vIHVzZSB0aGF0CiAgLy8gSWYgdGhlIHR5
        cGUgb2YgdGhlIHBhcmVudCBpcyBzcGVjaWZpZWQsIGxvb2sgaXQgdXAgb24g
        dGhlIGNoaWxkJ3MgdHlwZQogIC8vIGRlZmluaXRpb24uCiAgdmFyIGtleSA9
        IG9wdGlvbnMua2V5OwoKICB2YXIgY2hhbmdlID0gRFMuUmVsYXRpb25zaGlw
        Q2hhbmdlLl9jcmVhdGVDaGFuZ2UoewogICAgICBwYXJlbnRSZWNvcmQ6IHBh
        cmVudFJlY29yZCwKICAgICAgY2hpbGRSZWNvcmQ6IGNoaWxkUmVjb3JkLAog
        ICAgICBmaXJzdFJlY29yZDogY2hpbGRSZWNvcmQsCiAgICAgIHNlY29uZFJl
        Y29yZDogcGFyZW50UmVjb3JkLAogICAgICBmaXJzdFJlY29yZEtpbmQ6ICJo
        YXNNYW55IiwKICAgICAgc2Vjb25kUmVjb3JkS2luZDogImhhc01hbnkiLAog
        ICAgICBzdG9yZTogc3RvcmUsCiAgICAgIGNoYW5nZVR5cGU6IG9wdGlvbnMu
        Y2hhbmdlVHlwZSwKICAgICAgZmlyc3RSZWNvcmROYW1lOiAga2V5CiAgfSk7
        CgogIHN0b3JlLmFkZFJlbGF0aW9uc2hpcENoYW5nZUZvcihjaGlsZFJlY29y
        ZCwga2V5LCBwYXJlbnRSZWNvcmQsIG51bGwsIGNoYW5nZSk7CgoKICByZXR1
        cm4gY2hhbmdlOwp9OwoKRFMuT25lVG9PbmVDaGFuZ2UuY3JlYXRlQ2hhbmdl
        ID0gZnVuY3Rpb24oY2hpbGRSZWNvcmQsIHBhcmVudFJlY29yZCwgc3RvcmUs
        IG9wdGlvbnMpIHsKICB2YXIga2V5OwoKICAvLyBJZiB0aGUgbmFtZSBvZiB0
        aGUgYmVsb25nc1RvIHNpZGUgb2YgdGhlIHJlbGF0aW9uc2hpcCBpcyBzcGVj
        aWZpZWQsCiAgLy8gdXNlIHRoYXQKICAvLyBJZiB0aGUgdHlwZSBvZiB0aGUg
        cGFyZW50IGlzIHNwZWNpZmllZCwgbG9vayBpdCB1cCBvbiB0aGUgY2hpbGQn
        cyB0eXBlCiAgLy8gZGVmaW5pdGlvbi4KICBpZiAob3B0aW9ucy5wYXJlbnRU
        eXBlKSB7CiAgICBrZXkgPSBvcHRpb25zLnBhcmVudFR5cGUuaW52ZXJzZUZv
        cihvcHRpb25zLmtleSkubmFtZTsKICB9IGVsc2UgaWYgKG9wdGlvbnMua2V5
        KSB7CiAgICBrZXkgPSBvcHRpb25zLmtleTsKICB9IGVsc2UgewogICAgRW1i
        ZXIuYXNzZXJ0KCJZb3UgbXVzdCBwYXNzIGVpdGhlciBhIHBhcmVudFR5cGUg
        b3IgYmVsb25nc1RvTmFtZSBvcHRpb24gdG8gT25lVG9NYW55Q2hhbmdlLmZv
        ckNoaWxkQW5kUGFyZW50IiwgZmFsc2UpOwogIH0KCiAgdmFyIGNoYW5nZSA9
        IERTLlJlbGF0aW9uc2hpcENoYW5nZS5fY3JlYXRlQ2hhbmdlKHsKICAgICAg
        cGFyZW50UmVjb3JkOiBwYXJlbnRSZWNvcmQsCiAgICAgIGNoaWxkUmVjb3Jk
        OiBjaGlsZFJlY29yZCwKICAgICAgZmlyc3RSZWNvcmQ6IGNoaWxkUmVjb3Jk
        LAogICAgICBzZWNvbmRSZWNvcmQ6IHBhcmVudFJlY29yZCwKICAgICAgZmly
        c3RSZWNvcmRLaW5kOiAiYmVsb25nc1RvIiwKICAgICAgc2Vjb25kUmVjb3Jk
        S2luZDogImJlbG9uZ3NUbyIsCiAgICAgIHN0b3JlOiBzdG9yZSwKICAgICAg
        Y2hhbmdlVHlwZTogb3B0aW9ucy5jaGFuZ2VUeXBlLAogICAgICBmaXJzdFJl
        Y29yZE5hbWU6ICBrZXkKICB9KTsKCiAgc3RvcmUuYWRkUmVsYXRpb25zaGlw
        Q2hhbmdlRm9yKGNoaWxkUmVjb3JkLCBrZXksIHBhcmVudFJlY29yZCwgbnVs
        bCwgY2hhbmdlKTsKCgogIHJldHVybiBjaGFuZ2U7Cn07CgpEUy5PbmVUb09u
        ZUNoYW5nZS5tYWludGFpbkludmFyaWFudCA9IGZ1bmN0aW9uKG9wdGlvbnMs
        IHN0b3JlLCBjaGlsZFJlY29yZCwga2V5KXsKICBpZiAob3B0aW9ucy5jaGFu
        Z2VUeXBlID09PSAiYWRkIiAmJiBzdG9yZS5yZWNvcmRJc01hdGVyaWFsaXpl
        ZChjaGlsZFJlY29yZCkpIHsKICAgIHZhciBvbGRQYXJlbnQgPSBnZXQoY2hp
        bGRSZWNvcmQsIGtleSk7CiAgICBpZiAob2xkUGFyZW50KXsKICAgICAgdmFy
        IGNvcnJlc3BvbmRpbmdDaGFuZ2UgPSBEUy5PbmVUb09uZUNoYW5nZS5jcmVh
        dGVDaGFuZ2UoY2hpbGRSZWNvcmQsIG9sZFBhcmVudCwgc3RvcmUsIHsKICAg
        ICAgICAgIHBhcmVudFR5cGU6IG9wdGlvbnMucGFyZW50VHlwZSwKICAgICAg
        ICAgIGhhc01hbnlOYW1lOiBvcHRpb25zLmhhc01hbnlOYW1lLAogICAgICAg
        ICAgY2hhbmdlVHlwZTogInJlbW92ZSIsCiAgICAgICAgICBrZXk6IG9wdGlv
        bnMua2V5CiAgICAgICAgfSk7CiAgICAgIHN0b3JlLmFkZFJlbGF0aW9uc2hp
        cENoYW5nZUZvcihjaGlsZFJlY29yZCwga2V5LCBvcHRpb25zLnBhcmVudFJl
        Y29yZCAsIG51bGwsIGNvcnJlc3BvbmRpbmdDaGFuZ2UpOwogICAgIGNvcnJl
        c3BvbmRpbmdDaGFuZ2Uuc3luYygpOwogICAgfQogIH0KfTsKCkRTLk9uZVRv
        TWFueUNoYW5nZS5jcmVhdGVDaGFuZ2UgPSBmdW5jdGlvbihjaGlsZFJlY29y
        ZCwgcGFyZW50UmVjb3JkLCBzdG9yZSwgb3B0aW9ucykgewogIHZhciBrZXk7
        CgogIC8vIElmIHRoZSBuYW1lIG9mIHRoZSBiZWxvbmdzVG8gc2lkZSBvZiB0
        aGUgcmVsYXRpb25zaGlwIGlzIHNwZWNpZmllZCwKICAvLyB1c2UgdGhhdAog
        IC8vIElmIHRoZSB0eXBlIG9mIHRoZSBwYXJlbnQgaXMgc3BlY2lmaWVkLCBs
        b29rIGl0IHVwIG9uIHRoZSBjaGlsZCdzIHR5cGUKICAvLyBkZWZpbml0aW9u
        LgogIGlmIChvcHRpb25zLnBhcmVudFR5cGUpIHsKICAgIGtleSA9IG9wdGlv
        bnMucGFyZW50VHlwZS5pbnZlcnNlRm9yKG9wdGlvbnMua2V5KS5uYW1lOwog
        ICAgRFMuT25lVG9NYW55Q2hhbmdlLm1haW50YWluSW52YXJpYW50KCBvcHRp
        b25zLCBzdG9yZSwgY2hpbGRSZWNvcmQsIGtleSApOwogIH0gZWxzZSBpZiAo
        b3B0aW9ucy5rZXkpIHsKICAgIGtleSA9IG9wdGlvbnMua2V5OwogIH0gZWxz
        ZSB7CiAgICBFbWJlci5hc3NlcnQoIllvdSBtdXN0IHBhc3MgZWl0aGVyIGEg
        cGFyZW50VHlwZSBvciBiZWxvbmdzVG9OYW1lIG9wdGlvbiB0byBPbmVUb01h
        bnlDaGFuZ2UuZm9yQ2hpbGRBbmRQYXJlbnQiLCBmYWxzZSk7CiAgfQoKICB2
        YXIgY2hhbmdlID0gRFMuUmVsYXRpb25zaGlwQ2hhbmdlLl9jcmVhdGVDaGFu
        Z2UoewogICAgICBwYXJlbnRSZWNvcmQ6IHBhcmVudFJlY29yZCwKICAgICAg
        Y2hpbGRSZWNvcmQ6IGNoaWxkUmVjb3JkLAogICAgICBmaXJzdFJlY29yZDog
        Y2hpbGRSZWNvcmQsCiAgICAgIHNlY29uZFJlY29yZDogcGFyZW50UmVjb3Jk
        LAogICAgICBmaXJzdFJlY29yZEtpbmQ6ICJiZWxvbmdzVG8iLAogICAgICBz
        ZWNvbmRSZWNvcmRLaW5kOiAiaGFzTWFueSIsCiAgICAgIHN0b3JlOiBzdG9y
        ZSwKICAgICAgY2hhbmdlVHlwZTogb3B0aW9ucy5jaGFuZ2VUeXBlLAogICAg
        ICBmaXJzdFJlY29yZE5hbWU6ICBrZXkKICB9KTsKCiAgc3RvcmUuYWRkUmVs
        YXRpb25zaGlwQ2hhbmdlRm9yKGNoaWxkUmVjb3JkLCBrZXksIHBhcmVudFJl
        Y29yZCwgY2hhbmdlLmdldFNlY29uZFJlY29yZE5hbWUoKSwgY2hhbmdlKTsK
        CgogIHJldHVybiBjaGFuZ2U7Cn07CgoKRFMuT25lVG9NYW55Q2hhbmdlLm1h
        aW50YWluSW52YXJpYW50ID0gZnVuY3Rpb24ob3B0aW9ucywgc3RvcmUsIGNo
        aWxkUmVjb3JkLCBrZXkpewogIGlmIChvcHRpb25zLmNoYW5nZVR5cGUgPT09
        ICJhZGQiICYmIGNoaWxkUmVjb3JkKSB7CiAgICB2YXIgb2xkUGFyZW50ID0g
        Z2V0KGNoaWxkUmVjb3JkLCBrZXkpOwogICAgaWYgKG9sZFBhcmVudCl7CiAg
        ICAgIHZhciBjb3JyZXNwb25kaW5nQ2hhbmdlID0gRFMuT25lVG9NYW55Q2hh
        bmdlLmNyZWF0ZUNoYW5nZShjaGlsZFJlY29yZCwgb2xkUGFyZW50LCBzdG9y
        ZSwgewogICAgICAgICAgcGFyZW50VHlwZTogb3B0aW9ucy5wYXJlbnRUeXBl
        LAogICAgICAgICAgaGFzTWFueU5hbWU6IG9wdGlvbnMuaGFzTWFueU5hbWUs
        CiAgICAgICAgICBjaGFuZ2VUeXBlOiAicmVtb3ZlIiwKICAgICAgICAgIGtl
        eTogb3B0aW9ucy5rZXkKICAgICAgICB9KTsKICAgICAgc3RvcmUuYWRkUmVs
        YXRpb25zaGlwQ2hhbmdlRm9yKGNoaWxkUmVjb3JkLCBrZXksIG9wdGlvbnMu
        cGFyZW50UmVjb3JkLCBjb3JyZXNwb25kaW5nQ2hhbmdlLmdldFNlY29uZFJl
        Y29yZE5hbWUoKSwgY29ycmVzcG9uZGluZ0NoYW5nZSk7CiAgICAgIGNvcnJl
        c3BvbmRpbmdDaGFuZ2Uuc3luYygpOwogICAgfQogIH0KfTsKCi8qKgogIEBj
        bGFzcyBSZWxhdGlvbnNoaXBDaGFuZ2UKICBAbmFtZXNwYWNlIERTCiovCkRT
        LlJlbGF0aW9uc2hpcENoYW5nZS5wcm90b3R5cGUgPSB7CgogIGdldFNlY29u
        ZFJlY29yZE5hbWU6IGZ1bmN0aW9uKCkgewogICAgdmFyIG5hbWUgPSB0aGlz
        LnNlY29uZFJlY29yZE5hbWUsIHBhcmVudDsKCiAgICBpZiAoIW5hbWUpIHsK
        ICAgICAgcGFyZW50ID0gdGhpcy5zZWNvbmRSZWNvcmQ7CiAgICAgIGlmICgh
        cGFyZW50KSB7IHJldHVybjsgfQoKICAgICAgdmFyIGNoaWxkVHlwZSA9IHRo
        aXMuZmlyc3RSZWNvcmQuY29uc3RydWN0b3I7CiAgICAgIHZhciBpbnZlcnNl
        ID0gY2hpbGRUeXBlLmludmVyc2VGb3IodGhpcy5maXJzdFJlY29yZE5hbWUp
        OwogICAgICB0aGlzLnNlY29uZFJlY29yZE5hbWUgPSBpbnZlcnNlLm5hbWU7
        CiAgICB9CgogICAgcmV0dXJuIHRoaXMuc2Vjb25kUmVjb3JkTmFtZTsKICB9
        LAoKICAvKioKICAgIEdldCB0aGUgbmFtZSBvZiB0aGUgcmVsYXRpb25zaGlw
        IG9uIHRoZSBiZWxvbmdzVG8gc2lkZS4KCiAgICBAbWV0aG9kIGdldEZpcnN0
        UmVjb3JkTmFtZQogICAgQHJldHVybiB7U3RyaW5nfQogICovCiAgZ2V0Rmly
        c3RSZWNvcmROYW1lOiBmdW5jdGlvbigpIHsKICAgIHZhciBuYW1lID0gdGhp
        cy5maXJzdFJlY29yZE5hbWU7CiAgICByZXR1cm4gbmFtZTsKICB9LAoKICAv
        KioKICAgIEBtZXRob2QgZGVzdHJveQogICAgQHByaXZhdGUKICAqLwogIGRl
        c3Ryb3k6IGZ1bmN0aW9uKCkgewogICAgdmFyIGNoaWxkUmVjb3JkID0gdGhp
        cy5jaGlsZFJlY29yZCwKICAgICAgICBiZWxvbmdzVG9OYW1lID0gdGhpcy5n
        ZXRGaXJzdFJlY29yZE5hbWUoKSwKICAgICAgICBoYXNNYW55TmFtZSA9IHRo
        aXMuZ2V0U2Vjb25kUmVjb3JkTmFtZSgpLAogICAgICAgIHN0b3JlID0gdGhp
        cy5zdG9yZTsKCiAgICBzdG9yZS5yZW1vdmVSZWxhdGlvbnNoaXBDaGFuZ2VG
        b3IoY2hpbGRSZWNvcmQsIGJlbG9uZ3NUb05hbWUsIHRoaXMucGFyZW50UmVj
        b3JkLCBoYXNNYW55TmFtZSwgdGhpcy5jaGFuZ2VUeXBlKTsKICB9LAoKICBn
        ZXRTZWNvbmRSZWNvcmQ6IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gdGhpcy5z
        ZWNvbmRSZWNvcmQ7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIGdldEZpcnN0
        UmVjb3JkCiAgICBAcHJpdmF0ZQogICovCiAgZ2V0Rmlyc3RSZWNvcmQ6IGZ1
        bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMuZmlyc3RSZWNvcmQ7CiAgfSwK
        CiAgY29hbGVzY2U6IGZ1bmN0aW9uKCl7CiAgICB2YXIgcmVsYXRpb25zaGlw
        UGFpcnMgPSB0aGlzLnN0b3JlLnJlbGF0aW9uc2hpcENoYW5nZVBhaXJzRm9y
        KHRoaXMuZmlyc3RSZWNvcmQpOwogICAgZm9yRWFjaChyZWxhdGlvbnNoaXBQ
        YWlycywgZnVuY3Rpb24ocGFpcil7CiAgICAgIHZhciBhZGRlZENoYW5nZSA9
        IHBhaXJbImFkZCJdOwogICAgICB2YXIgcmVtb3ZlZENoYW5nZSA9IHBhaXJb
        InJlbW92ZSJdOwogICAgICBpZihhZGRlZENoYW5nZSAmJiByZW1vdmVkQ2hh
        bmdlKSB7CiAgICAgICAgYWRkZWRDaGFuZ2UuZGVzdHJveSgpOwogICAgICAg
        IHJlbW92ZWRDaGFuZ2UuZGVzdHJveSgpOwogICAgICB9CiAgICB9KTsKICB9
        Cn07CgpEUy5SZWxhdGlvbnNoaXBDaGFuZ2VBZGQucHJvdG90eXBlID0gRW1i
        ZXIuY3JlYXRlKERTLlJlbGF0aW9uc2hpcENoYW5nZS5jcmVhdGUoe30pKTsK
        RFMuUmVsYXRpb25zaGlwQ2hhbmdlUmVtb3ZlLnByb3RvdHlwZSA9IEVtYmVy
        LmNyZWF0ZShEUy5SZWxhdGlvbnNoaXBDaGFuZ2UuY3JlYXRlKHt9KSk7Cgov
        LyB0aGUgb2JqZWN0IGlzIGEgdmFsdWUsIGFuZCBub3QgYSBwcm9taXNlCmZ1
        bmN0aW9uIGlzVmFsdWUob2JqZWN0KSB7CiAgcmV0dXJuIHR5cGVvZiBvYmpl
        Y3QgPT09ICdvYmplY3QnICYmICghb2JqZWN0LnRoZW4gfHwgdHlwZW9mIG9i
        amVjdC50aGVuICE9PSAnZnVuY3Rpb24nKTsKfQoKRFMuUmVsYXRpb25zaGlw
        Q2hhbmdlQWRkLnByb3RvdHlwZS5jaGFuZ2VUeXBlID0gImFkZCI7CkRTLlJl
        bGF0aW9uc2hpcENoYW5nZUFkZC5wcm90b3R5cGUuc3luYyA9IGZ1bmN0aW9u
        KCkgewogIHZhciBzZWNvbmRSZWNvcmROYW1lID0gdGhpcy5nZXRTZWNvbmRS
        ZWNvcmROYW1lKCksCiAgICAgIGZpcnN0UmVjb3JkTmFtZSA9IHRoaXMuZ2V0
        Rmlyc3RSZWNvcmROYW1lKCksCiAgICAgIGZpcnN0UmVjb3JkID0gdGhpcy5n
        ZXRGaXJzdFJlY29yZCgpLAogICAgICBzZWNvbmRSZWNvcmQgPSB0aGlzLmdl
        dFNlY29uZFJlY29yZCgpOwoKICAvL0VtYmVyLmFzc2VydCgiWW91IHNwZWNp
        ZmllZCBhIGhhc01hbnkgKCIgKyBoYXNNYW55TmFtZSArICIpIG9uICIgKyAo
        IWJlbG9uZ3NUb05hbWUgJiYgKG5ld1BhcmVudCB8fCBvbGRQYXJlbnQgfHwg
        dGhpcy5sYXN0UGFyZW50KS5jb25zdHJ1Y3RvcikgKyAiIGJ1dCBkaWQgbm90
        IHNwZWNpZnkgYW4gaW52ZXJzZSBiZWxvbmdzVG8gb24gIiArIGNoaWxkLmNv
        bnN0cnVjdG9yLCBiZWxvbmdzVG9OYW1lKTsKICAvL0VtYmVyLmFzc2VydCgi
        WW91IHNwZWNpZmllZCBhIGJlbG9uZ3NUbyAoIiArIGJlbG9uZ3NUb05hbWUg
        KyAiKSBvbiAiICsgY2hpbGQuY29uc3RydWN0b3IgKyAiIGJ1dCBkaWQgbm90
        IHNwZWNpZnkgYW4gaW52ZXJzZSBoYXNNYW55IG9uICIgKyAoIWhhc01hbnlO
        YW1lICYmIChuZXdQYXJlbnQgfHwgb2xkUGFyZW50IHx8IHRoaXMubGFzdFBh
        cmVudFJlY29yZCkuY29uc3RydWN0b3IpLCBoYXNNYW55TmFtZSk7CgogIGlm
        IChzZWNvbmRSZWNvcmQgaW5zdGFuY2VvZiBEUy5Nb2RlbCAmJiBmaXJzdFJl
        Y29yZCBpbnN0YW5jZW9mIERTLk1vZGVsKSB7CiAgICBpZih0aGlzLnNlY29u
        ZFJlY29yZEtpbmQgPT09ICJiZWxvbmdzVG8iKXsKICAgICAgc2Vjb25kUmVj
        b3JkLnN1c3BlbmRSZWxhdGlvbnNoaXBPYnNlcnZlcnMoZnVuY3Rpb24oKXsK
        ICAgICAgICBzZXQoc2Vjb25kUmVjb3JkLCBzZWNvbmRSZWNvcmROYW1lLCBm
        aXJzdFJlY29yZCk7CiAgICAgIH0pOwoKICAgICB9CiAgICAgZWxzZSBpZih0
        aGlzLnNlY29uZFJlY29yZEtpbmQgPT09ICJoYXNNYW55Iil7CiAgICAgIHNl
        Y29uZFJlY29yZC5zdXNwZW5kUmVsYXRpb25zaGlwT2JzZXJ2ZXJzKGZ1bmN0
        aW9uKCl7CiAgICAgICAgdmFyIHJlbGF0aW9uc2hpcCA9IGdldChzZWNvbmRS
        ZWNvcmQsIHNlY29uZFJlY29yZE5hbWUpOwogICAgICAgIGlmIChpc1ZhbHVl
        KHJlbGF0aW9uc2hpcCkpIHsgcmVsYXRpb25zaGlwLmFkZE9iamVjdChmaXJz
        dFJlY29yZCk7IH0KICAgICAgfSk7CiAgICB9CiAgfQoKICBpZiAoZmlyc3RS
        ZWNvcmQgaW5zdGFuY2VvZiBEUy5Nb2RlbCAmJiBzZWNvbmRSZWNvcmQgaW5z
        dGFuY2VvZiBEUy5Nb2RlbCAmJiBnZXQoZmlyc3RSZWNvcmQsIGZpcnN0UmVj
        b3JkTmFtZSkgIT09IHNlY29uZFJlY29yZCkgewogICAgaWYodGhpcy5maXJz
        dFJlY29yZEtpbmQgPT09ICJiZWxvbmdzVG8iKXsKICAgICAgZmlyc3RSZWNv
        cmQuc3VzcGVuZFJlbGF0aW9uc2hpcE9ic2VydmVycyhmdW5jdGlvbigpewog
        ICAgICAgIHNldChmaXJzdFJlY29yZCwgZmlyc3RSZWNvcmROYW1lLCBzZWNv
        bmRSZWNvcmQpOwogICAgICB9KTsKICAgIH0KICAgIGVsc2UgaWYodGhpcy5m
        aXJzdFJlY29yZEtpbmQgPT09ICJoYXNNYW55Iil7CiAgICAgIGZpcnN0UmVj
        b3JkLnN1c3BlbmRSZWxhdGlvbnNoaXBPYnNlcnZlcnMoZnVuY3Rpb24oKXsK
        ICAgICAgICB2YXIgcmVsYXRpb25zaGlwID0gZ2V0KGZpcnN0UmVjb3JkLCBm
        aXJzdFJlY29yZE5hbWUpOwogICAgICAgIGlmIChpc1ZhbHVlKHJlbGF0aW9u
        c2hpcCkpIHsgcmVsYXRpb25zaGlwLmFkZE9iamVjdChzZWNvbmRSZWNvcmQp
        OyB9CiAgICAgIH0pOwogICAgfQogIH0KCiAgdGhpcy5jb2FsZXNjZSgpOwp9
        OwoKRFMuUmVsYXRpb25zaGlwQ2hhbmdlUmVtb3ZlLnByb3RvdHlwZS5jaGFu
        Z2VUeXBlID0gInJlbW92ZSI7CkRTLlJlbGF0aW9uc2hpcENoYW5nZVJlbW92
        ZS5wcm90b3R5cGUuc3luYyA9IGZ1bmN0aW9uKCkgewogIHZhciBzZWNvbmRS
        ZWNvcmROYW1lID0gdGhpcy5nZXRTZWNvbmRSZWNvcmROYW1lKCksCiAgICAg
        IGZpcnN0UmVjb3JkTmFtZSA9IHRoaXMuZ2V0Rmlyc3RSZWNvcmROYW1lKCks
        CiAgICAgIGZpcnN0UmVjb3JkID0gdGhpcy5nZXRGaXJzdFJlY29yZCgpLAog
        ICAgICBzZWNvbmRSZWNvcmQgPSB0aGlzLmdldFNlY29uZFJlY29yZCgpOwoK
        ICAvL0VtYmVyLmFzc2VydCgiWW91IHNwZWNpZmllZCBhIGhhc01hbnkgKCIg
        KyBoYXNNYW55TmFtZSArICIpIG9uICIgKyAoIWJlbG9uZ3NUb05hbWUgJiYg
        KG5ld1BhcmVudCB8fCBvbGRQYXJlbnQgfHwgdGhpcy5sYXN0UGFyZW50KS5j
        b25zdHJ1Y3RvcikgKyAiIGJ1dCBkaWQgbm90IHNwZWNpZnkgYW4gaW52ZXJz
        ZSBiZWxvbmdzVG8gb24gIiArIGNoaWxkLmNvbnN0cnVjdG9yLCBiZWxvbmdz
        VG9OYW1lKTsKICAvL0VtYmVyLmFzc2VydCgiWW91IHNwZWNpZmllZCBhIGJl
        bG9uZ3NUbyAoIiArIGJlbG9uZ3NUb05hbWUgKyAiKSBvbiAiICsgY2hpbGQu
        Y29uc3RydWN0b3IgKyAiIGJ1dCBkaWQgbm90IHNwZWNpZnkgYW4gaW52ZXJz
        ZSBoYXNNYW55IG9uICIgKyAoIWhhc01hbnlOYW1lICYmIChuZXdQYXJlbnQg
        fHwgb2xkUGFyZW50IHx8IHRoaXMubGFzdFBhcmVudFJlY29yZCkuY29uc3Ry
        dWN0b3IpLCBoYXNNYW55TmFtZSk7CgogIGlmIChzZWNvbmRSZWNvcmQgaW5z
        dGFuY2VvZiBEUy5Nb2RlbCAmJiBmaXJzdFJlY29yZCBpbnN0YW5jZW9mIERT
        Lk1vZGVsKSB7CiAgICBpZih0aGlzLnNlY29uZFJlY29yZEtpbmQgPT09ICJi
        ZWxvbmdzVG8iKXsKICAgICAgc2Vjb25kUmVjb3JkLnN1c3BlbmRSZWxhdGlv
        bnNoaXBPYnNlcnZlcnMoZnVuY3Rpb24oKXsKICAgICAgICBzZXQoc2Vjb25k
        UmVjb3JkLCBzZWNvbmRSZWNvcmROYW1lLCBudWxsKTsKICAgICAgfSk7CiAg
        ICB9CiAgICBlbHNlIGlmKHRoaXMuc2Vjb25kUmVjb3JkS2luZCA9PT0gImhh
        c01hbnkiKXsKICAgICAgc2Vjb25kUmVjb3JkLnN1c3BlbmRSZWxhdGlvbnNo
        aXBPYnNlcnZlcnMoZnVuY3Rpb24oKXsKICAgICAgICB2YXIgcmVsYXRpb25z
        aGlwID0gZ2V0KHNlY29uZFJlY29yZCwgc2Vjb25kUmVjb3JkTmFtZSk7CiAg
        ICAgICAgaWYgKGlzVmFsdWUocmVsYXRpb25zaGlwKSkgeyByZWxhdGlvbnNo
        aXAucmVtb3ZlT2JqZWN0KGZpcnN0UmVjb3JkKTsgfQogICAgICB9KTsKICAg
        IH0KICB9CgogIGlmIChmaXJzdFJlY29yZCBpbnN0YW5jZW9mIERTLk1vZGVs
        ICYmIGdldChmaXJzdFJlY29yZCwgZmlyc3RSZWNvcmROYW1lKSkgewogICAg
        aWYodGhpcy5maXJzdFJlY29yZEtpbmQgPT09ICJiZWxvbmdzVG8iKXsKICAg
        ICAgZmlyc3RSZWNvcmQuc3VzcGVuZFJlbGF0aW9uc2hpcE9ic2VydmVycyhm
        dW5jdGlvbigpewogICAgICAgIHNldChmaXJzdFJlY29yZCwgZmlyc3RSZWNv
        cmROYW1lLCBudWxsKTsKICAgICAgfSk7CiAgICAgfQogICAgIGVsc2UgaWYo
        dGhpcy5maXJzdFJlY29yZEtpbmQgPT09ICJoYXNNYW55Iil7CiAgICAgICBm
        aXJzdFJlY29yZC5zdXNwZW5kUmVsYXRpb25zaGlwT2JzZXJ2ZXJzKGZ1bmN0
        aW9uKCl7CiAgICAgICAgIHZhciByZWxhdGlvbnNoaXAgPSBnZXQoZmlyc3RS
        ZWNvcmQsIGZpcnN0UmVjb3JkTmFtZSk7CiAgICAgICAgIGlmIChpc1ZhbHVl
        KHJlbGF0aW9uc2hpcCkpIHsgcmVsYXRpb25zaGlwLnJlbW92ZU9iamVjdChz
        ZWNvbmRSZWNvcmQpOyB9CiAgICAgIH0pOwogICAgfQogIH0KCiAgdGhpcy5j
        b2FsZXNjZSgpOwp9OwoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewovKioKICBA
        bW9kdWxlIGVtYmVyLWRhdGEKKi8KCn0pKCk7CgoKCihmdW5jdGlvbigpIHsK
        dmFyIGdldCA9IEVtYmVyLmdldCwgc2V0ID0gRW1iZXIuc2V0LAogICAgaXNO
        b25lID0gRW1iZXIuaXNOb25lOwoKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRh
        CiovCgpmdW5jdGlvbiBhc3luY0JlbG9uZ3NUbyh0eXBlLCBvcHRpb25zLCBt
        ZXRhKSB7CiAgcmV0dXJuIEVtYmVyLmNvbXB1dGVkKGZ1bmN0aW9uKGtleSwg
        dmFsdWUpIHsKICAgIHZhciBkYXRhID0gZ2V0KHRoaXMsICdkYXRhJyksCiAg
        ICAgICAgc3RvcmUgPSBnZXQodGhpcywgJ3N0b3JlJyk7CgogICAgaWYgKGFy
        Z3VtZW50cy5sZW5ndGggPT09IDIpIHsKICAgICAgRW1iZXIuYXNzZXJ0KCJZ
        b3UgY2FuIG9ubHkgYWRkIGEgJyIgKyB0eXBlICsgIicgcmVjb3JkIHRvIHRo
        aXMgcmVsYXRpb25zaGlwIiwgIXZhbHVlIHx8IHZhbHVlIGluc3RhbmNlb2Yg
        c3RvcmUubW9kZWxGb3IodHlwZSkpOwogICAgICByZXR1cm4gdmFsdWUgPT09
        IHVuZGVmaW5lZCA/IG51bGwgOiB2YWx1ZTsKICAgIH0KCiAgICB2YXIgbGlu
        ayA9IGRhdGEubGlua3MgJiYgZGF0YS5saW5rc1trZXldLAogICAgICAgIGJl
        bG9uZ3NUbyA9IGRhdGFba2V5XTsKCiAgICBpZighaXNOb25lKGJlbG9uZ3NU
        bykpIHsKICAgICAgdmFyIHByb21pc2UgPSBzdG9yZS5mZXRjaFJlY29yZChi
        ZWxvbmdzVG8pIHx8IEVtYmVyLlJTVlAucmVzb2x2ZShiZWxvbmdzVG8pOwog
        ICAgICByZXR1cm4gRFMuUHJvbWlzZU9iamVjdC5jcmVhdGUoe3Byb21pc2U6
        IHByb21pc2V9KTsKICAgIH0gZWxzZSBpZiAobGluaykgewogICAgICB2YXIg
        cmVzb2x2ZXIgPSBFbWJlci5SU1ZQLmRlZmVyKCk7CiAgICAgIHN0b3JlLmZp
        bmRCZWxvbmdzVG8odGhpcywgbGluaywgbWV0YSwgcmVzb2x2ZXIpOwogICAg
        ICByZXR1cm4gRFMuUHJvbWlzZU9iamVjdC5jcmVhdGUoeyBwcm9taXNlOiBy
        ZXNvbHZlci5wcm9taXNlIH0pOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJu
        IG51bGw7CiAgICB9CiAgfSkucHJvcGVydHkoJ2RhdGEnKS5tZXRhKG1ldGEp
        Owp9CgpEUy5iZWxvbmdzVG8gPSBmdW5jdGlvbih0eXBlLCBvcHRpb25zKSB7
        CiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JykgewogICAgb3B0aW9u
        cyA9IHR5cGU7CiAgICB0eXBlID0gdW5kZWZpbmVkOwogIH0gZWxzZSB7CiAg
        ICBFbWJlci5hc3NlcnQoIlRoZSBmaXJzdCBhcmd1bWVudCBEUy5iZWxvbmdz
        VG8gbXVzdCBiZSBhIG1vZGVsIHR5cGUgb3Igc3RyaW5nLCBsaWtlIERTLmJl
        bG9uZ3NUbyhBcHAuUGVyc29uKSIsICEhdHlwZSAmJiAodHlwZW9mIHR5cGUg
        PT09ICdzdHJpbmcnIHx8IERTLk1vZGVsLmRldGVjdCh0eXBlKSkpOwogIH0K
        CiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgogIHZhciBtZXRhID0geyB0
        eXBlOiB0eXBlLCBpc1JlbGF0aW9uc2hpcDogdHJ1ZSwgb3B0aW9uczogb3B0
        aW9ucywga2luZDogJ2JlbG9uZ3NUbycgfTsKCiAgaWYgKG9wdGlvbnMuYXN5
        bmMpIHsKICAgIHJldHVybiBhc3luY0JlbG9uZ3NUbyh0eXBlLCBvcHRpb25z
        LCBtZXRhKTsKICB9CgogIHJldHVybiBFbWJlci5jb21wdXRlZChmdW5jdGlv
        bihrZXksIHZhbHVlKSB7CiAgICB2YXIgZGF0YSA9IGdldCh0aGlzLCAnZGF0
        YScpLAogICAgICAgIHN0b3JlID0gZ2V0KHRoaXMsICdzdG9yZScpLCBiZWxv
        bmdzVG8sIHR5cGVDbGFzczsKCiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdz
        dHJpbmcnKSB7CiAgICAgIHR5cGVDbGFzcyA9IHN0b3JlLm1vZGVsRm9yKHR5
        cGUpOwogICAgfSBlbHNlIHsKICAgICAgdHlwZUNsYXNzID0gdHlwZTsKICAg
        IH0KCiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgewogICAgICBF
        bWJlci5hc3NlcnQoIllvdSBjYW4gb25seSBhZGQgYSAnIiArIHR5cGUgKyAi
        JyByZWNvcmQgdG8gdGhpcyByZWxhdGlvbnNoaXAiLCAhdmFsdWUgfHwgdmFs
        dWUgaW5zdGFuY2VvZiB0eXBlQ2xhc3MpOwogICAgICByZXR1cm4gdmFsdWUg
        PT09IHVuZGVmaW5lZCA/IG51bGwgOiB2YWx1ZTsKICAgIH0KCiAgICBiZWxv
        bmdzVG8gPSBkYXRhW2tleV07CgogICAgaWYgKGlzTm9uZShiZWxvbmdzVG8p
        KSB7IHJldHVybiBudWxsOyB9CgogICAgc3RvcmUuZmV0Y2hSZWNvcmQoYmVs
        b25nc1RvKTsKCiAgICByZXR1cm4gYmVsb25nc1RvOwogIH0pLnByb3BlcnR5
        KCdkYXRhJykubWV0YShtZXRhKTsKfTsKCi8qCiAgVGhlc2Ugb2JzZXJ2ZXJz
        IG9ic2VydmUgYWxsIGBiZWxvbmdzVG9gIHJlbGF0aW9uc2hpcHMgb24gdGhl
        IHJlY29yZC4gU2VlCiAgYHJlbGF0aW9uc2hpcHMvZXh0YCB0byBzZWUgaG93
        IHRoZXNlIG9ic2VydmVycyBnZXQgdGhlaXIgZGVwZW5kZW5jaWVzLgoKICBA
        Y2xhc3MgTW9kZWwKICBAbmFtZXNwYWNlIERTCiovCkRTLk1vZGVsLnJlb3Bl
        bih7CgogIC8qKgogICAgQG1ldGhvZCBiZWxvbmdzVG9XaWxsQ2hhbmdlCiAg
        ICBAcHJpdmF0ZQogICAgQHN0YXRpYwogICAgQHBhcmFtIHJlY29yZAogICAg
        QHBhcmFtIGtleQogICovCiAgYmVsb25nc1RvV2lsbENoYW5nZTogRW1iZXIu
        YmVmb3JlT2JzZXJ2ZXIoZnVuY3Rpb24ocmVjb3JkLCBrZXkpIHsKICAgIGlm
        IChnZXQocmVjb3JkLCAnaXNMb2FkZWQnKSkgewogICAgICB2YXIgb2xkUGFy
        ZW50ID0gZ2V0KHJlY29yZCwga2V5KTsKCiAgICAgIGlmIChvbGRQYXJlbnQp
        IHsKICAgICAgICB2YXIgc3RvcmUgPSBnZXQocmVjb3JkLCAnc3RvcmUnKSwK
        ICAgICAgICAgICAgY2hhbmdlID0gRFMuUmVsYXRpb25zaGlwQ2hhbmdlLmNy
        ZWF0ZUNoYW5nZShyZWNvcmQsIG9sZFBhcmVudCwgc3RvcmUsIHsga2V5OiBr
        ZXksIGtpbmQ6ICJiZWxvbmdzVG8iLCBjaGFuZ2VUeXBlOiAicmVtb3ZlIiB9
        KTsKCiAgICAgICAgY2hhbmdlLnN5bmMoKTsKICAgICAgICB0aGlzLl9jaGFu
        Z2VzVG9TeW5jW2tleV0gPSBjaGFuZ2U7CiAgICAgIH0KICAgIH0KICB9KSwK
        CiAgLyoqCiAgICBAbWV0aG9kIGJlbG9uZ3NUb0RpZENoYW5nZQogICAgQHBy
        aXZhdGUKICAgIEBzdGF0aWMKICAgIEBwYXJhbSByZWNvcmQKICAgIEBwYXJh
        bSBrZXkKICAqLwogIGJlbG9uZ3NUb0RpZENoYW5nZTogRW1iZXIuaW1tZWRp
        YXRlT2JzZXJ2ZXIoZnVuY3Rpb24ocmVjb3JkLCBrZXkpIHsKICAgIGlmIChn
        ZXQocmVjb3JkLCAnaXNMb2FkZWQnKSkgewogICAgICB2YXIgbmV3UGFyZW50
        ID0gZ2V0KHJlY29yZCwga2V5KTsKCiAgICAgIGlmIChuZXdQYXJlbnQpIHsK
        ICAgICAgICB2YXIgc3RvcmUgPSBnZXQocmVjb3JkLCAnc3RvcmUnKSwKICAg
        ICAgICAgICAgY2hhbmdlID0gRFMuUmVsYXRpb25zaGlwQ2hhbmdlLmNyZWF0
        ZUNoYW5nZShyZWNvcmQsIG5ld1BhcmVudCwgc3RvcmUsIHsga2V5OiBrZXks
        IGtpbmQ6ICJiZWxvbmdzVG8iLCBjaGFuZ2VUeXBlOiAiYWRkIiB9KTsKCiAg
        ICAgICAgY2hhbmdlLnN5bmMoKTsKICAgICAgfQogICAgfQoKICAgIGRlbGV0
        ZSB0aGlzLl9jaGFuZ2VzVG9TeW5jW2tleV07CiAgfSkKfSk7Cgp9KSgpOwoK
        CgooZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoK
        dmFyIGdldCA9IEVtYmVyLmdldCwgc2V0ID0gRW1iZXIuc2V0LCBzZXRQcm9w
        ZXJ0aWVzID0gRW1iZXIuc2V0UHJvcGVydGllczsKCmZ1bmN0aW9uIGFzeW5j
        SGFzTWFueSh0eXBlLCBvcHRpb25zLCBtZXRhKSB7CiAgcmV0dXJuIEVtYmVy
        LmNvbXB1dGVkKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgIGlmICh0aGlz
        Ll9yZWxhdGlvbnNoaXBzW2tleV0pIHsgcmV0dXJuIHRoaXMuX3JlbGF0aW9u
        c2hpcHNba2V5XTsgfQoKICAgIHZhciByZXNvbHZlciA9IEVtYmVyLlJTVlAu
        ZGVmZXIoKTsKCiAgICB2YXIgcmVsYXRpb25zaGlwID0gYnVpbGRSZWxhdGlv
        bnNoaXAodGhpcywga2V5LCBvcHRpb25zLCBmdW5jdGlvbihzdG9yZSwgZGF0
        YSkgewogICAgICB2YXIgbGluayA9IGRhdGEubGlua3MgJiYgZGF0YS5saW5r
        c1trZXldOwoKICAgICAgaWYgKGxpbmspIHsKICAgICAgICByZXR1cm4gc3Rv
        cmUuZmluZEhhc01hbnkodGhpcywgbGluaywgbWV0YSwgcmVzb2x2ZXIpOwog
        ICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBzdG9yZS5maW5kTWFueSh0
        aGlzLCBkYXRhW2tleV0sIG1ldGEudHlwZSwgcmVzb2x2ZXIpOwogICAgICB9
        CiAgICB9KTsKCiAgICB2YXIgcHJvbWlzZSA9IHJlc29sdmVyLnByb21pc2Uu
        dGhlbihmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHJlbGF0aW9uc2hpcDsK
        ICAgIH0pOwoKICAgIHJldHVybiBEUy5Qcm9taXNlQXJyYXkuY3JlYXRlKHsg
        cHJvbWlzZTogcHJvbWlzZSB9KTsKICB9KS5wcm9wZXJ0eSgnZGF0YScpLm1l
        dGEobWV0YSk7Cn0KCmZ1bmN0aW9uIGJ1aWxkUmVsYXRpb25zaGlwKHJlY29y
        ZCwga2V5LCBvcHRpb25zLCBjYWxsYmFjaykgewogIHZhciByZWxzID0gcmVj
        b3JkLl9yZWxhdGlvbnNoaXBzOwoKICBpZiAocmVsc1trZXldKSB7IHJldHVy
        biByZWxzW2tleV07IH0KCiAgdmFyIGRhdGEgPSBnZXQocmVjb3JkLCAnZGF0
        YScpLAogICAgICBzdG9yZSA9IGdldChyZWNvcmQsICdzdG9yZScpOwoKICB2
        YXIgcmVsYXRpb25zaGlwID0gcmVsc1trZXldID0gY2FsbGJhY2suY2FsbChy
        ZWNvcmQsIHN0b3JlLCBkYXRhKTsKCiAgcmV0dXJuIHNldFByb3BlcnRpZXMo
        cmVsYXRpb25zaGlwLCB7CiAgICBvd25lcjogcmVjb3JkLCBuYW1lOiBrZXks
        IGlzUG9seW1vcnBoaWM6IG9wdGlvbnMucG9seW1vcnBoaWMKICB9KTsKfQoK
        ZnVuY3Rpb24gaGFzUmVsYXRpb25zaGlwKHR5cGUsIG9wdGlvbnMpIHsKICBv
        cHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCiAgdmFyIG1ldGEgPSB7IHR5cGU6
        IHR5cGUsIGlzUmVsYXRpb25zaGlwOiB0cnVlLCBvcHRpb25zOiBvcHRpb25z
        LCBraW5kOiAnaGFzTWFueScgfTsKCiAgaWYgKG9wdGlvbnMuYXN5bmMpIHsK
        ICAgIHJldHVybiBhc3luY0hhc01hbnkodHlwZSwgb3B0aW9ucywgbWV0YSk7
        CiAgfQoKICByZXR1cm4gRW1iZXIuY29tcHV0ZWQoZnVuY3Rpb24oa2V5LCB2
        YWx1ZSkgewogICAgcmV0dXJuIGJ1aWxkUmVsYXRpb25zaGlwKHRoaXMsIGtl
        eSwgb3B0aW9ucywgZnVuY3Rpb24oc3RvcmUsIGRhdGEpIHsKICAgICAgdmFy
        IHJlY29yZHMgPSBkYXRhW2tleV07CiAgICAgIEVtYmVyLmFzc2VydCgiWW91
        IGxvb2tlZCB1cCB0aGUgJyIgKyBrZXkgKyAiJyByZWxhdGlvbnNoaXAgb24g
        JyIgKyB0aGlzICsgIicgYnV0IHNvbWUgb2YgdGhlIGFzc29jaWF0ZWQgcmVj
        b3JkcyB3ZXJlIG5vdCBsb2FkZWQuIEVpdGhlciBtYWtlIHN1cmUgdGhleSBh
        cmUgYWxsIGxvYWRlZCB0b2dldGhlciB3aXRoIHRoZSBwYXJlbnQgcmVjb3Jk
        LCBvciBzcGVjaWZ5IHRoYXQgdGhlIHJlbGF0aW9uc2hpcCBpcyBhc3luYyAo
        YERTLmhhc01hbnkoeyBhc3luYzogdHJ1ZSB9KWApIiwgRW1iZXIuQShyZWNv
        cmRzKS5ldmVyeVByb3BlcnR5KCdpc0VtcHR5JywgZmFsc2UpKTsKICAgICAg
        cmV0dXJuIHN0b3JlLmZpbmRNYW55KHRoaXMsIGRhdGFba2V5XSwgbWV0YS50
        eXBlKTsKICAgIH0pOwogIH0pLnByb3BlcnR5KCdkYXRhJykubWV0YShtZXRh
        KTsKfQoKRFMuaGFzTWFueSA9IGZ1bmN0aW9uKHR5cGUsIG9wdGlvbnMpIHsK
        ICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnKSB7CiAgICBvcHRpb25z
        ID0gdHlwZTsKICAgIHR5cGUgPSB1bmRlZmluZWQ7CiAgfQogIHJldHVybiBo
        YXNSZWxhdGlvbnNoaXAodHlwZSwgb3B0aW9ucyk7Cn07Cgp9KSgpOwoKCgoo
        ZnVuY3Rpb24oKSB7CnZhciBnZXQgPSBFbWJlci5nZXQsIHNldCA9IEVtYmVy
        LnNldDsKCi8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoKLyoKICBUaGlz
        IGZpbGUgZGVmaW5lcyBzZXZlcmFsIGV4dGVuc2lvbnMgdG8gdGhlIGJhc2Ug
        YERTLk1vZGVsYCBjbGFzcyB0aGF0CiAgYWRkIHN1cHBvcnQgZm9yIG9uZS10
        by1tYW55IHJlbGF0aW9uc2hpcHMuCiovCgovKioKICBAY2xhc3MgTW9kZWwK
        ICBAbmFtZXNwYWNlIERTCiovCkRTLk1vZGVsLnJlb3Blbih7CgogIC8qKgog
        ICAgVGhpcyBFbWJlci5qcyBob29rIGFsbG93cyBhbiBvYmplY3QgdG8gYmUg
        bm90aWZpZWQgd2hlbiBhIHByb3BlcnR5CiAgICBpcyBkZWZpbmVkLgoKICAg
        IEluIHRoaXMgY2FzZSwgd2UgdXNlIGl0IHRvIGJlIG5vdGlmaWVkIHdoZW4g
        YW4gRW1iZXIgRGF0YSB1c2VyIGRlZmluZXMgYQogICAgYmVsb25ncy10byBy
        ZWxhdGlvbnNoaXAuIEluIHRoYXQgY2FzZSwgd2UgbmVlZCB0byBzZXQgdXAg
        b2JzZXJ2ZXJzIGZvcgogICAgZWFjaCBvbmUsIGFsbG93aW5nIHVzIHRvIHRy
        YWNrIHJlbGF0aW9uc2hpcCBjaGFuZ2VzIGFuZCBhdXRvbWF0aWNhbGx5CiAg
        ICByZWZsZWN0IGNoYW5nZXMgaW4gdGhlIGludmVyc2UgaGFzLW1hbnkgYXJy
        YXkuCgogICAgVGhpcyBob29rIHBhc3NlcyB0aGUgY2xhc3MgYmVpbmcgc2V0
        IHVwLCBhcyB3ZWxsIGFzIHRoZSBrZXkgYW5kIHZhbHVlCiAgICBiZWluZyBk
        ZWZpbmVkLiBTbywgZm9yIGV4YW1wbGUsIHdoZW4gdGhlIHVzZXIgZG9lcyB0
        aGlzOgoKICAgICAgRFMuTW9kZWwuZXh0ZW5kKHsKICAgICAgICBwYXJlbnQ6
        IERTLmJlbG9uZ3NUbygndXNlcicpCiAgICAgIH0pOwoKICAgIFRoaXMgaG9v
        ayB3b3VsZCBiZSBjYWxsZWQgd2l0aCAicGFyZW50IiBhcyB0aGUga2V5IGFu
        ZCB0aGUgY29tcHV0ZWQKICAgIHByb3BlcnR5IHJldHVybmVkIGJ5IGBEUy5i
        ZWxvbmdzVG9gIGFzIHRoZSB2YWx1ZS4KCiAgICBAbWV0aG9kIGRpZERlZmlu
        ZVByb3BlcnR5CiAgICBAcGFyYW0gcHJvdG8KICAgIEBwYXJhbSBrZXkKICAg
        IEBwYXJhbSB2YWx1ZQogICovCiAgZGlkRGVmaW5lUHJvcGVydHk6IGZ1bmN0
        aW9uKHByb3RvLCBrZXksIHZhbHVlKSB7CiAgICAvLyBDaGVjayBpZiB0aGUg
        dmFsdWUgYmVpbmcgc2V0IGlzIGEgY29tcHV0ZWQgcHJvcGVydHkuCiAgICBp
        ZiAodmFsdWUgaW5zdGFuY2VvZiBFbWJlci5EZXNjcmlwdG9yKSB7CgogICAg
        ICAvLyBJZiBpdCBpcywgZ2V0IHRoZSBtZXRhZGF0YSBmb3IgdGhlIHJlbGF0
        aW9uc2hpcC4gVGhpcyBpcwogICAgICAvLyBwb3B1bGF0ZWQgYnkgdGhlIGBE
        Uy5iZWxvbmdzVG9gIGhlbHBlciB3aGVuIGl0IGlzIGNyZWF0aW5nCiAgICAg
        IC8vIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS4KICAgICAgdmFyIG1ldGEgPSB2
        YWx1ZS5tZXRhKCk7CgogICAgICBpZiAobWV0YS5pc1JlbGF0aW9uc2hpcCAm
        JiBtZXRhLmtpbmQgPT09ICdiZWxvbmdzVG8nKSB7CiAgICAgICAgRW1iZXIu
        YWRkT2JzZXJ2ZXIocHJvdG8sIGtleSwgbnVsbCwgJ2JlbG9uZ3NUb0RpZENo
        YW5nZScpOwogICAgICAgIEVtYmVyLmFkZEJlZm9yZU9ic2VydmVyKHByb3Rv
        LCBrZXksIG51bGwsICdiZWxvbmdzVG9XaWxsQ2hhbmdlJyk7CiAgICAgIH0K
        CiAgICAgIG1ldGEucGFyZW50VHlwZSA9IHByb3RvLmNvbnN0cnVjdG9yOwog
        ICAgfQogIH0KfSk7CgovKgogIFRoZXNlIERTLk1vZGVsIGV4dGVuc2lvbnMg
        YWRkIGNsYXNzIG1ldGhvZHMgdGhhdCBwcm92aWRlIHJlbGF0aW9uc2hpcAog
        IGludHJvc3BlY3Rpb24gYWJpbGl0aWVzIGFib3V0IHJlbGF0aW9uc2hpcHMu
        CgogIEEgbm90ZSBhYm91dCB0aGUgY29tcHV0ZWQgcHJvcGVydGllcyBjb250
        YWluZWQgaGVyZToKCiAgKipUaGVzZSBwcm9wZXJ0aWVzIGFyZSBlZmZlY3Rp
        dmVseSBzZWFsZWQgb25jZSBjYWxsZWQgZm9yIHRoZSBmaXJzdCB0aW1lLioq
        CiAgVG8gYXZvaWQgcmVwZWF0ZWRseSBkb2luZyBleHBlbnNpdmUgaXRlcmF0
        aW9uIG92ZXIgYSBtb2RlbCdzIGZpZWxkcywgdGhlc2UKICB2YWx1ZXMgYXJl
        IGNvbXB1dGVkIG9uY2UgYW5kIHRoZW4gY2FjaGVkIGZvciB0aGUgcmVtYWlu
        ZGVyIG9mIHRoZSBydW50aW1lIG9mCiAgeW91ciBhcHBsaWNhdGlvbi4KCiAg
        SWYgeW91ciBhcHBsaWNhdGlvbiBuZWVkcyB0byBtb2RpZnkgYSBjbGFzcyBh
        ZnRlciBpdHMgaW5pdGlhbCBkZWZpbml0aW9uCiAgKGZvciBleGFtcGxlLCB1
        c2luZyBgcmVvcGVuKClgIHRvIGFkZCBhZGRpdGlvbmFsIGF0dHJpYnV0ZXMp
        LCBtYWtlIHN1cmUgeW91CiAgZG8gaXQgYmVmb3JlIHVzaW5nIHlvdXIgbW9k
        ZWwgd2l0aCB0aGUgc3RvcmUsIHdoaWNoIHVzZXMgdGhlc2UgcHJvcGVydGll
        cwogIGV4dGVuc2l2ZWx5LgoqLwoKRFMuTW9kZWwucmVvcGVuQ2xhc3Moewog
        IC8qKgogICAgRm9yIGEgZ2l2ZW4gcmVsYXRpb25zaGlwIG5hbWUsIHJldHVy
        bnMgdGhlIG1vZGVsIHR5cGUgb2YgdGhlIHJlbGF0aW9uc2hpcC4KCiAgICBG
        b3IgZXhhbXBsZSwgaWYgeW91IGRlZmluZSBhIG1vZGVsIGxpa2UgdGhpczoK
        CiAgICAgICAgQXBwLlBvc3QgPSBEUy5Nb2RlbC5leHRlbmQoewogICAgICAg
        ICAgY29tbWVudHM6IERTLmhhc01hbnkoJ2NvbW1lbnQnKQogICAgICAgIH0p
        OwoKICAgIENhbGxpbmcgYEFwcC5Qb3N0LnR5cGVGb3JSZWxhdGlvbnNoaXAo
        J2NvbW1lbnRzJylgIHdpbGwgcmV0dXJuIGBBcHAuQ29tbWVudGAuCgogICAg
        QG1ldGhvZCB0eXBlRm9yUmVsYXRpb25zaGlwCiAgICBAc3RhdGljCiAgICBA
        cGFyYW0ge1N0cmluZ30gbmFtZSB0aGUgbmFtZSBvZiB0aGUgcmVsYXRpb25z
        aGlwCiAgICBAcmV0dXJuIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdGhlIHR5
        cGUgb2YgdGhlIHJlbGF0aW9uc2hpcCwgb3IgdW5kZWZpbmVkCiAgKi8KICB0
        eXBlRm9yUmVsYXRpb25zaGlwOiBmdW5jdGlvbihuYW1lKSB7CiAgICB2YXIg
        cmVsYXRpb25zaGlwID0gZ2V0KHRoaXMsICdyZWxhdGlvbnNoaXBzQnlOYW1l
        JykuZ2V0KG5hbWUpOwogICAgcmV0dXJuIHJlbGF0aW9uc2hpcCAmJiByZWxh
        dGlvbnNoaXAudHlwZTsKICB9LAoKICBpbnZlcnNlRm9yOiBmdW5jdGlvbihu
        YW1lKSB7CiAgICB2YXIgaW52ZXJzZVR5cGUgPSB0aGlzLnR5cGVGb3JSZWxh
        dGlvbnNoaXAobmFtZSk7CgogICAgaWYgKCFpbnZlcnNlVHlwZSkgeyByZXR1
        cm4gbnVsbDsgfQoKICAgIHZhciBvcHRpb25zID0gdGhpcy5tZXRhRm9yUHJv
        cGVydHkobmFtZSkub3B0aW9uczsKCiAgICBpZiAob3B0aW9ucy5pbnZlcnNl
        ID09PSBudWxsKSB7IHJldHVybiBudWxsOyB9CiAgICAKICAgIHZhciBpbnZl
        cnNlTmFtZSwgaW52ZXJzZUtpbmQ7CgogICAgaWYgKG9wdGlvbnMuaW52ZXJz
        ZSkgewogICAgICBpbnZlcnNlTmFtZSA9IG9wdGlvbnMuaW52ZXJzZTsKICAg
        ICAgaW52ZXJzZUtpbmQgPSBFbWJlci5nZXQoaW52ZXJzZVR5cGUsICdyZWxh
        dGlvbnNoaXBzQnlOYW1lJykuZ2V0KGludmVyc2VOYW1lKS5raW5kOwogICAg
        fSBlbHNlIHsKICAgICAgdmFyIHBvc3NpYmxlUmVsYXRpb25zaGlwcyA9IGZp
        bmRQb3NzaWJsZUludmVyc2VzKHRoaXMsIGludmVyc2VUeXBlKTsKCiAgICAg
        IGlmIChwb3NzaWJsZVJlbGF0aW9uc2hpcHMubGVuZ3RoID09PSAwKSB7IHJl
        dHVybiBudWxsOyB9CgogICAgICBFbWJlci5hc3NlcnQoIllvdSBkZWZpbmVk
        IHRoZSAnIiArIG5hbWUgKyAiJyByZWxhdGlvbnNoaXAgb24gIiArIHRoaXMg
        KyAiLCBidXQgbXVsdGlwbGUgcG9zc2libGUgaW52ZXJzZSByZWxhdGlvbnNo
        aXBzIG9mIHR5cGUgIiArIHRoaXMgKyAiIHdlcmUgZm91bmQgb24gIiArIGlu
        dmVyc2VUeXBlICsgIi4iLCBwb3NzaWJsZVJlbGF0aW9uc2hpcHMubGVuZ3Ro
        ID09PSAxKTsKCiAgICAgIGludmVyc2VOYW1lID0gcG9zc2libGVSZWxhdGlv
        bnNoaXBzWzBdLm5hbWU7CiAgICAgIGludmVyc2VLaW5kID0gcG9zc2libGVS
        ZWxhdGlvbnNoaXBzWzBdLmtpbmQ7CiAgICB9CgogICAgZnVuY3Rpb24gZmlu
        ZFBvc3NpYmxlSW52ZXJzZXModHlwZSwgaW52ZXJzZVR5cGUsIHBvc3NpYmxl
        UmVsYXRpb25zaGlwcykgewogICAgICBwb3NzaWJsZVJlbGF0aW9uc2hpcHMg
        PSBwb3NzaWJsZVJlbGF0aW9uc2hpcHMgfHwgW107CgogICAgICB2YXIgcmVs
        YXRpb25zaGlwTWFwID0gZ2V0KGludmVyc2VUeXBlLCAncmVsYXRpb25zaGlw
        cycpOwogICAgICBpZiAoIXJlbGF0aW9uc2hpcE1hcCkgeyByZXR1cm47IH0K
        CiAgICAgIHZhciByZWxhdGlvbnNoaXBzID0gcmVsYXRpb25zaGlwTWFwLmdl
        dCh0eXBlKTsKICAgICAgaWYgKHJlbGF0aW9uc2hpcHMpIHsKICAgICAgICBw
        b3NzaWJsZVJlbGF0aW9uc2hpcHMucHVzaC5hcHBseShwb3NzaWJsZVJlbGF0
        aW9uc2hpcHMsIHJlbGF0aW9uc2hpcE1hcC5nZXQodHlwZSkpOwogICAgICB9
        CgogICAgICBpZiAodHlwZS5zdXBlcmNsYXNzKSB7CiAgICAgICAgZmluZFBv
        c3NpYmxlSW52ZXJzZXModHlwZS5zdXBlcmNsYXNzLCBpbnZlcnNlVHlwZSwg
        cG9zc2libGVSZWxhdGlvbnNoaXBzKTsKICAgICAgfQoKICAgICAgcmV0dXJu
        IHBvc3NpYmxlUmVsYXRpb25zaGlwczsKICAgIH0KCiAgICByZXR1cm4gewog
        ICAgICB0eXBlOiBpbnZlcnNlVHlwZSwKICAgICAgbmFtZTogaW52ZXJzZU5h
        bWUsCiAgICAgIGtpbmQ6IGludmVyc2VLaW5kCiAgICB9OwogIH0sCgogIC8q
        KgogICAgVGhlIG1vZGVsJ3MgcmVsYXRpb25zaGlwcyBhcyBhIG1hcCwga2V5
        ZWQgb24gdGhlIHR5cGUgb2YgdGhlCiAgICByZWxhdGlvbnNoaXAuIFRoZSB2
        YWx1ZSBvZiBlYWNoIGVudHJ5IGlzIGFuIGFycmF5IGNvbnRhaW5pbmcgYSBk
        ZXNjcmlwdG9yCiAgICBmb3IgZWFjaCByZWxhdGlvbnNoaXAgd2l0aCB0aGF0
        IHR5cGUsIGRlc2NyaWJpbmcgdGhlIG5hbWUgb2YgdGhlIHJlbGF0aW9uc2hp
        cAogICAgYXMgd2VsbCBhcyB0aGUgdHlwZS4KCiAgICBGb3IgZXhhbXBsZSwg
        Z2l2ZW4gdGhlIGZvbGxvd2luZyBtb2RlbCBkZWZpbml0aW9uOgoKICAgICAg
        ICBBcHAuQmxvZyA9IERTLk1vZGVsLmV4dGVuZCh7CiAgICAgICAgICB1c2Vy
        czogRFMuaGFzTWFueSgndXNlcicpLAogICAgICAgICAgb3duZXI6IERTLmJl
        bG9uZ3NUbygndXNlcicpLAogICAgICAgICAgcG9zdHM6IERTLmhhc01hbnko
        J3Bvc3QnKQogICAgICAgIH0pOwoKICAgIFRoaXMgY29tcHV0ZWQgcHJvcGVy
        dHkgd291bGQgcmV0dXJuIGEgbWFwIGRlc2NyaWJpbmcgdGhlc2UKICAgIHJl
        bGF0aW9uc2hpcHMsIGxpa2UgdGhpczoKCiAgICAgICAgdmFyIHJlbGF0aW9u
        c2hpcHMgPSBFbWJlci5nZXQoQXBwLkJsb2csICdyZWxhdGlvbnNoaXBzJyk7
        CiAgICAgICAgcmVsYXRpb25zaGlwcy5nZXQoQXBwLlVzZXIpOwogICAgICAg
        IC8vPT4gWyB7IG5hbWU6ICd1c2VycycsIGtpbmQ6ICdoYXNNYW55JyB9LAog
        ICAgICAgIC8vICAgICB7IG5hbWU6ICdvd25lcicsIGtpbmQ6ICdiZWxvbmdz
        VG8nIH0gXQogICAgICAgIHJlbGF0aW9uc2hpcHMuZ2V0KEFwcC5Qb3N0KTsK
        ICAgICAgICAvLz0+IFsgeyBuYW1lOiAncG9zdHMnLCBraW5kOiAnaGFzTWFu
        eScgfSBdCgogICAgQHByb3BlcnR5IHJlbGF0aW9uc2hpcHMKICAgIEBzdGF0
        aWMKICAgIEB0eXBlIEVtYmVyLk1hcAogICAgQHJlYWRPbmx5CiAgKi8KICBy
        ZWxhdGlvbnNoaXBzOiBFbWJlci5jb21wdXRlZChmdW5jdGlvbigpIHsKICAg
        IHZhciBtYXAgPSBuZXcgRW1iZXIuTWFwV2l0aERlZmF1bHQoewogICAgICBk
        ZWZhdWx0VmFsdWU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH0KICAgIH0p
        OwoKICAgIC8vIExvb3AgdGhyb3VnaCBlYWNoIGNvbXB1dGVkIHByb3BlcnR5
        IG9uIHRoZSBjbGFzcwogICAgdGhpcy5lYWNoQ29tcHV0ZWRQcm9wZXJ0eShm
        dW5jdGlvbihuYW1lLCBtZXRhKSB7CgogICAgICAvLyBJZiB0aGUgY29tcHV0
        ZWQgcHJvcGVydHkgaXMgYSByZWxhdGlvbnNoaXAsIGFkZAogICAgICAvLyBp
        dCB0byB0aGUgbWFwLgogICAgICBpZiAobWV0YS5pc1JlbGF0aW9uc2hpcCkg
        ewogICAgICAgIGlmICh0eXBlb2YgbWV0YS50eXBlID09PSAnc3RyaW5nJykg
        ewogICAgICAgICAgbWV0YS50eXBlID0gdGhpcy5zdG9yZS5tb2RlbEZvciht
        ZXRhLnR5cGUpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHJlbGF0aW9uc2hp
        cHNGb3JUeXBlID0gbWFwLmdldChtZXRhLnR5cGUpOwoKICAgICAgICByZWxh
        dGlvbnNoaXBzRm9yVHlwZS5wdXNoKHsgbmFtZTogbmFtZSwga2luZDogbWV0
        YS5raW5kIH0pOwogICAgICB9CiAgICB9KTsKCiAgICByZXR1cm4gbWFwOwog
        IH0pLAoKICAvKioKICAgIEEgaGFzaCBjb250YWluaW5nIGxpc3RzIG9mIHRo
        ZSBtb2RlbCdzIHJlbGF0aW9uc2hpcHMsIGdyb3VwZWQKICAgIGJ5IHRoZSBy
        ZWxhdGlvbnNoaXAga2luZC4gRm9yIGV4YW1wbGUsIGdpdmVuIGEgbW9kZWwg
        d2l0aCB0aGlzCiAgICBkZWZpbml0aW9uOgoKICAgICAgICBBcHAuQmxvZyA9
        IERTLk1vZGVsLmV4dGVuZCh7CiAgICAgICAgICB1c2VyczogRFMuaGFzTWFu
        eSgndXNlcicpLAogICAgICAgICAgb3duZXI6IERTLmJlbG9uZ3NUbygndXNl
        cicpLAoKICAgICAgICAgIHBvc3RzOiBEUy5oYXNNYW55KCdwb3N0JykKICAg
        ICAgICB9KTsKCiAgICBUaGlzIHByb3BlcnR5IHdvdWxkIGNvbnRhaW4gdGhl
        IGZvbGxvd2luZzoKCiAgICAgICB2YXIgcmVsYXRpb25zaGlwTmFtZXMgPSBF
        bWJlci5nZXQoQXBwLkJsb2csICdyZWxhdGlvbnNoaXBOYW1lcycpOwogICAg
        ICAgcmVsYXRpb25zaGlwTmFtZXMuaGFzTWFueTsKICAgICAgIC8vPT4gWyd1
        c2VycycsICdwb3N0cyddCiAgICAgICByZWxhdGlvbnNoaXBOYW1lcy5iZWxv
        bmdzVG87CiAgICAgICAvLz0+IFsnb3duZXInXQoKICAgIEBwcm9wZXJ0eSBy
        ZWxhdGlvbnNoaXBOYW1lcwogICAgQHN0YXRpYwogICAgQHR5cGUgT2JqZWN0
        CiAgICBAcmVhZE9ubHkKICAqLwogIHJlbGF0aW9uc2hpcE5hbWVzOiBFbWJl
        ci5jb21wdXRlZChmdW5jdGlvbigpIHsKICAgIHZhciBuYW1lcyA9IHsgaGFz
        TWFueTogW10sIGJlbG9uZ3NUbzogW10gfTsKCiAgICB0aGlzLmVhY2hDb21w
        dXRlZFByb3BlcnR5KGZ1bmN0aW9uKG5hbWUsIG1ldGEpIHsKICAgICAgaWYg
        KG1ldGEuaXNSZWxhdGlvbnNoaXApIHsKICAgICAgICBuYW1lc1ttZXRhLmtp
        bmRdLnB1c2gobmFtZSk7CiAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiBu
        YW1lczsKICB9KSwKCiAgLyoqCiAgICBBbiBhcnJheSBvZiB0eXBlcyBkaXJl
        Y3RseSByZWxhdGVkIHRvIGEgbW9kZWwuIEVhY2ggdHlwZSB3aWxsIGJlCiAg
        ICBpbmNsdWRlZCBvbmNlLCByZWdhcmRsZXNzIG9mIHRoZSBudW1iZXIgb2Yg
        cmVsYXRpb25zaGlwcyBpdCBoYXMgd2l0aAogICAgdGhlIG1vZGVsLgoKICAg
        IEZvciBleGFtcGxlLCBnaXZlbiBhIG1vZGVsIHdpdGggdGhpcyBkZWZpbml0
        aW9uOgoKICAgICAgICBBcHAuQmxvZyA9IERTLk1vZGVsLmV4dGVuZCh7CiAg
        ICAgICAgICB1c2VyczogRFMuaGFzTWFueSgndXNlcicpLAogICAgICAgICAg
        b3duZXI6IERTLmJlbG9uZ3NUbygndXNlcicpLAogIAogICAgICAgICAgcG9z
        dHM6IERTLmhhc01hbnkoJ3Bvc3QnKQogICAgICAgIH0pOwoKICAgIFRoaXMg
        cHJvcGVydHkgd291bGQgY29udGFpbiB0aGUgZm9sbG93aW5nOgoKICAgICAg
        IHZhciByZWxhdGVkVHlwZXMgPSBFbWJlci5nZXQoQXBwLkJsb2csICdyZWxh
        dGVkVHlwZXMnKTsKICAgICAgIC8vPT4gWyBBcHAuVXNlciwgQXBwLlBvc3Qg
        XQoKICAgIEBwcm9wZXJ0eSByZWxhdGVkVHlwZXMKICAgIEBzdGF0aWMKICAg
        IEB0eXBlIEVtYmVyLkFycmF5CiAgICBAcmVhZE9ubHkKICAqLwogIHJlbGF0
        ZWRUeXBlczogRW1iZXIuY29tcHV0ZWQoZnVuY3Rpb24oKSB7CiAgICB2YXIg
        dHlwZSwKICAgICAgICB0eXBlcyA9IEVtYmVyLkEoKTsKCiAgICAvLyBMb29w
        IHRocm91Z2ggZWFjaCBjb21wdXRlZCBwcm9wZXJ0eSBvbiB0aGUgY2xhc3Ms
        CiAgICAvLyBhbmQgY3JlYXRlIGFuIGFycmF5IG9mIHRoZSB1bmlxdWUgdHlw
        ZXMgaW52b2x2ZWQKICAgIC8vIGluIHJlbGF0aW9uc2hpcHMKICAgIHRoaXMu
        ZWFjaENvbXB1dGVkUHJvcGVydHkoZnVuY3Rpb24obmFtZSwgbWV0YSkgewog
        ICAgICBpZiAobWV0YS5pc1JlbGF0aW9uc2hpcCkgewogICAgICAgIHR5cGUg
        PSBtZXRhLnR5cGU7CgogICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0
        cmluZycpIHsKICAgICAgICAgIHR5cGUgPSBnZXQodGhpcywgdHlwZSwgZmFs
        c2UpIHx8IHRoaXMuc3RvcmUubW9kZWxGb3IodHlwZSk7CiAgICAgICAgfQoK
        ICAgICAgICBFbWJlci5hc3NlcnQoIllvdSBzcGVjaWZpZWQgYSBoYXNNYW55
        ICgiICsgbWV0YS50eXBlICsgIikgb24gIiArIG1ldGEucGFyZW50VHlwZSAr
        ICIgYnV0ICIgKyBtZXRhLnR5cGUgKyAiIHdhcyBub3QgZm91bmQuIiwgIHR5
        cGUpOwoKICAgICAgICBpZiAoIXR5cGVzLmNvbnRhaW5zKHR5cGUpKSB7CiAg
        ICAgICAgICBFbWJlci5hc3NlcnQoIlRyeWluZyB0byBzaWRlbG9hZCAiICsg
        bmFtZSArICIgb24gIiArIHRoaXMudG9TdHJpbmcoKSArICIgYnV0IHRoZSB0
        eXBlIGRvZXNuJ3QgZXhpc3QuIiwgISF0eXBlKTsKICAgICAgICAgIHR5cGVz
        LnB1c2godHlwZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKCiAgICBy
        ZXR1cm4gdHlwZXM7CiAgfSksCgogIC8qKgogICAgQSBtYXAgd2hvc2Uga2V5
        cyBhcmUgdGhlIHJlbGF0aW9uc2hpcHMgb2YgYSBtb2RlbCBhbmQgd2hvc2Ug
        dmFsdWVzIGFyZQogICAgcmVsYXRpb25zaGlwIGRlc2NyaXB0b3JzLgoKICAg
        IEZvciBleGFtcGxlLCBnaXZlbiBhIG1vZGVsIHdpdGggdGhpcwogICAgZGVm
        aW5pdGlvbjoKCiAgICAgICAgQXBwLkJsb2cgPSBEUy5Nb2RlbC5leHRlbmQo
        ewogICAgICAgICAgdXNlcnM6IERTLmhhc01hbnkoJ3VzZXInKSwKICAgICAg
        ICAgIG93bmVyOiBEUy5iZWxvbmdzVG8oJ3VzZXInKSwKCiAgICAgICAgICBw
        b3N0czogRFMuaGFzTWFueSgncG9zdCcpCiAgICAgICAgfSk7CgogICAgVGhp
        cyBwcm9wZXJ0eSB3b3VsZCBjb250YWluIHRoZSBmb2xsb3dpbmc6CgogICAg
        ICAgdmFyIHJlbGF0aW9uc2hpcHNCeU5hbWUgPSBFbWJlci5nZXQoQXBwLkJs
        b2csICdyZWxhdGlvbnNoaXBzQnlOYW1lJyk7CiAgICAgICByZWxhdGlvbnNo
        aXBzQnlOYW1lLmdldCgndXNlcnMnKTsKICAgICAgIC8vPT4geyBrZXk6ICd1
        c2VycycsIGtpbmQ6ICdoYXNNYW55JywgdHlwZTogQXBwLlVzZXIgfQogICAg
        ICAgcmVsYXRpb25zaGlwc0J5TmFtZS5nZXQoJ293bmVyJyk7CiAgICAgICAv
        Lz0+IHsga2V5OiAnb3duZXInLCBraW5kOiAnYmVsb25nc1RvJywgdHlwZTog
        QXBwLlVzZXIgfQoKICAgIEBwcm9wZXJ0eSByZWxhdGlvbnNoaXBzQnlOYW1l
        CiAgICBAc3RhdGljCiAgICBAdHlwZSBFbWJlci5NYXAKICAgIEByZWFkT25s
        eQogICovCiAgcmVsYXRpb25zaGlwc0J5TmFtZTogRW1iZXIuY29tcHV0ZWQo
        ZnVuY3Rpb24oKSB7CiAgICB2YXIgbWFwID0gRW1iZXIuTWFwLmNyZWF0ZSgp
        LCB0eXBlOwoKICAgIHRoaXMuZWFjaENvbXB1dGVkUHJvcGVydHkoZnVuY3Rp
        b24obmFtZSwgbWV0YSkgewogICAgICBpZiAobWV0YS5pc1JlbGF0aW9uc2hp
        cCkgewogICAgICAgIG1ldGEua2V5ID0gbmFtZTsKICAgICAgICB0eXBlID0g
        bWV0YS50eXBlOwoKICAgICAgICBpZiAoIXR5cGUgJiYgbWV0YS5raW5kID09
        PSAnaGFzTWFueScpIHsKICAgICAgICAgIHR5cGUgPSBFbWJlci5TdHJpbmcu
        c2luZ3VsYXJpemUobmFtZSk7CiAgICAgICAgfSBlbHNlIGlmICghdHlwZSkg
        ewogICAgICAgICAgdHlwZSA9IG5hbWU7CiAgICAgICAgfQoKICAgICAgICBp
        ZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICBtZXRh
        LnR5cGUgPSB0aGlzLnN0b3JlLm1vZGVsRm9yKHR5cGUpOwogICAgICAgIH0K
        CiAgICAgICAgbWFwLnNldChuYW1lLCBtZXRhKTsKICAgICAgfQogICAgfSk7
        CgogICAgcmV0dXJuIG1hcDsKICB9KSwKCiAgLyoqCiAgICBBIG1hcCB3aG9z
        ZSBrZXlzIGFyZSB0aGUgZmllbGRzIG9mIHRoZSBtb2RlbCBhbmQgd2hvc2Ug
        dmFsdWVzIGFyZSBzdHJpbmdzCiAgICBkZXNjcmliaW5nIHRoZSBraW5kIG9m
        IHRoZSBmaWVsZC4gQSBtb2RlbCdzIGZpZWxkcyBhcmUgdGhlIHVuaW9uIG9m
        IGFsbCBvZiBpdHMKICAgIGF0dHJpYnV0ZXMgYW5kIHJlbGF0aW9uc2hpcHMu
        CgogICAgRm9yIGV4YW1wbGU6CgogICAgICAgIEFwcC5CbG9nID0gRFMuTW9k
        ZWwuZXh0ZW5kKHsKICAgICAgICAgIHVzZXJzOiBEUy5oYXNNYW55KCd1c2Vy
        JyksCiAgICAgICAgICBvd25lcjogRFMuYmVsb25nc1RvKCd1c2VyJyksCgog
        ICAgICAgICAgcG9zdHM6IERTLmhhc01hbnkoJ3Bvc3QnKSwKCiAgICAgICAg
        ICB0aXRsZTogRFMuYXR0cignc3RyaW5nJykKICAgICAgICB9KTsKCiAgICAg
        ICAgdmFyIGZpZWxkcyA9IEVtYmVyLmdldChBcHAuQmxvZywgJ2ZpZWxkcycp
        OwogICAgICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGZpZWxkLCBraW5k
        KSB7CiAgICAgICAgICBjb25zb2xlLmxvZyhmaWVsZCwga2luZCk7CiAgICAg
        ICAgfSk7CgogICAgICAgIC8vIHByaW50czoKICAgICAgICAvLyB1c2Vycywg
        aGFzTWFueQogICAgICAgIC8vIG93bmVyLCBiZWxvbmdzVG8KICAgICAgICAv
        LyBwb3N0cywgaGFzTWFueQogICAgICAgIC8vIHRpdGxlLCBhdHRyaWJ1dGUK
        CiAgICBAcHJvcGVydHkgZmllbGRzCiAgICBAc3RhdGljCiAgICBAdHlwZSBF
        bWJlci5NYXAKICAgIEByZWFkT25seQogICovCiAgZmllbGRzOiBFbWJlci5j
        b21wdXRlZChmdW5jdGlvbigpIHsKICAgIHZhciBtYXAgPSBFbWJlci5NYXAu
        Y3JlYXRlKCk7CgogICAgdGhpcy5lYWNoQ29tcHV0ZWRQcm9wZXJ0eShmdW5j
        dGlvbihuYW1lLCBtZXRhKSB7CiAgICAgIGlmIChtZXRhLmlzUmVsYXRpb25z
        aGlwKSB7CiAgICAgICAgbWFwLnNldChuYW1lLCBtZXRhLmtpbmQpOwogICAg
        ICB9IGVsc2UgaWYgKG1ldGEuaXNBdHRyaWJ1dGUpIHsKICAgICAgICBtYXAu
        c2V0KG5hbWUsICdhdHRyaWJ1dGUnKTsKICAgICAgfQogICAgfSk7CgogICAg
        cmV0dXJuIG1hcDsKICB9KSwKCiAgLyoqCiAgICBHaXZlbiBhIGNhbGxiYWNr
        LCBpdGVyYXRlcyBvdmVyIGVhY2ggb2YgdGhlIHJlbGF0aW9uc2hpcHMgaW4g
        dGhlIG1vZGVsLAogICAgaW52b2tpbmcgdGhlIGNhbGxiYWNrIHdpdGggdGhl
        IG5hbWUgb2YgZWFjaCByZWxhdGlvbnNoaXAgYW5kIGl0cyByZWxhdGlvbnNo
        aXAKICAgIGRlc2NyaXB0b3IuCgogICAgQG1ldGhvZCBlYWNoUmVsYXRpb25z
        aGlwCiAgICBAc3RhdGljCiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFj
        ayB0aGUgY2FsbGJhY2sgdG8gaW52b2tlCiAgICBAcGFyYW0ge2FueX0gYmlu
        ZGluZyB0aGUgdmFsdWUgdG8gd2hpY2ggdGhlIGNhbGxiYWNrJ3MgYHRoaXNg
        IHNob3VsZCBiZSBib3VuZAogICovCiAgZWFjaFJlbGF0aW9uc2hpcDogZnVu
        Y3Rpb24oY2FsbGJhY2ssIGJpbmRpbmcpIHsKICAgIGdldCh0aGlzLCAncmVs
        YXRpb25zaGlwc0J5TmFtZScpLmZvckVhY2goZnVuY3Rpb24obmFtZSwgcmVs
        YXRpb25zaGlwKSB7CiAgICAgIGNhbGxiYWNrLmNhbGwoYmluZGluZywgbmFt
        ZSwgcmVsYXRpb25zaGlwKTsKICAgIH0pOwogIH0sCgogIC8qKgogICAgR2l2
        ZW4gYSBjYWxsYmFjaywgaXRlcmF0ZXMgb3ZlciBlYWNoIG9mIHRoZSB0eXBl
        cyByZWxhdGVkIHRvIGEgbW9kZWwsCiAgICBpbnZva2luZyB0aGUgY2FsbGJh
        Y2sgd2l0aCB0aGUgcmVsYXRlZCB0eXBlJ3MgY2xhc3MuIEVhY2ggdHlwZSB3
        aWxsIGJlCiAgICByZXR1cm5lZCBqdXN0IG9uY2UsIHJlZ2FyZGxlc3Mgb2Yg
        aG93IG1hbnkgZGlmZmVyZW50IHJlbGF0aW9uc2hpcHMgaXQgaGFzCiAgICB3
        aXRoIGEgbW9kZWwuCgogICAgQG1ldGhvZCBlYWNoUmVsYXRlZFR5cGUKICAg
        IEBzdGF0aWMKICAgIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHRoZSBj
        YWxsYmFjayB0byBpbnZva2UKICAgIEBwYXJhbSB7YW55fSBiaW5kaW5nIHRo
        ZSB2YWx1ZSB0byB3aGljaCB0aGUgY2FsbGJhY2sncyBgdGhpc2Agc2hvdWxk
        IGJlIGJvdW5kCiAgKi8KICBlYWNoUmVsYXRlZFR5cGU6IGZ1bmN0aW9uKGNh
        bGxiYWNrLCBiaW5kaW5nKSB7CiAgICBnZXQodGhpcywgJ3JlbGF0ZWRUeXBl
        cycpLmZvckVhY2goZnVuY3Rpb24odHlwZSkgewogICAgICBjYWxsYmFjay5j
        YWxsKGJpbmRpbmcsIHR5cGUpOwogICAgfSk7CiAgfQp9KTsKCkRTLk1vZGVs
        LnJlb3Blbih7CiAgLyoqCiAgICBHaXZlbiBhIGNhbGxiYWNrLCBpdGVyYXRl
        cyBvdmVyIGVhY2ggb2YgdGhlIHJlbGF0aW9uc2hpcHMgaW4gdGhlIG1vZGVs
        LAogICAgaW52b2tpbmcgdGhlIGNhbGxiYWNrIHdpdGggdGhlIG5hbWUgb2Yg
        ZWFjaCByZWxhdGlvbnNoaXAgYW5kIGl0cyByZWxhdGlvbnNoaXAKICAgIGRl
        c2NyaXB0b3IuCgogICAgQG1ldGhvZCBlYWNoUmVsYXRpb25zaGlwCiAgICBA
        cGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgdG8gaW52
        b2tlCiAgICBAcGFyYW0ge2FueX0gYmluZGluZyB0aGUgdmFsdWUgdG8gd2hp
        Y2ggdGhlIGNhbGxiYWNrJ3MgYHRoaXNgIHNob3VsZCBiZSBib3VuZAogICov
        CiAgZWFjaFJlbGF0aW9uc2hpcDogZnVuY3Rpb24oY2FsbGJhY2ssIGJpbmRp
        bmcpIHsKICAgIHRoaXMuY29uc3RydWN0b3IuZWFjaFJlbGF0aW9uc2hpcChj
        YWxsYmFjaywgYmluZGluZyk7CiAgfQp9KTsKCn0pKCk7CgoKCihmdW5jdGlv
        bigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp9KSgpOwoKCgoo
        ZnVuY3Rpb24oKSB7Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoKdmFy
        IGdldCA9IEVtYmVyLmdldCwgc2V0ID0gRW1iZXIuc2V0Owp2YXIgb25jZSA9
        IEVtYmVyLnJ1bi5vbmNlOwp2YXIgZm9yRWFjaCA9IEVtYmVyLkVudW1lcmFi
        bGVVdGlscy5mb3JFYWNoOwoKLyoqCiAgQGNsYXNzIFJlY29yZEFycmF5TWFu
        YWdlcgogIEBuYW1lc3BhY2UgRFMKICBAcHJpdmF0ZQogIEBleHRlbmRzIEVt
        YmVyLk9iamVjdAoqLwpEUy5SZWNvcmRBcnJheU1hbmFnZXIgPSBFbWJlci5P
        YmplY3QuZXh0ZW5kKHsKICBpbml0OiBmdW5jdGlvbigpIHsKICAgIHRoaXMu
        ZmlsdGVyZWRSZWNvcmRBcnJheXMgPSBFbWJlci5NYXBXaXRoRGVmYXVsdC5j
        cmVhdGUoewogICAgICBkZWZhdWx0VmFsdWU6IGZ1bmN0aW9uKCkgeyByZXR1
        cm4gW107IH0KICAgIH0pOwoKICAgIHRoaXMuY2hhbmdlZFJlY29yZHMgPSBb
        XTsKICB9LAoKICByZWNvcmREaWRDaGFuZ2U6IGZ1bmN0aW9uKHJlY29yZCkg
        ewogICAgdGhpcy5jaGFuZ2VkUmVjb3Jkcy5wdXNoKHJlY29yZCk7CiAgICBv
        bmNlKHRoaXMsIHRoaXMudXBkYXRlUmVjb3JkQXJyYXlzKTsKICB9LAoKICBy
        ZWNvcmRBcnJheXNGb3JSZWNvcmQ6IGZ1bmN0aW9uKHJlY29yZCkgewogICAg
        cmVjb3JkLl9yZWNvcmRBcnJheXMgPSByZWNvcmQuX3JlY29yZEFycmF5cyB8
        fCBFbWJlci5PcmRlcmVkU2V0LmNyZWF0ZSgpOwogICAgcmV0dXJuIHJlY29y
        ZC5fcmVjb3JkQXJyYXlzOwogIH0sCgogIC8qKgogICAgVGhpcyBtZXRob2Qg
        aXMgaW52b2tlZCB3aGVuZXZlciBkYXRhIGlzIGxvYWRlZCBpbnRvIHRoZSBz
        dG9yZQogICAgYnkgdGhlIGFkYXB0ZXIgb3IgdXBkYXRlZCBieSB0aGUgYWRh
        cHRlciwgb3Igd2hlbiBhbiBhdHRyaWJ1dGUKICAgIGNoYW5nZXMgb24gYSBy
        ZWNvcmQuCgogICAgSXQgdXBkYXRlcyBhbGwgZmlsdGVycyB0aGF0IGEgcmVj
        b3JkIGJlbG9uZ3MgdG8uCgogICAgVG8gYXZvaWQgdGhyYXNoaW5nLCBpdCBv
        bmx5IHJ1bnMgb25jZSBwZXIgcnVuIGxvb3AgcGVyIHJlY29yZC4KCiAgICBA
        bWV0aG9kIHVwZGF0ZVJlY29yZEFycmF5cwogICAgQHBhcmFtIHtDbGFzc30g
        dHlwZQogICAgQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSBjbGllbnRJZAogICov
        CiAgdXBkYXRlUmVjb3JkQXJyYXlzOiBmdW5jdGlvbigpIHsKICAgIGZvckVh
        Y2godGhpcy5jaGFuZ2VkUmVjb3JkcywgZnVuY3Rpb24ocmVjb3JkKSB7CiAg
        ICAgIHZhciB0eXBlID0gcmVjb3JkLmNvbnN0cnVjdG9yLAogICAgICAgICAg
        cmVjb3JkQXJyYXlzID0gdGhpcy5maWx0ZXJlZFJlY29yZEFycmF5cy5nZXQo
        dHlwZSksCiAgICAgICAgICBmaWx0ZXI7CgogICAgICBmb3JFYWNoKHJlY29y
        ZEFycmF5cywgZnVuY3Rpb24oYXJyYXkpIHsKICAgICAgICBmaWx0ZXIgPSBn
        ZXQoYXJyYXksICdmaWx0ZXJGdW5jdGlvbicpOwogICAgICAgIHRoaXMudXBk
        YXRlUmVjb3JkQXJyYXkoYXJyYXksIGZpbHRlciwgdHlwZSwgcmVjb3JkKTsK
        ICAgICAgfSwgdGhpcyk7CgogICAgICAvLyBsb29wIHRocm91Z2ggYWxsIG1h
        bnlBcnJheXMgY29udGFpbmluZyBhbiB1bmxvYWRlZCBjb3B5IG9mIHRoaXMK
        ICAgICAgLy8gY2xpZW50SWQgYW5kIG5vdGlmeSB0aGVtIHRoYXQgdGhlIHJl
        Y29yZCB3YXMgbG9hZGVkLgogICAgICB2YXIgbWFueUFycmF5cyA9IHJlY29y
        ZC5fbG9hZGluZ1JlY29yZEFycmF5czsKCiAgICAgIGlmIChtYW55QXJyYXlz
        KSB7CiAgICAgICAgZm9yICh2YXIgaT0wLCBsPW1hbnlBcnJheXMubGVuZ3Ro
        OyBpPGw7IGkrKykgewogICAgICAgICAgbWFueUFycmF5c1tpXS5sb2FkZWRS
        ZWNvcmQoKTsKICAgICAgICB9CgogICAgICAgIHJlY29yZC5fbG9hZGluZ1Jl
        Y29yZEFycmF5cyA9IFtdOwogICAgICB9CiAgICB9LCB0aGlzKTsKCiAgICB0
        aGlzLmNoYW5nZWRSZWNvcmRzID0gW107CiAgfSwKCiAgLyoqCiAgICBVcGRh
        dGUgYW4gaW5kaXZpZHVhbCBmaWx0ZXIuCgogICAgQG1ldGhvZCB1cGRhdGVS
        ZWNvcmRBcnJheQogICAgQHBhcmFtIHtEUy5GaWx0ZXJlZFJlY29yZEFycmF5
        fSBhcnJheQogICAgQHBhcmFtIHtGdW5jdGlvbn0gZmlsdGVyCiAgICBAcGFy
        YW0ge0NsYXNzfSB0eXBlCiAgICBAcGFyYW0ge051bWJlcnxTdHJpbmd9IGNs
        aWVudElkCiAgKi8KICB1cGRhdGVSZWNvcmRBcnJheTogZnVuY3Rpb24oYXJy
        YXksIGZpbHRlciwgdHlwZSwgcmVjb3JkKSB7CiAgICB2YXIgc2hvdWxkQmVJ
        bkFycmF5OwoKICAgIGlmICghZmlsdGVyKSB7CiAgICAgIHNob3VsZEJlSW5B
        cnJheSA9IHRydWU7CiAgICB9IGVsc2UgewogICAgICBzaG91bGRCZUluQXJy
        YXkgPSBmaWx0ZXIocmVjb3JkKTsKICAgIH0KCiAgICB2YXIgcmVjb3JkQXJy
        YXlzID0gdGhpcy5yZWNvcmRBcnJheXNGb3JSZWNvcmQocmVjb3JkKTsKCiAg
        ICBpZiAoc2hvdWxkQmVJbkFycmF5KSB7CiAgICAgIHJlY29yZEFycmF5cy5h
        ZGQoYXJyYXkpOwogICAgICBhcnJheS5hZGRSZWNvcmQocmVjb3JkKTsKICAg
        IH0gZWxzZSBpZiAoIXNob3VsZEJlSW5BcnJheSkgewogICAgICByZWNvcmRB
        cnJheXMucmVtb3ZlKGFycmF5KTsKICAgICAgYXJyYXkucmVtb3ZlUmVjb3Jk
        KHJlY29yZCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICBXaGVuIGEgcmVjb3Jk
        IGlzIGRlbGV0ZWQsIGl0IGlzIHJlbW92ZWQgZnJvbSBhbGwgaXRzCiAgICBy
        ZWNvcmQgYXJyYXlzLgoKICAgIEBtZXRob2QgcmVtb3ZlCiAgICBAcGFyYW0g
        e0RTLk1vZGVsfSByZWNvcmQKICAqLwogIHJlbW92ZTogZnVuY3Rpb24ocmVj
        b3JkKSB7CiAgICB2YXIgcmVjb3JkQXJyYXlzID0gcmVjb3JkLl9yZWNvcmRB
        cnJheXM7CgogICAgaWYgKCFyZWNvcmRBcnJheXMpIHsgcmV0dXJuOyB9Cgog
        ICAgZm9yRWFjaChyZWNvcmRBcnJheXMsIGZ1bmN0aW9uKGFycmF5KSB7CiAg
        ICAgIGFycmF5LnJlbW92ZVJlY29yZChyZWNvcmQpOwogICAgfSk7CiAgfSwK
        CiAgLyoqCiAgICBUaGlzIG1ldGhvZCBpcyBpbnZva2VkIGlmIHRoZSBgZmls
        dGVyRnVuY3Rpb25gIHByb3BlcnR5IGlzCiAgICBjaGFuZ2VkIG9uIGEgYERT
        LkZpbHRlcmVkUmVjb3JkQXJyYXlgLgoKICAgIEl0IGVzc2VudGlhbGx5IHJl
        LXJ1bnMgdGhlIGZpbHRlciBmcm9tIHNjcmF0Y2guIFRoaXMgc2FtZQogICAg
        bWV0aG9kIGlzIGludm9rZWQgd2hlbiB0aGUgZmlsdGVyIGlzIGNyZWF0ZWQg
        aW4gdGggZmlyc3QgcGxhY2UuCgogICAgQG1ldGhvZCB1cGRhdGVGaWx0ZXIK
        ICAgIEBwYXJhbSBhcnJheQogICAgQHBhcmFtIHR5cGUKICAgIEBwYXJhbSBm
        aWx0ZXIKICAqLwogIHVwZGF0ZUZpbHRlcjogZnVuY3Rpb24oYXJyYXksIHR5
        cGUsIGZpbHRlcikgewogICAgdmFyIHR5cGVNYXAgPSB0aGlzLnN0b3JlLnR5
        cGVNYXBGb3IodHlwZSksCiAgICAgICAgcmVjb3JkcyA9IHR5cGVNYXAucmVj
        b3JkcywgcmVjb3JkOwoKICAgIGZvciAodmFyIGk9MCwgbD1yZWNvcmRzLmxl
        bmd0aDsgaTxsOyBpKyspIHsKICAgICAgcmVjb3JkID0gcmVjb3Jkc1tpXTsK
        CiAgICAgIGlmICghZ2V0KHJlY29yZCwgJ2lzRGVsZXRlZCcpICYmICFnZXQo
        cmVjb3JkLCAnaXNFbXB0eScpKSB7CiAgICAgICAgdGhpcy51cGRhdGVSZWNv
        cmRBcnJheShhcnJheSwgZmlsdGVyLCB0eXBlLCByZWNvcmQpOwogICAgICB9
        CiAgICB9CiAgfSwKCiAgLyoqCiAgICBDcmVhdGUgYSBgRFMuTWFueUFycmF5
        YCBmb3IgYSB0eXBlIGFuZCBsaXN0IG9mIHJlY29yZCByZWZlcmVuY2VzLCBh
        bmQgaW5kZXgKICAgIHRoZSBgTWFueUFycmF5YCB1bmRlciBlYWNoIHJlZmVy
        ZW5jZS4gVGhpcyBhbGxvd3MgdXMgdG8gZWZmaWNpZW50bHkgcmVtb3ZlCiAg
        ICByZWNvcmRzIGZyb20gYE1hbnlBcnJheWBzIHdoZW4gdGhleSBhcmUgZGVs
        ZXRlZC4KCiAgICBAbWV0aG9kIGNyZWF0ZU1hbnlBcnJheQogICAgQHBhcmFt
        IHtDbGFzc30gdHlwZQogICAgQHBhcmFtIHtBcnJheX0gcmVmZXJlbmNlcwog
        ICAgQHJldHVybiB7RFMuTWFueUFycmF5fQogICovCiAgY3JlYXRlTWFueUFy
        cmF5OiBmdW5jdGlvbih0eXBlLCByZWNvcmRzKSB7CiAgICB2YXIgbWFueUFy
        cmF5ID0gRFMuTWFueUFycmF5LmNyZWF0ZSh7CiAgICAgIHR5cGU6IHR5cGUs
        CiAgICAgIGNvbnRlbnQ6IHJlY29yZHMsCiAgICAgIHN0b3JlOiB0aGlzLnN0
        b3JlCiAgICB9KTsKCiAgICBmb3JFYWNoKHJlY29yZHMsIGZ1bmN0aW9uKHJl
        Y29yZCkgewogICAgICB2YXIgYXJyYXlzID0gdGhpcy5yZWNvcmRBcnJheXNG
        b3JSZWNvcmQocmVjb3JkKTsKICAgICAgYXJyYXlzLmFkZChtYW55QXJyYXkp
        OwogICAgfSwgdGhpcyk7CgogICAgcmV0dXJuIG1hbnlBcnJheTsKICB9LAoK
        ICAvKioKICAgIFJlZ2lzdGVyIGEgUmVjb3JkQXJyYXkgZm9yIGEgZ2l2ZW4g
        dHlwZSB0byBiZSBiYWNrZWQgYnkKICAgIGEgZmlsdGVyIGZ1bmN0aW9uLiBU
        aGlzIHdpbGwgY2F1c2UgdGhlIGFycmF5IHRvIHVwZGF0ZQogICAgYXV0b21h
        dGljYWxseSB3aGVuIHJlY29yZHMgb2YgdGhhdCB0eXBlIGNoYW5nZSBhdHRy
        aWJ1dGUKICAgIHZhbHVlcyBvciBzdGF0ZXMuCgogICAgQG1ldGhvZCByZWdp
        c3RlckZpbHRlcmVkUmVjb3JkQXJyYXkKICAgIEBwYXJhbSB7RFMuUmVjb3Jk
        QXJyYXl9IGFycmF5CiAgICBAcGFyYW0ge0NsYXNzfSB0eXBlCiAgICBAcGFy
        YW0ge0Z1bmN0aW9ufSBmaWx0ZXIKICAqLwogIHJlZ2lzdGVyRmlsdGVyZWRS
        ZWNvcmRBcnJheTogZnVuY3Rpb24oYXJyYXksIHR5cGUsIGZpbHRlcikgewog
        ICAgdmFyIHJlY29yZEFycmF5cyA9IHRoaXMuZmlsdGVyZWRSZWNvcmRBcnJh
        eXMuZ2V0KHR5cGUpOwogICAgcmVjb3JkQXJyYXlzLnB1c2goYXJyYXkpOwoK
        ICAgIHRoaXMudXBkYXRlRmlsdGVyKGFycmF5LCB0eXBlLCBmaWx0ZXIpOwog
        IH0sCgogIC8vIEludGVybmFsbHksIHdlIG1haW50YWluIGEgbWFwIG9mIGFs
        bCB1bmxvYWRlZCBJRHMgcmVxdWVzdGVkIGJ5CiAgLy8gYSBNYW55QXJyYXku
        IEFzIHRoZSBhZGFwdGVyIGxvYWRzIGRhdGEgaW50byB0aGUgc3RvcmUsIHRo
        ZQogIC8vIHN0b3JlIG5vdGlmaWVzIGFueSBpbnRlcmVzdGVkIE1hbnlBcnJh
        eXMuIFdoZW4gdGhlIE1hbnlBcnJheSdzCiAgLy8gdG90YWwgbnVtYmVyIG9m
        IGxvYWRpbmcgcmVjb3JkcyBkcm9wcyB0byB6ZXJvLCBpdCBiZWNvbWVzCiAg
        Ly8gYGlzTG9hZGVkYCBhbmQgZmlyZXMgYSBgZGlkTG9hZGAgZXZlbnQuCiAg
        cmVnaXN0ZXJXYWl0aW5nUmVjb3JkQXJyYXk6IGZ1bmN0aW9uKHJlY29yZCwg
        YXJyYXkpIHsKICAgIHZhciBsb2FkaW5nUmVjb3JkQXJyYXlzID0gcmVjb3Jk
        Ll9sb2FkaW5nUmVjb3JkQXJyYXlzIHx8IFtdOwogICAgbG9hZGluZ1JlY29y
        ZEFycmF5cy5wdXNoKGFycmF5KTsKICAgIHJlY29yZC5fbG9hZGluZ1JlY29y
        ZEFycmF5cyA9IGxvYWRpbmdSZWNvcmRBcnJheXM7CiAgfQp9KTsKCn0pKCk7
        CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1kYXRhCiov
        Cgp2YXIgZ2V0ID0gRW1iZXIuZ2V0LCBzZXQgPSBFbWJlci5zZXQ7CnZhciBt
        YXAgPSBFbWJlci5BcnJheVBvbHlmaWxscy5tYXA7Cgp2YXIgZXJyb3JQcm9w
        cyA9IFsnZGVzY3JpcHRpb24nLCAnZmlsZU5hbWUnLCAnbGluZU51bWJlcics
        ICdtZXNzYWdlJywgJ25hbWUnLCAnbnVtYmVyJywgJ3N0YWNrJ107CgpEUy5J
        bnZhbGlkRXJyb3IgPSBmdW5jdGlvbihlcnJvcnMpIHsKICB2YXIgdG1wID0g
        RXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgIlRoZSBi
        YWNrZW5kIHJlamVjdGVkIHRoZSBjb21taXQgYmVjYXVzZSBpdCB3YXMgaW52
        YWxpZDogIiArIEVtYmVyLmluc3BlY3QoZXJyb3JzKSk7CiAgdGhpcy5lcnJv
        cnMgPSBlcnJvcnM7CgogIGZvciAodmFyIGk9MCwgbD1lcnJvclByb3BzLmxl
        bmd0aDsgaTxsOyBpKyspIHsKICAgIHRoaXNbZXJyb3JQcm9wc1tpXV0gPSB0
        bXBbZXJyb3JQcm9wc1tpXV07CiAgfQp9OwpEUy5JbnZhbGlkRXJyb3IucHJv
        dG90eXBlID0gRW1iZXIuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7CgovKioK
        ICBBbiBhZGFwdGVyIGlzIGFuIG9iamVjdCB0aGF0IHJlY2VpdmVzIHJlcXVl
        c3RzIGZyb20gYSBzdG9yZSBhbmQKICB0cmFuc2xhdGVzIHRoZW0gaW50byB0
        aGUgYXBwcm9wcmlhdGUgYWN0aW9uIHRvIHRha2UgYWdhaW5zdCB5b3VyCiAg
        cGVyc2lzdGVuY2UgbGF5ZXIuIFRoZSBwZXJzaXN0ZW5jZSBsYXllciBpcyB1
        c3VhbGx5IGFuIEhUVFAgQVBJLCBidXQgbWF5CiAgYmUgYW55dGhpbmcsIHN1
        Y2ggYXMgdGhlIGJyb3dzZXIncyBsb2NhbCBzdG9yYWdlLgoKICAjIyMgQ3Jl
        YXRpbmcgYW4gQWRhcHRlcgoKICBGaXJzdCwgY3JlYXRlIGEgbmV3IHN1YmNs
        YXNzIG9mIGBEUy5BZGFwdGVyYDoKCiAgICAgIEFwcC5NeUFkYXB0ZXIgPSBE
        Uy5BZGFwdGVyLmV4dGVuZCh7CiAgICAgICAgLy8gLi4ueW91ciBjb2RlIGhl
        cmUKICAgICAgfSk7CgogIFlvdSBjYW4gc2V0IHRoZSBgQXBwbGljYXRpb25B
        ZGFwdGVyYCBwcm9wZXJ0eSB0byB1c2UgaXQgYXMgdGhlIGRlZmF1bHQgZm9y
        IGV2ZXJ5IG1vZGVsOgoKICAgICAgQXBwLkFwcGxpY2F0aW9uQWRhcHRlciA9
        IEFwcC5NeUFkYXB0ZXIKCiAgSWYgeW91IG5lZWQgbW9yZSBmaW5lLWdyYWlu
        ZWQgY3VzdG9taXNhdGlvbiB5b3UgY2FuIGNyZWF0ZSBQZXIgVHlwZSBhZGFw
        dGVycyB3aGljaCBhcmUKICBhdXRvbWF0aWNhbGx5IHBpY2tlZCB1cCBieSBF
        bWJlciBEYXRhCgogICAgICBBcHAuUG9zdCA9IERTLk1vZGVsLmV4dGVuZCh7
        CiAgICAgICAgLy8gLi4uCiAgICAgIH0pOwoKICAgICAgQXBwLlBvc3RBZGFw
        dGVyID0gQXBwLkFwcGxpY2F0aW9uQWRhcHRlci5leHRlbmQoewogICAgICAg
        IC8vIC4uLgogICAgICB9KTsKCiAgYERTLkFkYXB0ZXJgIGlzIGFuIGFic3Ry
        YWN0IGJhc2UgY2xhc3MgdGhhdCB5b3Ugc2hvdWxkIG92ZXJyaWRlIGluIHlv
        dXIKICBhcHBsaWNhdGlvbiB0byBjdXN0b21pemUgaXQgZm9yIHlvdXIgYmFj
        a2VuZC4gVGhlIG1pbmltdW0gc2V0IG9mIG1ldGhvZHMKICB0aGF0IHlvdSBz
        aG91bGQgaW1wbGVtZW50IGlzOgoKICAgICogYGZpbmQoKWAKICAgICogYGNy
        ZWF0ZVJlY29yZCgpYAogICAgKiBgdXBkYXRlUmVjb3JkKClgCiAgICAqIGBk
        ZWxldGVSZWNvcmQoKWAKCiAgVG8gaW1wcm92ZSB0aGUgbmV0d29yayBwZXJm
        b3JtYW5jZSBvZiB5b3VyIGFwcGxpY2F0aW9uLCB5b3UgY2FuIG9wdGltaXpl
        CiAgeW91ciBhZGFwdGVyIGJ5IG92ZXJyaWRpbmcgdGhlc2UgbG93ZXItbGV2
        ZWwgbWV0aG9kczoKCiAgICAqIGBmaW5kTWFueSgpYAogICAgKiBgY3JlYXRl
        UmVjb3JkcygpYAogICAgKiBgdXBkYXRlUmVjb3JkcygpYAogICAgKiBgZGVs
        ZXRlUmVjb3JkcygpYAogICAgKiBgY29tbWl0KClgCgogIEZvciBhbiBleGFt
        cGxlIGltcGxlbWVudGF0aW9uLCBzZWUgYERTLlJFU1RBZGFwdGVyYCwgdGhl
        CiAgaW5jbHVkZWQgUkVTVCBhZGFwdGVyLgoKICBAY2xhc3MgQWRhcHRlcgog
        IEBuYW1lc3BhY2UgRFMKICBAZXh0ZW5kcyBFbWJlci5PYmplY3QKICBAdXNl
        cyBEUy5fTWFwcGFibGUKKi8KCkRTLkFkYXB0ZXIgPSBFbWJlci5PYmplY3Qu
        ZXh0ZW5kKERTLl9NYXBwYWJsZSwgewoKICAvKioKICAgIFRoZSBgZmluZCgp
        YCBtZXRob2QgaXMgaW52b2tlZCB3aGVuIHRoZSBzdG9yZSBpcyBhc2tlZCBm
        b3IgYSByZWNvcmQgdGhhdAogICAgaGFzIG5vdCBwcmV2aW91c2x5IGJlZW4g
        bG9hZGVkLiBJbiByZXNwb25zZSB0byBgZmluZCgpYCBiZWluZyBjYWxsZWQs
        IHlvdQogICAgc2hvdWxkIHF1ZXJ5IHlvdXIgcGVyc2lzdGVuY2UgbGF5ZXIg
        Zm9yIGEgcmVjb3JkIHdpdGggdGhlIGdpdmVuIElELiBPbmNlCiAgICBmb3Vu
        ZCwgeW91IGNhbiBhc3luY2hyb25vdXNseSBjYWxsIHRoZSBzdG9yZSdzIGBw
        dXNoKClgIG1ldGhvZCB0byBwdXNoCiAgICB0aGUgcmVjb3JkIGludG8gdGhl
        IHN0b3JlLgoKICAgIEhlcmUgaXMgYW4gZXhhbXBsZSBgZmluZGAgaW1wbGVt
        ZW50YXRpb246CgogICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHN0b3JlLCB0eXBl
        LCBpZCkgewogICAgICAgICAgdmFyIHVybCA9IHR5cGUudXJsOwogICAgICAg
        ICAgdXJsID0gdXJsLmZtdChpZCk7CgogICAgICAgICAgalF1ZXJ5LmdldEpT
        T04odXJsLCBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgLy8gZGF0
        YSBpcyBhIGhhc2ggb2Yga2V5L3ZhbHVlIHBhaXJzLiBJZiB5b3VyIHNlcnZl
        ciByZXR1cm5zIGEKICAgICAgICAgICAgICAvLyByb290LCBzaW1wbHkgZG8g
        c29tZXRoaW5nIGxpa2U6CiAgICAgICAgICAgICAgLy8gc3RvcmUucHVzaCh0
        eXBlLCBpZCwgZGF0YS5wZXJzb24pCiAgICAgICAgICAgICAgc3RvcmUucHVz
        aCh0eXBlLCBpZCwgZGF0YSk7CiAgICAgICAgICB9KTsKICAgICAgICB9Cgog
        ICAgQG1ldGhvZCBmaW5kCiAgKi8KICBmaW5kOiBFbWJlci5yZXF1aXJlZChG
        dW5jdGlvbiksCgogIC8qKgogICAgT3B0aW9uYWwKCiAgICBAbWV0aG9kIGZp
        bmRBbGwKICAgIEBwYXJhbSAgc3RvcmUKICAgIEBwYXJhbSAgdHlwZQogICAg
        QHBhcmFtICBzaW5jZQogICovCiAgZmluZEFsbDogbnVsbCwKCiAgLyoqCiAg
        ICBPcHRpb25hbAoKICAgIEBtZXRob2QgZmluZFF1ZXJ5CiAgICBAcGFyYW0g
        IHN0b3JlCiAgICBAcGFyYW0gIHR5cGUKICAgIEBwYXJhbSAgcXVlcnkKICAg
        IEBwYXJhbSAgcmVjb3JkQXJyYXkKICAqLwogIGZpbmRRdWVyeTogbnVsbCwK
        CiAgLyoqCiAgICBJZiB0aGUgZ2xvYmFsbHkgdW5pcXVlIElEcyBmb3IgeW91
        ciByZWNvcmRzIHNob3VsZCBiZSBnZW5lcmF0ZWQgb24gdGhlIGNsaWVudCwK
        ICAgIGltcGxlbWVudCB0aGUgYGdlbmVyYXRlSWRGb3JSZWNvcmQoKWAgbWV0
        aG9kLiBUaGlzIG1ldGhvZCB3aWxsIGJlIGludm9rZWQKICAgIGVhY2ggdGlt
        ZSB5b3UgY3JlYXRlIGEgbmV3IHJlY29yZCwgYW5kIHRoZSB2YWx1ZSByZXR1
        cm5lZCBmcm9tIGl0IHdpbGwgYmUKICAgIGFzc2lnbmVkIHRvIHRoZSByZWNv
        cmQncyBgcHJpbWFyeUtleWAuCgogICAgTW9zdCB0cmFkaXRpb25hbCBSRVNU
        LWxpa2UgSFRUUCBBUElzIHdpbGwgbm90IHVzZSB0aGlzIG1ldGhvZC4gSW5z
        dGVhZCwgdGhlIElECiAgICBvZiB0aGUgcmVjb3JkIHdpbGwgYmUgc2V0IGJ5
        IHRoZSBzZXJ2ZXIsIGFuZCB5b3VyIGFkYXB0ZXIgd2lsbCB1cGRhdGUgdGhl
        IHN0b3JlCiAgICB3aXRoIHRoZSBuZXcgSUQgd2hlbiBpdCBjYWxscyBgZGlk
        Q3JlYXRlUmVjb3JkKClgLiBPbmx5IGltcGxlbWVudCB0aGlzIG1ldGhvZCBp
        ZgogICAgeW91IGludGVuZCB0byBnZW5lcmF0ZSByZWNvcmQgSURzIG9uIHRo
        ZSBjbGllbnQtc2lkZS4KCiAgICBUaGUgYGdlbmVyYXRlSWRGb3JSZWNvcmQo
        KWAgbWV0aG9kIHdpbGwgYmUgaW52b2tlZCB3aXRoIHRoZSByZXF1ZXN0aW5n
        IHN0b3JlIGFzCiAgICB0aGUgZmlyc3QgcGFyYW1ldGVyIGFuZCB0aGUgbmV3
        bHkgY3JlYXRlZCByZWNvcmQgYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXI6Cgog
        ICAgICAgIGdlbmVyYXRlSWRGb3JSZWNvcmQ6IGZ1bmN0aW9uKHN0b3JlLCBy
        ZWNvcmQpIHsKICAgICAgICAgIHZhciB1dWlkID0gQXBwLmdlbmVyYXRlVVVJ
        RFdpdGhTdGF0aXN0aWNhbGx5TG93T2Rkc09mQ29sbGlzaW9uKCk7CiAgICAg
        ICAgICByZXR1cm4gdXVpZDsKICAgICAgICB9CgogICAgQG1ldGhvZCBnZW5l
        cmF0ZUlkRm9yUmVjb3JkCiAgICBAcGFyYW0ge0RTLlN0b3JlfSBzdG9yZQog
        ICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgKi8KICBnZW5lcmF0ZUlk
        Rm9yUmVjb3JkOiBudWxsLAoKICAvKioKICAgIFByb3hpZXMgdG8gdGhlIHNl
        cmlhbGl6ZXIncyBgc2VyaWFsaXplYCBtZXRob2QuCgogICAgQG1ldGhvZCBz
        ZXJpYWxpemUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHBh
        cmFtIHtPYmplY3R9ICAgb3B0aW9ucwogICovCiAgc2VyaWFsaXplOiBmdW5j
        dGlvbihyZWNvcmQsIG9wdGlvbnMpIHsKICAgIHJldHVybiBnZXQocmVjb3Jk
        LCAnc3RvcmUnKS5zZXJpYWxpemVyRm9yKHJlY29yZC5jb25zdHJ1Y3Rvci50
        eXBlS2V5KS5zZXJpYWxpemUocmVjb3JkLCBvcHRpb25zKTsKICB9LAoKICAv
        KioKICAgIEltcGxlbWVudCB0aGlzIG1ldGhvZCBpbiBhIHN1YmNsYXNzIHRv
        IGhhbmRsZSB0aGUgY3JlYXRpb24gb2YKICAgIG5ldyByZWNvcmRzLgoKICAg
        IFNlcmlhbGl6ZXMgdGhlIHJlY29yZCBhbmQgc2VuZCBpdCB0byB0aGUgc2Vy
        dmVyLgoKICAgIFRoaXMgaW1wbGVtZW50YXRpb24gc2hvdWxkIGNhbGwgdGhl
        IGFkYXB0ZXIncyBgZGlkQ3JlYXRlUmVjb3JkYAogICAgbWV0aG9kIG9uIHN1
        Y2Nlc3Mgb3IgYGRpZEVycm9yYCBtZXRob2Qgb24gZmFpbHVyZS4KCiAgICBA
        bWV0aG9kIGNyZWF0ZVJlY29yZAogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3Rv
        cmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUgICB0
        aGUgRFMuTW9kZWwgY2xhc3Mgb2YgdGhlIHJlY29yZAogICAgQHBhcmFtIHtE
        Uy5Nb2RlbH0gcmVjb3JkCiAgKi8KICBjcmVhdGVSZWNvcmQ6IEVtYmVyLnJl
        cXVpcmVkKEZ1bmN0aW9uKSwKCiAgLyoqCiAgICBJbXBsZW1lbnQgdGhpcyBt
        ZXRob2QgaW4gYSBzdWJjbGFzcyB0byBoYW5kbGUgdGhlIHVwZGF0aW5nIG9m
        CiAgICBhIHJlY29yZC4KCiAgICBTZXJpYWxpemVzIHRoZSByZWNvcmQgdXBk
        YXRlIGFuZCBzZW5kIGl0IHRvIHRoZSBzZXJ2ZXIuCgogICAgQG1ldGhvZCB1
        cGRhdGVSZWNvcmQKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBA
        cGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlICAgdGhlIERTLk1v
        ZGVsIGNsYXNzIG9mIHRoZSByZWNvcmQKICAgIEBwYXJhbSB7RFMuTW9kZWx9
        IHJlY29yZAogICovCiAgdXBkYXRlUmVjb3JkOiBFbWJlci5yZXF1aXJlZChG
        dW5jdGlvbiksCgogIC8qKgogICAgSW1wbGVtZW50IHRoaXMgbWV0aG9kIGlu
        IGEgc3ViY2xhc3MgdG8gaGFuZGxlIHRoZSBkZWxldGlvbiBvZgogICAgYSBy
        ZWNvcmQuCgogICAgU2VuZHMgYSBkZWxldGUgcmVxdWVzdCBmb3IgdGhlIHJl
        Y29yZCB0byB0aGUgc2VydmVyLgoKICAgIEBtZXRob2QgZGVsZXRlUmVjb3Jk
        CiAgICBAcGFyYW0ge0RTLlN0b3JlfSBzdG9yZQogICAgQHBhcmFtIHtzdWJj
        bGFzcyBvZiBEUy5Nb2RlbH0gdHlwZSAgIHRoZSBEUy5Nb2RlbCBjbGFzcyBv
        ZiB0aGUgcmVjb3JkCiAgICBAcGFyYW0ge0RTLk1vZGVsfSByZWNvcmQKICAq
        LwogIGRlbGV0ZVJlY29yZDogRW1iZXIucmVxdWlyZWQoRnVuY3Rpb24pLAoK
        ICAvKioKICAgIEZpbmQgbXVsdGlwbGUgcmVjb3JkcyBhdCBvbmNlLgoKICAg
        IEJ5IGRlZmF1bHQsIGl0IGxvb3BzIG92ZXIgdGhlIHByb3ZpZGVkIGlkcyBh
        bmQgY2FsbHMgYGZpbmRgIG9uIGVhY2guCiAgICBNYXkgYmUgb3ZlcndyaXR0
        ZW4gdG8gaW1wcm92ZSBwZXJmb3JtYW5jZSBhbmQgcmVkdWNlIHRoZSBudW1i
        ZXIgb2YKICAgIHNlcnZlciByZXF1ZXN0cy4KCiAgICBAbWV0aG9kIGZpbmRN
        YW55CiAgICBAcGFyYW0ge0RTLlN0b3JlfSBzdG9yZQogICAgQHBhcmFtIHtz
        dWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZSAgIHRoZSBEUy5Nb2RlbCBjbGFz
        cyBvZiB0aGUgcmVjb3JkcwogICAgQHBhcmFtIHtBcnJheX0gICAgaWRzCiAg
        Ki8KICBmaW5kTWFueTogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIGlkcykgewog
        ICAgdmFyIHByb21pc2VzID0gbWFwLmNhbGwoaWRzLCBmdW5jdGlvbihpZCkg
        ewogICAgICByZXR1cm4gdGhpcy5maW5kKHN0b3JlLCB0eXBlLCBpZCk7CiAg
        ICB9LCB0aGlzKTsKCiAgICByZXR1cm4gRW1iZXIuUlNWUC5hbGwocHJvbWlz
        ZXMpOwogIH0KfSk7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Ci8qKgogIEBt
        b2R1bGUgZW1iZXItZGF0YQoqLwoKdmFyIGdldCA9IEVtYmVyLmdldCwgZm10
        ID0gRW1iZXIuU3RyaW5nLmZtdCwKICAgIGluZGV4T2YgPSBFbWJlci5FbnVt
        ZXJhYmxlVXRpbHMuaW5kZXhPZjsKCnZhciBjb3VudGVyID0gMDsKCi8qKgog
        IGBEUy5GaXh0dXJlQWRhcHRlcmAgaXMgYW4gYWRhcHRlciB0aGF0IGxvYWRz
        IHJlY29yZHMgZnJvbSBtZW1vcnkuCiAgSXRzIHByaW1hcmlseSB1c2VkIGZv
        ciBkZXZlbG9wbWVudCBhbmQgdGVzdGluZy4gWW91IGNhbiBhbHNvIHVzZQog
        IGBEUy5GaXh0dXJlQWRhcHRlcmAgd2hpbGUgd29ya2luZyBvbiB0aGUgQVBJ
        IGJ1dCBhcmUgbm90IHJlYWR5IHRvCiAgaW50ZWdyYXRlIHlldC4gSXQgaXMg
        YSBmdWxseSBmdW5jdGlvbmluZyBhZGFwdGVyLiBBbGwgQ1JVRCBtZXRob2Rz
        CiAgYXJlIGltcGxlbWVudGVkLiBZb3UgY2FuIGFsc28gaW1wbGVtZW50IHF1
        ZXJ5IGxvZ2ljIHRoYXQgYSByZW1vdGUKICBzeXN0ZW0gd291bGQgZG8uIEl0
        cyBwb3NzaWJsZSB0byBkbyBkZXZlbG9wIHlvdXIgZW50aXJlIGFwcGxpY2F0
        aW9uCiAgd2l0aCBgRFMuRml4dHVyZUFkYXB0ZXJgLgoKICBAY2xhc3MgRml4
        dHVyZUFkYXB0ZXIKICBAbmFtZXNwYWNlIERTCiAgQGV4dGVuZHMgRFMuQWRh
        cHRlcgoqLwpEUy5GaXh0dXJlQWRhcHRlciA9IERTLkFkYXB0ZXIuZXh0ZW5k
        KHsKICAvLyBieSBkZWZhdWx0LCBmaXh0dXJlcyBhcmUgYWxyZWFkeSBpbiBu
        b3JtYWxpemVkIGZvcm0KICBzZXJpYWxpemVyOiBudWxsLAoKICBzaW11bGF0
        ZVJlbW90ZVJlc3BvbnNlOiB0cnVlLAoKICBsYXRlbmN5OiA1MCwKCiAgLyoq
        CiAgICBJbXBsZW1lbnQgdGhpcyBtZXRob2QgaW4gb3JkZXIgdG8gcHJvdmlk
        ZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCBhIHR5cGUKCiAgICBAbWV0aG9kIGZp
        eHR1cmVzRm9yVHlwZQogICAgQHBhcmFtICB0eXBlCiAgKi8KICBmaXh0dXJl
        c0ZvclR5cGU6IGZ1bmN0aW9uKHR5cGUpIHsKICAgIGlmICh0eXBlLkZJWFRV
        UkVTKSB7CiAgICAgIHZhciBmaXh0dXJlcyA9IEVtYmVyLkEodHlwZS5GSVhU
        VVJFUyk7CiAgICAgIHJldHVybiBmaXh0dXJlcy5tYXAoZnVuY3Rpb24oZml4
        dHVyZSl7CiAgICAgICAgdmFyIGZpeHR1cmVJZFR5cGUgPSB0eXBlb2YgZml4
        dHVyZS5pZDsKICAgICAgICBpZihmaXh0dXJlSWRUeXBlICE9PSAibnVtYmVy
        IiAmJiBmaXh0dXJlSWRUeXBlICE9PSAic3RyaW5nIil7CiAgICAgICAgICB0
        aHJvdyBuZXcgRXJyb3IoZm10KCd0aGUgaWQgcHJvcGVydHkgbXVzdCBiZSBk
        ZWZpbmVkIGFzIGEgbnVtYmVyIG9yIHN0cmluZyBmb3IgZml4dHVyZSAlQCcs
        IFtmaXh0dXJlXSkpOwogICAgICAgIH0KICAgICAgICBmaXh0dXJlLmlkID0g
        Zml4dHVyZS5pZCArICcnOwogICAgICAgIHJldHVybiBmaXh0dXJlOwogICAg
        ICB9KTsKICAgIH0KICAgIHJldHVybiBudWxsOwogIH0sCgogIC8qKgogICAg
        SW1wbGVtZW50IHRoaXMgbWV0aG9kIGluIG9yZGVyIHRvIHF1ZXJ5IGZpeHR1
        cmVzIGRhdGEKCiAgICBAbWV0aG9kIHF1ZXJ5Rml4dHVyZXMKICAgIEBwYXJh
        bSAgZml4dHVyZQogICAgQHBhcmFtICBxdWVyeQogICAgQHBhcmFtICB0eXBl
        CiAgKi8KICBxdWVyeUZpeHR1cmVzOiBmdW5jdGlvbihmaXh0dXJlcywgcXVl
        cnksIHR5cGUpIHsKICAgIEVtYmVyLmFzc2VydCgnTm90IGltcGxlbWVudGVk
        OiBZb3UgbXVzdCBvdmVycmlkZSB0aGUgRFMuRml4dHVyZUFkYXB0ZXI6OnF1
        ZXJ5Rml4dHVyZXMgbWV0aG9kIHRvIHN1cHBvcnQgcXVlcnlpbmcgdGhlIGZp
        eHR1cmUgc3RvcmUuJyk7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIHVwZGF0
        ZUZpeHR1cmVzCiAgICBAcGFyYW0gIHR5cGUKICAgIEBwYXJhbSAgZml4dHVy
        ZQogICovCiAgdXBkYXRlRml4dHVyZXM6IGZ1bmN0aW9uKHR5cGUsIGZpeHR1
        cmUpIHsKICAgIGlmKCF0eXBlLkZJWFRVUkVTKSB7CiAgICAgIHR5cGUuRklY
        VFVSRVMgPSBbXTsKICAgIH0KCiAgICB2YXIgZml4dHVyZXMgPSB0eXBlLkZJ
        WFRVUkVTOwoKICAgIHRoaXMuZGVsZXRlTG9hZGVkRml4dHVyZSh0eXBlLCBm
        aXh0dXJlKTsKCiAgICBmaXh0dXJlcy5wdXNoKGZpeHR1cmUpOwogIH0sCgog
        IC8qKgogICAgSW1wbGVtZW50IHRoaXMgbWV0aG9kIGluIG9yZGVyIHRvIHBy
        b3ZpZGUgcHJvdmlkZSBqc29uIGZvciBDUlVEIG1ldGhvZHMKCiAgICBAbWV0
        aG9kIG1vY2tKU09OCiAgICBAcGFyYW0gIHR5cGUKICAgIEBwYXJhbSAgcmVj
        b3JkCiAgKi8KICBtb2NrSlNPTjogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIHJl
        Y29yZCkgewogICAgcmV0dXJuIHN0b3JlLnNlcmlhbGl6ZXJGb3IodHlwZSku
        c2VyaWFsaXplKHJlY29yZCwgeyBpbmNsdWRlSWQ6IHRydWUgfSk7CiAgfSwK
        CiAgLyoqCiAgICBAbWV0aG9kIGdlbmVyYXRlSWRGb3JSZWNvcmQKICAgIEBw
        YXJhbSAgc3RvcmUKICAgIEBwYXJhbSAgcmVjb3JkCiAgKi8KICBnZW5lcmF0
        ZUlkRm9yUmVjb3JkOiBmdW5jdGlvbihzdG9yZSkgewogICAgcmV0dXJuICJm
        aXh0dXJlLSIgKyBjb3VudGVyKys7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9k
        IGZpbmQKICAgIEBwYXJhbSAgc3RvcmUKICAgIEBwYXJhbSAgdHlwZQogICAg
        QHBhcmFtICBpZAogICovCiAgZmluZDogZnVuY3Rpb24oc3RvcmUsIHR5cGUs
        IGlkKSB7CiAgICB2YXIgZml4dHVyZXMgPSB0aGlzLmZpeHR1cmVzRm9yVHlw
        ZSh0eXBlKSwKICAgICAgICBmaXh0dXJlOwoKICAgIEVtYmVyLmFzc2VydCgi
        VW5hYmxlIHRvIGZpbmQgZml4dHVyZXMgZm9yIG1vZGVsIHR5cGUgIit0eXBl
        LnRvU3RyaW5nKCksIGZpeHR1cmVzKTsKCiAgICBpZiAoZml4dHVyZXMpIHsK
        ICAgICAgZml4dHVyZSA9IEVtYmVyLkEoZml4dHVyZXMpLmZpbmRQcm9wZXJ0
        eSgnaWQnLCBpZCk7CiAgICB9CgogICAgaWYgKGZpeHR1cmUpIHsKICAgICAg
        cmV0dXJuIHRoaXMuc2ltdWxhdGVSZW1vdGVDYWxsKGZ1bmN0aW9uKCkgewog
        ICAgICAgIHJldHVybiBmaXh0dXJlOwogICAgICB9LCB0aGlzKTsKICAgIH0K
        ICB9LAoKICAvKioKICAgIEBtZXRob2QgZmluZE1hbnkKICAgIEBwYXJhbSAg
        c3RvcmUKICAgIEBwYXJhbSAgdHlwZQogICAgQHBhcmFtICBpZHMKICAqLwog
        IGZpbmRNYW55OiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgaWRzKSB7CiAgICB2
        YXIgZml4dHVyZXMgPSB0aGlzLmZpeHR1cmVzRm9yVHlwZSh0eXBlKTsKCiAg
        ICBFbWJlci5hc3NlcnQoIlVuYWJsZSB0byBmaW5kIGZpeHR1cmVzIGZvciBt
        b2RlbCB0eXBlICIrdHlwZS50b1N0cmluZygpLCBmaXh0dXJlcyk7CgogICAg
        aWYgKGZpeHR1cmVzKSB7CiAgICAgIGZpeHR1cmVzID0gZml4dHVyZXMuZmls
        dGVyKGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICByZXR1cm4gaW5kZXhPZihp
        ZHMsIGl0ZW0uaWQpICE9PSAtMTsKICAgICAgfSk7CiAgICB9CgogICAgaWYg
        KGZpeHR1cmVzKSB7CiAgICAgIHJldHVybiB0aGlzLnNpbXVsYXRlUmVtb3Rl
        Q2FsbChmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gZml4dHVyZXM7CiAg
        ICAgIH0sIHRoaXMpOwogICAgfQogIH0sCgogIC8qKgogICAgQG1ldGhvZCBm
        aW5kQWxsCiAgICBAcGFyYW0gIHN0b3JlCiAgICBAcGFyYW0gIHR5cGUKICAq
        LwogIGZpbmRBbGw6IGZ1bmN0aW9uKHN0b3JlLCB0eXBlKSB7CiAgICB2YXIg
        Zml4dHVyZXMgPSB0aGlzLmZpeHR1cmVzRm9yVHlwZSh0eXBlKTsKCiAgICBF
        bWJlci5hc3NlcnQoIlVuYWJsZSB0byBmaW5kIGZpeHR1cmVzIGZvciBtb2Rl
        bCB0eXBlICIrdHlwZS50b1N0cmluZygpLCBmaXh0dXJlcyk7CgogICAgcmV0
        dXJuIHRoaXMuc2ltdWxhdGVSZW1vdGVDYWxsKGZ1bmN0aW9uKCkgewogICAg
        ICByZXR1cm4gZml4dHVyZXM7CiAgICB9LCB0aGlzKTsKICB9LAoKICAvKioK
        ICAgIEBtZXRob2QgZmluZFF1ZXJ5CiAgICBAcGFyYW0gIHN0b3JlCiAgICBA
        cGFyYW0gIHR5cGUKICAgIEBwYXJhbSAgcXVlcnkKICAgIEBwYXJhbSAgYXJy
        YXkKICAqLwogIGZpbmRRdWVyeTogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIHF1
        ZXJ5LCBhcnJheSkgewogICAgdmFyIGZpeHR1cmVzID0gdGhpcy5maXh0dXJl
        c0ZvclR5cGUodHlwZSk7CgogICAgRW1iZXIuYXNzZXJ0KCJVbmFibGUgdG8g
        ZmluZCBmaXh0dXJlcyBmb3IgbW9kZWwgdHlwZSAiK3R5cGUudG9TdHJpbmco
        KSwgZml4dHVyZXMpOwoKICAgIGZpeHR1cmVzID0gdGhpcy5xdWVyeUZpeHR1
        cmVzKGZpeHR1cmVzLCBxdWVyeSwgdHlwZSk7CgogICAgaWYgKGZpeHR1cmVz
        KSB7CiAgICAgIHJldHVybiB0aGlzLnNpbXVsYXRlUmVtb3RlQ2FsbChmdW5j
        dGlvbigpIHsKICAgICAgICByZXR1cm4gZml4dHVyZXM7CiAgICAgIH0sIHRo
        aXMpOwogICAgfQogIH0sCgogIC8qKgogICAgQG1ldGhvZCBjcmVhdGVSZWNv
        cmQKICAgIEBwYXJhbSAgc3RvcmUKICAgIEBwYXJhbSAgdHlwZQogICAgQHBh
        cmFtICByZWNvcmQKICAqLwogIGNyZWF0ZVJlY29yZDogZnVuY3Rpb24oc3Rv
        cmUsIHR5cGUsIHJlY29yZCkgewogICAgdmFyIGZpeHR1cmUgPSB0aGlzLm1v
        Y2tKU09OKHN0b3JlLCB0eXBlLCByZWNvcmQpOwoKICAgIHRoaXMudXBkYXRl
        Rml4dHVyZXModHlwZSwgZml4dHVyZSk7CgogICAgcmV0dXJuIHRoaXMuc2lt
        dWxhdGVSZW1vdGVDYWxsKGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gZml4
        dHVyZTsKICAgIH0sIHRoaXMpOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCB1
        cGRhdGVSZWNvcmQKICAgIEBwYXJhbSAgc3RvcmUKICAgIEBwYXJhbSAgdHlw
        ZQogICAgQHBhcmFtICByZWNvcmQKICAqLwogIHVwZGF0ZVJlY29yZDogZnVu
        Y3Rpb24oc3RvcmUsIHR5cGUsIHJlY29yZCkgewogICAgdmFyIGZpeHR1cmUg
        PSB0aGlzLm1vY2tKU09OKHN0b3JlLCB0eXBlLCByZWNvcmQpOwoKICAgIHRo
        aXMudXBkYXRlRml4dHVyZXModHlwZSwgZml4dHVyZSk7CgogICAgcmV0dXJu
        IHRoaXMuc2ltdWxhdGVSZW1vdGVDYWxsKGZ1bmN0aW9uKCkgewogICAgICBy
        ZXR1cm4gZml4dHVyZTsKICAgIH0sIHRoaXMpOwogIH0sCgogIC8qKgogICAg
        QG1ldGhvZCBkZWxldGVSZWNvcmQKICAgIEBwYXJhbSAgc3RvcmUKICAgIEBw
        YXJhbSAgdHlwZQogICAgQHBhcmFtICByZWNvcmQKICAqLwogIGRlbGV0ZVJl
        Y29yZDogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIHJlY29yZCkgewogICAgdmFy
        IGZpeHR1cmUgPSB0aGlzLm1vY2tKU09OKHN0b3JlLCB0eXBlLCByZWNvcmQp
        OwoKICAgIHRoaXMuZGVsZXRlTG9hZGVkRml4dHVyZSh0eXBlLCBmaXh0dXJl
        KTsKCiAgICByZXR1cm4gdGhpcy5zaW11bGF0ZVJlbW90ZUNhbGwoZnVuY3Rp
        b24oKSB7CiAgICAgIC8vIG5vIHBheWxvYWQgaW4gYSBkZWxldGlvbgogICAg
        ICByZXR1cm4gbnVsbDsKICAgIH0pOwogIH0sCgogIC8qCiAgICBAbWV0aG9k
        IGRlbGV0ZUxvYWRlZEZpeHR1cmUKICAgIEBwcml2YXRlCiAgICBAcGFyYW0g
        dHlwZQogICAgQHBhcmFtIHJlY29yZAogICovCiAgZGVsZXRlTG9hZGVkRml4
        dHVyZTogZnVuY3Rpb24odHlwZSwgcmVjb3JkKSB7CiAgICB2YXIgZXhpc3Rp
        bmdGaXh0dXJlID0gdGhpcy5maW5kRXhpc3RpbmdGaXh0dXJlKHR5cGUsIHJl
        Y29yZCk7CgogICAgaWYoZXhpc3RpbmdGaXh0dXJlKSB7CiAgICAgIHZhciBp
        bmRleCA9IGluZGV4T2YodHlwZS5GSVhUVVJFUywgZXhpc3RpbmdGaXh0dXJl
        KTsKICAgICAgdHlwZS5GSVhUVVJFUy5zcGxpY2UoaW5kZXgsIDEpOwogICAg
        ICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9LAoKICAvKgogICAgQG1ldGhvZCBm
        aW5kRXhpc3RpbmdGaXh0dXJlCiAgICBAcHJpdmF0ZQogICAgQHBhcmFtIHR5
        cGUKICAgIEBwYXJhbSByZWNvcmQKICAqLwogIGZpbmRFeGlzdGluZ0ZpeHR1
        cmU6IGZ1bmN0aW9uKHR5cGUsIHJlY29yZCkgewogICAgdmFyIGZpeHR1cmVz
        ID0gdGhpcy5maXh0dXJlc0ZvclR5cGUodHlwZSk7CiAgICB2YXIgaWQgPSBn
        ZXQocmVjb3JkLCAnaWQnKTsKCiAgICByZXR1cm4gdGhpcy5maW5kRml4dHVy
        ZUJ5SWQoZml4dHVyZXMsIGlkKTsKICB9LAoKICAvKgogICAgQG1ldGhvZCBm
        aW5kRml4dHVyZUJ5SWQKICAgIEBwcml2YXRlCiAgICBAcGFyYW0gdHlwZQog
        ICAgQHBhcmFtIHJlY29yZAogICovCiAgZmluZEZpeHR1cmVCeUlkOiBmdW5j
        dGlvbihmaXh0dXJlcywgaWQpIHsKICAgIHJldHVybiBFbWJlci5BKGZpeHR1
        cmVzKS5maW5kKGZ1bmN0aW9uKHIpIHsKICAgICAgaWYoJycrZ2V0KHIsICdp
        ZCcpID09PSAnJytpZCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9
        IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfSk7
        CiAgfSwKCiAgLyoKICAgIEBtZXRob2Qgc2ltdWxhdGVSZW1vdGVDYWxsCiAg
        ICBAcHJpdmF0ZQogICAgQHBhcmFtIGNhbGxiYWNrCiAgICBAcGFyYW0gY29u
        dGV4dAogICovCiAgc2ltdWxhdGVSZW1vdGVDYWxsOiBmdW5jdGlvbihjYWxs
        YmFjaywgY29udGV4dCkgewogICAgdmFyIGFkYXB0ZXIgPSB0aGlzOwoKICAg
        IHJldHVybiBuZXcgRW1iZXIuUlNWUC5Qcm9taXNlKGZ1bmN0aW9uKHJlc29s
        dmUpIHsKICAgICAgaWYgKGdldChhZGFwdGVyLCAnc2ltdWxhdGVSZW1vdGVS
        ZXNwb25zZScpKSB7CiAgICAgICAgLy8gU2NoZWR1bGUgd2l0aCBzZXRUaW1l
        b3V0CiAgICAgICAgRW1iZXIucnVuLmxhdGVyKGZ1bmN0aW9uKCkgewogICAg
        ICAgICAgcmVzb2x2ZShjYWxsYmFjay5jYWxsKGNvbnRleHQpKTsKICAgICAg
        ICB9LCBnZXQoYWRhcHRlciwgJ2xhdGVuY3knKSk7CiAgICAgIH0gZWxzZSB7
        CiAgICAgICAgLy8gQXN5bmNocm9ub3VzLCBidXQgYXQgdGhlIG9mIHRoZSBy
        dW5sb29wIHdpdGggemVybyBsYXRlbmN5CiAgICAgICAgRW1iZXIucnVuLm9u
        Y2UoZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXNvbHZlKGNhbGxiYWNrLmNh
        bGwoY29udGV4dCkpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKICB9
        Cn0pOwoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewovKioKICBAbW9kdWxlIGVt
        YmVyLWRhdGEKKi8KCnZhciBnZXQgPSBFbWJlci5nZXQsIHNldCA9IEVtYmVy
        LnNldDsKdmFyIGZvckVhY2ggPSBFbWJlci5BcnJheVBvbHlmaWxscy5mb3JF
        YWNoOwp2YXIgbWFwID0gRW1iZXIuQXJyYXlQb2x5ZmlsbHMubWFwOwoKZnVu
        Y3Rpb24gY29lcmNlSWQoaWQpIHsKICByZXR1cm4gaWQgPT0gbnVsbCA/IG51
        bGwgOiBpZCsnJzsKfQoKLyoqCiAgTm9ybWFsbHksIGFwcGxpY2F0aW9ucyB3
        aWxsIHVzZSB0aGUgYFJFU1RTZXJpYWxpemVyYCBieSBpbXBsZW1lbnRpbmcK
        ICB0aGUgYG5vcm1hbGl6ZWAgbWV0aG9kIGFuZCBpbmRpdmlkdWFsIG5vcm1h
        bGl6YXRpb25zIHVuZGVyCiAgYG5vcm1hbGl6ZUhhc2hgLgoKICBUaGlzIGFs
        bG93cyB5b3UgdG8gZG8gd2hhdGV2ZXIga2luZCBvZiBtdW5naW5nIHlvdSBu
        ZWVkLCBhbmQgaXMKICBlc3BlY2lhbGx5IHVzZWZ1bCBpZiB5b3VyIHNlcnZl
        ciBpcyBpbmNvbnNpc3RlbnQgYW5kIHlvdSBuZWVkIHRvCiAgZG8gbXVuZ2lu
        ZyBkaWZmZXJlbnRseSBmb3IgbWFueSBkaWZmZXJlbnQga2luZHMgb2YgcmVz
        cG9uc2VzLgoKICBTZWUgdGhlIGBub3JtYWxpemVgIGRvY3VtZW50YXRpb24g
        Zm9yIG1vcmUgaW5mb3JtYXRpb24uCgogICMjIEFjcm9zcyB0aGUgQm9hcmQg
        Tm9ybWFsaXphdGlvbgoKICBUaGVyZSBhcmUgYWxzbyBhIG51bWJlciBvZiBo
        b29rcyB0aGF0IHlvdSBtaWdodCBmaW5kIHVzZWZ1bCB0byBkZWZpbmVkCiAg
        YWNyb3NzLXRoZS1ib2FyZCBydWxlcyBmb3IgeW91ciBwYXlsb2FkLiBUaGVz
        ZSBydWxlcyB3aWxsIGJlIHVzZWZ1bAogIGlmIHlvdXIgc2VydmVyIGlzIGNv
        bnNpc3RlbnQsIG9yIGlmIHlvdSdyZSBidWlsZGluZyBhbiBhZGFwdGVyIGZv
        cgogIGFuIGluZnJhc3RydWN0dXJlIHNlcnZpY2UsIGxpa2UgUGFyc2UsIGFu
        ZCB3YW50IHRvIGVuY29kZSBzZXJ2aWNlCiAgY29udmVudGlvbnMuCgogIEZv
        ciBleGFtcGxlLCBpZiBhbGwgb2YgeW91ciBrZXlzIGFyZSB1bmRlcnNjb3Jl
        ZCBhbmQgYWxsLWNhcHMsIGJ1dAogIG90aGVyd2lzZSBjb25zaXN0ZW50IHdp
        dGggdGhlIG5hbWVzIHlvdSB1c2UgaW4geW91ciBtb2RlbHMsIHlvdQogIGNh
        biBpbXBsZW1lbnQgYWNyb3NzLXRoZS1ib2FyZCBydWxlcyBmb3IgaG93IHRv
        IGNvbnZlcnQgYW4gYXR0cmlidXRlCiAgbmFtZSBpbiB5b3VyIG1vZGVsIHRv
        IGEga2V5IGluIHlvdXIgSlNPTi4KCiAgYGBganMKICBBcHAuQXBwbGljYXRp
        b25TZXJpYWxpemVyID0gRFMuUkVTVFNlcmlhbGl6ZXIuZXh0ZW5kKHsKICAg
        IGtleUZvckF0dHJpYnV0ZTogZnVuY3Rpb24oYXR0cikgewogICAgICByZXR1
        cm4gRW1iZXIuU3RyaW5nLnVuZGVyc2NvcmUoYXR0cikudG9VcHBlckNhc2Uo
        KTsKICAgIH0KICB9KTsKICBgYGAKCiAgWW91IGNhbiBhbHNvIGltcGxlbWVu
        dCBga2V5Rm9yUmVsYXRpb25zaGlwYCwgd2hpY2ggdGFrZXMgdGhlIG5hbWUK
        ICBvZiB0aGUgcmVsYXRpb25zaGlwIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIs
        IGFuZCB0aGUga2luZCBvZgogIHJlbGF0aW9uc2hpcCAoYGhhc01hbnlgIG9y
        IGBiZWxvbmdzVG9gKSBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlci4KCiAgQGNs
        YXNzIFJFU1RTZXJpYWxpemVyCiAgQG5hbWVzcGFjZSBEUwogIEBleHRlbmRz
        IERTLkpTT05TZXJpYWxpemVyCiovCkRTLlJFU1RTZXJpYWxpemVyID0gRFMu
        SlNPTlNlcmlhbGl6ZXIuZXh0ZW5kKHsKICAvKioKICAgIE5vcm1hbGl6ZXMg
        YSBwYXJ0IG9mIHRoZSBKU09OIHBheWxvYWQgcmV0dXJuZWQgYnkKICAgIHRo
        ZSBzZXJ2ZXIuIFlvdSBzaG91bGQgb3ZlcnJpZGUgdGhpcyBtZXRob2QsIG11
        bmdlIHRoZSBoYXNoCiAgICBhbmQgY2FsbCBzdXBlciBpZiB5b3UgaGF2ZSBn
        ZW5lcmljIG5vcm1hbGl6YXRpb24gdG8gZG8uCgogICAgSXQgdGFrZXMgdGhl
        IHR5cGUgb2YgdGhlIHJlY29yZCB0aGF0IGlzIGJlaW5nIG5vcm1hbGl6ZWQK
        ICAgIChhcyBhIERTLk1vZGVsIGNsYXNzKSwgdGhlIHByb3BlcnR5IHdoZXJl
        IHRoZSBoYXNoIHdhcwogICAgb3JpZ2luYWxseSBmb3VuZCwgYW5kIHRoZSBo
        YXNoIHRvIG5vcm1hbGl6ZS4KCiAgICBGb3IgZXhhbXBsZSwgaWYgeW91IGhh
        dmUgYSBwYXlsb2FkIHRoYXQgbG9va3MgbGlrZSB0aGlzOgoKICAgIGBgYGpz
        CiAgICB7CiAgICAgICJwb3N0IjogewogICAgICAgICJpZCI6IDEsCiAgICAg
        ICAgInRpdGxlIjogIlJhaWxzIGlzIG9tYWthc2UiLAogICAgICAgICJjb21t
        ZW50cyI6IFsgMSwgMiBdCiAgICAgIH0sCiAgICAgICJjb21tZW50cyI6IFt7
        CiAgICAgICAgImlkIjogMSwKICAgICAgICAiYm9keSI6ICJGSVJTVCIKICAg
        ICAgfSwgewogICAgICAgICJpZCI6IDIsCiAgICAgICAgImJvZHkiOiAiUmFp
        bHMgaXMgdW5hZ2kiCiAgICAgIH1dCiAgICB9CiAgICBgYGAKCiAgICBUaGUg
        YG5vcm1hbGl6ZWAgbWV0aG9kIHdpbGwgYmUgY2FsbGVkIHRocmVlIHRpbWVz
        OgoKICAgICogV2l0aCBgQXBwLlBvc3RgLCBgInBvc3RzImAgYW5kIGB7IGlk
        OiAxLCB0aXRsZTogIlJhaWxzIGlzIG9tYWthc2UiLCAuLi4gfWAKICAgICog
        V2l0aCBgQXBwLkNvbW1lbnRgLCBgImNvbW1lbnRzImAgYW5kIGB7IGlkOiAx
        LCBib2R5OiAiRklSU1QiIH1gCiAgICAqIFdpdGggYEFwcC5Db21tZW50YCwg
        YCJjb21tZW50cyJgIGFuZCBgeyBpZDogMiwgYm9keTogIlJhaWxzIGlzIHVu
        YWdpIiB9YAoKICAgIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kLCBmb3IgZXhh
        bXBsZSwgdG8gbm9ybWFsaXplIHVuZGVyc2NvcmVkIGtleXMgdG8gY2FtZWxp
        emVkCiAgICBvciBvdGhlciBnZW5lcmFsLXB1cnBvc2Ugbm9ybWFsaXphdGlv
        bnMuCgogICAgSWYgeW91IHdhbnQgdG8gZG8gbm9ybWFsaXphdGlvbnMgc3Bl
        Y2lmaWMgdG8gc29tZSBwYXJ0IG9mIHRoZSBwYXlsb2FkLCB5b3UKICAgIGNh
        biBzcGVjaWZ5IHRob3NlIHVuZGVyIGBub3JtYWxpemVIYXNoYC4KCiAgICBG
        b3IgZXhhbXBsZSwgaWYgdGhlIGBJRHNgIHVuZGVyIGAiY29tbWVudHMiYCBh
        cmUgcHJvdmlkZWQgYXMgYF9pZGAgaW5zdGVhZCBvZgogICAgYGlkYCwgeW91
        IGNhbiBzcGVjaWZ5IGhvdyB0byBub3JtYWxpemUganVzdCB0aGUgY29tbWVu
        dHM6CgogICAgYGBganMKICAgIEFwcC5Qb3N0U2VyaWFsaXplciA9IERTLlJF
        U1RTZXJpYWxpemVyLmV4dGVuZCh7CiAgICAgIG5vcm1hbGl6ZUhhc2g6IHsK
        ICAgICAgICBjb21tZW50czogZnVuY3Rpb24oaGFzaCkgewogICAgICAgICAg
        aGFzaC5pZCA9IGhhc2guX2lkOwogICAgICAgICAgZGVsZXRlIGhhc2guX2lk
        OwogICAgICAgICAgcmV0dXJuIGhhc2g7CiAgICAgICAgfQogICAgICB9CiAg
        ICB9KTsKICAgIGBgYAoKICAgIFRoZSBrZXkgdW5kZXIgYG5vcm1hbGl6ZUhh
        c2hgIGlzIGp1c3QgdGhlIG9yaWdpbmFsIGtleSB0aGF0IHdhcyBpbiB0aGUg
        b3JpZ2luYWwKICAgIHBheWxvYWQuCgogICAgQG1ldGhvZCBub3JtYWxpemUK
        ICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBw
        YXJhbSB7U3RyaW5nfSBwcm9wCiAgICBAcGFyYW0ge09iamVjdH0gaGFzaAog
        ICAgQHJldHVybnMgT2JqZWN0CiAgKi8KICBub3JtYWxpemU6IGZ1bmN0aW9u
        KHR5cGUsIGhhc2gsIHByb3ApIHsKICAgIHRoaXMubm9ybWFsaXplSWQoaGFz
        aCk7CiAgICB0aGlzLm5vcm1hbGl6ZVVzaW5nRGVjbGFyZWRNYXBwaW5nKHR5
        cGUsIGhhc2gpOwogICAgdGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVzKHR5cGUs
        IGhhc2gpOwogICAgdGhpcy5ub3JtYWxpemVSZWxhdGlvbnNoaXBzKHR5cGUs
        IGhhc2gpOwoKICAgIGlmICh0aGlzLm5vcm1hbGl6ZUhhc2ggJiYgdGhpcy5u
        b3JtYWxpemVIYXNoW3Byb3BdKSB7CiAgICAgIHJldHVybiB0aGlzLm5vcm1h
        bGl6ZUhhc2hbcHJvcF0oaGFzaCk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMu
        X3N1cGVyKHR5cGUsIGhhc2gsIHByb3ApOwogIH0sCgogIC8qKgogICAgWW91
        IGNhbiB1c2UgdGhpcyBtZXRob2QgdG8gbm9ybWFsaXplIGFsbCBwYXlsb2Fk
        cywgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZXkKICAgIHJlcHJlc2VudCBz
        aW5nbGUgcmVjb3JkcyBvciBhbiBhcnJheS4KCiAgICBGb3IgZXhhbXBsZSwg
        eW91IG1pZ2h0IHdhbnQgdG8gcmVtb3ZlIHNvbWUgZXh0cmFuZW91cyBkYXRh
        IGZyb20gdGhlIHBheWxvYWQ6CgogICAgYGBganMKICAgIEFwcC5BcHBsaWNh
        dGlvblNlcmlhbGl6ZXIgPSBEUy5SRVNUU2VyaWFsaXplci5leHRlbmQoewog
        ICAgICBub3JtYWxpemVQYXlsb2FkOiBmdW5jdGlvbih0eXBlLCBwYXlsb2Fk
        KSB7CiAgICAgICAgZGVsZXRlIHBheWxvYWQudmVyc2lvbjsKICAgICAgICBk
        ZWxldGUgcGF5bG9hZC5zdGF0dXM7CiAgICAgICAgcmV0dXJuIHBheWxvYWQ7
        CiAgICAgIH0KICAgIH0pOwogICAgYGBgCgogICAgQG1ldGhvZCBub3JtYWxp
        emVQYXlsb2FkCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0
        eXBlCiAgICBAcGFyYW0ge09iamVjdH0gaGFzaAogICAgQHJldHVybnMgT2Jq
        ZWN0IHRoZSBub3JtYWxpemVkIHBheWxvYWQKICAqLwogIG5vcm1hbGl6ZVBh
        eWxvYWQ6IGZ1bmN0aW9uKHR5cGUsIHBheWxvYWQpIHsKICAgIHJldHVybiBw
        YXlsb2FkOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCBub3JtYWxpemVJZAog
        ICAgQHByaXZhdGUKICAqLwogIG5vcm1hbGl6ZUlkOiBmdW5jdGlvbihoYXNo
        KSB7CiAgICB2YXIgcHJpbWFyeUtleSA9IGdldCh0aGlzLCAncHJpbWFyeUtl
        eScpOwoKICAgIGlmIChwcmltYXJ5S2V5ID09PSAnaWQnKSB7IHJldHVybjsg
        fQoKICAgIGhhc2guaWQgPSBoYXNoW3ByaW1hcnlLZXldOwogICAgZGVsZXRl
        IGhhc2hbcHJpbWFyeUtleV07CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIG5v
        cm1hbGl6ZVVzaW5nRGVjbGFyZWRNYXBwaW5nCiAgICBAcHJpdmF0ZQogICov
        CiAgbm9ybWFsaXplVXNpbmdEZWNsYXJlZE1hcHBpbmc6IGZ1bmN0aW9uKHR5
        cGUsIGhhc2gpIHsKICAgIHZhciBhdHRycyA9IGdldCh0aGlzLCAnYXR0cnMn
        KSwgcGF5bG9hZEtleSwga2V5OwoKICAgIGlmIChhdHRycykgewogICAgICBm
        b3IgKGtleSBpbiBhdHRycykgewogICAgICAgIHBheWxvYWRLZXkgPSBhdHRy
        c1trZXldOwoKICAgICAgICBoYXNoW2tleV0gPSBoYXNoW3BheWxvYWRLZXld
        OwogICAgICAgIGRlbGV0ZSBoYXNoW3BheWxvYWRLZXldOwogICAgICB9CiAg
        ICB9CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIG5vcm1hbGl6ZUF0dHJpYnV0
        ZXMKICAgIEBwcml2YXRlCiAgKi8KICBub3JtYWxpemVBdHRyaWJ1dGVzOiBm
        dW5jdGlvbih0eXBlLCBoYXNoKSB7CiAgICB2YXIgcGF5bG9hZEtleSwga2V5
        OwoKICAgIGlmICh0aGlzLmtleUZvckF0dHJpYnV0ZSkgewogICAgICB0eXBl
        LmVhY2hBdHRyaWJ1dGUoZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgcGF5bG9h
        ZEtleSA9IHRoaXMua2V5Rm9yQXR0cmlidXRlKGtleSk7CiAgICAgICAgaWYg
        KGtleSA9PT0gcGF5bG9hZEtleSkgeyByZXR1cm47IH0KCiAgICAgICAgaGFz
        aFtrZXldID0gaGFzaFtwYXlsb2FkS2V5XTsKICAgICAgICBkZWxldGUgaGFz
        aFtwYXlsb2FkS2V5XTsKICAgICAgfSwgdGhpcyk7CiAgICB9CiAgfSwKCiAg
        LyoqCiAgICBAbWV0aG9kIG5vcm1hbGl6ZVJlbGF0aW9uc2hpcHMKICAgIEBw
        cml2YXRlCiAgKi8KICBub3JtYWxpemVSZWxhdGlvbnNoaXBzOiBmdW5jdGlv
        bih0eXBlLCBoYXNoKSB7CiAgICB2YXIgcGF5bG9hZEtleSwga2V5OwoKICAg
        IGlmICh0aGlzLmtleUZvclJlbGF0aW9uc2hpcCkgewogICAgICB0eXBlLmVh
        Y2hSZWxhdGlvbnNoaXAoZnVuY3Rpb24oa2V5LCByZWxhdGlvbnNoaXApIHsK
        ICAgICAgICBwYXlsb2FkS2V5ID0gdGhpcy5rZXlGb3JSZWxhdGlvbnNoaXAo
        a2V5LCByZWxhdGlvbnNoaXAua2luZCk7CiAgICAgICAgaWYgKGtleSA9PT0g
        cGF5bG9hZEtleSkgeyByZXR1cm47IH0KCiAgICAgICAgaGFzaFtrZXldID0g
        aGFzaFtwYXlsb2FkS2V5XTsKICAgICAgICBkZWxldGUgaGFzaFtwYXlsb2Fk
        S2V5XTsKICAgICAgfSwgdGhpcyk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICBD
        YWxsZWQgd2hlbiB0aGUgc2VydmVyIGhhcyByZXR1cm5lZCBhIHBheWxvYWQg
        cmVwcmVzZW50aW5nCiAgICBhIHNpbmdsZSByZWNvcmQsIHN1Y2ggYXMgaW4g
        cmVzcG9uc2UgdG8gYSBgZmluZGAgb3IgYHNhdmVgLgoKICAgIEl0IGlzIHlv
        dXIgb3Bwb3J0dW5pdHkgdG8gY2xlYW4gdXAgdGhlIHNlcnZlcidzIHJlc3Bv
        bnNlIGludG8gdGhlIG5vcm1hbGl6ZWQKICAgIGZvcm0gZXhwZWN0ZWQgYnkg
        RW1iZXIgRGF0YS4KCiAgICBJZiB5b3Ugd2FudCwgeW91IGNhbiBqdXN0IHJl
        c3RydWN0dXJlIHRoZSB0b3AtbGV2ZWwgb2YgeW91ciBwYXlsb2FkLCBhbmQK
        ICAgIGRvIG1vcmUgZmluZS1ncmFpbmVkIG5vcm1hbGl6YXRpb24gaW4gdGhl
        IGBub3JtYWxpemVgIG1ldGhvZC4KCiAgICBGb3IgZXhhbXBsZSwgaWYgeW91
        IGhhdmUgYSBwYXlsb2FkIGxpa2UgdGhpcyBpbiByZXNwb25zZSB0byBhIHJl
        cXVlc3QgZm9yCiAgICBwb3N0IDE6CgogICAgYGBganMKICAgIHsKICAgICAg
        ImlkIjogMSwKICAgICAgInRpdGxlIjogIlJhaWxzIGlzIG9tYWthc2UiLAoK
        ICAgICAgIl9lbWJlZGRlZCI6IHsKICAgICAgICAiY29tbWVudCI6IFt7CiAg
        ICAgICAgICAiX2lkIjogMSwKICAgICAgICAgICJjb21tZW50X3RpdGxlIjog
        IkZJUlNUIgogICAgICAgIH0sIHsKICAgICAgICAgICJfaWQiOiAyLAogICAg
        ICAgICAgImNvbW1lbnRfdGl0bGUiOiAiUmFpbHMgaXMgdW5hZ2kiCiAgICAg
        ICAgfV0KICAgICAgfQogICAgfQogICAgYGBgCgogICAgWW91IGNvdWxkIGlt
        cGxlbWVudCBhIHNlcmlhbGl6ZXIgdGhhdCBsb29rcyBsaWtlIHRoaXMgdG8g
        Z2V0IHlvdXIgcGF5bG9hZAogICAgaW50byBzaGFwZToKCiAgICBgYGBqcwog
        ICAgQXBwLlBvc3RTZXJpYWxpemVyID0gRFMuUkVTVFNlcmlhbGl6ZXIuZXh0
        ZW5kKHsKICAgICAgLy8gRmlyc3QsIHJlc3RydWN0dXJlIHRoZSB0b3AtbGV2
        ZWwgc28gaXQncyBvcmdhbml6ZWQgYnkgdHlwZQogICAgICBleHRyYWN0U2lu
        Z2xlOiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcGF5bG9hZCwgaWQsIHJlcXVl
        c3RUeXBlKSB7CiAgICAgICAgdmFyIGNvbW1lbnRzID0gcGF5bG9hZC5fZW1i
        ZWRkZWQuY29tbWVudDsKICAgICAgICBkZWxldGUgcGF5bG9hZC5fZW1iZWRk
        ZWQ7CgogICAgICAgIHBheWxvYWQgPSB7IGNvbW1lbnRzOiBjb21tZW50cywg
        cG9zdDogcGF5bG9hZCB9OwogICAgICAgIHJldHVybiB0aGlzLl9zdXBlcihz
        dG9yZSwgdHlwZSwgcGF5bG9hZCwgaWQsIHJlcXVlc3RUeXBlKTsKICAgICAg
        fSwKCiAgICAgIG5vcm1hbGl6ZUhhc2g6IHsKICAgICAgICAvLyBOZXh0LCBu
        b3JtYWxpemUgaW5kaXZpZHVhbCBjb21tZW50cywgd2hpY2ggKGFmdGVyIGBl
        eHRyYWN0YCkKICAgICAgICAvLyBhcmUgbm93IGxvY2F0ZWQgdW5kZXIgYGNv
        bW1lbnRzYAogICAgICAgIGNvbW1lbnRzOiBmdW5jdGlvbihoYXNoKSB7CiAg
        ICAgICAgICBoYXNoLmlkID0gaGFzaC5faWQ7CiAgICAgICAgICBoYXNoLnRp
        dGxlID0gaGFzaC5jb21tZW50X3RpdGxlOwogICAgICAgICAgZGVsZXRlIGhh
        c2guX2lkOwogICAgICAgICAgZGVsZXRlIGhhc2guY29tbWVudF90aXRsZTsK
        ICAgICAgICAgIHJldHVybiBoYXNoOwogICAgICAgIH0KICAgICAgfQogICAg
        fSkKICAgIGBgYAoKICAgIFdoZW4geW91IGNhbGwgc3VwZXIgZnJvbSB5b3Vy
        IG93biBpbXBsZW1lbnRhdGlvbiBvZiBgZXh0cmFjdFNpbmdsZWAsIHRoZQog
        ICAgYnVpbHQtaW4gaW1wbGVtZW50YXRpb24gd2lsbCBmaW5kIHRoZSBwcmlt
        YXJ5IHJlY29yZCBpbiB5b3VyIG5vcm1hbGl6ZWQKICAgIHBheWxvYWQgYW5k
        IHB1c2ggdGhlIHJlbWFpbmluZyByZWNvcmRzIGludG8gdGhlIHN0b3JlLgoK
        ICAgIFRoZSBwcmltYXJ5IHJlY29yZCBpcyB0aGUgc2luZ2xlIGhhc2ggZm91
        bmQgdW5kZXIgYHBvc3RgIG9yIHRoZSBmaXJzdAogICAgZWxlbWVudCBvZiB0
        aGUgYHBvc3RzYCBhcnJheS4KCiAgICBUaGUgcHJpbWFyeSByZWNvcmQgaGFz
        IHNwZWNpYWwgbWVhbmluZyB3aGVuIHRoZSByZWNvcmQgaXMgYmVpbmcgY3Jl
        YXRlZAogICAgZm9yIHRoZSBmaXJzdCB0aW1lIG9yIHVwZGF0ZWQgKGBjcmVh
        dGVSZWNvcmRgIG9yIGB1cGRhdGVSZWNvcmRgKS4gSW4KICAgIHBhcnRpY3Vs
        YXIsIGl0IHdpbGwgdXBkYXRlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSByZWNv
        cmQgdGhhdCB3YXMgc2F2ZWQuCgogICAgQG1ldGhvZCBleHRyYWN0U2luZ2xl
        CiAgICBAcGFyYW0ge0RTLlN0b3JlfSBzdG9yZQogICAgQHBhcmFtIHtzdWJj
        bGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtPYmplY3R9IHBh
        eWxvYWQKICAgIEBwYXJhbSB7U3RyaW5nfSBpZAogICAgQHBhcmFtIHsnZmlu
        ZCd8J2NyZWF0ZVJlY29yZCd8J3VwZGF0ZVJlY29yZCd8J2RlbGV0ZVJlY29y
        ZCd9IHJlcXVlc3RUeXBlCiAgICBAcmV0dXJucyBPYmplY3QgdGhlIHByaW1h
        cnkgcmVzcG9uc2UgdG8gdGhlIG9yaWdpbmFsIHJlcXVlc3QKICAqLwogIGV4
        dHJhY3RTaW5nbGU6IGZ1bmN0aW9uKHN0b3JlLCBwcmltYXJ5VHlwZSwgcGF5
        bG9hZCwgcmVjb3JkSWQsIHJlcXVlc3RUeXBlKSB7CiAgICBwYXlsb2FkID0g
        dGhpcy5ub3JtYWxpemVQYXlsb2FkKHByaW1hcnlUeXBlLCBwYXlsb2FkKTsK
        CiAgICB2YXIgcHJpbWFyeVR5cGVOYW1lID0gcHJpbWFyeVR5cGUudHlwZUtl
        eSwKICAgICAgICBwcmltYXJ5UmVjb3JkOwoKICAgIGZvciAodmFyIHByb3Ag
        aW4gcGF5bG9hZCkgewogICAgICB2YXIgdHlwZU5hbWUgID0gdGhpcy50eXBl
        Rm9yUm9vdChwcm9wKSwKICAgICAgICAgIGlzUHJpbWFyeSA9IHR5cGVOYW1l
        ID09PSBwcmltYXJ5VHlwZU5hbWU7CgogICAgICAvLyBsZWdhY3kgc3VwcG9y
        dCBmb3Igc2luZ3VsYXIgcmVzb3VyY2VzCiAgICAgIGlmIChpc1ByaW1hcnkg
        JiYgRW1iZXIudHlwZU9mKHBheWxvYWRbcHJvcF0pICE9PSAiYXJyYXkiICkg
        ewogICAgICAgIHByaW1hcnlSZWNvcmQgPSB0aGlzLm5vcm1hbGl6ZShwcmlt
        YXJ5VHlwZSwgcGF5bG9hZFtwcm9wXSwgcHJvcCk7CiAgICAgICAgY29udGlu
        dWU7CiAgICAgIH0KCiAgICAgIHZhciB0eXBlID0gc3RvcmUubW9kZWxGb3Io
        dHlwZU5hbWUpOwoKICAgICAgLypqc2hpbnQgbG9vcGZ1bmM6dHJ1ZSovCiAg
        ICAgIGZvckVhY2guY2FsbChwYXlsb2FkW3Byb3BdLCBmdW5jdGlvbihoYXNo
        KSB7CiAgICAgICAgdmFyIHR5cGVOYW1lID0gdGhpcy50eXBlRm9yUm9vdChw
        cm9wKSwKICAgICAgICAgICAgdHlwZSA9IHN0b3JlLm1vZGVsRm9yKHR5cGVO
        YW1lKSwKICAgICAgICAgICAgdHlwZVNlcmlhbGl6ZXIgPSBzdG9yZS5zZXJp
        YWxpemVyRm9yKHR5cGUpOwoKICAgICAgICBoYXNoID0gdHlwZVNlcmlhbGl6
        ZXIubm9ybWFsaXplKHR5cGUsIGhhc2gsIHByb3ApOwoKICAgICAgICB2YXIg
        aXNGaXJzdENyZWF0ZWRSZWNvcmQgPSBpc1ByaW1hcnkgJiYgIXJlY29yZElk
        ICYmICFwcmltYXJ5UmVjb3JkLAogICAgICAgICAgICBpc1VwZGF0ZWRSZWNv
        cmQgPSBpc1ByaW1hcnkgJiYgY29lcmNlSWQoaGFzaC5pZCkgPT09IHJlY29y
        ZElkOwoKICAgICAgICAvLyBmaW5kIHRoZSBwcmltYXJ5IHJlY29yZC4KICAg
        ICAgICAvLwogICAgICAgIC8vIEl0J3MgZWl0aGVyOgogICAgICAgIC8vICog
        dGhlIHJlY29yZCB3aXRoIHRoZSBzYW1lIElEIGFzIHRoZSBvcmlnaW5hbCBy
        ZXF1ZXN0CiAgICAgICAgLy8gKiBpbiB0aGUgY2FzZSBvZiBhIG5ld2x5IGNy
        ZWF0ZWQgcmVjb3JkIHRoYXQgZGlkbid0IGhhdmUgYW4gSUQsIHRoZSBmaXJz
        dAogICAgICAgIC8vICAgcmVjb3JkIGluIHRoZSBBcnJheQogICAgICAgIGlm
        IChpc0ZpcnN0Q3JlYXRlZFJlY29yZCB8fCBpc1VwZGF0ZWRSZWNvcmQpIHsK
        ICAgICAgICAgIHByaW1hcnlSZWNvcmQgPSBoYXNoOwogICAgICAgIH0gZWxz
        ZSB7CiAgICAgICAgICBzdG9yZS5wdXNoKHR5cGVOYW1lLCBoYXNoKTsKICAg
        ICAgICB9CiAgICAgIH0sIHRoaXMpOwogICAgfQoKICAgIHJldHVybiBwcmlt
        YXJ5UmVjb3JkOwogIH0sCgogIC8qKgogICAgQ2FsbGVkIHdoZW4gdGhlIHNl
        cnZlciBoYXMgcmV0dXJuZWQgYSBwYXlsb2FkIHJlcHJlc2VudGluZwogICAg
        bXVsdGlwbGUgcmVjb3Jkcywgc3VjaCBhcyBpbiByZXNwb25zZSB0byBhIGBm
        aW5kQWxsYCBvciBgZmluZFF1ZXJ5YC4KCiAgICBJdCBpcyB5b3VyIG9wcG9y
        dHVuaXR5IHRvIGNsZWFuIHVwIHRoZSBzZXJ2ZXIncyByZXNwb25zZSBpbnRv
        IHRoZSBub3JtYWxpemVkCiAgICBmb3JtIGV4cGVjdGVkIGJ5IEVtYmVyIERh
        dGEuCgogICAgSWYgeW91IHdhbnQsIHlvdSBjYW4ganVzdCByZXN0cnVjdHVy
        ZSB0aGUgdG9wLWxldmVsIG9mIHlvdXIgcGF5bG9hZCwgYW5kCiAgICBkbyBt
        b3JlIGZpbmUtZ3JhaW5lZCBub3JtYWxpemF0aW9uIGluIHRoZSBgbm9ybWFs
        aXplYCBtZXRob2QuCgogICAgRm9yIGV4YW1wbGUsIGlmIHlvdSBoYXZlIGEg
        cGF5bG9hZCBsaWtlIHRoaXMgaW4gcmVzcG9uc2UgdG8gYSByZXF1ZXN0IGZv
        cgogICAgYWxsIHBvc3RzOgoKICAgIGBgYGpzCiAgICB7CiAgICAgICJfZW1i
        ZWRkZWQiOiB7CiAgICAgICAgInBvc3QiOiBbewogICAgICAgICAgImlkIjog
        MSwKICAgICAgICAgICJ0aXRsZSI6ICJSYWlscyBpcyBvbWFrYXNlIgogICAg
        ICAgIH0sIHsKICAgICAgICAgICJpZCI6IDIsCiAgICAgICAgICAidGl0bGUi
        OiAiVGhlIFBhcmxleSBMZXR0ZXIiCiAgICAgICAgfV0sCiAgICAgICAgImNv
        bW1lbnQiOiBbewogICAgICAgICAgIl9pZCI6IDEsCiAgICAgICAgICAiY29t
        bWVudF90aXRsZSI6ICJSYWlscyBpcyB1bmFnaSIKICAgICAgICAgICJwb3N0
        X2lkIjogMQogICAgICAgIH0sIHsKICAgICAgICAgICJfaWQiOiAyLAogICAg
        ICAgICAgImNvbW1lbnRfdGl0bGUiOiAiRG9uJ3QgdHJlYWQgb24gbWUiLAog
        ICAgICAgICAgInBvc3RfaWQiOiAyCiAgICAgICAgfV0KICAgICAgfQogICAg
        fQogICAgYGBgCgogICAgWW91IGNvdWxkIGltcGxlbWVudCBhIHNlcmlhbGl6
        ZXIgdGhhdCBsb29rcyBsaWtlIHRoaXMgdG8gZ2V0IHlvdXIgcGF5bG9hZAog
        ICAgaW50byBzaGFwZToKCiAgICBgYGBqcwogICAgQXBwLlBvc3RTZXJpYWxp
        emVyID0gRFMuUkVTVFNlcmlhbGl6ZXIuZXh0ZW5kKHsKICAgICAgLy8gRmly
        c3QsIHJlc3RydWN0dXJlIHRoZSB0b3AtbGV2ZWwgc28gaXQncyBvcmdhbml6
        ZWQgYnkgdHlwZQogICAgICAvLyBhbmQgdGhlIGNvbW1lbnRzIGFyZSBsaXN0
        ZWQgdW5kZXIgYSBwb3N0J3MgYGNvbW1lbnRzYCBrZXkuCiAgICAgIGV4dHJh
        Y3RBcnJheTogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIHBheWxvYWQsIGlkLCBy
        ZXF1ZXN0VHlwZSkgewogICAgICAgIHZhciBwb3N0cyA9IHBheWxvYWQuX2Vt
        YmVkZGVkLnBvc3Q7CiAgICAgICAgdmFyIGNvbW1lbnRzID0gW107CiAgICAg
        ICAgdmFyIHBvc3RDYWNoZSA9IHt9OwoKICAgICAgICBwb3N0cy5mb3JFYWNo
        KGZ1bmN0aW9uKHBvc3QpIHsKICAgICAgICAgIHBvc3QuY29tbWVudHMgPSBb
        XTsKICAgICAgICAgIHBvc3RDYWNoZVtwb3N0LmlkXSA9IHBvc3Q7CiAgICAg
        ICAgfSk7CgogICAgICAgIHBheWxvYWQuX2VtYmVkZGVkLmNvbW1lbnQuZm9y
        RWFjaChmdW5jdGlvbihjb21tZW50KSB7CiAgICAgICAgICBjb21tZW50cy5w
        dXNoKGNvbW1lbnQpOwogICAgICAgICAgcG9zdENhY2hlW2NvbW1lbnQucG9z
        dF9pZF0uY29tbWVudHMucHVzaChjb21tZW50KTsKICAgICAgICAgIGRlbGV0
        ZSBjb21tZW50LnBvc3RfaWQ7CiAgICAgICAgfQoKICAgICAgICBwYXlsb2Fk
        ID0geyBjb21tZW50czogY29tbWVudHMsIHBvc3RzOiBwYXlsb2FkIH07Cgog
        ICAgICAgIHJldHVybiB0aGlzLl9zdXBlcihzdG9yZSwgdHlwZSwgcGF5bG9h
        ZCwgaWQsIHJlcXVlc3RUeXBlKTsKICAgICAgfSwKCiAgICAgIG5vcm1hbGl6
        ZUhhc2g6IHsKICAgICAgICAvLyBOZXh0LCBub3JtYWxpemUgaW5kaXZpZHVh
        bCBjb21tZW50cywgd2hpY2ggKGFmdGVyIGBleHRyYWN0YCkKICAgICAgICAv
        LyBhcmUgbm93IGxvY2F0ZWQgdW5kZXIgYGNvbW1lbnRzYAogICAgICAgIGNv
        bW1lbnRzOiBmdW5jdGlvbihoYXNoKSB7CiAgICAgICAgICBoYXNoLmlkID0g
        aGFzaC5faWQ7CiAgICAgICAgICBoYXNoLnRpdGxlID0gaGFzaC5jb21tZW50
        X3RpdGxlOwogICAgICAgICAgZGVsZXRlIGhhc2guX2lkOwogICAgICAgICAg
        ZGVsZXRlIGhhc2guY29tbWVudF90aXRsZTsKICAgICAgICAgIHJldHVybiBo
        YXNoOwogICAgICAgIH0KICAgICAgfQogICAgfSkKICAgIGBgYAoKICAgIFdo
        ZW4geW91IGNhbGwgc3VwZXIgZnJvbSB5b3VyIG93biBpbXBsZW1lbnRhdGlv
        biBvZiBgZXh0cmFjdEFycmF5YCwgdGhlCiAgICBidWlsdC1pbiBpbXBsZW1l
        bnRhdGlvbiB3aWxsIGZpbmQgdGhlIHByaW1hcnkgYXJyYXkgaW4geW91ciBu
        b3JtYWxpemVkCiAgICBwYXlsb2FkIGFuZCBwdXNoIHRoZSByZW1haW5pbmcg
        cmVjb3JkcyBpbnRvIHRoZSBzdG9yZS4KCiAgICBUaGUgcHJpbWFyeSBhcnJh
        eSBpcyB0aGUgYXJyYXkgZm91bmQgdW5kZXIgYHBvc3RzYC4KCiAgICBUaGUg
        cHJpbWFyeSByZWNvcmQgaGFzIHNwZWNpYWwgbWVhbmluZyB3aGVuIHJlc3Bv
        bmRpbmcgdG8gYGZpbmRRdWVyeWAKICAgIG9yIGBmaW5kSGFzTWFueWAuIElu
        IHBhcnRpY3VsYXIsIHRoZSBwcmltYXJ5IGFycmF5IHdpbGwgYmVjb21lIHRo
        ZQogICAgbGlzdCBvZiByZWNvcmRzIGluIHRoZSByZWNvcmQgYXJyYXkgdGhh
        dCBraWNrZWQgb2ZmIHRoZSByZXF1ZXN0LgoKICAgIElmIHlvdXIgcHJpbWFy
        eSBhcnJheSBjb250YWlucyBzZWNvbmRhcnkgKGVtYmVkZGVkKSByZWNvcmRz
        IG9mIHRoZSBzYW1lIHR5cGUsCiAgICB5b3UgY2Fubm90IHBsYWNlIHRoZXNl
        IGludG8gdGhlIHByaW1hcnkgYXJyYXkgYHBvc3RzYC4gSW5zdGVhZCwgcGxh
        Y2UgdGhlCiAgICBzZWNvbmRhcnkgaXRlbXMgaW50byBhbiB1bmRlcnNjb3Jl
        IHByZWZpeGVkIHByb3BlcnR5IGBfcG9zdHNgLCB3aGljaCB3aWxsCiAgICBw
        dXNoIHRoZXNlIGl0ZW1zIGludG8gdGhlIHN0b3JlIGFuZCB3aWxsIG5vdCBh
        ZmZlY3QgdGhlIHJlc3VsdGluZyBxdWVyeS4KCiAgICBAbWV0aG9kIGV4dHJh
        Y3RBcnJheQogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBwYXJh
        bSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7T2Jq
        ZWN0fSBwYXlsb2FkCiAgICBAcGFyYW0geydmaW5kQWxsJ3wnZmluZE1hbnkn
        fCdmaW5kSGFzTWFueSd8J2ZpbmRRdWVyeSd9IHJlcXVlc3RUeXBlCiAgICBA
        cmV0dXJucyB7QXJyYXk8T2JqZWN0Pn0gVGhlIHByaW1hcnkgYXJyYXkgdGhh
        dCB3YXMgcmV0dXJuZWQgaW4gcmVzcG9uc2UKICAgICAgdG8gdGhlIG9yaWdp
        bmFsIHF1ZXJ5LgogICovCiAgZXh0cmFjdEFycmF5OiBmdW5jdGlvbihzdG9y
        ZSwgcHJpbWFyeVR5cGUsIHBheWxvYWQpIHsKICAgIHBheWxvYWQgPSB0aGlz
        Lm5vcm1hbGl6ZVBheWxvYWQocHJpbWFyeVR5cGUsIHBheWxvYWQpOwoKICAg
        IHZhciBwcmltYXJ5VHlwZU5hbWUgPSBwcmltYXJ5VHlwZS50eXBlS2V5LAog
        ICAgICAgIHByaW1hcnlBcnJheTsKCiAgICBmb3IgKHZhciBwcm9wIGluIHBh
        eWxvYWQpIHsKICAgICAgdmFyIHR5cGVLZXkgPSBwcm9wLAogICAgICAgICAg
        Zm9yY2VkU2Vjb25kYXJ5ID0gZmFsc2U7CgogICAgICBpZiAocHJvcC5jaGFy
        QXQoMCkgPT09ICdfJykgewogICAgICAgIGZvcmNlZFNlY29uZGFyeSA9IHRy
        dWU7CiAgICAgICAgdHlwZUtleSA9IHByb3Auc3Vic3RyKDEpOwogICAgICB9
        CgogICAgICB2YXIgdHlwZU5hbWUgPSB0aGlzLnR5cGVGb3JSb290KHR5cGVL
        ZXkpLAogICAgICAgICAgdHlwZSA9IHN0b3JlLm1vZGVsRm9yKHR5cGVOYW1l
        KSwKICAgICAgICAgIHR5cGVTZXJpYWxpemVyID0gc3RvcmUuc2VyaWFsaXpl
        ckZvcih0eXBlKSwKICAgICAgICAgIGlzUHJpbWFyeSA9ICghZm9yY2VkU2Vj
        b25kYXJ5ICYmICh0eXBlTmFtZSA9PT0gcHJpbWFyeVR5cGVOYW1lKSk7Cgog
        ICAgICAvKmpzaGludCBsb29wZnVuYzp0cnVlKi8KICAgICAgdmFyIG5vcm1h
        bGl6ZWRBcnJheSA9IG1hcC5jYWxsKHBheWxvYWRbcHJvcF0sIGZ1bmN0aW9u
        KGhhc2gpIHsKICAgICAgICByZXR1cm4gdHlwZVNlcmlhbGl6ZXIubm9ybWFs
        aXplKHR5cGUsIGhhc2gsIHByb3ApOwogICAgICB9LCB0aGlzKTsKCiAgICAg
        IGlmIChpc1ByaW1hcnkpIHsKICAgICAgICBwcmltYXJ5QXJyYXkgPSBub3Jt
        YWxpemVkQXJyYXk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RvcmUucHVz
        aE1hbnkodHlwZU5hbWUsIG5vcm1hbGl6ZWRBcnJheSk7CiAgICAgIH0KICAg
        IH0KCiAgICByZXR1cm4gcHJpbWFyeUFycmF5OwogIH0sCgogIC8qKgogICAg
        VGhpcyBtZXRob2QgYWxsb3dzIHlvdSB0byBwdXNoIGEgcGF5bG9hZCBjb250
        YWluaW5nIHRvcC1sZXZlbAogICAgY29sbGVjdGlvbnMgb2YgcmVjb3JkcyBv
        cmdhbml6ZWQgcGVyIHR5cGUuCgogICAgYGBganMKICAgIHsKICAgICAgInBv
        c3RzIjogW3sKICAgICAgICAiaWQiOiAiMSIsCiAgICAgICAgInRpdGxlIjog
        IlJhaWxzIGlzIG9tYWthc2UiLAogICAgICAgICJhdXRob3IiLCAiMSIsCiAg
        ICAgICAgImNvbW1lbnRzIjogWyAiMSIgXQogICAgICB9XSwKICAgICAgImNv
        bW1lbnRzIjogW3sKICAgICAgICAiaWQiOiAiMSIsCiAgICAgICAgImJvZHki
        OiAiRklSU1QKICAgICAgfV0sCiAgICAgICJ1c2VycyI6IFt7CiAgICAgICAg
        ImlkIjogIjEiLAogICAgICAgICJuYW1lIjogIkBkMmgiCiAgICAgIH1dCiAg
        ICB9CiAgICBgYGAKCiAgICBJdCB3aWxsIGZpcnN0IG5vcm1hbGl6ZSB0aGUg
        cGF5bG9hZCwgc28geW91IGNhbiB1c2UgdGhpcyB0byBwdXNoCiAgICBpbiBk
        YXRhIHN0cmVhbWluZyBpbiBmcm9tIHlvdXIgc2VydmVyIHN0cnVjdHVyZWQg
        dGhlIHNhbWUgd2F5CiAgICB0aGF0IGZldGNoZXMgYW5kIHNhdmVzIGFyZSBz
        dHJ1Y3R1cmVkLgoKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBA
        cGFyYW0ge09iamVjdH0gcGF5bG9hZAogICovCiAgcHVzaFBheWxvYWQ6IGZ1
        bmN0aW9uKHN0b3JlLCBwYXlsb2FkKSB7CiAgICBwYXlsb2FkID0gdGhpcy5u
        b3JtYWxpemVQYXlsb2FkKG51bGwsIHBheWxvYWQpOwoKICAgIGZvciAodmFy
        IHByb3AgaW4gcGF5bG9hZCkgewogICAgICB2YXIgdHlwZU5hbWUgPSB0aGlz
        LnR5cGVGb3JSb290KHByb3ApLAogICAgICAgICAgdHlwZSA9IHN0b3JlLm1v
        ZGVsRm9yKHR5cGVOYW1lKTsKCiAgICAgIC8qanNoaW50IGxvb3BmdW5jOnRy
        dWUqLwogICAgICB2YXIgbm9ybWFsaXplZEFycmF5ID0gbWFwLmNhbGwocGF5
        bG9hZFtwcm9wXSwgZnVuY3Rpb24oaGFzaCkgewogICAgICAgIHJldHVybiB0
        aGlzLm5vcm1hbGl6ZSh0eXBlLCBoYXNoLCBwcm9wKTsKICAgICAgfSwgdGhp
        cyk7CgogICAgICBzdG9yZS5wdXNoTWFueSh0eXBlTmFtZSwgbm9ybWFsaXpl
        ZEFycmF5KTsKICAgIH0KICB9LAoKICAvKioKICAgIFlvdSBjYW4gdXNlIHRo
        aXMgbWV0aG9kIHRvIG5vcm1hbGl6ZSB0aGUgSlNPTiByb290IGtleXMgcmV0
        dXJuZWQKICAgIGludG8gdGhlIG1vZGVsIHR5cGUgZXhwZWN0ZWQgYnkgeW91
        ciBzdG9yZS4KCiAgICBGb3IgZXhhbXBsZSwgeW91ciBzZXJ2ZXIgbWF5IHJl
        dHVybiB1bmRlcnNjb3JlZCByb290IGtleXMgcmF0aGVyIHRoYW4KICAgIHRo
        ZSBleHBlY3RlZCBjYW1lbGNhc2VkIHZlcnNpb25zLgoKICAgIGBgYGpzCiAg
        ICBBcHAuQXBwbGljYXRpb25TZXJpYWxpemVyID0gRFMuUkVTVFNlcmlhbGl6
        ZXIuZXh0ZW5kKHsKICAgICAgdHlwZUZvclJvb3Q6IGZ1bmN0aW9uKHJvb3Qp
        IHsKICAgICAgICB2YXIgY2FtZWxpemVkID0gRW1iZXIuU3RyaW5nLmNhbWVs
        aXplKHJvb3QpOwogICAgICAgIHJldHVybiBFbWJlci5TdHJpbmcuc2luZ3Vs
        YXJpemUoY2FtZWxpemVkKTsKICAgICAgfQogICAgfSk7CiAgICBgYGAKCiAg
        ICBAbWV0aG9kIHR5cGVGb3JSb290CiAgICBAcGFyYW0ge1N0cmluZ30gcm9v
        dAogICAgQHJldHVybnMgU3RyaW5nIHRoZSBtb2RlbCdzIHR5cGVLZXkKICAq
        LwogIHR5cGVGb3JSb290OiBmdW5jdGlvbihyb290KSB7CiAgICByZXR1cm4g
        RW1iZXIuU3RyaW5nLnNpbmd1bGFyaXplKHJvb3QpOwogIH0sCgogIC8vIFNF
        UklBTElaRQoKICAvKioKICAgIENhbGxlZCB3aGVuIGEgcmVjb3JkIGlzIHNh
        dmVkIGluIG9yZGVyIHRvIGNvbnZlcnQgdGhlCiAgICByZWNvcmQgaW50byBK
        U09OLgoKICAgIEJ5IGRlZmF1bHQsIGl0IGNyZWF0ZXMgYSBKU09OIG9iamVj
        dCB3aXRoIGEga2V5IGZvcgogICAgZWFjaCBhdHRyaWJ1dGUgYW5kIGJlbG9u
        Z3NUbyByZWxhdGlvbnNoaXAuCgogICAgRm9yIGV4YW1wbGUsIGNvbnNpZGVy
        IHRoaXMgbW9kZWw6CgogICAgYGBganMKICAgIEFwcC5Db21tZW50ID0gRFMu
        TW9kZWwuZXh0ZW5kKHsKICAgICAgdGl0bGU6IERTLmF0dHIoKSwKICAgICAg
        Ym9keTogRFMuYXR0cigpLAoKICAgICAgYXV0aG9yOiBEUy5iZWxvbmdzVG8o
        J3VzZXInKQogICAgfSk7CiAgICBgYGAKCiAgICBUaGUgZGVmYXVsdCBzZXJp
        YWxpemF0aW9uIHdvdWxkIGNyZWF0ZSBhIEpTT04gb2JqZWN0IGxpa2U6Cgog
        ICAgYGBganMKICAgIHsKICAgICAgInRpdGxlIjogIlJhaWxzIGlzIHVuYWdp
        IiwKICAgICAgImJvZHkiOiAiUmFpbHM/IE9tYWthc2U/IE9fTyIsCiAgICAg
        ICJhdXRob3IiOiAxMgogICAgfQogICAgYGBgCgogICAgQnkgZGVmYXVsdCwg
        YXR0cmlidXRlcyBhcmUgcGFzc2VkIHRocm91Z2ggYXMtaXMsIHVubGVzcwog
        ICAgeW91IHNwZWNpZmllZCBhbiBhdHRyaWJ1dGUgdHlwZSAoYERTLmF0dHIo
        J2RhdGUnKWApLiBJZgogICAgeW91IHNwZWNpZnkgYSB0cmFuc2Zvcm0sIHRo
        ZSBKYXZhU2NyaXB0IHZhbHVlIHdpbGwgYmUKICAgIHNlcmlhbGl6ZWQgd2hl
        biBpbnNlcnRlZCBpbnRvIHRoZSBKU09OIGhhc2guCgogICAgQnkgZGVmYXVs
        dCwgYmVsb25ncy10byByZWxhdGlvbnNoaXBzIGFyZSBjb252ZXJ0ZWQgaW50
        bwogICAgSURzIHdoZW4gaW5zZXJ0ZWQgaW50byB0aGUgSlNPTiBoYXNoLgoK
        ICAgICMjIElEcwoKICAgIGBzZXJpYWxpemVgIHRha2VzIGFuIG9wdGlvbnMg
        aGFzaCB3aXRoIGEgc2luZ2xlIG9wdGlvbjoKICAgIGBpbmNsdWRlSWRgLiBJ
        ZiB0aGlzIG9wdGlvbiBpcyBgdHJ1ZWAsIGBzZXJpYWxpemVgIHdpbGwsCiAg
        ICBieSBkZWZhdWx0IGluY2x1ZGUgdGhlIElEIGluIHRoZSBKU09OIG9iamVj
        dCBpdCBidWlsZHMuCgogICAgVGhlIGFkYXB0ZXIgcGFzc2VzIGluIGBpbmNs
        dWRlSWQ6IHRydWVgIHdoZW4gc2VyaWFsaXppbmcKICAgIGEgcmVjb3JkIGZv
        ciBgY3JlYXRlUmVjb3JkYCwgYnV0IG5vdCBmb3IgYHVwZGF0ZVJlY29yZGAu
        CgogICAgIyMgQ3VzdG9taXphdGlvbgoKICAgIFlvdXIgc2VydmVyIG1heSBl
        eHBlY3QgYSBkaWZmZXJlbnQgSlNPTiBmb3JtYXQgdGhhbiB0aGUKICAgIGJ1
        aWx0LWluIHNlcmlhbGl6YXRpb24gZm9ybWF0LgoKICAgIEluIHRoYXQgY2Fz
        ZSwgeW91IGNhbiBpbXBsZW1lbnQgYHNlcmlhbGl6ZWAgeW91cnNlbGYgYW5k
        CiAgICByZXR1cm4gYSBKU09OIGhhc2ggb2YgeW91ciBjaG9vc2luZy4KCiAg
        ICBgYGBqcwogICAgQXBwLlBvc3RTZXJpYWxpemVyID0gRFMuUkVTVFNlcmlh
        bGl6ZXIuZXh0ZW5kKHsKICAgICAgc2VyaWFsaXplOiBmdW5jdGlvbihwb3N0
        LCBvcHRpb25zKSB7CiAgICAgICAgdmFyIGpzb24gPSB7CiAgICAgICAgICBQ
        T1NUX1RUTDogcG9zdC5nZXQoJ3RpdGxlJyksCiAgICAgICAgICBQT1NUX0JE
        WTogcG9zdC5nZXQoJ2JvZHknKSwKICAgICAgICAgIFBPU1RfQ01TOiBwb3N0
        LmdldCgnY29tbWVudHMnKS5tYXBQcm9wZXJ0eSgnaWQnKQogICAgICAgIH0K
        CiAgICAgICAgaWYgKG9wdGlvbnMuaW5jbHVkZUlkKSB7CiAgICAgICAgICBq
        c29uLlBPU1RfSURfID0gcG9zdC5nZXQoJ2lkJyk7CiAgICAgICAgfQoKICAg
        ICAgICByZXR1cm4ganNvbjsKICAgICAgfQogICAgfSk7CiAgICBgYGAKCiAg
        ICAjIyBDdXN0b21pemluZyBhbiBBcHAtV2lkZSBTZXJpYWxpemVyCgogICAg
        SWYgeW91IHdhbnQgdG8gZGVmaW5lIGEgc2VyaWFsaXplciBmb3IgeW91ciBl
        bnRpcmUKICAgIGFwcGxpY2F0aW9uLCB5b3UnbGwgcHJvYmFibHkgd2FudCB0
        byB1c2UgYGVhY2hBdHRyaWJ1dGVgCiAgICBhbmQgYGVhY2hSZWxhdGlvbnNo
        aXBgIG9uIHRoZSByZWNvcmQuCgogICAgYGBganMKICAgIEFwcC5BcHBsaWNh
        dGlvblNlcmlhbGl6ZXIgPSBEUy5SRVNUU2VyaWFsaXplci5leHRlbmQoewog
        ICAgICBzZXJpYWxpemU6IGZ1bmN0aW9uKHJlY29yZCwgb3B0aW9ucykgewog
        ICAgICAgIHZhciBqc29uID0ge307CgogICAgICAgIHJlY29yZC5lYWNoQXR0
        cmlidXRlKGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgICAgIGpzb25bc2VydmVy
        QXR0cmlidXRlTmFtZShuYW1lKV0gPSByZWNvcmQuZ2V0KG5hbWUpOwogICAg
        ICAgIH0pCgogICAgICAgIHJlY29yZC5lYWNoUmVsYXRpb25zaGlwKGZ1bmN0
        aW9uKG5hbWUsIHJlbGF0aW9uc2hpcCkgewogICAgICAgICAgaWYgKHJlbGF0
        aW9uc2hpcC5raW5kID09PSAnaGFzTWFueScpIHsKICAgICAgICAgICAganNv
        bltzZXJ2ZXJIYXNNYW55TmFtZShuYW1lKV0gPSByZWNvcmQuZ2V0KG5hbWUp
        Lm1hcEJ5KCdpZCcpOwogICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAg
        ICBpZiAob3B0aW9ucy5pbmNsdWRlSWQpIHsKICAgICAgICAgIGpzb24uSURf
        ID0gcmVjb3JkLmdldCgnaWQnKTsKICAgICAgICB9CgogICAgICAgIHJldHVy
        biBqc29uOwogICAgICB9CiAgICB9KTsKCiAgICBmdW5jdGlvbiBzZXJ2ZXJB
        dHRyaWJ1dGVOYW1lKGF0dHJpYnV0ZSkgewogICAgICByZXR1cm4gYXR0cmli
        dXRlLnVuZGVyc2NvcmUoKS50b1VwcGVyQ2FzZSgpOwogICAgfQoKICAgIGZ1
        bmN0aW9uIHNlcnZlckhhc01hbnlOYW1lKG5hbWUpIHsKICAgICAgcmV0dXJu
        IHNlcnZlckF0dHJpYnV0ZU5hbWUobmFtZS5zaW5ndWxhcml6ZSgpKSArICJf
        SURTIjsKICAgIH0KICAgIGBgYAoKICAgIFRoaXMgc2VyaWFsaXplciB3aWxs
        IGdlbmVyYXRlIEpTT04gdGhhdCBsb29rcyBsaWtlIHRoaXM6CgogICAgYGBg
        anMKICAgIHsKICAgICAgIlRJVExFIjogIlJhaWxzIGlzIG9tYWthc2UiLAog
        ICAgICAiQk9EWSI6ICJZZXAuIE9tYWthc2UuIiwKICAgICAgIkNPTU1FTlRf
        SURTIjogWyAxLCAyLCAzIF0KICAgIH0KICAgIGBgYAoKICAgICMjIFR3ZWFr
        aW5nIHRoZSBEZWZhdWx0IEpTT04KCiAgICBJZiB5b3UganVzdCB3YW50IHRv
        IGRvIHNvbWUgc21hbGwgdHdlYWtzIG9uIHRoZSBkZWZhdWx0IEpTT04sCiAg
        ICB5b3UgY2FuIGNhbGwgc3VwZXIgZmlyc3QgYW5kIG1ha2UgdGhlIHR3ZWFr
        cyBvbiB0aGUgcmV0dXJuZWQKICAgIEpTT04uCgogICAgYGBganMKICAgIEFw
        cC5Qb3N0U2VyaWFsaXplciA9IERTLlJFU1RTZXJpYWxpemVyLmV4dGVuZCh7
        CiAgICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24ocmVjb3JkLCBvcHRpb25zKSB7
        CiAgICAgICAgdmFyIGpzb24gPSB0aGlzLl9zdXBlcihyZWNvcmQsIG9wdGlv
        bnMpOwoKICAgICAgICBqc29uLnN1YmplY3QgPSBqc29uLnRpdGxlOwogICAg
        ICAgIGRlbGV0ZSBqc29uLnRpdGxlOwoKICAgICAgICByZXR1cm4ganNvbjsK
        ICAgICAgfQogICAgfSk7CiAgICBgYGAKCiAgICBAbWV0aG9kIHNlcmlhbGl6
        ZQogICAgQHBhcmFtIHJlY29yZAogICAgQHBhcmFtIG9wdGlvbnMKICAqLwog
        IHNlcmlhbGl6ZTogZnVuY3Rpb24ocmVjb3JkLCBvcHRpb25zKSB7CiAgICBy
        ZXR1cm4gdGhpcy5fc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9
        LAoKICAvKioKICAgIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIGN1c3Rv
        bWl6ZSB0aGUgcm9vdCBrZXlzIHNlcmlhbGl6ZWQgaW50byB0aGUgSlNPTi4K
        ICAgIEJ5IGRlZmF1bHQgdGhlIFJFU1QgU2VyaWFsaXplciBzZW5kcyBjYW1l
        bGl6ZWQgcm9vdCBrZXlzLgogICAgRm9yIGV4YW1wbGUsIHlvdXIgc2VydmVy
        IG1heSBleHBlY3QgdW5kZXJzY29yZWQgcm9vdCBvYmplY3RzLgoKICAgIGBg
        YGpzCiAgICBBcHAuQXBwbGljYXRpb25TZXJpYWxpemVyID0gRFMuUkVTVFNl
        cmlhbGl6ZXIuZXh0ZW5kKHsKICAgICAgc2VyaWFsaXplSW50b0hhc2g6IGZ1
        bmN0aW9uKGRhdGEsIHR5cGUsIHJlY29yZCwgb3B0aW9ucykgewogICAgICAg
        IHZhciByb290ID0gRW1iZXIuU3RyaW5nLmRlY2FtZWxpemUodHlwZS50eXBl
        S2V5KTsKICAgICAgICBkYXRhW3Jvb3RdID0gdGhpcy5zZXJpYWxpemUocmVj
        b3JkLCBvcHRpb25zKTsKICAgICAgfQogICAgfSk7CiAgICBgYGAKCiAgICBA
        bWV0aG9kIHNlcmlhbGl6ZUludG9IYXNoCiAgICBAcGFyYW0ge09iamVjdH0g
        aGFzaAogICAgQHBhcmFtIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQog
        ICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAgICBAcGFyYW0ge09iamVj
        dH0gb3B0aW9ucwogICovCiAgc2VyaWFsaXplSW50b0hhc2g6IGZ1bmN0aW9u
        KGhhc2gsIHR5cGUsIHJlY29yZCwgb3B0aW9ucykgewogICAgaGFzaFt0eXBl
        LnR5cGVLZXldID0gdGhpcy5zZXJpYWxpemUocmVjb3JkLCBvcHRpb25zKTsK
        ICB9LAoKICAvKioKICAgIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIGN1
        c3RvbWl6ZSBob3cgcG9seW1vcnBoaWMgb2JqZWN0cyBhcmUgc2VyaWFsaXpl
        ZC4KICAgIEJ5IGRlZmF1bHQgdGhlIEpTT04gU2VyaWFsaXplciBjcmVhdGVz
        IHRoZSBrZXkgYnkgYXBwZW5kaW5nIGBUeXBlYCB0bwogICAgdGhlIGF0dHJp
        YnV0ZSBhbmQgdmFsdWUgZnJvbSB0aGUgbW9kZWwncyBjYW1lbGNhc2VkIG1v
        ZGVsIG5hbWUuCgogICAgQG1ldGhvZCBzZXJpYWxpemVQb2x5bW9ycGhpY1R5
        cGUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHBhcmFtIHtP
        YmplY3R9IGpzb24KICAgIEBwYXJhbSByZWxhdGlvbnNoaXAKICAqLwogIHNl
        cmlhbGl6ZVBvbHltb3JwaGljVHlwZTogZnVuY3Rpb24ocmVjb3JkLCBqc29u
        LCByZWxhdGlvbnNoaXApIHsKICAgIHZhciBrZXkgPSByZWxhdGlvbnNoaXAu
        a2V5LAogICAgICAgIGJlbG9uZ3NUbyA9IGdldChyZWNvcmQsIGtleSk7CiAg
        ICBrZXkgPSB0aGlzLmtleUZvckF0dHJpYnV0ZSA/IHRoaXMua2V5Rm9yQXR0
        cmlidXRlKGtleSkgOiBrZXk7CiAgICBqc29uW2tleSArICJUeXBlIl0gPSBi
        ZWxvbmdzVG8uY29uc3RydWN0b3IudHlwZUtleTsKICB9Cn0pOwoKfSkoKTsK
        CgoKKGZ1bmN0aW9uKCkgewovKioKICBAbW9kdWxlIGVtYmVyLWRhdGEKKi8K
        CnZhciBnZXQgPSBFbWJlci5nZXQsIHNldCA9IEVtYmVyLnNldDsKdmFyIGZv
        ckVhY2ggPSBFbWJlci5BcnJheVBvbHlmaWxscy5mb3JFYWNoOwoKLyoqCiAg
        VGhlIFJFU1QgYWRhcHRlciBhbGxvd3MgeW91ciBzdG9yZSB0byBjb21tdW5p
        Y2F0ZSB3aXRoIGFuIEhUVFAgc2VydmVyIGJ5CiAgdHJhbnNtaXR0aW5nIEpT
        T04gdmlhIFhIUi4gTW9zdCBFbWJlci5qcyBhcHBzIHRoYXQgY29uc3VtZSBh
        IEpTT04gQVBJCiAgc2hvdWxkIHVzZSB0aGUgUkVTVCBhZGFwdGVyLgoKICBU
        aGlzIGFkYXB0ZXIgaXMgZGVzaWduZWQgYXJvdW5kIHRoZSBpZGVhIHRoYXQg
        dGhlIEpTT04gZXhjaGFuZ2VkIHdpdGgKICB0aGUgc2VydmVyIHNob3VsZCBi
        ZSBjb252ZW50aW9uYWwuCgogICMjIEpTT04gU3RydWN0dXJlCgogIFRoZSBS
        RVNUIGFkYXB0ZXIgZXhwZWN0cyB0aGUgSlNPTiByZXR1cm5lZCBmcm9tIHlv
        dXIgc2VydmVyIHRvIGZvbGxvdwogIHRoZXNlIGNvbnZlbnRpb25zLgoKICAj
        IyMgT2JqZWN0IFJvb3QKCiAgVGhlIEpTT04gcGF5bG9hZCBzaG91bGQgYmUg
        YW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIHJlY29yZCBpbnNpZGUgYQog
        IHJvb3QgcHJvcGVydHkuIEZvciBleGFtcGxlLCBpbiByZXNwb25zZSB0byBh
        IGBHRVRgIHJlcXVlc3QgZm9yCiAgYC9wb3N0cy8xYCwgdGhlIEpTT04gc2hv
        dWxkIGxvb2sgbGlrZSB0aGlzOgoKICBgYGBqcwogIHsKICAgICJwb3N0Ijog
        ewogICAgICB0aXRsZTogIkknbSBSdW5uaW5nIHRvIFJlZm9ybSB0aGUgVzND
        J3MgVGFnIiwKICAgICAgYXV0aG9yOiAiWWVodWRhIEthdHoiCiAgICB9CiAg
        fQogIGBgYAoKICAjIyMgQ29udmVudGlvbmFsIE5hbWVzCgogIEF0dHJpYnV0
        ZSBuYW1lcyBpbiB5b3VyIEpTT04gcGF5bG9hZCBzaG91bGQgYmUgdGhlIGNh
        bWVsY2FzZWQgdmVyc2lvbnMgb2YKICB0aGUgYXR0cmlidXRlcyBpbiB5b3Vy
        IEVtYmVyLmpzIG1vZGVscy4KCiAgRm9yIGV4YW1wbGUsIGlmIHlvdSBoYXZl
        IGEgYFBlcnNvbmAgbW9kZWw6CgogIGBgYGpzCiAgQXBwLlBlcnNvbiA9IERT
        Lk1vZGVsLmV4dGVuZCh7CiAgICBmaXJzdE5hbWU6IERTLmF0dHIoJ3N0cmlu
        ZycpLAogICAgbGFzdE5hbWU6IERTLmF0dHIoJ3N0cmluZycpLAogICAgb2Nj
        dXBhdGlvbjogRFMuYXR0cignc3RyaW5nJykKICB9KTsKICBgYGAKCiAgVGhl
        IEpTT04gcmV0dXJuZWQgc2hvdWxkIGxvb2sgbGlrZSB0aGlzOgoKICBgYGBq
        cwogIHsKICAgICJwZXJzb24iOiB7CiAgICAgICJmaXJzdE5hbWUiOiAiQmFy
        YWNrIiwKICAgICAgImxhc3ROYW1lIjogIk9iYW1hIiwKICAgICAgIm9jY3Vw
        YXRpb24iOiAiUHJlc2lkZW50IgogICAgfQogIH0KICBgYGAKCiAgIyMgQ3Vz
        dG9taXphdGlvbgoKICAjIyMgRW5kcG9pbnQgcGF0aCBjdXN0b21pemF0aW9u
        CgogIEVuZHBvaW50IHBhdGhzIGNhbiBiZSBwcmVmaXhlZCB3aXRoIGEgYG5h
        bWVzcGFjZWAgYnkgc2V0dGluZyB0aGUgbmFtZXNwYWNlCiAgcHJvcGVydHkg
        b24gdGhlIGFkYXB0ZXI6CgogIGBgYGpzCiAgRFMuUkVTVEFkYXB0ZXIucmVv
        cGVuKHsKICAgIG5hbWVzcGFjZTogJ2FwaS8xJwogIH0pOwogIGBgYAogIFJl
        cXVlc3RzIGZvciBgQXBwLlBlcnNvbmAgd291bGQgbm93IHRhcmdldCBgL2Fw
        aS8xL3Blb3BsZS8xYC4KCiAgIyMjIEhvc3QgY3VzdG9taXphdGlvbgoKICBB
        biBhZGFwdGVyIGNhbiB0YXJnZXQgb3RoZXIgaG9zdHMgYnkgc2V0dGluZyB0
        aGUgYGhvc3RgIHByb3BlcnR5LgoKICBgYGBqcwogIERTLlJFU1RBZGFwdGVy
        LnJlb3Blbih7CiAgICBob3N0OiAnaHR0cHM6Ly9hcGkuZXhhbXBsZS5jb20n
        CiAgfSk7CiAgYGBgCgogICMjIyBIZWFkZXJzIGN1c3RvbWl6YXRpb24KCiAg
        U29tZSBBUElzIHJlcXVpcmUgSFRUUCBoZWFkZXJzLCBlZyB0byBwcm92aWRl
        IGFuIEFQSSBrZXkuIEFuIGFycmF5IG9mCiAgaGVhZGVycyBjYW4gYmUgYWRk
        ZWQgdG8gdGhlIGFkYXB0ZXIgd2hpY2ggYXJlIHBhc3NlZCB3aXRoIGV2ZXJ5
        IHJlcXVlc3Q6CgogIGBgYGpzCiAgRFMuUkVTVEFkYXB0ZXIucmVvcGVuKHsK
        ICAgIGhlYWRlcnM6IHsKICAgICAgIkFQSV9LRVkiOiAic2VjcmV0IGtleSIs
        CiAgICAgICJBTk9USEVSX0hFQURFUiI6ICJhc2RzYWRhIgogICAgfQogIH0p
        OwogIGBgYAoKICBAY2xhc3MgUkVTVEFkYXB0ZXIKICBAY29uc3RydWN0b3IK
        ICBAbmFtZXNwYWNlIERTCiAgQGV4dGVuZHMgRFMuQWRhcHRlcgoqLwpEUy5S
        RVNUQWRhcHRlciA9IERTLkFkYXB0ZXIuZXh0ZW5kKHsKICBkZWZhdWx0U2Vy
        aWFsaXplcjogJ19yZXN0JywKCiAgLyoqCiAgICBDYWxsZWQgYnkgdGhlIHN0
        b3JlIGluIG9yZGVyIHRvIGZldGNoIHRoZSBKU09OIGZvciBhIGdpdmVuCiAg
        ICB0eXBlIGFuZCBJRC4KCiAgICBJdCBtYWtlcyBhbiBBamF4IHJlcXVlc3Qg
        dG8gYSBVUkwgY29tcHV0ZWQgYnkgYGJ1aWxkVVJMYCwgYW5kIHJldHVybnMg
        YQogICAgcHJvbWlzZSBmb3IgdGhlIHJlc3VsdGluZyBwYXlsb2FkLgoKICAg
        IEBtZXRob2QgZmluZAogICAgQHNlZSBSRVNUQWRhcHRlci9idWlsZFVSTAog
        ICAgQHNlZSBSRVNUQWRhcHRlci9hamF4CiAgICBAcGFyYW0ge0RTLlN0b3Jl
        fSBzdG9yZQogICAgQHBhcmFtIHtzdWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlw
        ZQogICAgQHBhcmFtIHtTdHJpbmd9IGlkCiAgICBAcmV0dXJucyBQcm9taXNl
        CiAgKi8KICBmaW5kOiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgaWQpIHsKICAg
        IHJldHVybiB0aGlzLmFqYXgodGhpcy5idWlsZFVSTCh0eXBlLnR5cGVLZXks
        IGlkKSwgJ0dFVCcpOwogIH0sCgogIC8qKgogICAgQ2FsbGVkIGJ5IHRoZSBz
        dG9yZSBpbiBvcmRlciB0byBmZXRjaCBhIEpTT04gYXJyYXkgZm9yIGFsbAog
        ICAgb2YgdGhlIHJlY29yZHMgZm9yIGEgZ2l2ZW4gdHlwZS4KCiAgICBJdCBt
        YWtlcyBhbiBBamF4IHJlcXVlc3QgdG8gYSBVUkwgY29tcHV0ZWQgYnkgYGJ1
        aWxkVVJMYCwgYW5kIHJldHVybnMgYQogICAgcHJvbWlzZSBmb3IgdGhlIHJl
        c3VsdGluZyBwYXlsb2FkLgoKICAgIEBtZXRob2QgZmluZEFsbAogICAgQHNl
        ZSBSRVNUQWRhcHRlci9idWlsZFVSTAogICAgQHNlZSBSRVNUQWRhcHRlci9h
        amF4CiAgICBAcGFyYW0ge0RTLlN0b3JlfSBzdG9yZQogICAgQHBhcmFtIHtz
        dWJjbGFzcyBvZiBEUy5Nb2RlbH0gdHlwZQogICAgQHBhcmFtIHtTdHJpbmd9
        IHNpbmNlVG9rZW4KICAgIEByZXR1cm5zIFByb21pc2UKICAqLwogIGZpbmRB
        bGw6IGZ1bmN0aW9uKHN0b3JlLCB0eXBlLCBzaW5jZVRva2VuKSB7CiAgICB2
        YXIgcXVlcnk7CgogICAgaWYgKHNpbmNlVG9rZW4pIHsKICAgICAgcXVlcnkg
        PSB7IHNpbmNlOiBzaW5jZVRva2VuIH07CiAgICB9CgogICAgcmV0dXJuIHRo
        aXMuYWpheCh0aGlzLmJ1aWxkVVJMKHR5cGUudHlwZUtleSksICdHRVQnLCB7
        IGRhdGE6IHF1ZXJ5IH0pOwogIH0sCgogIC8qKgogICAgQ2FsbGVkIGJ5IHRo
        ZSBzdG9yZSBpbiBvcmRlciB0byBmZXRjaCBhIEpTT04gYXJyYXkgZm9yCiAg
        ICB0aGUgcmVjb3JkcyB0aGF0IG1hdGNoIGEgcGFydGljdWxhciBxdWVyeS4K
        CiAgICBUaGUgcXVlcnkgaXMgYSBzaW1wbGUgSmF2YVNjcmlwdCBvYmplY3Qg
        dGhhdCB3aWxsIGJlIHBhc3NlZCBkaXJlY3RseQogICAgdG8gdGhlIHNlcnZl
        ciBhcyBwYXJhbWV0ZXJzLgoKICAgIEl0IG1ha2VzIGFuIEFqYXggcmVxdWVz
        dCB0byBhIFVSTCBjb21wdXRlZCBieSBgYnVpbGRVUkxgLCBhbmQgcmV0dXJu
        cyBhCiAgICBwcm9taXNlIGZvciB0aGUgcmVzdWx0aW5nIHBheWxvYWQuCgog
        ICAgQG1ldGhvZCBmaW5kUXVlcnkKICAgIEBzZWUgUkVTVEFkYXB0ZXIvYnVp
        bGRVUkwKICAgIEBzZWUgUkVTVEFkYXB0ZXIvYWpheAogICAgQHBhcmFtIHtE
        Uy5TdG9yZX0gc3RvcmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9k
        ZWx9IHR5cGUKICAgIEBwYXJhbSB7T2JqZWN0fSBxdWVyeQogICAgQHJldHVy
        bnMgUHJvbWlzZQogICovCiAgZmluZFF1ZXJ5OiBmdW5jdGlvbihzdG9yZSwg
        dHlwZSwgcXVlcnkpIHsKICAgIHJldHVybiB0aGlzLmFqYXgodGhpcy5idWls
        ZFVSTCh0eXBlLnR5cGVLZXkpLCAnR0VUJywgeyBkYXRhOiBxdWVyeSB9KTsK
        ICB9LAoKICAvKioKICAgIENhbGxlZCBieSB0aGUgc3RvcmUgaW4gb3JkZXIg
        dG8gZmV0Y2ggYSBKU09OIGFycmF5IGZvcgogICAgdGhlIHVubG9hZGVkIHJl
        Y29yZHMgaW4gYSBoYXMtbWFueSByZWxhdGlvbnNoaXAgdGhhdCB3ZXJlIG9y
        aWdpbmFsbHkKICAgIHNwZWNpZmllZCBhcyBJRHMuCgogICAgRm9yIGV4YW1w
        bGUsIGlmIHRoZSBvcmlnaW5hbCBwYXlsb2FkIGxvb2tzIGxpa2U6CgogICAg
        YGBganMKICAgIHsKICAgICAgImlkIjogMSwKICAgICAgInRpdGxlIjogIlJh
        aWxzIGlzIG9tYWthc2UiLAogICAgICAiY29tbWVudHMiOiBbIDEsIDIsIDMg
        XQogICAgfQogICAgYGBgCgogICAgVGhlIElEcyB3aWxsIGJlIHBhc3NlZCBh
        cyBhIFVSTC1lbmNvZGVkIEFycmF5IG9mIElEcywgaW4gdGhpcyBmb3JtOgoK
        ICAgIGBgYAogICAgaWRzW109MSZpZHNbXT0yJmlkc1tdPTMKICAgIGBgYAoK
        ICAgIE1hbnkgc2VydmVycywgc3VjaCBhcyBSYWlscyBhbmQgUEhQLCB3aWxs
        IGF1dG9tYXRpY2FsbHkgY29udmVydCB0aGlzCiAgICBpbnRvIGFuIEFycmF5
        IGZvciB5b3Ugb24gdGhlIHNlcnZlci1zaWRlLiBJZiB5b3Ugd2FudCB0byBl
        bmNvZGUgdGhlCiAgICBJRHMsIGRpZmZlcmVudGx5LCBqdXN0IG92ZXJyaWRl
        IHRoaXMgKG9uZS1saW5lKSBtZXRob2QuCgogICAgSXQgbWFrZXMgYW4gQWph
        eCByZXF1ZXN0IHRvIGEgVVJMIGNvbXB1dGVkIGJ5IGBidWlsZFVSTGAsIGFu
        ZCByZXR1cm5zIGEKICAgIHByb21pc2UgZm9yIHRoZSByZXN1bHRpbmcgcGF5
        bG9hZC4KCiAgICBAbWV0aG9kIGZpbmRNYW55CiAgICBAc2VlIFJFU1RBZGFw
        dGVyL2J1aWxkVVJMCiAgICBAc2VlIFJFU1RBZGFwdGVyL2FqYXgKICAgIEBw
        YXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9m
        IERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0ge0FycmF5PFN0cmluZz59IGlk
        cwogICAgQHJldHVybnMgUHJvbWlzZQogICovCiAgZmluZE1hbnk6IGZ1bmN0
        aW9uKHN0b3JlLCB0eXBlLCBpZHMsIG93bmVyKSB7CiAgICByZXR1cm4gdGhp
        cy5hamF4KHRoaXMuYnVpbGRVUkwodHlwZS50eXBlS2V5KSwgJ0dFVCcsIHsg
        ZGF0YTogeyBpZHM6IGlkcyB9IH0pOwogIH0sCgogIC8qKgogICAgQ2FsbGVk
        IGJ5IHRoZSBzdG9yZSBpbiBvcmRlciB0byBmZXRjaCBhIEpTT04gYXJyYXkg
        Zm9yCiAgICB0aGUgdW5sb2FkZWQgcmVjb3JkcyBpbiBhIGhhcy1tYW55IHJl
        bGF0aW9uc2hpcCB0aGF0IHdlcmUgb3JpZ2luYWxseQogICAgc3BlY2lmaWVk
        IGFzIGEgVVJMIChpbnNpZGUgb2YgYGxpbmtzYCkuCgogICAgRm9yIGV4YW1w
        bGUsIGlmIHlvdXIgb3JpZ2luYWwgcGF5bG9hZCBsb29rcyBsaWtlIHRoaXM6
        CgogICAgYGBganMKICAgIHsKICAgICAgInBvc3QiOiB7CiAgICAgICAgImlk
        IjogMSwKICAgICAgICAidGl0bGUiOiAiUmFpbHMgaXMgb21ha2FzZSIsCiAg
        ICAgICAgImxpbmtzIjogeyAiY29tbWVudHMiOiAiL3Bvc3RzLzEvY29tbWVu
        dHMiIH0KICAgICAgfQogICAgfQogICAgYGBgCgogICAgVGhpcyBtZXRob2Qg
        d2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgcGFyZW50IHJlY29yZCBhbmQgYC9w
        b3N0cy8xL2NvbW1lbnRzYC4KCiAgICBJdCB3aWxsIG1ha2UgYW4gQWpheCBy
        ZXF1ZXN0IHRvIHRoZSBvcmlnaW5hbGx5IHNwZWNpZmllZCBVUkwuCgogICAg
        QG1ldGhvZCBmaW5kSGFzTWFueQogICAgQHNlZSBSRVNUQWRhcHRlci9idWls
        ZFVSTAogICAgQHNlZSBSRVNUQWRhcHRlci9hamF4CiAgICBAcGFyYW0ge0RT
        LlN0b3JlfSBzdG9yZQogICAgQHBhcmFtIHtEUy5Nb2RlbH0gcmVjb3JkCiAg
        ICBAcGFyYW0ge1N0cmluZ30gdXJsCiAgICBAcmV0dXJucyBQcm9taXNlCiAg
        Ki8KICBmaW5kSGFzTWFueTogZnVuY3Rpb24oc3RvcmUsIHJlY29yZCwgdXJs
        KSB7CiAgICB2YXIgaWQgICA9IGdldChyZWNvcmQsICdpZCcpLAogICAgICAg
        IHR5cGUgPSByZWNvcmQuY29uc3RydWN0b3IudHlwZUtleTsKCiAgICByZXR1
        cm4gdGhpcy5hamF4KHRoaXMudXJsUHJlZml4KHVybCwgdGhpcy5idWlsZFVS
        TCh0eXBlLCBpZCkpLCAnR0VUJyk7CiAgfSwKCiAgLyoqCiAgICBDYWxsZWQg
        YnkgdGhlIHN0b3JlIGluIG9yZGVyIHRvIGZldGNoIGEgSlNPTiBhcnJheSBm
        b3IKICAgIHRoZSB1bmxvYWRlZCByZWNvcmRzIGluIGEgYmVsb25ncy10byBy
        ZWxhdGlvbnNoaXAgdGhhdCB3ZXJlIG9yaWdpbmFsbHkKICAgIHNwZWNpZmll
        ZCBhcyBhIFVSTCAoaW5zaWRlIG9mIGBsaW5rc2ApLgoKICAgIEZvciBleGFt
        cGxlLCBpZiB5b3VyIG9yaWdpbmFsIHBheWxvYWQgbG9va3MgbGlrZSB0aGlz
        OgoKICAgIGBgYGpzCiAgICB7CiAgICAgICJwZXJzb24iOiB7CiAgICAgICAg
        ImlkIjogMSwKICAgICAgICAibmFtZSI6ICJUb20gRGFsZSIsCiAgICAgICAg
        ImxpbmtzIjogeyAiZ3JvdXAiOiAiL3Blb3BsZS8xL2dyb3VwIiB9CiAgICAg
        IH0KICAgIH0KICAgIGBgYAoKICAgIFRoaXMgbWV0aG9kIHdpbGwgYmUgY2Fs
        bGVkIHdpdGggdGhlIHBhcmVudCByZWNvcmQgYW5kIGAvcGVvcGxlLzEvZ3Jv
        dXBgLgoKICAgIEl0IHdpbGwgbWFrZSBhbiBBamF4IHJlcXVlc3QgdG8gdGhl
        IG9yaWdpbmFsbHkgc3BlY2lmaWVkIFVSTC4KCiAgICBAbWV0aG9kIGZpbmRC
        ZWxvbmdzVG8KICAgIEBzZWUgUkVTVEFkYXB0ZXIvYnVpbGRVUkwKICAgIEBz
        ZWUgUkVTVEFkYXB0ZXIvYWpheAogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3Rv
        cmUKICAgIEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHBhcmFtIHtT
        dHJpbmd9IHVybAogICAgQHJldHVybnMgUHJvbWlzZQogICovCiAgZmluZEJl
        bG9uZ3NUbzogZnVuY3Rpb24oc3RvcmUsIHJlY29yZCwgdXJsKSB7CiAgICB2
        YXIgaWQgICA9IGdldChyZWNvcmQsICdpZCcpLAogICAgICAgIHR5cGUgPSBy
        ZWNvcmQuY29uc3RydWN0b3IudHlwZUtleTsKCiAgICByZXR1cm4gdGhpcy5h
        amF4KHRoaXMudXJsUHJlZml4KHVybCwgdGhpcy5idWlsZFVSTCh0eXBlLCBp
        ZCkpLCAnR0VUJyk7CiAgfSwKCiAgLyoqCiAgICBDYWxsZWQgYnkgdGhlIHN0
        b3JlIHdoZW4gYSBuZXdseSBjcmVhdGVkIHJlY29yZCBpcwogICAgYHNhdmVg
        ZC4KCiAgICBJdCBzZXJpYWxpemVzIHRoZSByZWNvcmQsIGFuZCBgUE9TVGBz
        IGl0IHRvIGEgVVJMIGdlbmVyYXRlZCBieSBgYnVpbGRVUkxgLgoKICAgIFNl
        ZSBgc2VyaWFsaXplYCBmb3IgaW5mb3JtYXRpb24gb24gaG93IHRvIGN1c3Rv
        bWl6ZSB0aGUgc2VyaWFsaXplZCBmb3JtCiAgICBvZiBhIHJlY29yZC4KCiAg
        ICBAbWV0aG9kIGNyZWF0ZVJlY29yZAogICAgQHNlZSBSRVNUQWRhcHRlci9i
        dWlsZFVSTAogICAgQHNlZSBSRVNUQWRhcHRlci9hamF4CiAgICBAc2VlIFJF
        U1RBZGFwdGVyL3NlcmlhbGl6ZQogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3Rv
        cmUKICAgIEBwYXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAg
        IEBwYXJhbSB7RFMuTW9kZWx9IHJlY29yZAogICAgQHJldHVybnMgUHJvbWlz
        ZQogICovCiAgY3JlYXRlUmVjb3JkOiBmdW5jdGlvbihzdG9yZSwgdHlwZSwg
        cmVjb3JkKSB7CiAgICB2YXIgZGF0YSA9IHt9OwogICAgdmFyIHNlcmlhbGl6
        ZXIgPSBzdG9yZS5zZXJpYWxpemVyRm9yKHR5cGUudHlwZUtleSk7CgogICAg
        c2VyaWFsaXplci5zZXJpYWxpemVJbnRvSGFzaChkYXRhLCB0eXBlLCByZWNv
        cmQsIHsgaW5jbHVkZUlkOiB0cnVlIH0pOwoKICAgIHJldHVybiB0aGlzLmFq
        YXgodGhpcy5idWlsZFVSTCh0eXBlLnR5cGVLZXkpLCAiUE9TVCIsIHsgZGF0
        YTogZGF0YSB9KTsKICB9LAoKICAvKioKICAgIENhbGxlZCBieSB0aGUgc3Rv
        cmUgd2hlbiBhbiBleGlzdGluZyByZWNvcmQgaXMgYHNhdmVgZC4KCiAgICBJ
        dCBzZXJpYWxpemVzIHRoZSByZWNvcmQsIGFuZCBgUE9TVGBzIGl0IHRvIGEg
        VVJMIGdlbmVyYXRlZCBieSBgYnVpbGRVUkxgLgoKICAgIFNlZSBgc2VyaWFs
        aXplYCBmb3IgaW5mb3JtYXRpb24gb24gaG93IHRvIGN1c3RvbWl6ZSB0aGUg
        c2VyaWFsaXplZCBmb3JtCiAgICBvZiBhIHJlY29yZC4KCiAgICBAbWV0aG9k
        IHVwZGF0ZVJlY29yZAogICAgQHNlZSBSRVNUQWRhcHRlci9idWlsZFVSTAog
        ICAgQHNlZSBSRVNUQWRhcHRlci9hamF4CiAgICBAc2VlIFJFU1RBZGFwdGVy
        L3NlcmlhbGl6ZQogICAgQHBhcmFtIHtEUy5TdG9yZX0gc3RvcmUKICAgIEBw
        YXJhbSB7c3ViY2xhc3Mgb2YgRFMuTW9kZWx9IHR5cGUKICAgIEBwYXJhbSB7
        RFMuTW9kZWx9IHJlY29yZAogICAgQHJldHVybnMgUHJvbWlzZQogICovCiAg
        dXBkYXRlUmVjb3JkOiBmdW5jdGlvbihzdG9yZSwgdHlwZSwgcmVjb3JkKSB7
        CiAgICB2YXIgZGF0YSA9IHt9OwogICAgdmFyIHNlcmlhbGl6ZXIgPSBzdG9y
        ZS5zZXJpYWxpemVyRm9yKHR5cGUudHlwZUtleSk7CgogICAgc2VyaWFsaXpl
        ci5zZXJpYWxpemVJbnRvSGFzaChkYXRhLCB0eXBlLCByZWNvcmQpOwoKICAg
        IHZhciBpZCA9IGdldChyZWNvcmQsICdpZCcpOwoKICAgIHJldHVybiB0aGlz
        LmFqYXgodGhpcy5idWlsZFVSTCh0eXBlLnR5cGVLZXksIGlkKSwgIlBVVCIs
        IHsgZGF0YTogZGF0YSB9KTsKICB9LAoKICAvKioKICAgIENhbGxlZCBieSB0
        aGUgc3RvcmUgd2hlbiBhbiBkZWxldGVkIHJlY29yZCBpcyBgc2F2ZWBkLgoK
        ICAgIEl0IHNlcmlhbGl6ZXMgdGhlIHJlY29yZCwgYW5kIGBQT1NUYHMgaXQg
        dG8gYSBVUkwgZ2VuZXJhdGVkIGJ5IGBidWlsZFVSTGAuCgogICAgQG1ldGhv
        ZCBkZWxldGVSZWNvcmQKICAgIEBzZWUgUkVTVEFkYXB0ZXIvYnVpbGRVUkwK
        ICAgIEBzZWUgUkVTVEFkYXB0ZXIvYWpheAogICAgQHNlZSBSRVNUQWRhcHRl
        ci9zZXJpYWxpemUKICAgIEBwYXJhbSB7RFMuU3RvcmV9IHN0b3JlCiAgICBA
        cGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBlCiAgICBAcGFyYW0g
        e0RTLk1vZGVsfSByZWNvcmQKICAgIEByZXR1cm5zIFByb21pc2UKICAqLwog
        IGRlbGV0ZVJlY29yZDogZnVuY3Rpb24oc3RvcmUsIHR5cGUsIHJlY29yZCkg
        ewogICAgdmFyIGlkID0gZ2V0KHJlY29yZCwgJ2lkJyk7CgogICAgcmV0dXJu
        IHRoaXMuYWpheCh0aGlzLmJ1aWxkVVJMKHR5cGUudHlwZUtleSwgaWQpLCAi
        REVMRVRFIik7CiAgfSwKCiAgLyoqCiAgICBCdWlsZHMgYSBVUkwgZm9yIGEg
        Z2l2ZW4gdHlwZSBhbmQgb3B0aW9uYWwgSUQuCgogICAgQnkgZGVmYXVsdCwg
        aXQgcGx1cmFsaXplcyB0aGUgdHlwZSdzIG5hbWUgKGZvciBleGFtcGxlLAog
        ICAgJ3Bvc3QnIGJlY29tZXMgJ3Bvc3RzJyBhbmQgJ3BlcnNvbicgYmVjb21l
        cyAncGVvcGxlJykuCgogICAgSWYgYW4gSUQgaXMgc3BlY2lmaWVkLCBpdCBh
        ZGRzIHRoZSBJRCB0byB0aGUgcGF0aCBnZW5lcmF0ZWQKICAgIGZvciB0aGUg
        dHlwZSwgc2VwYXJhdGVkIGJ5IGEgYC9gLgoKICAgIEBtZXRob2QgYnVpbGRV
        UkwKICAgIEBwYXJhbSB7U3RyaW5nfSB0eXBlCiAgICBAcGFyYW0ge1N0cmlu
        Z30gaWQKICAgIEByZXR1cm5zIFN0cmluZwogICovCiAgYnVpbGRVUkw6IGZ1
        bmN0aW9uKHR5cGUsIGlkKSB7CiAgICB2YXIgdXJsID0gW10sCiAgICAgICAg
        aG9zdCA9IGdldCh0aGlzLCAnaG9zdCcpLAogICAgICAgIHByZWZpeCA9IHRo
        aXMudXJsUHJlZml4KCk7CgogICAgaWYgKHR5cGUpIHsgdXJsLnB1c2godGhp
        cy5wYXRoRm9yVHlwZSh0eXBlKSk7IH0KICAgIGlmIChpZCkgeyB1cmwucHVz
        aChpZCk7IH0KCiAgICBpZiAocHJlZml4KSB7IHVybC51bnNoaWZ0KHByZWZp
        eCk7IH0KCiAgICB1cmwgPSB1cmwuam9pbignLycpOwogICAgaWYgKCFob3N0
        ICYmIHVybCkgeyB1cmwgPSAnLycgKyB1cmw7IH0KCiAgICByZXR1cm4gdXJs
        OwogIH0sCgogIHVybFByZWZpeDogZnVuY3Rpb24ocGF0aCwgcGFyZW50VVJM
        KSB7CiAgICB2YXIgaG9zdCA9IGdldCh0aGlzLCAnaG9zdCcpLAogICAgICAg
        IG5hbWVzcGFjZSA9IGdldCh0aGlzLCAnbmFtZXNwYWNlJyksCiAgICAgICAg
        dXJsID0gW107CgogICAgaWYgKHBhdGgpIHsKICAgICAgLy8gQWJzb2x1dGUg
        cGF0aAogICAgICBpZiAocGF0aC5jaGFyQXQoMCkgPT09ICcvJykgewogICAg
        ICAgIGlmIChob3N0KSB7CiAgICAgICAgICBwYXRoID0gcGF0aC5zbGljZSgx
        KTsKICAgICAgICAgIHVybC5wdXNoKGhvc3QpOwogICAgICAgIH0KICAgICAg
        Ly8gUmVsYXRpdmUgcGF0aAogICAgICB9IGVsc2UgaWYgKCEvXmh0dHAocyk/
        OlwvXC8vLnRlc3QocGF0aCkpIHsKICAgICAgICB1cmwucHVzaChwYXJlbnRV
        UkwpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBpZiAoaG9zdCkgeyB1
        cmwucHVzaChob3N0KTsgfQogICAgICBpZiAobmFtZXNwYWNlKSB7IHVybC5w
        dXNoKG5hbWVzcGFjZSk7IH0KICAgIH0KCiAgICBpZiAocGF0aCkgewogICAg
        ICB1cmwucHVzaChwYXRoKTsKICAgIH0KCiAgICByZXR1cm4gdXJsLmpvaW4o
        Jy8nKTsKICB9LAoKICAvKioKICAgIERldGVybWluZXMgdGhlIHBhdGhuYW1l
        IGZvciBhIGdpdmVuIHR5cGUuCgogICAgQnkgZGVmYXVsdCwgaXQgcGx1cmFs
        aXplcyB0aGUgdHlwZSdzIG5hbWUgKGZvciBleGFtcGxlLAogICAgJ3Bvc3Qn
        IGJlY29tZXMgJ3Bvc3RzJyBhbmQgJ3BlcnNvbicgYmVjb21lcyAncGVvcGxl
        JykuCgogICAgIyMjIFBhdGhuYW1lIGN1c3RvbWl6YXRpb24KCiAgICBGb3Ig
        ZXhhbXBsZSBpZiB5b3UgaGF2ZSBhbiBvYmplY3QgTGluZUl0ZW0gd2l0aCBh
        bgogICAgZW5kcG9pbnQgb2YgIi9saW5lX2l0ZW1zLyIuCgogICAgYGBganMK
        ICAgIERTLlJFU1RBZGFwdGVyLnJlb3Blbih7CiAgICAgIHBhdGhGb3JUeXBl
        OiBmdW5jdGlvbih0eXBlKSB7CiAgICAgICAgdmFyIGRlY2FtZWxpemVkID0g
        RW1iZXIuU3RyaW5nLmRlY2FtZWxpemUodHlwZSk7CiAgICAgICAgcmV0dXJu
        IEVtYmVyLlN0cmluZy5wbHVyYWxpemUoZGVjYW1lbGl6ZWQpOwogICAgICB9
        OwogICAgfSk7CiAgICBgYGAKCiAgICBAbWV0aG9kIHBhdGhGb3JUeXBlCiAg
        ICBAcGFyYW0ge1N0cmluZ30gdHlwZQogICAgQHJldHVybnMgU3RyaW5nCiAg
        KiovCiAgcGF0aEZvclR5cGU6IGZ1bmN0aW9uKHR5cGUpIHsKICAgIHJldHVy
        biBFbWJlci5TdHJpbmcucGx1cmFsaXplKHR5cGUpOwogIH0sCgogIC8qKgog
        ICAgVGFrZXMgYW4gYWpheCByZXNwb25zZSwgYW5kIHJldHVybnMgYSByZWxh
        dmFudCBlcnJvci4KCiAgICBCeSBkZWZhdWx0LCBpdCBoYXMgdGhlIGZvbGxv
        d2luZyBiZWhhdmlvcjoKCiAgICAqIEl0IHNpbXBseSByZXR1cm5zIHRoZSBh
        amF4IHJlc3BvbnNlLgoKICAgIEBtZXRob2QgYWpheEVycm9yCiAgICBAcGFy
        YW0gIGpxWEhSCiAgKi8KICBhamF4RXJyb3I6IGZ1bmN0aW9uKGpxWEhSKSB7
        CiAgICBpZiAoanFYSFIpIHsKICAgICAganFYSFIudGhlbiA9IG51bGw7CiAg
        ICB9CgogICAgcmV0dXJuIGpxWEhSOwogIH0sCgogIC8qKgogICAgVGFrZXMg
        YSBVUkwsIGFuIEhUVFAgbWV0aG9kIGFuZCBhIGhhc2ggb2YgZGF0YSwgYW5k
        IG1ha2VzIGFuCiAgICBIVFRQIHJlcXVlc3QuCgogICAgV2hlbiB0aGUgc2Vy
        dmVyIHJlc3BvbmRzIHdpdGggYSBwYXlsb2FkLCBFbWJlciBEYXRhIHdpbGwg
        Y2FsbCBpbnRvIGBleHRyYWN0U2luZ2xlYAogICAgb3IgYGV4dHJhY3RBcnJh
        eWAgKGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBvcmlnaW5hbCBxdWVyeSB3
        YXMgZm9yIG9uZSByZWNvcmQgb3IKICAgIG1hbnkgcmVjb3JkcykuCgogICAg
        QnkgZGVmYXVsdCwgaXQgaGFzIHRoZSBmb2xsb3dpbmcgYmVoYXZpb3I6Cgog
        ICAgKiBJdCBzZXRzIHRoZSByZXNwb25zZSBgZGF0YVR5cGVgIHRvIGAianNv
        biJgCiAgICAqIElmIHRoZSBIVFRQIG1ldGhvZCBpcyBub3QgYCJHRVQiYCwg
        aXQgc2V0cyB0aGUgYENvbnRlbnQtVHlwZWAgdG8gYmUKICAgICAgYGFwcGxp
        Y2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThgCiAgICAqIElmIHRoZSBIVFRQ
        IG1ldGhvZCBpcyBub3QgYCJHRVQiYCwgaXQgc3RyaW5naWZpZXMgdGhlIGRh
        dGEgcGFzc2VkIGluLiBUaGUKICAgICAgZGF0YSBpcyB0aGUgc2VyaWFsaXpl
        ZCByZWNvcmQgaW4gdGhlIGNhc2Ugb2YgYSBzYXZlLgogICAgKiBSZWdpc3Rl
        cnMgc3VjY2VzcyBhbmQgZmFpbHVyZSBoYW5kbGVycy4KCiAgICBAbWV0aG9k
        IGFqYXgKICAgIEBwcml2YXRlCiAgICBAcGFyYW0gIHVybAogICAgQHBhcmFt
        ICB0eXBlCiAgICBAcGFyYW0gIGhhc2gKICAqLwogIGFqYXg6IGZ1bmN0aW9u
        KHVybCwgdHlwZSwgaGFzaCkgewogICAgdmFyIGFkYXB0ZXIgPSB0aGlzOwoK
        ICAgIHJldHVybiBuZXcgRW1iZXIuUlNWUC5Qcm9taXNlKGZ1bmN0aW9uKHJl
        c29sdmUsIHJlamVjdCkgewogICAgICBoYXNoID0gaGFzaCB8fCB7fTsKICAg
        ICAgaGFzaC51cmwgPSB1cmw7CiAgICAgIGhhc2gudHlwZSA9IHR5cGU7CiAg
        ICAgIGhhc2guZGF0YVR5cGUgPSAnanNvbic7CiAgICAgIGhhc2guY29udGV4
        dCA9IGFkYXB0ZXI7CgogICAgICBpZiAoaGFzaC5kYXRhICYmIHR5cGUgIT09
        ICdHRVQnKSB7CiAgICAgICAgaGFzaC5jb250ZW50VHlwZSA9ICdhcHBsaWNh
        dGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JzsKICAgICAgICBoYXNoLmRhdGEg
        PSBKU09OLnN0cmluZ2lmeShoYXNoLmRhdGEpOwogICAgICB9CgogICAgICBp
        ZiAoYWRhcHRlci5oZWFkZXJzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICB2
        YXIgaGVhZGVycyA9IGFkYXB0ZXIuaGVhZGVyczsKICAgICAgICBoYXNoLmJl
        Zm9yZVNlbmQgPSBmdW5jdGlvbiAoeGhyKSB7CiAgICAgICAgICBmb3JFYWNo
        LmNhbGwoRW1iZXIua2V5cyhoZWFkZXJzKSwgZnVuY3Rpb24oa2V5KSB7CiAg
        ICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgaGVhZGVyc1tr
        ZXldKTsKICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgIH0KCiAgICAg
        IGhhc2guc3VjY2VzcyA9IGZ1bmN0aW9uKGpzb24pIHsKICAgICAgICBFbWJl
        ci5ydW4obnVsbCwgcmVzb2x2ZSwganNvbik7CiAgICAgIH07CgogICAgICBo
        YXNoLmVycm9yID0gZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9y
        VGhyb3duKSB7CiAgICAgICAgRW1iZXIucnVuKG51bGwsIHJlamVjdCwgYWRh
        cHRlci5hamF4RXJyb3IoanFYSFIpKTsKICAgICAgfTsKCiAgICAgIEVtYmVy
        LiQuYWpheChoYXNoKTsKICAgIH0pOwogIH0KCn0pOwoKfSkoKTsKCgoKKGZ1
        bmN0aW9uKCkgewovKioKICBAbW9kdWxlIGVtYmVyLWRhdGEKKi8KCn0pKCk7
        CgoKCihmdW5jdGlvbigpIHsKRFMuTW9kZWwucmVvcGVuKHsKCiAgLyoqCiAg
        ICBQcm92aWRlcyBpbmZvIGFib3V0IHRoZSBtb2RlbCBmb3IgZGVidWdnaW5n
        IHB1cnBvc2VzCiAgICBieSBncm91cGluZyB0aGUgcHJvcGVydGllcyBpbnRv
        IG1vcmUgc2VtYW50aWMgZ3JvdXBzLgoKICAgIE1lYW50IHRvIGJlIHVzZWQg
        YnkgZGVidWdnaW5nIHRvb2xzIHN1Y2ggYXMgdGhlIENocm9tZSBFbWJlciBF
        eHRlbnNpb24uCgogICAgLSBHcm91cHMgYWxsIGF0dHJpYnV0ZXMgaW4gIkF0
        dHJpYnV0ZXMiIGdyb3VwLgogICAgLSBHcm91cHMgYWxsIGJlbG9uZ3NUbyBy
        ZWxhdGlvbnNoaXBzIGluICJCZWxvbmdzIFRvIiBncm91cC4KICAgIC0gR3Jv
        dXBzIGFsbCBoYXNNYW55IHJlbGF0aW9uc2hpcHMgaW4gIkhhcyBNYW55IiBn
        cm91cC4KICAgIC0gR3JvdXBzIGFsbCBmbGFncyBpbiAiRmxhZ3MiIGdyb3Vw
        LgogICAgLSBGbGFncyByZWxhdGlvbnNoaXAgQ1BzIGFzIGV4cGVuc2l2ZSBw
        cm9wZXJ0aWVzLgoKICAgIEBtZXRob2QgX2RlYnVnSW5mbwogICAgQGZvciBE
        Uy5Nb2RlbAogICAgQHByaXZhdGUKICAqLwogIF9kZWJ1Z0luZm86IGZ1bmN0
        aW9uKCkgewogICAgdmFyIGF0dHJpYnV0ZXMgPSBbJ2lkJ10sCiAgICAgICAg
        cmVsYXRpb25zaGlwcyA9IHsgYmVsb25nc1RvOiBbXSwgaGFzTWFueTogW10g
        fSwKICAgICAgICBleHBlbnNpdmVQcm9wZXJ0aWVzID0gW107CgogICAgdGhp
        cy5lYWNoQXR0cmlidXRlKGZ1bmN0aW9uKG5hbWUsIG1ldGEpIHsKICAgICAg
        YXR0cmlidXRlcy5wdXNoKG5hbWUpOwogICAgfSwgdGhpcyk7CgogICAgdGhp
        cy5lYWNoUmVsYXRpb25zaGlwKGZ1bmN0aW9uKG5hbWUsIHJlbGF0aW9uc2hp
        cCkgewogICAgICByZWxhdGlvbnNoaXBzW3JlbGF0aW9uc2hpcC5raW5kXS5w
        dXNoKG5hbWUpOwogICAgICBleHBlbnNpdmVQcm9wZXJ0aWVzLnB1c2gobmFt
        ZSk7CiAgICB9KTsKCiAgICB2YXIgZ3JvdXBzID0gWwogICAgICB7CiAgICAg
        ICAgbmFtZTogJ0F0dHJpYnV0ZXMnLAogICAgICAgIHByb3BlcnRpZXM6IGF0
        dHJpYnV0ZXMsCiAgICAgICAgZXhwYW5kOiB0cnVlCiAgICAgIH0sCiAgICAg
        IHsKICAgICAgICBuYW1lOiAnQmVsb25ncyBUbycsCiAgICAgICAgcHJvcGVy
        dGllczogcmVsYXRpb25zaGlwcy5iZWxvbmdzVG8sCiAgICAgICAgZXhwYW5k
        OiB0cnVlCiAgICAgIH0sCiAgICAgIHsKICAgICAgICBuYW1lOiAnSGFzIE1h
        bnknLAogICAgICAgIHByb3BlcnRpZXM6IHJlbGF0aW9uc2hpcHMuaGFzTWFu
        eSwKICAgICAgICBleHBhbmQ6IHRydWUKICAgICAgfSwKICAgICAgewogICAg
        ICAgIG5hbWU6ICdGbGFncycsCiAgICAgICAgcHJvcGVydGllczogWydpc0xv
        YWRlZCcsICdpc0RpcnR5JywgJ2lzU2F2aW5nJywgJ2lzRGVsZXRlZCcsICdp
        c0Vycm9yJywgJ2lzTmV3JywgJ2lzVmFsaWQnXQogICAgICB9CiAgICBdOwoK
        ICAgIHJldHVybiB7CiAgICAgIHByb3BlcnR5SW5mbzogewogICAgICAgIC8v
        IGluY2x1ZGUgYWxsIG90aGVyIG1peGlucyAvIHByb3BlcnRpZXMgKG5vdCBq
        dXN0IHRoZSBncm91cGVkIG9uZXMpCiAgICAgICAgaW5jbHVkZU90aGVyUHJv
        cGVydGllczogdHJ1ZSwKICAgICAgICBncm91cHM6IGdyb3VwcywKICAgICAg
        ICAvLyBkb24ndCBwcmUtY2FsY3VsYXRlIHVubGVzcyBjYWNoZWQKICAgICAg
        ICBleHBlbnNpdmVQcm9wZXJ0aWVzOiBleHBlbnNpdmVQcm9wZXJ0aWVzCiAg
        ICAgIH0KICAgIH07CiAgfQoKfSk7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7
        Ci8qKgogIEBtb2R1bGUgZW1iZXItZGF0YQoqLwoKfSkoKTsKCgoKKGZ1bmN0
        aW9uKCkgewovL0NvcHlyaWdodCAoQykgMjAxMSBieSBMaXZpbmcgU29jaWFs
        LCBJbmMuCgovL1Blcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUg
        b2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YK
        Ly90aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24g
        ZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbgovL3RoZSBTb2Z0
        d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBs
        aW1pdGF0aW9uIHRoZSByaWdodHMgdG8KLy91c2UsIGNvcHksIG1vZGlmeSwg
        bWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9v
        ciBzZWxsIGNvcGllcwovL29mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1p
        dCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0
        byBkbwovL3NvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9u
        czoKCi8vVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVy
        bWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsCi8vY29w
        aWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4K
        Ci8vVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQg
        V0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKLy9JTVBMSUVELCBJ
        TkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9G
        IE1FUkNIQU5UQUJJTElUWSwKLy9GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIg
        UFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFM
        TCBUSEUKLy9BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJM
        RSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCi8vTElBQklMSVRZ
        LCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBP
        VEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKLy9PVVQgT0YgT1IgSU4gQ09OTkVD
        VElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERF
        QUxJTkdTIElOIFRIRQovL1NPRlRXQVJFLgoKLyoqCiAgRW1iZXIgRGF0YQoK
        ICBAbW9kdWxlIGVtYmVyLWRhdGEKICBAbWFpbiBlbWJlci1kYXRhCiovCgp9
        KSgpOwoKKGZ1bmN0aW9uKCkgewpFbWJlci5TdHJpbmcucGx1cmFsaXplID0g
        ZnVuY3Rpb24od29yZCkgewogIHJldHVybiBFbWJlci5JbmZsZWN0b3IuaW5m
        bGVjdG9yLnBsdXJhbGl6ZSh3b3JkKTsKfTsKCkVtYmVyLlN0cmluZy5zaW5n
        dWxhcml6ZSA9IGZ1bmN0aW9uKHdvcmQpIHsKICByZXR1cm4gRW1iZXIuSW5m
        bGVjdG9yLmluZmxlY3Rvci5zaW5ndWxhcml6ZSh3b3JkKTsKfTsKCn0pKCk7
        CgoKCihmdW5jdGlvbigpIHsKdmFyIEJMQU5LX1JFR0VYID0gL15ccyokLzsK
        CmZ1bmN0aW9uIGxvYWRVbmNvdW50YWJsZShydWxlcywgdW5jb3VudGFibGUp
        IHsKICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gdW5jb3VudGFibGUubGVu
        Z3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgIHJ1bGVzLnVuY291bnRhYmxl
        W3VuY291bnRhYmxlW2ldXSA9IHRydWU7CiAgfQp9CgpmdW5jdGlvbiBsb2Fk
        SXJyZWd1bGFyKHJ1bGVzLCBpcnJlZ3VsYXJQYWlycykgewogIHZhciBwYWly
        OwoKICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gaXJyZWd1bGFyUGFpcnMu
        bGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgIHBhaXIgPSBpcnJlZ3Vs
        YXJQYWlyc1tpXTsKCiAgICBydWxlcy5pcnJlZ3VsYXJbcGFpclswXV0gPSBw
        YWlyWzFdOwogICAgcnVsZXMuaXJyZWd1bGFySW52ZXJzZVtwYWlyWzFdXSA9
        IHBhaXJbMF07CiAgfQp9CgovKioKICBJbmZsZWN0b3IuRW1iZXIgcHJvdmlk
        ZXMgYSBtZWNoYW5pc20gZm9yIHN1cHBseWluZyBpbmZsZWN0aW9uIHJ1bGVz
        IGZvciB5b3VyCiAgYXBwbGljYXRpb24uIEVtYmVyIGluY2x1ZGVzIGEgZGVm
        YXVsdCBzZXQgb2YgaW5mbGVjdGlvbiBydWxlcywgYW5kIHByb3ZpZGVzIGFu
        CiAgQVBJIGZvciBwcm92aWRpbmcgYWRkaXRpb25hbCBydWxlcy4KCiAgRXhh
        bXBsZXM6CgogIENyZWF0aW5nIGFuIGluZmxlY3RvciB3aXRoIG5vIHJ1bGVz
        LgoKICBgYGBqcwogIHZhciBpbmZsZWN0b3IgPSBuZXcgRW1iZXIuSW5mbGVj
        dG9yKCk7CiAgYGBgCgogIENyZWF0aW5nIGFuIGluZmxlY3RvciB3aXRoIHRo
        ZSBkZWZhdWx0IGVtYmVyIHJ1bGVzZXQuCgogIGBgYGpzCiAgdmFyIGluZmxl
        Y3RvciA9IG5ldyBFbWJlci5JbmZsZWN0b3IoRW1iZXIuSW5mbGVjdG9yLmRl
        ZmF1bHRSdWxlcyk7CgogIGluZmxlY3Rvci5wbHVyYWxpemUoJ2NvdycpIC8v
        PT4gJ2tpbmUnCiAgaW5mbGVjdG9yLnNpbmd1bGFyaXplKCdraW5lJykgLy89
        PiAnY293JwogIGBgYAoKICBDcmVhdGluZyBhbiBpbmZsZWN0b3IgYW5kIGFk
        ZGluZyBydWxlcyBsYXRlci4KCiAgYGBgamF2YXNjcmlwdAogIHZhciBpbmZs
        ZWN0b3IgPSBFbWJlci5JbmZsZWN0b3IuaW5mbGVjdG9yOwoKICBpbmZsZWN0
        b3IucGx1cmFsaXplKCdhZHZpY2UnKSAvLyA9PiAnYWR2aWNlcycKICBpbmZs
        ZWN0b3IudW5jb3VudGFibGUoJ2FkdmljZScpOwogIGluZmxlY3Rvci5wbHVy
        YWxpemUoJ2FkdmljZScpIC8vID0+ICdhZHZpY2UnCgogIGluZmxlY3Rvci5w
        bHVyYWxpemUoJ2Zvcm11bGEnKSAvLyA9PiAnZm9ybXVsYXMnCiAgaW5mbGVj
        dG9yLmlycmVndWxhcignZm9ybXVsYScsICdmb3JtdWxhZScpOwogIGluZmxl
        Y3Rvci5wbHVyYWxpemUoJ2Zvcm11bGEnKSAvLyA9PiAnZm9ybXVsYWUnCgog
        IC8vIHlvdSB3b3VsZCBub3QgbmVlZCB0byBhZGQgdGhlc2UgYXMgdGhleSBh
        cmUgdGhlIGRlZmF1bHQgcnVsZXMKICBpbmZsZWN0b3IucGx1cmFsKC8kLywg
        J3MnKTsKICBpbmZsZWN0b3Iuc2luZ3VsYXIoL3MkL2ksICcnKTsKICBgYGAK
        CiAgQ3JlYXRpbmcgYW4gaW5mbGVjdG9yIHdpdGggYSBub25kZWZhdWx0IHJ1
        bGVzZXQuCgogIGBgYGphdmFzY3JpcHQKICB2YXIgcnVsZXMgPSB7CiAgICBw
        bHVyYWxzOiAgWyAvJC8sICdzJyBdLAogICAgc2luZ3VsYXI6IFsgL1xzJC8s
        ICcnIF0sCiAgICBpcnJlZ3VsYXJQYWlyczogWwogICAgICBbICdjb3cnLCAn
        a2luZScgXQogICAgXSwKICAgIHVuY291bnRhYmxlOiBbICdmaXNoJyBdCiAg
        fTsKCiAgdmFyIGluZmxlY3RvciA9IG5ldyBFbWJlci5JbmZsZWN0b3IocnVs
        ZXMpOwogIGBgYAoKICBAY2xhc3MgSW5mbGVjdG9yCiAgQG5hbWVzcGFjZSBF
        bWJlcgoqLwpmdW5jdGlvbiBJbmZsZWN0b3IocnVsZVNldCkgewogIHJ1bGVT
        ZXQgPSBydWxlU2V0IHx8IHt9OwogIHJ1bGVTZXQudW5jb3VudGFibGUgPSBy
        dWxlU2V0LnVuY291bnRhYmxlIHx8IHt9OwogIHJ1bGVTZXQuaXJyZWd1bGFy
        UGFpcnM9IHJ1bGVTZXQuaXJyZWd1bGFyUGFpcnN8fCB7fTsKCiAgdmFyIHJ1
        bGVzID0gdGhpcy5ydWxlcyA9IHsKICAgIHBsdXJhbHM6ICBydWxlU2V0LnBs
        dXJhbHMgfHwgW10sCiAgICBzaW5ndWxhcjogcnVsZVNldC5zaW5ndWxhciB8
        fCBbXSwKICAgIGlycmVndWxhcjoge30sCiAgICBpcnJlZ3VsYXJJbnZlcnNl
        OiB7fSwKICAgIHVuY291bnRhYmxlOiB7fQogIH07CgogIGxvYWRVbmNvdW50
        YWJsZShydWxlcywgcnVsZVNldC51bmNvdW50YWJsZSk7CiAgbG9hZElycmVn
        dWxhcihydWxlcywgcnVsZVNldC5pcnJlZ3VsYXJQYWlycyk7Cn0KCkluZmxl
        Y3Rvci5wcm90b3R5cGUgPSB7CiAgLyoqCiAgICBAbWV0aG9kIHBsdXJhbAog
        ICAgQHBhcmFtIHtSZWdFeHB9IHJlZ2V4CiAgICBAcGFyYW0ge1N0cmluZ30g
        c3RyaW5nCiAgKi8KICBwbHVyYWw6IGZ1bmN0aW9uKHJlZ2V4LCBzdHJpbmcp
        IHsKICAgIHRoaXMucnVsZXMucGx1cmFscy5wdXNoKFtyZWdleCwgc3RyaW5n
        XSk7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIHNpbmd1bGFyCiAgICBAcGFy
        YW0ge1JlZ0V4cH0gcmVnZXgKICAgIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcK
        ICAqLwogIHNpbmd1bGFyOiBmdW5jdGlvbihyZWdleCwgc3RyaW5nKSB7CiAg
        ICB0aGlzLnJ1bGVzLnNpbmd1bGFyLnB1c2goW3JlZ2V4LCBzdHJpbmddKTsK
        ICB9LAoKICAvKioKICAgIEBtZXRob2QgdW5jb3VudGFibGUKICAgIEBwYXJh
        bSB7U3RyaW5nfSByZWdleAogICovCiAgdW5jb3VudGFibGU6IGZ1bmN0aW9u
        KHN0cmluZykgewogICAgbG9hZFVuY291bnRhYmxlKHRoaXMucnVsZXMsIFtz
        dHJpbmddKTsKICB9LAoKICAvKioKICAgIEBtZXRob2QgaXJyZWd1bGFyCiAg
        ICBAcGFyYW0ge1N0cmluZ30gc2luZ3VsYXIKICAgIEBwYXJhbSB7U3RyaW5n
        fSBwbHVyYWwKICAqLwogIGlycmVndWxhcjogZnVuY3Rpb24gKHNpbmd1bGFy
        LCBwbHVyYWwpIHsKICAgIGxvYWRJcnJlZ3VsYXIodGhpcy5ydWxlcywgW1tz
        aW5ndWxhciwgcGx1cmFsXV0pOwogIH0sCgogIC8qKgogICAgQG1ldGhvZCBw
        bHVyYWxpemUKICAgIEBwYXJhbSB7U3RyaW5nfSB3b3JkCiAgKi8KICBwbHVy
        YWxpemU6IGZ1bmN0aW9uKHdvcmQpIHsKICAgIHJldHVybiB0aGlzLmluZmxl
        Y3Qod29yZCwgdGhpcy5ydWxlcy5wbHVyYWxzLCB0aGlzLnJ1bGVzLmlycmVn
        dWxhcik7CiAgfSwKCiAgLyoqCiAgICBAbWV0aG9kIHNpbmd1bGFyaXplCiAg
        ICBAcGFyYW0ge1N0cmluZ30gd29yZAogICovCiAgc2luZ3VsYXJpemU6IGZ1
        bmN0aW9uKHdvcmQpIHsKICAgIHJldHVybiB0aGlzLmluZmxlY3Qod29yZCwg
        dGhpcy5ydWxlcy5zaW5ndWxhciwgIHRoaXMucnVsZXMuaXJyZWd1bGFySW52
        ZXJzZSk7CiAgfSwKCiAgLyoqCiAgICBAcHJvdGVjdGVkCgogICAgQG1ldGhv
        ZCBpbmZsZWN0CiAgICBAcGFyYW0ge1N0cmluZ30gd29yZAogICAgQHBhcmFt
        IHtPYmplY3R9IHR5cGVSdWxlcwogICAgQHBhcmFtIHtPYmplY3R9IGlycmVn
        dWxhcgogICovCiAgaW5mbGVjdDogZnVuY3Rpb24od29yZCwgdHlwZVJ1bGVz
        LCBpcnJlZ3VsYXIpIHsKICAgIHZhciBpbmZsZWN0aW9uLCBzdWJzdGl0dXRp
        b24sIHJlc3VsdCwgbG93ZXJjYXNlLCBpc0JsYW5rLAogICAgaXNVbmNvdW50
        YWJsZSwgaXNJcnJlZ3VsYXIsIGlzSXJyZWd1bGFySW52ZXJzZSwgcnVsZTsK
        CiAgICBpc0JsYW5rID0gQkxBTktfUkVHRVgudGVzdCh3b3JkKTsKCiAgICBp
        ZiAoaXNCbGFuaykgewogICAgICByZXR1cm4gd29yZDsKICAgIH0KCiAgICBs
        b3dlcmNhc2UgPSB3b3JkLnRvTG93ZXJDYXNlKCk7CgogICAgaXNVbmNvdW50
        YWJsZSA9IHRoaXMucnVsZXMudW5jb3VudGFibGVbbG93ZXJjYXNlXTsKCiAg
        ICBpZiAoaXNVbmNvdW50YWJsZSkgewogICAgICByZXR1cm4gd29yZDsKICAg
        IH0KCiAgICBpc0lycmVndWxhciA9IGlycmVndWxhciAmJiBpcnJlZ3VsYXJb
        bG93ZXJjYXNlXTsKCiAgICBpZiAoaXNJcnJlZ3VsYXIpIHsKICAgICAgcmV0
        dXJuIGlzSXJyZWd1bGFyOwogICAgfQoKICAgIGZvciAodmFyIGkgPSB0eXBl
        UnVsZXMubGVuZ3RoLCBtaW4gPSAwOyBpID4gbWluOyBpLS0pIHsKICAgICAg
        IGluZmxlY3Rpb24gPSB0eXBlUnVsZXNbaS0xXTsKICAgICAgIHJ1bGUgPSBp
        bmZsZWN0aW9uWzBdOwoKICAgICAgaWYgKHJ1bGUudGVzdCh3b3JkKSkgewog
        ICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CgogICAgaW5mbGVjdGlvbiA9
        IGluZmxlY3Rpb24gfHwgW107CgogICAgcnVsZSA9IGluZmxlY3Rpb25bMF07
        CiAgICBzdWJzdGl0dXRpb24gPSBpbmZsZWN0aW9uWzFdOwoKICAgIHJlc3Vs
        dCA9IHdvcmQucmVwbGFjZShydWxlLCBzdWJzdGl0dXRpb24pOwoKICAgIHJl
        dHVybiByZXN1bHQ7CiAgfQp9OwoKRW1iZXIuSW5mbGVjdG9yID0gSW5mbGVj
        dG9yOwoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewpFbWJlci5JbmZsZWN0b3Iu
        ZGVmYXVsdFJ1bGVzID0gewogIHBsdXJhbHM6IFsKICAgIFsvJC8sICdzJ10s
        CiAgICBbL3MkL2ksICdzJ10sCiAgICBbL14oYXh8dGVzdClpcyQvaSwgJyQx
        ZXMnXSwKICAgIFsvKG9jdG9wfHZpcil1cyQvaSwgJyQxaSddLAogICAgWy8o
        b2N0b3B8dmlyKWkkL2ksICckMWknXSwKICAgIFsvKGFsaWFzfHN0YXR1cykk
        L2ksICckMWVzJ10sCiAgICBbLyhidSlzJC9pLCAnJDFzZXMnXSwKICAgIFsv
        KGJ1ZmZhbHx0b21hdClvJC9pLCAnJDFvZXMnXSwKICAgIFsvKFt0aV0pdW0k
        L2ksICckMWEnXSwKICAgIFsvKFt0aV0pYSQvaSwgJyQxYSddLAogICAgWy9z
        aXMkL2ksICdzZXMnXSwKICAgIFsvKD86KFteZl0pZmV8KFtscl0pZikkL2ks
        ICckMSQydmVzJ10sCiAgICBbLyhoaXZlKSQvaSwgJyQxcyddLAogICAgWy8o
        W15hZWlvdXldfHF1KXkkL2ksICckMWllcyddLAogICAgWy8oeHxjaHxzc3xz
        aCkkL2ksICckMWVzJ10sCiAgICBbLyhtYXRyfHZlcnR8aW5kKSg/Oml4fGV4
        KSQvaSwgJyQxaWNlcyddLAogICAgWy9eKG18bClvdXNlJC9pLCAnJDFpY2Un
        XSwKICAgIFsvXihtfGwpaWNlJC9pLCAnJDFpY2UnXSwKICAgIFsvXihveCkk
        L2ksICckMWVuJ10sCiAgICBbL14ob3hlbikkL2ksICckMSddLAogICAgWy8o
        cXVpeikkL2ksICckMXplcyddCiAgXSwKCiAgc2luZ3VsYXI6IFsKICAgIFsv
        cyQvaSwgJyddLAogICAgWy8oc3MpJC9pLCAnJDEnXSwKICAgIFsvKG4pZXdz
        JC9pLCAnJDFld3MnXSwKICAgIFsvKFt0aV0pYSQvaSwgJyQxdW0nXSwKICAg
        IFsvKChhKW5hbHl8KGIpYXwoZClpYWdub3wocClhcmVudGhlfChwKXJvZ25v
        fChzKXlub3B8KHQpaGUpKHNpc3xzZXMpJC9pLCAnJDFzaXMnXSwKICAgIFsv
        KF5hbmFseSkoc2lzfHNlcykkL2ksICckMXNpcyddLAogICAgWy8oW15mXSl2
        ZXMkL2ksICckMWZlJ10sCiAgICBbLyhoaXZlKXMkL2ksICckMSddLAogICAg
        Wy8odGl2ZSlzJC9pLCAnJDEnXSwKICAgIFsvKFtscl0pdmVzJC9pLCAnJDFm
        J10sCiAgICBbLyhbXmFlaW91eV18cXUpaWVzJC9pLCAnJDF5J10sCiAgICBb
        LyhzKWVyaWVzJC9pLCAnJDFlcmllcyddLAogICAgWy8obSlvdmllcyQvaSwg
        JyQxb3ZpZSddLAogICAgWy8oeHxjaHxzc3xzaCllcyQvaSwgJyQxJ10sCiAg
        ICBbL14obXxsKWljZSQvaSwgJyQxb3VzZSddLAogICAgWy8oYnVzKShlcyk/
        JC9pLCAnJDEnXSwKICAgIFsvKG8pZXMkL2ksICckMSddLAogICAgWy8oc2hv
        ZSlzJC9pLCAnJDEnXSwKICAgIFsvKGNyaXN8dGVzdCkoaXN8ZXMpJC9pLCAn
        JDFpcyddLAogICAgWy9eKGEpeFtpZV1zJC9pLCAnJDF4aXMnXSwKICAgIFsv
        KG9jdG9wfHZpcikodXN8aSkkL2ksICckMXVzJ10sCiAgICBbLyhhbGlhc3xz
        dGF0dXMpKGVzKT8kL2ksICckMSddLAogICAgWy9eKG94KWVuL2ksICckMSdd
        LAogICAgWy8odmVydHxpbmQpaWNlcyQvaSwgJyQxZXgnXSwKICAgIFsvKG1h
        dHIpaWNlcyQvaSwgJyQxaXgnXSwKICAgIFsvKHF1aXopemVzJC9pLCAnJDEn
        XSwKICAgIFsvKGRhdGFiYXNlKXMkL2ksICckMSddCiAgXSwKCiAgaXJyZWd1
        bGFyUGFpcnM6IFsKICAgIFsncGVyc29uJywgJ3Blb3BsZSddLAogICAgWydt
        YW4nLCAnbWVuJ10sCiAgICBbJ2NoaWxkJywgJ2NoaWxkcmVuJ10sCiAgICBb
        J3NleCcsICdzZXhlcyddLAogICAgWydtb3ZlJywgJ21vdmVzJ10sCiAgICBb
        J2NvdycsICdraW5lJ10sCiAgICBbJ3pvbWJpZScsICd6b21iaWVzJ10KICBd
        LAoKICB1bmNvdW50YWJsZTogWwogICAgJ2VxdWlwbWVudCcsCiAgICAnaW5m
        b3JtYXRpb24nLAogICAgJ3JpY2UnLAogICAgJ21vbmV5JywKICAgICdzcGVj
        aWVzJywKICAgICdzZXJpZXMnLAogICAgJ2Zpc2gnLAogICAgJ3NoZWVwJywK
        ICAgICdqZWFucycsCiAgICAncG9saWNlJwogIF0KfTsKCn0pKCk7CgoKCihm
        dW5jdGlvbigpIHsKaWYgKEVtYmVyLkVYVEVORF9QUk9UT1RZUEVTID09PSB0
        cnVlIHx8IEVtYmVyLkVYVEVORF9QUk9UT1RZUEVTLlN0cmluZykgew0KICAv
        KioNCiAgICBTZWUge3sjY3Jvc3NMaW5rICJFbWJlci5TdHJpbmcvcGx1cmFs
        aXplIn19e3svY3Jvc3NMaW5rfX0NCg0KICAgIEBtZXRob2QgcGx1cmFsaXpl
        DQogICAgQGZvciBTdHJpbmcNCiAgKi8NCiAgU3RyaW5nLnByb3RvdHlwZS5w
        bHVyYWxpemUgPSBmdW5jdGlvbigpIHsNCiAgICByZXR1cm4gRW1iZXIuU3Ry
        aW5nLnBsdXJhbGl6ZSh0aGlzKTsNCiAgfTsNCg0KICAvKioNCiAgICBTZWUg
        e3sjY3Jvc3NMaW5rICJFbWJlci5TdHJpbmcvc2luZ3VsYXJpemUifX17ey9j
        cm9zc0xpbmt9fQ0KDQogICAgQG1ldGhvZCBzaW5ndWxhcml6ZQ0KICAgIEBm
        b3IgU3RyaW5nDQogICovDQogIFN0cmluZy5wcm90b3R5cGUuc2luZ3VsYXJp
        emUgPSBmdW5jdGlvbigpIHsNCiAgICByZXR1cm4gRW1iZXIuU3RyaW5nLnNp
        bmd1bGFyaXplKHRoaXMpOw0KICB9Ow0KfQ0KCn0pKCk7CgoKCihmdW5jdGlv
        bigpIHsKRW1iZXIuSW5mbGVjdG9yLmluZmxlY3RvciA9IG5ldyBFbWJlci5J
        bmZsZWN0b3IoRW1iZXIuSW5mbGVjdG9yLmRlZmF1bHRSdWxlcyk7DQoKfSko
        KTsKCgoKKGZ1bmN0aW9uKCkgewoKfSkoKTsKCihmdW5jdGlvbigpIHsKLyoq
        CiAgQG1vZHVsZSBlbWJlci1kYXRhCiovCgp2YXIgZ2V0ID0gRW1iZXIuZ2V0
        Owp2YXIgZm9yRWFjaCA9IEVtYmVyLkVudW1lcmFibGVVdGlscy5mb3JFYWNo
        OwoKRFMuQWN0aXZlTW9kZWxTZXJpYWxpemVyID0gRFMuUkVTVFNlcmlhbGl6
        ZXIuZXh0ZW5kKHsKICAvLyBTRVJJQUxJWkUKCiAgLyoqCiAgICBDb252ZXJ0
        cyBjYW1lbGNhc2VkIGF0dHJpYnV0ZXMgdG8gdW5kZXJzY29yZWQgd2hlbiBz
        ZXJpYWxpemluZy4KCiAgICBAbWV0aG9kIGtleUZvckF0dHJpYnV0ZQogICAg
        QHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZQogICAgQHJldHVybnMgU3RyaW5n
        CiAgKi8KICBrZXlGb3JBdHRyaWJ1dGU6IGZ1bmN0aW9uKGF0dHIpIHsKICAg
        IHJldHVybiBFbWJlci5TdHJpbmcuZGVjYW1lbGl6ZShhdHRyKTsKICB9LAoK
        ICAvKioKICAgIFVuZGVyc2NvcmVzIHJlbGF0aW9uc2hpcCBuYW1lcyBhbmQg
        YXBwZW5kcyAiX2lkIiBvciAiX2lkcyIgd2hlbiBzZXJpYWxpemluZwogICAg
        cmVsYXRpb25zaGlwIGtleXMuCgogICAgQG1ldGhvZCBrZXlGb3JSZWxhdGlv
        bnNoaXAKICAgIEBwYXJhbSB7U3RyaW5nfSBrZXkKICAgIEBwYXJhbSB7U3Ry
        aW5nfSBraW5kCiAgICBAcmV0dXJucyBTdHJpbmcKICAqLwogIGtleUZvclJl
        bGF0aW9uc2hpcDogZnVuY3Rpb24oa2V5LCBraW5kKSB7CiAgICBrZXkgPSBF
        bWJlci5TdHJpbmcuZGVjYW1lbGl6ZShrZXkpOwogICAgaWYgKGtpbmQgPT09
        ICJiZWxvbmdzVG8iKSB7CiAgICAgIHJldHVybiBrZXkgKyAiX2lkIjsKICAg
        IH0gZWxzZSBpZiAoa2luZCA9PT0gImhhc01hbnkiKSB7CiAgICAgIHJldHVy
        biBFbWJlci5TdHJpbmcuc2luZ3VsYXJpemUoa2V5KSArICJfaWRzIjsKICAg
        IH0gZWxzZSB7CiAgICAgIHJldHVybiBrZXk7CiAgICB9CiAgfSwKCiAgLyoq
        CiAgICBTZXJpYWxpemUgaGFzLW1heSByZWxhdGlvbnNoaXAgd2hlbiBpdCBp
        cyBjb25maWd1cmVkIGFzIGVtYmVkZGVkIG9iamVjdHMuCgogICAgQG1ldGhv
        ZCBzZXJpYWxpemVIYXNNYW55CiAgKi8KICBzZXJpYWxpemVIYXNNYW55OiBm
        dW5jdGlvbihyZWNvcmQsIGpzb24sIHJlbGF0aW9uc2hpcCkgewogICAgdmFy
        IGtleSAgID0gcmVsYXRpb25zaGlwLmtleSwKICAgICAgICBhdHRycyA9IGdl
        dCh0aGlzLCAnYXR0cnMnKSwKICAgICAgICBlbWJlZCA9IGF0dHJzICYmIGF0
        dHJzW2tleV0gJiYgYXR0cnNba2V5XS5lbWJlZGRlZCA9PT0gJ2Fsd2F5cyc7
        CgogICAgaWYgKGVtYmVkKSB7CiAgICAgIGpzb25bdGhpcy5rZXlGb3JBdHRy
        aWJ1dGUoa2V5KV0gPSBnZXQocmVjb3JkLCBrZXkpLm1hcChmdW5jdGlvbihy
        ZWxhdGlvbikgewogICAgICAgIHZhciBkYXRhID0gcmVsYXRpb24uc2VyaWFs
        aXplKCksCiAgICAgICAgICAgIHByaW1hcnlLZXkgPSBnZXQodGhpcywgJ3By
        aW1hcnlLZXknKTsKCiAgICAgICAgZGF0YVtwcmltYXJ5S2V5XSA9IGdldChy
        ZWxhdGlvbiwgcHJpbWFyeUtleSk7CgogICAgICAgIHJldHVybiBkYXRhOwog
        ICAgICB9LCB0aGlzKTsKICAgIH0KICB9LAoKICAvKioKICAgIFVuZGVyc2Nv
        cmVzIHRoZSBKU09OIHJvb3Qga2V5cyB3aGVuIHNlcmlhbGl6aW5nLgoKICAg
        IEBtZXRob2Qgc2VyaWFsaXplSW50b0hhc2gKICAgIEBwYXJhbSB7T2JqZWN0
        fSBoYXNoCiAgICBAcGFyYW0ge3N1YmNsYXNzIG9mIERTLk1vZGVsfSB0eXBl
        CiAgICBAcGFyYW0ge0RTLk1vZGVsfSByZWNvcmQKICAgIEBwYXJhbSB7T2Jq
        ZWN0fSBvcHRpb25zCiAgKi8KICBzZXJpYWxpemVJbnRvSGFzaDogZnVuY3Rp
        b24oZGF0YSwgdHlwZSwgcmVjb3JkLCBvcHRpb25zKSB7CiAgICB2YXIgcm9v
        dCA9IEVtYmVyLlN0cmluZy5kZWNhbWVsaXplKHR5cGUudHlwZUtleSk7CiAg
        ICBkYXRhW3Jvb3RdID0gdGhpcy5zZXJpYWxpemUocmVjb3JkLCBvcHRpb25z
        KTsKICB9LAoKICAvKioKICAgIFNlcmlhbGl6ZXMgYSBwb2x5bW9ycGhpYyB0
        eXBlIGFzIGEgZnVsbHkgY2FwaXRhbGl6ZWQgbW9kZWwgbmFtZS4KCiAgICBA
        bWV0aG9kIHNlcmlhbGl6ZVBvbHltb3JwaGljVHlwZQogICAgQHBhcmFtIHtE
        Uy5Nb2RlbH0gcmVjb3JkCiAgICBAcGFyYW0ge09iamVjdH0ganNvbgogICAg
        QHBhcmFtIHJlbGF0aW9uc2hpcAogICovCiAgc2VyaWFsaXplUG9seW1vcnBo
        aWNUeXBlOiBmdW5jdGlvbihyZWNvcmQsIGpzb24sIHJlbGF0aW9uc2hpcCkg
        ewogICAgdmFyIGtleSA9IHJlbGF0aW9uc2hpcC5rZXksCiAgICAgICAgYmVs
        b25nc1RvID0gZ2V0KHJlY29yZCwga2V5KTsKICAgIGtleSA9IHRoaXMua2V5
        Rm9yQXR0cmlidXRlKGtleSk7CiAgICBqc29uW2tleSArICJfdHlwZSJdID0g
        RW1iZXIuU3RyaW5nLmNhcGl0YWxpemUoYmVsb25nc1RvLmNvbnN0cnVjdG9y
        LnR5cGVLZXkpOwogIH0sCgogIC8vIEVYVFJBQ1QKCiAgLyoqCiAgICBFeHRy
        YWN0cyB0aGUgbW9kZWwgdHlwZUtleSBmcm9tIHVuZGVyc2NvcmVkIHJvb3Qg
        b2JqZWN0cy4KCiAgICBAbWV0aG9kIHR5cGVGb3JSb290CiAgICBAcGFyYW0g
        e1N0cmluZ30gcm9vdAogICAgQHJldHVybnMgU3RyaW5nIHRoZSBtb2RlbCdz
        IHR5cGVLZXkKICAqLwogIHR5cGVGb3JSb290OiBmdW5jdGlvbihyb290KSB7
        CiAgICB2YXIgY2FtZWxpemVkID0gRW1iZXIuU3RyaW5nLmNhbWVsaXplKHJv
        b3QpOwogICAgcmV0dXJuIEVtYmVyLlN0cmluZy5zaW5ndWxhcml6ZShjYW1l
        bGl6ZWQpOwogIH0sCgogIC8qKgogICAgTm9ybWFsaXplIHRoZSBwb2x5bW9y
        cGhpYyB0eXBlIGZyb20gdGhlIEpTT04uCgogICAgTm9ybWFsaXplOgogICAg
        YGBganMKICAgICAgewogICAgICAgIGlkOiAiMSIKICAgICAgICBtaW5pb246
        IHsgdHlwZTogImV2aWxfbWluaW9uIiwgaWQ6ICIxMiJ9CiAgICAgIH0KICAg
        IGBgYAoKICAgIFRvOgogICAgYGBganMKICAgICAgewogICAgICAgIGlkOiAi
        MSIKICAgICAgICBtaW5pb246IHsgdHlwZTogImV2aWxNaW5pb24iLCBpZDog
        IjEyIn0KICAgICAgfQogICAgYGBgCgogICAgQG1ldGhvZCBub3JtYWxpemVS
        ZWxhdGlvbnNoaXBzCiAgICBAcHJpdmF0ZQogICovCiAgbm9ybWFsaXplUmVs
        YXRpb25zaGlwczogZnVuY3Rpb24odHlwZSwgaGFzaCkgewogICAgdmFyIHBh
        eWxvYWRLZXksIHBheWxvYWQ7CgogICAgaWYgKHRoaXMua2V5Rm9yUmVsYXRp
        b25zaGlwKSB7CiAgICAgIHR5cGUuZWFjaFJlbGF0aW9uc2hpcChmdW5jdGlv
        bihrZXksIHJlbGF0aW9uc2hpcCkgewogICAgICAgIGlmIChyZWxhdGlvbnNo
        aXAub3B0aW9ucy5wb2x5bW9ycGhpYykgewogICAgICAgICAgcGF5bG9hZEtl
        eSA9IHRoaXMua2V5Rm9yQXR0cmlidXRlKGtleSk7CiAgICAgICAgICBwYXls
        b2FkID0gaGFzaFtwYXlsb2FkS2V5XTsKICAgICAgICAgIGlmIChwYXlsb2Fk
        ICYmIHBheWxvYWQudHlwZSkgewogICAgICAgICAgICBwYXlsb2FkLnR5cGUg
        PSB0aGlzLnR5cGVGb3JSb290KHBheWxvYWQudHlwZSk7CiAgICAgICAgICB9
        CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHBheWxvYWRLZXkgPSB0aGlz
        LmtleUZvclJlbGF0aW9uc2hpcChrZXksIHJlbGF0aW9uc2hpcC5raW5kKTsK
        ICAgICAgICAgIHBheWxvYWQgPSBoYXNoW3BheWxvYWRLZXldOwogICAgICAg
        IH0KCiAgICAgICAgaGFzaFtrZXldID0gcGF5bG9hZDsKCiAgICAgICAgaWYg
        KGtleSAhPT0gcGF5bG9hZEtleSkgewogICAgICAgICAgZGVsZXRlIGhhc2hb
        cGF5bG9hZEtleV07CiAgICAgICAgfQogICAgICB9LCB0aGlzKTsKICAgIH0K
        ICB9LAoKICBleHRyYWN0U2luZ2xlOiBmdW5jdGlvbihzdG9yZSwgcHJpbWFy
        eVR5cGUsIHBheWxvYWQsIHJlY29yZElkLCByZXF1ZXN0VHlwZSkgewogICAg
        dmFyIHJvb3QgPSB0aGlzLmtleUZvckF0dHJpYnV0ZShwcmltYXJ5VHlwZS50
        eXBlS2V5KSwKICAgICAgICBwYXJ0aWFsID0gcGF5bG9hZFtyb290XTsKCiAg
        ICB1cGRhdGVQYXlsb2FkV2l0aEVtYmVkZGVkKHN0b3JlLCB0aGlzLCBwcmlt
        YXJ5VHlwZSwgcGFydGlhbCwgcGF5bG9hZCk7CgogICAgcmV0dXJuIHRoaXMu
        X3N1cGVyKHN0b3JlLCBwcmltYXJ5VHlwZSwgcGF5bG9hZCwgcmVjb3JkSWQs
        IHJlcXVlc3RUeXBlKTsKICB9LAoKICBleHRyYWN0QXJyYXk6IGZ1bmN0aW9u
        KHN0b3JlLCB0eXBlLCBwYXlsb2FkKSB7CiAgICB2YXIgcm9vdCA9IHRoaXMu
        a2V5Rm9yQXR0cmlidXRlKHR5cGUudHlwZUtleSksCiAgICAgICAgcGFydGlh
        bHMgPSBwYXlsb2FkW0VtYmVyLlN0cmluZy5wbHVyYWxpemUocm9vdCldOwoK
        ICAgIGZvckVhY2gocGFydGlhbHMsIGZ1bmN0aW9uKHBhcnRpYWwpIHsKICAg
        ICAgdXBkYXRlUGF5bG9hZFdpdGhFbWJlZGRlZChzdG9yZSwgdGhpcywgdHlw
        ZSwgcGFydGlhbCwgcGF5bG9hZCk7CiAgICB9LCB0aGlzKTsKCiAgICByZXR1
        cm4gdGhpcy5fc3VwZXIoc3RvcmUsIHR5cGUsIHBheWxvYWQpOwogIH0KfSk7
        CgpmdW5jdGlvbiB1cGRhdGVQYXlsb2FkV2l0aEVtYmVkZGVkKHN0b3JlLCBz
        ZXJpYWxpemVyLCB0eXBlLCBwYXJ0aWFsLCBwYXlsb2FkKSB7CiAgdmFyIGF0
        dHJzID0gZ2V0KHNlcmlhbGl6ZXIsICdhdHRycycpOwoKICBpZiAoIWF0dHJz
        KSB7CiAgICByZXR1cm47CiAgfQoKICB0eXBlLmVhY2hSZWxhdGlvbnNoaXAo
        ZnVuY3Rpb24oa2V5LCByZWxhdGlvbnNoaXApIHsKICAgIHZhciBleHBhbmRl
        ZEtleSwgZW1iZWRkZWRUeXBlS2V5LCBhdHRyaWJ1dGUsIGlkcywKICAgICAg
        ICBjb25maWcgPSBhdHRyc1trZXldLAogICAgICAgIHNlcmlhbGl6ZXIgPSBz
        dG9yZS5zZXJpYWxpemVyRm9yKHJlbGF0aW9uc2hpcC50eXBlLnR5cGVLZXkp
        LAogICAgICAgIHByaW1hcnlLZXkgPSBnZXQoc2VyaWFsaXplciwgInByaW1h
        cnlLZXkiKTsKCiAgICBpZiAocmVsYXRpb25zaGlwLmtpbmQgIT09ICJoYXNN
        YW55IikgewogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKGNvbmZpZyAm
        JiAoY29uZmlnLmVtYmVkZGVkID09PSAnYWx3YXlzJyB8fCBjb25maWcuZW1i
        ZWRkZWQgPT09ICdsb2FkJykpIHsKICAgICAgLy8gdW5kZXJzY29yZSBmb3Jj
        ZXMgdGhlIGVtYmVkZGVkIHJlY29yZHMgdG8gYmUgc2lkZSBsb2FkZWQuCiAg
        ICAgIC8vIGl0IGlzIG5lZWRlZCB3aGVuIG1haW4gdHlwZSA9PT0gcmVsYXRp
        b25zaGlwLnR5cGUKICAgICAgZW1iZWRkZWRUeXBlS2V5ID0gJ18nICsgRW1i
        ZXIuU3RyaW5nLnBsdXJhbGl6ZShyZWxhdGlvbnNoaXAudHlwZS50eXBlS2V5
        KTsKICAgICAgZXhwYW5kZWRLZXkgPSB0aGlzLmtleUZvclJlbGF0aW9uc2hp
        cChrZXksIHJlbGF0aW9uc2hpcC5raW5kKTsKICAgICAgYXR0cmlidXRlICA9
        IHRoaXMua2V5Rm9yQXR0cmlidXRlKGtleSk7CiAgICAgIGlkcyA9IFtdOwoK
        ICAgICAgaWYgKCFwYXJ0aWFsW2F0dHJpYnV0ZV0pIHsKICAgICAgICByZXR1
        cm47CiAgICAgIH0KCiAgICAgIHBheWxvYWRbZW1iZWRkZWRUeXBlS2V5XSA9
        IHBheWxvYWRbZW1iZWRkZWRUeXBlS2V5XSB8fCBbXTsKCiAgICAgIGZvckVh
        Y2gocGFydGlhbFthdHRyaWJ1dGVdLCBmdW5jdGlvbihkYXRhKSB7CiAgICAg
        ICAgaWRzLnB1c2goZGF0YVtwcmltYXJ5S2V5XSk7CiAgICAgICAgcGF5bG9h
        ZFtlbWJlZGRlZFR5cGVLZXldLnB1c2goZGF0YSk7CiAgICAgIH0pOwoKICAg
        ICAgcGFydGlhbFtleHBhbmRlZEtleV0gPSBpZHM7CiAgICAgIGRlbGV0ZSBw
        YXJ0aWFsW2F0dHJpYnV0ZV07CiAgICB9CiAgfSwgc2VyaWFsaXplcik7Cn0K
        Cn0pKCk7CgoKCihmdW5jdGlvbigpIHsKLyoqCiAgQG1vZHVsZSBlbWJlci1k
        YXRhCiovCgp2YXIgZm9yRWFjaCA9IEVtYmVyLkVudW1lcmFibGVVdGlscy5m
        b3JFYWNoOwoKLyoqCiAgVGhlIEFjdGl2ZU1vZGVsQWRhcHRlciBpcyBhIHN1
        YmNsYXNzIG9mIHRoZSBSRVNUQWRhcHRlciBkZXNpZ25lZCB0byBpbnRlZ3Jh
        dGUKICB3aXRoIGEgSlNPTiBBUEkgdGhhdCB1c2VzIGFuIHVuZGVyc2NvcmVk
        IG5hbWluZyBjb252ZW50aW9uIGluc3RlYWQgb2YgY2FtZWxjYXNpbmcuCiAg
        SXQgaGFzIGJlZW4gZGVzaWduZWQgdG8gd29yayBvdXQgb2YgdGhlIGJveCB3
        aXRoIHRoZQogIFthY3RpdmVfbW9kZWxfc2VyaWFsaXplcnNdKGh0dHA6Ly9n
        aXRodWIuY29tL3JhaWxzLWFwaS9hY3RpdmVfbW9kZWxfc2VyaWFsaXplcnMp
        CiAgUnVieSBnZW0uCgogICMjIEpTT04gU3RydWN0dXJlCgogIFRoZSBBY3Rp
        dmVNb2RlbEFkYXB0ZXIgZXhwZWN0cyB0aGUgSlNPTiByZXR1cm5lZCBmcm9t
        IHlvdXIgc2VydmVyIHRvIGZvbGxvdwogIHRoZSBSRVNUIGFkYXB0ZXIgY29u
        dmVudGlvbnMgc3Vic3RpdHV0aW5nIHVuZGVyc2NvcmVkIGtleXMgZm9yIGNh
        bWVsY2FzZWQgb25lcy4KCiAgIyMjIENvbnZlbnRpb25hbCBOYW1lcwoKICBB
        dHRyaWJ1dGUgbmFtZXMgaW4geW91ciBKU09OIHBheWxvYWQgc2hvdWxkIGJl
        IHRoZSB1bmRlcnNjb3JlZCB2ZXJzaW9ucyBvZgogIHRoZSBhdHRyaWJ1dGVz
        IGluIHlvdXIgRW1iZXIuanMgbW9kZWxzLgoKICBGb3IgZXhhbXBsZSwgaWYg
        eW91IGhhdmUgYSBgUGVyc29uYCBtb2RlbDoKCiAgYGBganMKICBBcHAuRmFt
        b3VzUGVyc29uID0gRFMuTW9kZWwuZXh0ZW5kKHsKICAgIGZpcnN0TmFtZTog
        RFMuYXR0cignc3RyaW5nJyksCiAgICBsYXN0TmFtZTogRFMuYXR0cignc3Ry
        aW5nJyksCiAgICBvY2N1cGF0aW9uOiBEUy5hdHRyKCdzdHJpbmcnKQogIH0p
        OwogIGBgYAoKICBUaGUgSlNPTiByZXR1cm5lZCBzaG91bGQgbG9vayBsaWtl
        IHRoaXM6CgogIGBgYGpzCiAgewogICAgImZhbW91c19wZXJzb24iOiB7CiAg
        ICAgICJmaXJzdF9uYW1lIjogIkJhcmFjayIsCiAgICAgICJsYXN0X25hbWUi
        OiAiT2JhbWEiLAogICAgICAib2NjdXBhdGlvbiI6ICJQcmVzaWRlbnQiCiAg
        ICB9CiAgfQogIGBgYAoKICBAY2xhc3MgQWN0aXZlTW9kZWxBZGFwdGVyCiAg
        QGNvbnN0cnVjdG9yCiAgQG5hbWVzcGFjZSBEUwogIEBleHRlbmRzIERTLkFk
        YXB0ZXIKKiovCgpEUy5BY3RpdmVNb2RlbEFkYXB0ZXIgPSBEUy5SRVNUQWRh
        cHRlci5leHRlbmQoewogIGRlZmF1bHRTZXJpYWxpemVyOiAnX2FtcycsCiAg
        LyoqCiAgICBUaGUgQWN0aXZlTW9kZWxBZGFwdGVyIG92ZXJyaWRlcyB0aGUg
        YHBhdGhGb3JUeXBlYCBtZXRob2QKICAgIHRvIGJ1aWxkIHVuZGVyc2NvcmVk
        IFVSTHMuCgogICAgYGBganMKICAgICAgdGhpcy5wYXRoRm9yVHlwZSgiZmFt
        b3VzUGVyc29uIik7CiAgICAgIC8vPT4gImZhbW91c19wZW9wbGUiCiAgICBg
        YGAKCiAgICBAbWV0aG9kIHBhdGhGb3JUeXBlCiAgICBAcGFyYW0ge1N0cmlu
        Z30gdHlwZQogICAgQHJldHVybnMgU3RyaW5nCiAgKi8KICBwYXRoRm9yVHlw
        ZTogZnVuY3Rpb24odHlwZSkgewogICAgdmFyIGRlY2FtZWxpemVkID0gRW1i
        ZXIuU3RyaW5nLmRlY2FtZWxpemUodHlwZSk7CiAgICByZXR1cm4gRW1iZXIu
        U3RyaW5nLnBsdXJhbGl6ZShkZWNhbWVsaXplZCk7CiAgfSwKCiAgLyoqCiAg
        ICBUaGUgQWN0aXZlTW9kZWxBZGFwdGVyIG92ZXJyaWRlcyB0aGUgYGFqYXhF
        cnJvcmAgbWV0aG9kCiAgICB0byByZXR1cm4gYSBEUy5JbnZhbGlkRXJyb3Ig
        Zm9yIGFsbCA0MjIgVW5wcm9jZXNzYWJsZSBFbnRpdHkKICAgIHJlc3BvbnNl
        cy4KCiAgICBAbWV0aG9kIGFqYXhFcnJvcgogICAgQHBhcmFtIGpxWEhSCiAg
        ICBAcmV0dXJucyBlcnJvcgogICovCiAgYWpheEVycm9yOiBmdW5jdGlvbihq
        cVhIUikgewogICAgdmFyIGVycm9yID0gdGhpcy5fc3VwZXIoanFYSFIpOwoK
        ICAgIGlmIChqcVhIUiAmJiBqcVhIUi5zdGF0dXMgPT09IDQyMikgewogICAg
        ICB2YXIganNvbkVycm9ycyA9IEVtYmVyLiQucGFyc2VKU09OKGpxWEhSLnJl
        c3BvbnNlVGV4dClbImVycm9ycyJdLAogICAgICAgICAgZXJyb3JzID0ge307
        CgogICAgICBmb3JFYWNoKEVtYmVyLmtleXMoanNvbkVycm9ycyksIGZ1bmN0
        aW9uKGtleSkgewogICAgICAgIGVycm9yc1tFbWJlci5TdHJpbmcuY2FtZWxp
        emUoa2V5KV0gPSBqc29uRXJyb3JzW2tleV07CiAgICAgIH0pOwoKICAgICAg
        cmV0dXJuIG5ldyBEUy5JbnZhbGlkRXJyb3IoZXJyb3JzKTsKICAgIH0gZWxz
        ZSB7CiAgICAgIHJldHVybiBlcnJvcjsKICAgIH0KICB9Cn0pOwoKfSkoKTsK
        CgoKKGZ1bmN0aW9uKCkgewoKfSkoKTsKCgoKKGZ1bmN0aW9uKCkgewpFbWJl
        ci5vbkxvYWQoJ0VtYmVyLkFwcGxpY2F0aW9uJywgZnVuY3Rpb24oQXBwbGlj
        YXRpb24pIHsKICBBcHBsaWNhdGlvbi5pbml0aWFsaXplcih7CiAgICBuYW1l
        OiAiYWN0aXZlTW9kZWxBZGFwdGVyIiwKCiAgICBpbml0aWFsaXplOiBmdW5j
        dGlvbihjb250YWluZXIsIGFwcGxpY2F0aW9uKSB7CiAgICAgIGFwcGxpY2F0
        aW9uLnJlZ2lzdGVyKCdzZXJpYWxpemVyOl9hbXMnLCBEUy5BY3RpdmVNb2Rl
        bFNlcmlhbGl6ZXIpOwogICAgICBhcHBsaWNhdGlvbi5yZWdpc3RlcignYWRh
        cHRlcjpfYW1zJywgRFMuQWN0aXZlTW9kZWxBZGFwdGVyKTsKICAgIH0KICB9
        KTsKfSk7Cgp9KSgpOwoKCgooZnVuY3Rpb24oKSB7Cgp9KSgpOwoKCn0pKCk7
        Cg==
    http_version: 
  recorded_at: Wed, 27 Nov 2013 19:23:00 GMT
- request:
    method: get
    uri: http://builds.emberjs.com/beta/ember-data.min.js
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - ! '*/*'
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: !binary |-
        T0s=
    headers:
      !binary "WC1BbXotSWQtMg==":
      - !binary |-
        bXVHdTgxUFIxVExaTTllMHNXQ2FVZEFBQWl6YmdOeTdSUHpjRFhHV0IyWStJ
        WXNocWkxRjkwbUtwSHBicTVWag==
      !binary "WC1BbXotUmVxdWVzdC1JZA==":
      - !binary |-
        NTM4MzgzQjBERTFENjU2NA==
      !binary "RGF0ZQ==":
      - !binary |-
        V2VkLCAyNyBOb3YgMjAxMyAxOToyMzowMSBHTVQ=
      !binary "TGFzdC1Nb2RpZmllZA==":
      - !binary |-
        VGh1LCAxNCBOb3YgMjAxMyAwNDo1NjozNiBHTVQ=
      !binary "RXRhZw==":
      - !binary |-
        IjkyMzIyMmVhNTU4N2FkMTlmNWVkMTViMDJkNmI3ZGM0Ig==
      !binary "Q29udGVudC1UeXBl":
      - !binary |-
        dGV4dC9qYXZhc2NyaXB0
      !binary "Q29udGVudC1MZW5ndGg=":
      - !binary |-
        NjExMDU=
      !binary "U2VydmVy":
      - !binary |-
        QW1hem9uUzM=
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
        PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gUHJvamVjdDog
        ICBFbWJlciBEYXRhCi8vIENvcHlyaWdodDogwqkyMDExLTIwMTIgVGlsZGUg
        SW5jLiBhbmQgY29udHJpYnV0b3JzLgovLyAgICAgICAgICAgIFBvcnRpb25z
        IMKpMjAxMSBMaXZpbmcgU29jaWFsIEluYy4gYW5kIGNvbnRyaWJ1dG9ycy4K
        Ly8gTGljZW5zZTogICBMaWNlbnNlZCB1bmRlciBNSVQgbGljZW5zZSAoc2Vl
        IGxpY2Vuc2UuanMpCi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09
        PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
        CgoKCi8vIFZlcnNpb246IHYxLjAuMC1iZXRhLjMtNC1nMTY5NzkzZQovLyBM
        YXN0IGNvbW1pdDogMTY5NzkzZSAoMjAxMy0xMS0xMyAyMDo1Mzo1NCAtMDgw
        MCkKCgovLyBDb3B5cmlnaHQ6IMKpMjAxMS0yMDEyIFRpbGRlIEluYy4gYW5k
        IGNvbnRyaWJ1dG9ycy4KIWZ1bmN0aW9uKCl7dmFyIGUsdDshZnVuY3Rpb24o
        KXt2YXIgcj17fSxuPXt9O2U9ZnVuY3Rpb24oZSx0LG4pe3JbZV09e2RlcHM6
        dCxjYWxsYmFjazpufX0sdD1mdW5jdGlvbihlKXtpZihuW2VdKXJldHVybiBu
        W2VdO25bZV09e307dmFyIGksYSxvLHMsYztpZihpPXJbZV0sIWkpdGhyb3cg
        bmV3IEVycm9yKCJNb2R1bGUgJyIrZSsiJyBub3QgZm91bmQuIik7YT1pLmRl
        cHMsbz1pLmNhbGxiYWNrLHM9W107Zm9yKHZhciB1PTAsZD1hLmxlbmd0aDtk
        PnU7dSsrKSJleHBvcnRzIj09PWFbdV0/cy5wdXNoKGM9e30pOnMucHVzaCh0
        KGFbdV0pKTt2YXIgbD1vLmFwcGx5KHRoaXMscyk7cmV0dXJuIG5bZV09Y3x8
        bH19KCksZnVuY3Rpb24oKXsidW5kZWZpbmVkIj09dHlwZW9mIERTJiYoRFM9
        RW1iZXIuTmFtZXNwYWNlLmNyZWF0ZSh7VkVSU0lPTjoiMS4wLjAtYmV0YS4z
        In0pLCJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93JiYod2luZG93LkRTPURT
        KSxFbWJlci5saWJyYXJpZXMmJkVtYmVyLmxpYnJhcmllcy5yZWdpc3RlckNv
        cmVMaWJyYXJ5KCJFbWJlciBEYXRhIixEUy5WRVJTSU9OKSl9KCksZnVuY3Rp
        b24oKXtmdW5jdGlvbiBlKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0
        aGlzW2VdLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19dmFyIHQ9RW1iZXIuZ2V0
        LHI9KEVtYmVyLnNldCxFbWJlci5pc05vbmUpO0RTLkpTT05TZXJpYWxpemVy
        PUVtYmVyLk9iamVjdC5leHRlbmQoe3ByaW1hcnlLZXk6ImlkIixhcHBseVRy
        YW5zZm9ybXM6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5lYWNoVHJhbnNmb3Jt
        ZWRBdHRyaWJ1dGUoZnVuY3Rpb24oZSxyKXt2YXIgbj10aGlzLnRyYW5zZm9y
        bUZvcihyKTt0W2VdPW4uZGVzZXJpYWxpemUodFtlXSl9LHRoaXMpLHR9LG5v
        cm1hbGl6ZTpmdW5jdGlvbihlLHQpe3JldHVybiB0Pyh0aGlzLmFwcGx5VHJh
        bnNmb3JtcyhlLHQpLHQpOnR9LHNlcmlhbGl6ZTpmdW5jdGlvbihlLHIpe3Zh
        ciBuPXt9O2lmKHImJnIuaW5jbHVkZUlkKXt2YXIgaT10KGUsImlkIik7aSYm
        KG5bdCh0aGlzLCJwcmltYXJ5S2V5IildPXQoZSwiaWQiKSl9cmV0dXJuIGUu
        ZWFjaEF0dHJpYnV0ZShmdW5jdGlvbih0LHIpe3RoaXMuc2VyaWFsaXplQXR0
        cmlidXRlKGUsbix0LHIpfSx0aGlzKSxlLmVhY2hSZWxhdGlvbnNoaXAoZnVu
        Y3Rpb24odCxyKXsiYmVsb25nc1RvIj09PXIua2luZD90aGlzLnNlcmlhbGl6
        ZUJlbG9uZ3NUbyhlLG4scik6Imhhc01hbnkiPT09ci5raW5kJiZ0aGlzLnNl
        cmlhbGl6ZUhhc01hbnkoZSxuLHIpfSx0aGlzKSxufSxzZXJpYWxpemVBdHRy
        aWJ1dGU6ZnVuY3Rpb24oZSxyLG4saSl7dmFyIGE9dCh0aGlzLCJhdHRycyIp
        LG89dChlLG4pLHM9aS50eXBlO2lmKHMpe3ZhciBjPXRoaXMudHJhbnNmb3Jt
        Rm9yKHMpO289Yy5zZXJpYWxpemUobyl9bj1hJiZhW25dfHwodGhpcy5rZXlG
        b3JBdHRyaWJ1dGU/dGhpcy5rZXlGb3JBdHRyaWJ1dGUobik6bikscltuXT1v
        fSxzZXJpYWxpemVCZWxvbmdzVG86ZnVuY3Rpb24oZSxuLGkpe3ZhciBhPWku
        a2V5LG89dChlLGEpO2E9dGhpcy5rZXlGb3JSZWxhdGlvbnNoaXA/dGhpcy5r
        ZXlGb3JSZWxhdGlvbnNoaXAoYSwiYmVsb25nc1RvIik6YSxuW2FdPXIobyk/
        bzp0KG8sImlkIiksaS5vcHRpb25zLnBvbHltb3JwaGljJiZ0aGlzLnNlcmlh
        bGl6ZVBvbHltb3JwaGljVHlwZShlLG4saSl9LHNlcmlhbGl6ZUhhc01hbnk6
        ZnVuY3Rpb24oZSxyLG4pe3ZhciBpPW4ua2V5LGE9RFMuUmVsYXRpb25zaGlw
        Q2hhbmdlLmRldGVybWluZVJlbGF0aW9uc2hpcFR5cGUoZS5jb25zdHJ1Y3Rv
        cixuKTsoIm1hbnlUb05vbmUiPT09YXx8Im1hbnlUb01hbnkiPT09YSkmJihy
        W2ldPXQoZSxpKS5tYXBCeSgiaWQiKSl9LHNlcmlhbGl6ZVBvbHltb3JwaGlj
        VHlwZTpFbWJlci5LLGV4dHJhY3Q6ZnVuY3Rpb24oZSx0LHIsbixpKXt0aGlz
        LmV4dHJhY3RNZXRhKGUsdCxyKTt2YXIgYT0iZXh0cmFjdCIraS5jaGFyQXQo
        MCkudG9VcHBlckNhc2UoKStpLnN1YnN0cigxKTtyZXR1cm4gdGhpc1thXShl
        LHQscixuLGkpfSxleHRyYWN0RmluZEFsbDplKCJleHRyYWN0QXJyYXkiKSxl
        eHRyYWN0RmluZFF1ZXJ5OmUoImV4dHJhY3RBcnJheSIpLGV4dHJhY3RGaW5k
        TWFueTplKCJleHRyYWN0QXJyYXkiKSxleHRyYWN0RmluZEhhc01hbnk6ZSgi
        ZXh0cmFjdEFycmF5IiksZXh0cmFjdENyZWF0ZVJlY29yZDplKCJleHRyYWN0
        U2F2ZSIpLGV4dHJhY3RVcGRhdGVSZWNvcmQ6ZSgiZXh0cmFjdFNhdmUiKSxl
        eHRyYWN0RGVsZXRlUmVjb3JkOmUoImV4dHJhY3RTYXZlIiksZXh0cmFjdEZp
        bmQ6ZSgiZXh0cmFjdFNpbmdsZSIpLGV4dHJhY3RGaW5kQmVsb25nc1RvOmUo
        ImV4dHJhY3RTaW5nbGUiKSxleHRyYWN0U2F2ZTplKCJleHRyYWN0U2luZ2xl
        IiksZXh0cmFjdFNpbmdsZTpmdW5jdGlvbihlLHQscil7cmV0dXJuIHRoaXMu
        bm9ybWFsaXplKHQscil9LGV4dHJhY3RBcnJheTpmdW5jdGlvbihlLHQscil7
        cmV0dXJuIHRoaXMubm9ybWFsaXplKHQscil9LGV4dHJhY3RNZXRhOmZ1bmN0
        aW9uKGUsdCxyKXtyJiZyLm1ldGEmJihlLm1ldGFGb3JUeXBlKHQsci5tZXRh
        KSxkZWxldGUgci5tZXRhKX0sdHJhbnNmb3JtRm9yOmZ1bmN0aW9uKGUpe3Jl
        dHVybiB0aGlzLmNvbnRhaW5lci5sb29rdXAoInRyYW5zZm9ybToiK2UpfX0p
        fSgpLGZ1bmN0aW9uKCl7dmFyIGU9RW1iZXIuZ2V0LHQ9RW1iZXIuU3RyaW5n
        LmNhcGl0YWxpemUscj1FbWJlci5TdHJpbmcudW5kZXJzY29yZSxuPXdpbmRv
        dy5EUztuLkRlYnVnQWRhcHRlcj1FbWJlci5EYXRhQWRhcHRlci5leHRlbmQo
        e2dldEZpbHRlcnM6ZnVuY3Rpb24oKXtyZXR1cm5be25hbWU6ImlzTmV3Iixk
        ZXNjOiJOZXcifSx7bmFtZToiaXNNb2RpZmllZCIsZGVzYzoiTW9kaWZpZWQi
        fSx7bmFtZToiaXNDbGVhbiIsZGVzYzoiQ2xlYW4ifV19LGRldGVjdDpmdW5j
        dGlvbihlKXtyZXR1cm4gZSE9PW4uTW9kZWwmJm4uTW9kZWwuZGV0ZWN0KGUp
        fSxjb2x1bW5zRm9yVHlwZTpmdW5jdGlvbihuKXt2YXIgaT1be25hbWU6Imlk
        IixkZXNjOiJJZCJ9XSxhPTAsbz10aGlzO3JldHVybiBlKG4sImF0dHJpYnV0
        ZXMiKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lmKGErKz5vLmF0dHJpYnV0ZUxp
        bWl0KXJldHVybiExO3ZhciBuPXQocihlKS5yZXBsYWNlKCJfIiwiICIpKTtp
        LnB1c2goe25hbWU6ZSxkZXNjOm59KX0pLGl9LGdldFJlY29yZHM6ZnVuY3Rp
        b24oZSl7cmV0dXJuIHRoaXMuZ2V0KCJzdG9yZSIpLmFsbChlKX0sZ2V0UmVj
        b3JkQ29sdW1uVmFsdWVzOmZ1bmN0aW9uKHQpe3ZhciByPXRoaXMsbj0wLGk9
        e2lkOmUodCwiaWQiKX07cmV0dXJuIHQuZWFjaEF0dHJpYnV0ZShmdW5jdGlv
        bihhKXtpZihuKys+ci5hdHRyaWJ1dGVMaW1pdClyZXR1cm4hMTt2YXIgbz1l
        KHQsYSk7aVthXT1vfSksaX0sZ2V0UmVjb3JkS2V5d29yZHM6ZnVuY3Rpb24o
        dCl7dmFyIHI9W10sbj1FbWJlci5BKFsiaWQiXSk7cmV0dXJuIHQuZWFjaEF0
        dHJpYnV0ZShmdW5jdGlvbihlKXtuLnB1c2goZSl9KSxuLmZvckVhY2goZnVu
        Y3Rpb24obil7ci5wdXNoKGUodCxuKSl9KSxyfSxnZXRSZWNvcmRGaWx0ZXJW
        YWx1ZXM6ZnVuY3Rpb24oZSl7cmV0dXJue2lzTmV3OmUuZ2V0KCJpc05ldyIp
        LGlzTW9kaWZpZWQ6ZS5nZXQoImlzRGlydHkiKSYmIWUuZ2V0KCJpc05ldyIp
        LGlzQ2xlYW46IWUuZ2V0KCJpc0RpcnR5Iil9fSxnZXRSZWNvcmRDb2xvcjpm
        dW5jdGlvbihlKXt2YXIgdD0iYmxhY2siO3JldHVybiBlLmdldCgiaXNOZXci
        KT90PSJncmVlbiI6ZS5nZXQoImlzRGlydHkiKSYmKHQ9ImJsdWUiKSx0fSxv
        YnNlcnZlUmVjb3JkOmZ1bmN0aW9uKGUsdCl7dmFyIHI9RW1iZXIuQSgpLG49
        dGhpcyxpPUVtYmVyLkEoWyJpZCIsImlzTmV3IiwiaXNEaXJ0eSJdKTtlLmVh
        Y2hBdHRyaWJ1dGUoZnVuY3Rpb24oZSl7aS5wdXNoKGUpfSksaS5mb3JFYWNo
        KGZ1bmN0aW9uKGkpe3ZhciBhPWZ1bmN0aW9uKCl7dChuLndyYXBSZWNvcmQo
        ZSkpfTtFbWJlci5hZGRPYnNlcnZlcihlLGksYSksci5wdXNoKGZ1bmN0aW9u
        KCl7RW1iZXIucmVtb3ZlT2JzZXJ2ZXIoZSxpLGEpfSl9KTt2YXIgYT1mdW5j
        dGlvbigpe3IuZm9yRWFjaChmdW5jdGlvbihlKXtlKCl9KX07cmV0dXJuIGF9
        fSl9KCksZnVuY3Rpb24oKXtEUy5UcmFuc2Zvcm09RW1iZXIuT2JqZWN0LmV4
        dGVuZCh7c2VyaWFsaXplOkVtYmVyLnJlcXVpcmVkKCksZGVzZXJpYWxpemU6
        RW1iZXIucmVxdWlyZWQoKX0pfSgpLGZ1bmN0aW9uKCl7RFMuQm9vbGVhblRy
        YW5zZm9ybT1EUy5UcmFuc2Zvcm0uZXh0ZW5kKHtkZXNlcmlhbGl6ZTpmdW5j
        dGlvbihlKXt2YXIgdD10eXBlb2YgZTtyZXR1cm4iYm9vbGVhbiI9PT10P2U6
        InN0cmluZyI9PT10P251bGwhPT1lLm1hdGNoKC9edHJ1ZSR8XnQkfF4xJC9p
        KToibnVtYmVyIj09PXQ/MT09PWU6ITF9LHNlcmlhbGl6ZTpmdW5jdGlvbihl
        KXtyZXR1cm4gQm9vbGVhbihlKX19KX0oKSxmdW5jdGlvbigpe0RTLkRhdGVU
        cmFuc2Zvcm09RFMuVHJhbnNmb3JtLmV4dGVuZCh7ZGVzZXJpYWxpemU6ZnVu
        Y3Rpb24oZSl7dmFyIHQ9dHlwZW9mIGU7cmV0dXJuInN0cmluZyI9PT10P25l
        dyBEYXRlKEVtYmVyLkRhdGUucGFyc2UoZSkpOiJudW1iZXIiPT09dD9uZXcg
        RGF0ZShlKTpudWxsPT09ZXx8dm9pZCAwPT09ZT9lOm51bGx9LHNlcmlhbGl6
        ZTpmdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgRGF0ZSl7dmFyIHQ9WyJT
        dW4iLCJNb24iLCJUdWUiLCJXZWQiLCJUaHUiLCJGcmkiLCJTYXQiXSxyPVsi
        SmFuIiwiRmViIiwiTWFyIiwiQXByIiwiTWF5IiwiSnVuIiwiSnVsIiwiQXVn
        IiwiU2VwIiwiT2N0IiwiTm92IiwiRGVjIl0sbj1mdW5jdGlvbihlKXtyZXR1
        cm4gMTA+ZT8iMCIrZToiIitlfSxpPWUuZ2V0VVRDRnVsbFllYXIoKSxhPWUu
        Z2V0VVRDTW9udGgoKSxvPWUuZ2V0VVRDRGF0ZSgpLHM9ZS5nZXRVVENEYXko
        KSxjPWUuZ2V0VVRDSG91cnMoKSx1PWUuZ2V0VVRDTWludXRlcygpLGQ9ZS5n
        ZXRVVENTZWNvbmRzKCksbD10W3NdLGg9bihvKSxmPXJbYV07cmV0dXJuIGwr
        IiwgIitoKyIgIitmKyIgIitpKyIgIituKGMpKyI6IituKHUpKyI6IituKGQp
        KyIgR01UIn1yZXR1cm4gbnVsbH19KX0oKSxmdW5jdGlvbigpe3ZhciBlPUVt
        YmVyLmlzRW1wdHk7RFMuTnVtYmVyVHJhbnNmb3JtPURTLlRyYW5zZm9ybS5l
        eHRlbmQoe2Rlc2VyaWFsaXplOmZ1bmN0aW9uKHQpe3JldHVybiBlKHQpP251
        bGw6TnVtYmVyKHQpfSxzZXJpYWxpemU6ZnVuY3Rpb24odCl7cmV0dXJuIGUo
        dCk/bnVsbDpOdW1iZXIodCl9fSl9KCksZnVuY3Rpb24oKXt2YXIgZT1FbWJl
        ci5pc05vbmU7RFMuU3RyaW5nVHJhbnNmb3JtPURTLlRyYW5zZm9ybS5leHRl
        bmQoe2Rlc2VyaWFsaXplOmZ1bmN0aW9uKHQpe3JldHVybiBlKHQpP251bGw6
        U3RyaW5nKHQpfSxzZXJpYWxpemU6ZnVuY3Rpb24odCl7cmV0dXJuIGUodCk/
        bnVsbDpTdHJpbmcodCl9fSl9KCksZnVuY3Rpb24oKXtFbWJlci5zZXQsRW1i
        ZXIub25Mb2FkKCJFbWJlci5BcHBsaWNhdGlvbiIsZnVuY3Rpb24oZSl7ZS5p
        bml0aWFsaXplcih7bmFtZToic3RvcmUiLGluaXRpYWxpemU6ZnVuY3Rpb24o
        ZSx0KXt0LnJlZ2lzdGVyKCJzdG9yZTptYWluIix0LlN0b3JlfHxEUy5TdG9y
        ZSksdC5yZWdpc3Rlcigic2VyaWFsaXplcjpfZGVmYXVsdCIsRFMuSlNPTlNl
        cmlhbGl6ZXIpLHQucmVnaXN0ZXIoInNlcmlhbGl6ZXI6X3Jlc3QiLERTLlJF
        U1RTZXJpYWxpemVyKSx0LnJlZ2lzdGVyKCJhZGFwdGVyOl9yZXN0IixEUy5S
        RVNUQWRhcHRlciksZS5sb29rdXAoInN0b3JlOm1haW4iKX19KSxlLmluaXRp
        YWxpemVyKHtuYW1lOiJ0cmFuc2Zvcm1zIixpbml0aWFsaXplOmZ1bmN0aW9u
        KGUsdCl7dC5yZWdpc3RlcigidHJhbnNmb3JtOmJvb2xlYW4iLERTLkJvb2xl
        YW5UcmFuc2Zvcm0pLHQucmVnaXN0ZXIoInRyYW5zZm9ybTpkYXRlIixEUy5E
        YXRlVHJhbnNmb3JtKSx0LnJlZ2lzdGVyKCJ0cmFuc2Zvcm06bnVtYmVyIixE
        Uy5OdW1iZXJUcmFuc2Zvcm0pLHQucmVnaXN0ZXIoInRyYW5zZm9ybTpzdHJp
        bmciLERTLlN0cmluZ1RyYW5zZm9ybSl9fSksZS5pbml0aWFsaXplcih7bmFt
        ZToiZGF0YUFkYXB0ZXIiLGluaXRpYWxpemU6ZnVuY3Rpb24oZSx0KXt0LnJl
        Z2lzdGVyKCJkYXRhQWRhcHRlcjptYWluIixEUy5EZWJ1Z0FkYXB0ZXIpfX0p
        LGUuaW5pdGlhbGl6ZXIoe25hbWU6ImluamVjdFN0b3JlIixpbml0aWFsaXpl
        OmZ1bmN0aW9uKGUsdCl7dC5pbmplY3QoImNvbnRyb2xsZXIiLCJzdG9yZSIs
        InN0b3JlOm1haW4iKSx0LmluamVjdCgicm91dGUiLCJzdG9yZSIsInN0b3Jl
        Om1haW4iKSx0LmluamVjdCgic2VyaWFsaXplciIsInN0b3JlIiwic3RvcmU6
        bWFpbiIpLHQuaW5qZWN0KCJkYXRhQWRhcHRlciIsInN0b3JlIiwic3RvcmU6
        bWFpbiIpfX0pfSl9KCksZnVuY3Rpb24oKXtFbWJlci5EYXRlPUVtYmVyLkRh
        dGV8fHt9O3ZhciBlPURhdGUucGFyc2UsdD1bMSw0LDUsNiw3LDEwLDExXTtF
        bWJlci5EYXRlLnBhcnNlPWZ1bmN0aW9uKHIpe3ZhciBuLGksYT0wO2lmKGk9
        L14oXGR7NH18WytcLV1cZHs2fSkoPzotKFxkezJ9KSg/Oi0oXGR7Mn0pKT8p
        Pyg/OlQoXGR7Mn0pOihcZHsyfSkoPzo6KFxkezJ9KSg/OlwuKFxkezN9KSk/
        KT8oPzooWil8KFsrXC1dKShcZHsyfSkoPzo6KFxkezJ9KSk/KT8pPyQvLmV4
        ZWMocikpe2Zvcih2YXIgbyxzPTA7bz10W3NdOysrcylpW29dPStpW29dfHww
        O2lbMl09KCtpWzJdfHwxKS0xLGlbM109K2lbM118fDEsIloiIT09aVs4XSYm
        dm9pZCAwIT09aVs5XSYmKGE9NjAqaVsxMF0raVsxMV0sIisiPT09aVs5XSYm
        KGE9MC1hKSksbj1EYXRlLlVUQyhpWzFdLGlbMl0saVszXSxpWzRdLGlbNV0r
        YSxpWzZdLGlbN10pfWVsc2Ugbj1lP2Uocik6MC8wO3JldHVybiBufSwoRW1i
        ZXIuRVhURU5EX1BST1RPVFlQRVM9PT0hMHx8RW1iZXIuRVhURU5EX1BST1RP
        VFlQRVMuRGF0ZSkmJihEYXRlLnBhcnNlPUVtYmVyLkRhdGUucGFyc2UpfSgp
        LGZ1bmN0aW9uKCl7dmFyIGU9RW1iZXIuZ2V0O0VtYmVyLnNldCxEUy5SZWNv
        cmRBcnJheT1FbWJlci5BcnJheVByb3h5LmV4dGVuZChFbWJlci5FdmVudGVk
        LHt0eXBlOm51bGwsY29udGVudDpudWxsLGlzTG9hZGVkOiExLGlzVXBkYXRp
        bmc6ITEsc3RvcmU6bnVsbCxvYmplY3RBdENvbnRlbnQ6ZnVuY3Rpb24odCl7
        dmFyIHI9ZSh0aGlzLCJjb250ZW50Iik7cmV0dXJuIHIub2JqZWN0QXQodCl9
        LHVwZGF0ZTpmdW5jdGlvbigpe2lmKCFlKHRoaXMsImlzVXBkYXRpbmciKSl7
        dmFyIHQ9ZSh0aGlzLCJzdG9yZSIpLHI9ZSh0aGlzLCJ0eXBlIik7dC5mZXRj
        aEFsbChyLHRoaXMpfX0sYWRkUmVjb3JkOmZ1bmN0aW9uKHQpe2UodGhpcywi
        Y29udGVudCIpLmFkZE9iamVjdCh0KX0scmVtb3ZlUmVjb3JkOmZ1bmN0aW9u
        KHQpe2UodGhpcywiY29udGVudCIpLnJlbW92ZU9iamVjdCh0KX0sc2F2ZTpm
        dW5jdGlvbigpe3ZhciBlPUVtYmVyLlJTVlAuYWxsKHRoaXMuaW52b2tlKCJz
        YXZlIikpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIEVtYmVyLkEoZSl9KTty
        ZXR1cm4gRFMuUHJvbWlzZUFycmF5LmNyZWF0ZSh7cHJvbWlzZTplfSl9fSl9
        KCksZnVuY3Rpb24oKXt2YXIgZT1FbWJlci5nZXQ7RFMuRmlsdGVyZWRSZWNv
        cmRBcnJheT1EUy5SZWNvcmRBcnJheS5leHRlbmQoe2ZpbHRlckZ1bmN0aW9u
        Om51bGwsaXNMb2FkZWQ6ITAscmVwbGFjZTpmdW5jdGlvbigpe3ZhciB0PWUo
        dGhpcywidHlwZSIpLnRvU3RyaW5nKCk7dGhyb3cgbmV3IEVycm9yKCJUaGUg
        cmVzdWx0IG9mIGEgY2xpZW50LXNpZGUgZmlsdGVyIChvbiAiK3QrIikgaXMg
        aW1tdXRhYmxlLiIpfSx1cGRhdGVGaWx0ZXI6RW1iZXIub2JzZXJ2ZXIoZnVu
        Y3Rpb24oKXt2YXIgdD1lKHRoaXMsIm1hbmFnZXIiKTt0LnVwZGF0ZUZpbHRl
        cih0aGlzLGUodGhpcywidHlwZSIpLGUodGhpcywiZmlsdGVyRnVuY3Rpb24i
        KSl9LCJmaWx0ZXJGdW5jdGlvbiIpfSl9KCksZnVuY3Rpb24oKXt2YXIgZT1F
        bWJlci5nZXQ7RW1iZXIuc2V0LERTLkFkYXB0ZXJQb3B1bGF0ZWRSZWNvcmRB
        cnJheT1EUy5SZWNvcmRBcnJheS5leHRlbmQoe3F1ZXJ5Om51bGwscmVwbGFj
        ZTpmdW5jdGlvbigpe3ZhciB0PWUodGhpcywidHlwZSIpLnRvU3RyaW5nKCk7
        dGhyb3cgbmV3IEVycm9yKCJUaGUgcmVzdWx0IG9mIGEgc2VydmVyIHF1ZXJ5
        IChvbiAiK3QrIikgaXMgaW1tdXRhYmxlLiIpfSxsb2FkOmZ1bmN0aW9uKHQp
        e3ZhciByPWUodGhpcywic3RvcmUiKSxuPWUodGhpcywidHlwZSIpLGk9ci5w
        dXNoTWFueShuLHQpLGE9ci5tZXRhZGF0YUZvcihuKTt0aGlzLnNldFByb3Bl
        cnRpZXMoe2NvbnRlbnQ6RW1iZXIuQShpKSxpc0xvYWRlZDohMCxtZXRhOmF9
        KSxFbWJlci5ydW4ub25jZSh0aGlzLCJ0cmlnZ2VyIiwiZGlkTG9hZCIpfX0p
        fSgpLGZ1bmN0aW9uKCl7dmFyIGU9RW1iZXIuZ2V0LHQ9RW1iZXIuc2V0LHI9
        RW1iZXIuRW51bWVyYWJsZVV0aWxzLm1hcDtEUy5NYW55QXJyYXk9RFMuUmVj
        b3JkQXJyYXkuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKCl7dGhpcy5fc3VwZXIu
        YXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX2NoYW5nZXNUb1N5bmM9RW1i
        ZXIuT3JkZXJlZFNldC5jcmVhdGUoKX0sb3duZXI6bnVsbCxpc1BvbHltb3Jw
        aGljOiExLGlzTG9hZGVkOiExLGxvYWRpbmdSZWNvcmRzQ291bnQ6ZnVuY3Rp
        b24oZSl7dGhpcy5sb2FkaW5nUmVjb3Jkc0NvdW50PWV9LGxvYWRlZFJlY29y
        ZDpmdW5jdGlvbigpe3RoaXMubG9hZGluZ1JlY29yZHNDb3VudC0tLDA9PT10
        aGlzLmxvYWRpbmdSZWNvcmRzQ291bnQmJih0KHRoaXMsImlzTG9hZGVkIiwh
        MCksdGhpcy50cmlnZ2VyKCJkaWRMb2FkIikpfSxmZXRjaDpmdW5jdGlvbigp
        e3ZhciB0PWUodGhpcywiY29udGVudCIpLHI9ZSh0aGlzLCJzdG9yZSIpLG49
        ZSh0aGlzLCJvd25lciIpLGk9RW1iZXIuUlNWUC5kZWZlcigpLGE9dC5maWx0
        ZXJQcm9wZXJ0eSgiaXNFbXB0eSIsITApO3IuZmV0Y2hNYW55KGEsbixpKX0s
        cmVwbGFjZUNvbnRlbnQ6ZnVuY3Rpb24oZSx0LG4pe249cihuLGZ1bmN0aW9u
        KGUpe3JldHVybiBlfSx0aGlzKSx0aGlzLl9zdXBlcihlLHQsbil9LGFycmFu
        Z2VkQ29udGVudERpZENoYW5nZTpmdW5jdGlvbigpe0VtYmVyLnJ1bi5vbmNl
        KHRoaXMsImZldGNoIil9LGFycmF5Q29udGVudFdpbGxDaGFuZ2U6ZnVuY3Rp
        b24odCxyKXt2YXIgbj1lKHRoaXMsIm93bmVyIiksaT1lKHRoaXMsIm5hbWUi
        KTtpZighbi5fc3VzcGVuZGVkUmVsYXRpb25zaGlwcylmb3IodmFyIGE9dDt0
        K3I+YTthKyspe3ZhciBvPWUodGhpcywiY29udGVudCIpLm9iamVjdEF0KGEp
        LHM9RFMuUmVsYXRpb25zaGlwQ2hhbmdlLmNyZWF0ZUNoYW5nZShuLG8sZSh0
        aGlzLCJzdG9yZSIpLHtwYXJlbnRUeXBlOm4uY29uc3RydWN0b3IsY2hhbmdl
        VHlwZToicmVtb3ZlIixraW5kOiJoYXNNYW55IixrZXk6aX0pO3RoaXMuX2No
        YW5nZXNUb1N5bmMuYWRkKHMpfXJldHVybiB0aGlzLl9zdXBlci5hcHBseSh0
        aGlzLGFyZ3VtZW50cyl9LGFycmF5Q29udGVudERpZENoYW5nZTpmdW5jdGlv
        bih0LHIsbil7dGhpcy5fc3VwZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpO3Zh
        ciBpPWUodGhpcywib3duZXIiKSxhPWUodGhpcywibmFtZSIpLG89ZSh0aGlz
        LCJzdG9yZSIpO2lmKCFpLl9zdXNwZW5kZWRSZWxhdGlvbnNoaXBzKXtmb3Io
        dmFyIHM9dDt0K24+cztzKyspe3ZhciBjPWUodGhpcywiY29udGVudCIpLm9i
        amVjdEF0KHMpLHU9RFMuUmVsYXRpb25zaGlwQ2hhbmdlLmNyZWF0ZUNoYW5n
        ZShpLGMsbyx7cGFyZW50VHlwZTppLmNvbnN0cnVjdG9yLGNoYW5nZVR5cGU6
        ImFkZCIsa2luZDoiaGFzTWFueSIsa2V5OmF9KTt1Lmhhc01hbnlOYW1lPWEs
        dGhpcy5fY2hhbmdlc1RvU3luYy5hZGQodSl9dGhpcy5fY2hhbmdlc1RvU3lu
        Yy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2Uuc3luYygpfSksdGhpcy5fY2hhbmdl
        c1RvU3luYy5jbGVhcigpfX0sY3JlYXRlUmVjb3JkOmZ1bmN0aW9uKHQpe3Zh
        ciByLG49ZSh0aGlzLCJvd25lciIpLGk9ZShuLCJzdG9yZSIpLGE9ZSh0aGlz
        LCJ0eXBlIik7cmV0dXJuIHI9aS5jcmVhdGVSZWNvcmQuY2FsbChpLGEsdCks
        dGhpcy5wdXNoT2JqZWN0KHIpLHJ9fSl9KCksZnVuY3Rpb24oKXtmdW5jdGlv
        biBlKGUpe3ZhciB0PUVtYmVyLm1ldGEoZSwhMCkscj0iRFMuTWFwcGFibGUi
        LG49dFtyXTtyZXR1cm4gbnx8KHRbcl09e30pLHQuaGFzT3duUHJvcGVydHko
        cil8fCh0W3JdPUVtYmVyLmNyZWF0ZSh0W3JdKSksdFtyXX1FbWJlci5nZXQ7
        dmFyIHQ9RW1iZXIuQXJyYXlQb2x5ZmlsbHMuZm9yRWFjaCxyPWZ1bmN0aW9u
        KGUpe3JldHVybiBlfSxuPWZ1bmN0aW9uKGUpe3JldHVybiBlfSxpPWZ1bmN0
        aW9uKGUsdCl7cmV0dXJuIHR9O0RTLl9NYXBwYWJsZT1FbWJlci5NaXhpbi5j
        cmVhdGUoe2NyZWF0ZUluc3RhbmNlTWFwRm9yOmZ1bmN0aW9uKHQpe3ZhciBy
        PWUodGhpcyk7aWYoci52YWx1ZXM9ci52YWx1ZXN8fHt9LHIudmFsdWVzW3Rd
        KXJldHVybiByLnZhbHVlc1t0XTtmb3IodmFyIG49ci52YWx1ZXNbdF09bmV3
        IEVtYmVyLk1hcCxpPXRoaXMuY29uc3RydWN0b3I7aSYmaSE9PURTLlN0b3Jl
        Oyl0aGlzLl9jb3B5TWFwKHQsaSxuKSxpPWkuc3VwZXJjbGFzcztyZXR1cm4g
        ci52YWx1ZXNbdF09bixufSxfY29weU1hcDpmdW5jdGlvbihhLG8scyl7ZnVu
        Y3Rpb24gYyhlLHQpe3ZhciBhPShvLnRyYW5zZm9ybU1hcEtleXx8bikoZSx0
        KSxjPShvLnRyYW5zZm9ybU1hcFZhbHVlfHxpKShlLHQpLHU9cy5nZXQoYSks
        ZD1jO3UmJihkPSh0aGlzLmNvbnN0cnVjdG9yLnJlc29sdmVNYXBDb25mbGlj
        dHx8cikodSxkKSkscy5zZXQoYSxkKX12YXIgdT1lKG8pLGQ9dVthXTtkJiZ0
        LmNhbGwoZCxjLHRoaXMpfX0pLERTLl9NYXBwYWJsZS5nZW5lcmF0ZU1hcEZ1
        bmN0aW9uRm9yPWZ1bmN0aW9uKHQscil7cmV0dXJuIGZ1bmN0aW9uKG4saSl7
        dmFyIGE9ZSh0aGlzKSxvPWFbdF18fEVtYmVyLk1hcFdpdGhEZWZhdWx0LmNy
        ZWF0ZSh7ZGVmYXVsdFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJue319fSk7ci5j
        YWxsKHRoaXMsbixpLG8pLGFbdF09b319fSgpLGZ1bmN0aW9uKCl7ZnVuY3Rp
        b24gZShlLHIsaSxhKXtyZXR1cm4gci5lYWNoUmVsYXRpb25zaGlwKGZ1bmN0
        aW9uKHIsbyl7aWYoaS5saW5rcyYmaS5saW5rc1tyXSlyZXR1cm4gYSYmby5v
        cHRpb25zLmFzeW5jJiYoYS5fcmVsYXRpb25zaGlwc1tyXT1udWxsKSx2b2lk
        IDA7dmFyIHM9by5raW5kLGM9aVtyXTtudWxsIT1jJiYoImJlbG9uZ3NUbyI9
        PT1zP3QoZSxpLHIsbyxjKToiaGFzTWFueSI9PT1zJiZuKGUsaSxyLG8sYykp
        fSksaX1mdW5jdGlvbiB0KGUsdCxuLGksYSl7aWYoIShiKGEpfHxhIGluc3Rh
        bmNlb2YgRFMuTW9kZWwpKXt2YXIgbzsibnVtYmVyIj09dHlwZW9mIGF8fCJz
        dHJpbmciPT10eXBlb2YgYT8obz1yKGksbix0KSx0W25dPWUucmVjb3JkRm9y
        SWQobyxhKSk6Im9iamVjdCI9PXR5cGVvZiBhJiYodFtuXT1lLnJlY29yZEZv
        cklkKGEudHlwZSxhLmlkKSl9fWZ1bmN0aW9uIHIoZSx0LHIpe3JldHVybiBl
        Lm9wdGlvbnMucG9seW1vcnBoaWM/clt0KyJUeXBlIl06ZS50eXBlfWZ1bmN0
        aW9uIG4oZSxyLG4saSxhKXtmb3IodmFyIG89MCxzPWEubGVuZ3RoO3M+bztv
        KyspdChlLGEsbyxpLGFbb10pfWZ1bmN0aW9uIGkoZSl7cmV0dXJuIERTLlBy
        b21pc2VPYmplY3QuY3JlYXRlKHtwcm9taXNlOmV9KX1mdW5jdGlvbiBhKGUp
        e3JldHVybiBEUy5Qcm9taXNlQXJyYXkuY3JlYXRlKHtwcm9taXNlOmV9KX1m
        dW5jdGlvbiBvKGUsdCxyKXtyZXR1cm4gZS5sb29rdXAoInNlcmlhbGl6ZXI6
        Iit0KXx8ZS5sb29rdXAoInNlcmlhbGl6ZXI6YXBwbGljYXRpb24iKXx8ZS5s
        b29rdXAoInNlcmlhbGl6ZXI6IityKXx8ZS5sb29rdXAoInNlcmlhbGl6ZXI6
        X2RlZmF1bHQiKX1mdW5jdGlvbiBzKGUsdCl7dmFyIHI9ZS5zZXJpYWxpemVy
        LG49ZS5kZWZhdWx0U2VyaWFsaXplcixpPWUuY29udGFpbmVyO3JldHVybiBp
        JiZ2b2lkIDA9PT1yJiYocj1vKGksdC50eXBlS2V5LG4pKSwobnVsbD09PXJ8
        fHZvaWQgMD09PXIpJiYocj17ZXh0cmFjdDpmdW5jdGlvbihlLHQscil7cmV0
        dXJuIHJ9fSkscn1mdW5jdGlvbiBjKGUsdCxyLG4saSl7dmFyIGE9ZS5maW5k
        KHQscixuKSxvPXMoZSxyKTtyZXR1cm4gUyhhKS50aGVuKGZ1bmN0aW9uKGUp
        e3JldHVybiBlPW8uZXh0cmFjdCh0LHIsZSxuLCJmaW5kIiksdC5wdXNoKHIs
        ZSl9LGZ1bmN0aW9uKGUpe3ZhciBpPXQuZ2V0QnlJZChyLG4pO3Rocm93IGku
        bm90Rm91bmQoKSxlfSkudGhlbihpLnJlc29sdmUsaS5yZWplY3QpfWZ1bmN0
        aW9uIHUoZSx0LHIsbixpLGEpe3ZhciBvPWUuZmluZE1hbnkodCxyLG4saSks
        Yz1zKGUscik7cmV0dXJuIFMobykudGhlbihmdW5jdGlvbihlKXtlPWMuZXh0
        cmFjdCh0LHIsZSxudWxsLCJmaW5kTWFueSIpLHQucHVzaE1hbnkocixlKX0p
        LnRoZW4oYS5yZXNvbHZlLGEucmVqZWN0KX1mdW5jdGlvbiBkKGUsdCxyLG4s
        aSxhKXt2YXIgbz1lLmZpbmRIYXNNYW55KHQscixuLGkpLGM9cyhlLGkudHlw
        ZSk7cmV0dXJuIFMobykudGhlbihmdW5jdGlvbihlKXtlPWMuZXh0cmFjdCh0
        LGkudHlwZSxlLG51bGwsImZpbmRIYXNNYW55Iik7dmFyIG49dC5wdXNoTWFu
        eShpLnR5cGUsZSk7ci51cGRhdGVIYXNNYW55KGkua2V5LG4pfSkudGhlbihh
        LnJlc29sdmUsYS5yZWplY3QpfWZ1bmN0aW9uIGwoZSx0LHIsbixpLGEpe3Zh
        ciBvPWUuZmluZEJlbG9uZ3NUbyh0LHIsbixpKSxjPXMoZSxpLnR5cGUpO3Jl
        dHVybiBTKG8pLnRoZW4oZnVuY3Rpb24oZSl7ZT1jLmV4dHJhY3QodCxpLnR5
        cGUsZSxudWxsLCJmaW5kQmVsb25nc1RvIik7dmFyIHI9dC5wdXNoKGkudHlw
        ZSxlKTtyLnVwZGF0ZUJlbG9uZ3NUbyhpLmtleSxyKX0pLnRoZW4oYS5yZXNv
        bHZlLGEucmVqZWN0KX1mdW5jdGlvbiBoKGUsdCxyLG4saSl7dmFyIGE9ZS5m
        aW5kQWxsKHQscixuKSxvPXMoZSxyKTtyZXR1cm4gUyhhKS50aGVuKGZ1bmN0
        aW9uKGUpe3JldHVybiBlPW8uZXh0cmFjdCh0LHIsZSxudWxsLCJmaW5kQWxs
        IiksdC5wdXNoTWFueShyLGUpLHQuZGlkVXBkYXRlQWxsKHIpLHQuYWxsKHIp
        fSkudGhlbihpLnJlc29sdmUsaS5yZWplY3QpfWZ1bmN0aW9uIGYoZSx0LHIs
        bixpLGEpe3ZhciBvPWUuZmluZFF1ZXJ5KHQscixuLGkpLGM9cyhlLHIpO3Jl
        dHVybiBTKG8pLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGU9Yy5leHRyYWN0
        KHQscixlLG51bGwsImZpbmRBbGwiKSxpLmxvYWQoZSksaX0pLnRoZW4oYS5y
        ZXNvbHZlLGEucmVqZWN0KX1mdW5jdGlvbiBwKGUsdCxyLG4saSl7dmFyIGE9
        bi5jb25zdHJ1Y3RvcixvPWVbcl0odCxhLG4pLGM9cyhlLGEpO3JldHVybiBv
        LnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGUmJihlPWMuZXh0cmFjdCh0LGEs
        ZSxtKG4sImlkIikscikpLHQuZGlkU2F2ZVJlY29yZChuLGUpLG59LGZ1bmN0
        aW9uKGUpe3Rocm93IGUgaW5zdGFuY2VvZiBEUy5JbnZhbGlkRXJyb3I/dC5y
        ZWNvcmRXYXNJbnZhbGlkKG4sZS5lcnJvcnMpOnQucmVjb3JkV2FzRXJyb3Io
        bixlKSxlfSkudGhlbihpLnJlc29sdmUsaS5yZWplY3QpfXZhciBtPUVtYmVy
        LmdldCx5PUVtYmVyLnNldCxnPUVtYmVyLnJ1bi5vbmNlLGI9RW1iZXIuaXNO
        b25lLHY9RW1iZXIuRW51bWVyYWJsZVV0aWxzLmZvckVhY2gsUj1FbWJlci5F
        bnVtZXJhYmxlVXRpbHMuaW5kZXhPZixFPUVtYmVyLkVudW1lcmFibGVVdGls
        cy5tYXAsUz1FbWJlci5SU1ZQLnJlc29sdmUsVD1mdW5jdGlvbihlKXtyZXR1
        cm4gbnVsbD09ZT9udWxsOmUrIiJ9O0RTLlN0b3JlPUVtYmVyLk9iamVjdC5l
        eHRlbmQoRFMuX01hcHBhYmxlLHtpbml0OmZ1bmN0aW9uKCl7dGhpcy50eXBl
        TWFwcz17fSx0aGlzLnJlY29yZEFycmF5TWFuYWdlcj1EUy5SZWNvcmRBcnJh
        eU1hbmFnZXIuY3JlYXRlKHtzdG9yZTp0aGlzfSksdGhpcy5fcmVsYXRpb25z
        aGlwQ2hhbmdlcz17fSx0aGlzLl9wZW5kaW5nU2F2ZT1bXX0sYWRhcHRlcjoi
        X3Jlc3QiLHNlcmlhbGl6ZTpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLnNl
        cmlhbGl6ZXJGb3IoZS5jb25zdHJ1Y3Rvci50eXBlS2V5KS5zZXJpYWxpemUo
        ZSx0KX0sZGVmYXVsdEFkYXB0ZXI6RW1iZXIuY29tcHV0ZWQoZnVuY3Rpb24o
        KXt2YXIgZT1tKHRoaXMsImFkYXB0ZXIiKTtyZXR1cm4ic3RyaW5nIj09dHlw
        ZW9mIGUmJihlPXRoaXMuY29udGFpbmVyLmxvb2t1cCgiYWRhcHRlcjoiK2Up
        fHx0aGlzLmNvbnRhaW5lci5sb29rdXAoImFkYXB0ZXI6YXBwbGljYXRpb24i
        KXx8dGhpcy5jb250YWluZXIubG9va3VwKCJhZGFwdGVyOl9yZXN0IikpLERT
        LkFkYXB0ZXIuZGV0ZWN0KGUpJiYoZT1lLmNyZWF0ZSh7Y29udGFpbmVyOnRo
        aXMuY29udGFpbmVyfSkpLGV9KS5wcm9wZXJ0eSgiYWRhcHRlciIpLGNyZWF0
        ZVJlY29yZDpmdW5jdGlvbihlLHQpe2U9dGhpcy5tb2RlbEZvcihlKSx0PXR8
        fHt9LGIodC5pZCkmJih0LmlkPXRoaXMuX2dlbmVyYXRlSWQoZSkpLHQuaWQ9
        VCh0LmlkKTt2YXIgcj10aGlzLmJ1aWxkUmVjb3JkKGUsdC5pZCk7cmV0dXJu
        IHIubG9hZGVkRGF0YSgpLHIuc2V0UHJvcGVydGllcyh0KSxyfSxfZ2VuZXJh
        dGVJZDpmdW5jdGlvbihlKXt2YXIgdD10aGlzLmFkYXB0ZXJGb3IoZSk7cmV0
        dXJuIHQmJnQuZ2VuZXJhdGVJZEZvclJlY29yZD90LmdlbmVyYXRlSWRGb3JS
        ZWNvcmQodGhpcyk6bnVsbH0sZGVsZXRlUmVjb3JkOmZ1bmN0aW9uKGUpe2Uu
        ZGVsZXRlUmVjb3JkKCl9LHVubG9hZFJlY29yZDpmdW5jdGlvbihlKXtlLnVu
        bG9hZFJlY29yZCgpfSxmaW5kOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQg
        MD09PXQ/dGhpcy5maW5kQWxsKGUpOiJvYmplY3QiPT09RW1iZXIudHlwZU9m
        KHQpP3RoaXMuZmluZFF1ZXJ5KGUsdCk6dGhpcy5maW5kQnlJZChlLFQodCkp
        fSxmaW5kQnlJZDpmdW5jdGlvbihlLHQpe2U9dGhpcy5tb2RlbEZvcihlKTt2
        YXIgcj10aGlzLnJlY29yZEZvcklkKGUsdCksbj10aGlzLmZldGNoUmVjb3Jk
        KHIpfHxTKHIpO3JldHVybiBpKG4pfSxmaW5kQnlJZHM6ZnVuY3Rpb24oZSx0
        KXt2YXIgcj10aGlzO3JldHVybiBhKEVtYmVyLlJTVlAuYWxsKEUodCxmdW5j
        dGlvbih0KXtyZXR1cm4gci5maW5kQnlJZChlLHQpfSkpLnRoZW4oZnVuY3Rp
        b24oZSl7cmV0dXJuIEVtYmVyLkEoZSl9KSl9LGZldGNoUmVjb3JkOmZ1bmN0
        aW9uKGUpe2lmKGIoZSkpcmV0dXJuIG51bGw7aWYoZS5fbG9hZGluZ1Byb21p
        c2UpcmV0dXJuIGUuX2xvYWRpbmdQcm9taXNlO2lmKCFtKGUsImlzRW1wdHki
        KSlyZXR1cm4gbnVsbDt2YXIgdD1lLmNvbnN0cnVjdG9yLHI9bShlLCJpZCIp
        LG49RW1iZXIuUlNWUC5kZWZlcigpO2UubG9hZGluZ0RhdGEobi5wcm9taXNl
        KTt2YXIgaT10aGlzLmFkYXB0ZXJGb3IodCk7cmV0dXJuIGMoaSx0aGlzLHQs
        cixuKSxuLnByb21pc2V9LGdldEJ5SWQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4g
        ZT10aGlzLm1vZGVsRm9yKGUpLHRoaXMuaGFzUmVjb3JkRm9ySWQoZSx0KT90
        aGlzLnJlY29yZEZvcklkKGUsdCk6bnVsbH0scmVsb2FkUmVjb3JkOmZ1bmN0
        aW9uKGUsdCl7dmFyIHI9ZS5jb25zdHJ1Y3RvcixuPXRoaXMuYWRhcHRlckZv
        cihyKSxpPW0oZSwiaWQiKTtyZXR1cm4gYyhuLHRoaXMscixpLHQpfSxmZXRj
        aE1hbnk6ZnVuY3Rpb24oZSx0LHIpe2lmKGUubGVuZ3RoKXt2YXIgbj1FbWJl
        ci5NYXBXaXRoRGVmYXVsdC5jcmVhdGUoe2RlZmF1bHRWYWx1ZTpmdW5jdGlv
        bigpe3JldHVybiBFbWJlci5BKCl9fSk7dihlLGZ1bmN0aW9uKGUpe24uZ2V0
        KGUuY29uc3RydWN0b3IpLnB1c2goZSl9KSx2KG4sZnVuY3Rpb24oZSxuKXt2
        YXIgaT1uLm1hcFByb3BlcnR5KCJpZCIpLGE9dGhpcy5hZGFwdGVyRm9yKGUp
        O3UoYSx0aGlzLGUsaSx0LHIpfSx0aGlzKX19LGhhc1JlY29yZEZvcklkOmZ1
        bmN0aW9uKGUsdCl7cmV0dXJuIHQ9VCh0KSwhIXRoaXMudHlwZU1hcEZvcihl
        KS5pZFRvUmVjb3JkW3RdfSxyZWNvcmRGb3JJZDpmdW5jdGlvbihlLHQpe2U9
        dGhpcy5tb2RlbEZvcihlKSx0PVQodCk7dmFyIHI9dGhpcy50eXBlTWFwRm9y
        KGUpLmlkVG9SZWNvcmRbdF07cmV0dXJuIHJ8fChyPXRoaXMuYnVpbGRSZWNv
        cmQoZSx0KSkscn0sZmluZE1hbnk6ZnVuY3Rpb24oZSx0LHIsbil7cj10aGlz
        Lm1vZGVsRm9yKHIpLHQ9RW1iZXIuQSh0KTt2YXIgaT10LmZpbHRlclByb3Bl
        cnR5KCJpc0VtcHR5IiwhMCksYT10aGlzLnJlY29yZEFycmF5TWFuYWdlci5j
        cmVhdGVNYW55QXJyYXkocix0KTtyZXR1cm4gdihpLGZ1bmN0aW9uKGUpe2Uu
        bG9hZGluZ0RhdGEoKX0pLGEubG9hZGluZ1JlY29yZHNDb3VudD1pLmxlbmd0
        aCxpLmxlbmd0aD8odihpLGZ1bmN0aW9uKGUpe3RoaXMucmVjb3JkQXJyYXlN
        YW5hZ2VyLnJlZ2lzdGVyV2FpdGluZ1JlY29yZEFycmF5KGUsYSl9LHRoaXMp
        LHRoaXMuZmV0Y2hNYW55KGksZSxuKSk6KG4mJm4ucmVzb2x2ZSgpLGEuc2V0
        KCJpc0xvYWRlZCIsITApLEVtYmVyLnJ1bi5vbmNlKGEsInRyaWdnZXIiLCJk
        aWRMb2FkIikpLGF9LGZpbmRIYXNNYW55OmZ1bmN0aW9uKGUsdCxyLG4pe3Zh
        ciBpPXRoaXMuYWRhcHRlckZvcihlLmNvbnN0cnVjdG9yKSxhPXRoaXMucmVj
        b3JkQXJyYXlNYW5hZ2VyLmNyZWF0ZU1hbnlBcnJheShyLnR5cGUsRW1iZXIu
        QShbXSkpO3JldHVybiBkKGksdGhpcyxlLHQscixuKSxhfSxmaW5kQmVsb25n
        c1RvOmZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpPXRoaXMuYWRhcHRlckZvcihl
        LmNvbnN0cnVjdG9yKTtsKGksdGhpcyxlLHQscixuKX0sZmluZFF1ZXJ5OmZ1
        bmN0aW9uKGUsdCl7ZT10aGlzLm1vZGVsRm9yKGUpO3ZhciByPURTLkFkYXB0
        ZXJQb3B1bGF0ZWRSZWNvcmRBcnJheS5jcmVhdGUoe3R5cGU6ZSxxdWVyeTp0
        LGNvbnRlbnQ6RW1iZXIuQSgpLHN0b3JlOnRoaXN9KSxuPXRoaXMuYWRhcHRl
        ckZvcihlKSxpPUVtYmVyLlJTVlAuZGVmZXIoKTtyZXR1cm4gZihuLHRoaXMs
        ZSx0LHIsaSksYShpLnByb21pc2UpfSxmaW5kQWxsOmZ1bmN0aW9uKGUpe3Jl
        dHVybiBlPXRoaXMubW9kZWxGb3IoZSksdGhpcy5mZXRjaEFsbChlLHRoaXMu
        YWxsKGUpKX0sZmV0Y2hBbGw6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLmFk
        YXB0ZXJGb3IoZSksbj10aGlzLnR5cGVNYXBGb3IoZSkubWV0YWRhdGEuc2lu
        Y2UsaT1FbWJlci5SU1ZQLmRlZmVyKCk7cmV0dXJuIHkodCwiaXNVcGRhdGlu
        ZyIsITApLGgocix0aGlzLGUsbixpKSxhKGkucHJvbWlzZSl9LGRpZFVwZGF0
        ZUFsbDpmdW5jdGlvbihlKXt2YXIgdD10aGlzLnR5cGVNYXBGb3IoZSkuZmlu
        ZEFsbENhY2hlO3kodCwiaXNVcGRhdGluZyIsITEpfSxhbGw6ZnVuY3Rpb24o
        ZSl7ZT10aGlzLm1vZGVsRm9yKGUpO3ZhciB0PXRoaXMudHlwZU1hcEZvcihl
        KSxyPXQuZmluZEFsbENhY2hlO2lmKHIpcmV0dXJuIHI7dmFyIG49RFMuUmVj
        b3JkQXJyYXkuY3JlYXRlKHt0eXBlOmUsY29udGVudDpFbWJlci5BKCksc3Rv
        cmU6dGhpcyxpc0xvYWRlZDohMH0pO3JldHVybiB0aGlzLnJlY29yZEFycmF5
        TWFuYWdlci5yZWdpc3RlckZpbHRlcmVkUmVjb3JkQXJyYXkobixlKSx0LmZp
        bmRBbGxDYWNoZT1uLG59LHVubG9hZEFsbDpmdW5jdGlvbihlKXtlPXRoaXMu
        bW9kZWxGb3IoZSk7Zm9yKHZhciB0LHI9dGhpcy50eXBlTWFwRm9yKGUpLG49
        ci5yZWNvcmRzO3Q9bi5wb3AoKTspdC51bmxvYWRSZWNvcmQoKX0sZmlsdGVy
        OmZ1bmN0aW9uKGUsdCxyKXt2YXIgbjszPT09YXJndW1lbnRzLmxlbmd0aD9u
        PXRoaXMuZmluZFF1ZXJ5KGUsdCk6Mj09PWFyZ3VtZW50cy5sZW5ndGgmJihy
        PXQpLGU9dGhpcy5tb2RlbEZvcihlKTt2YXIgaT1EUy5GaWx0ZXJlZFJlY29y
        ZEFycmF5LmNyZWF0ZSh7dHlwZTplLGNvbnRlbnQ6RW1iZXIuQSgpLHN0b3Jl
        OnRoaXMsbWFuYWdlcjp0aGlzLnJlY29yZEFycmF5TWFuYWdlcixmaWx0ZXJG
        dW5jdGlvbjpyfSk7cmV0dXJuIHRoaXMucmVjb3JkQXJyYXlNYW5hZ2VyLnJl
        Z2lzdGVyRmlsdGVyZWRSZWNvcmRBcnJheShpLGUsciksbj9uLnRoZW4oZnVu
        Y3Rpb24oKXtyZXR1cm4gaX0pOml9LHJlY29yZElzTG9hZGVkOmZ1bmN0aW9u
        KGUsdCl7cmV0dXJuIHRoaXMuaGFzUmVjb3JkRm9ySWQoZSx0KT8hbSh0aGlz
        LnJlY29yZEZvcklkKGUsdCksImlzRW1wdHkiKTohMX0sbWV0YWRhdGFGb3I6
        ZnVuY3Rpb24oZSl7cmV0dXJuIGU9dGhpcy5tb2RlbEZvcihlKSx0aGlzLnR5
        cGVNYXBGb3IoZSkubWV0YWRhdGF9LGRhdGFXYXNVcGRhdGVkOmZ1bmN0aW9u
        KGUsdCl7bSh0LCJpc0RlbGV0ZWQiKXx8bSh0LCJpc0xvYWRlZCIpJiZ0aGlz
        LnJlY29yZEFycmF5TWFuYWdlci5yZWNvcmREaWRDaGFuZ2UodCl9LHNjaGVk
        dWxlU2F2ZTpmdW5jdGlvbihlLHQpe2UuYWRhcHRlcldpbGxDb21taXQoKSx0
        aGlzLl9wZW5kaW5nU2F2ZS5wdXNoKFtlLHRdKSxnKHRoaXMsImZsdXNoUGVu
        ZGluZ1NhdmUiKX0sZmx1c2hQZW5kaW5nU2F2ZTpmdW5jdGlvbigpe3ZhciBl
        PXRoaXMuX3BlbmRpbmdTYXZlLnNsaWNlKCk7dGhpcy5fcGVuZGluZ1NhdmU9
        W10sdihlLGZ1bmN0aW9uKGUpe3ZhciB0LHI9ZVswXSxuPWVbMV0saT10aGlz
        LmFkYXB0ZXJGb3Ioci5jb25zdHJ1Y3Rvcik7dD1tKHIsImlzTmV3Iik/ImNy
        ZWF0ZVJlY29yZCI6bShyLCJpc0RlbGV0ZWQiKT8iZGVsZXRlUmVjb3JkIjoi
        dXBkYXRlUmVjb3JkIixwKGksdGhpcyx0LHIsbil9LHRoaXMpfSxkaWRTYXZl
        UmVjb3JkOmZ1bmN0aW9uKHQscil7ciYmKHI9ZSh0aGlzLHQuY29uc3RydWN0
        b3Iscix0KSx0aGlzLnVwZGF0ZUlkKHQscikpLHQuYWRhcHRlckRpZENvbW1p
        dChyKX0scmVjb3JkV2FzSW52YWxpZDpmdW5jdGlvbihlLHQpe2UuYWRhcHRl
        ckRpZEludmFsaWRhdGUodCl9LHJlY29yZFdhc0Vycm9yOmZ1bmN0aW9uKGUp
        e2UuYWRhcHRlckRpZEVycm9yKCl9LHVwZGF0ZUlkOmZ1bmN0aW9uKGUsdCl7
        dmFyIHI9KG0oZSwiaWQiKSxUKHQuaWQpKTt0aGlzLnR5cGVNYXBGb3IoZS5j
        b25zdHJ1Y3RvcikuaWRUb1JlY29yZFtyXT1lLHkoZSwiaWQiLHIpfSx0eXBl
        TWFwRm9yOmZ1bmN0aW9uKGUpe3ZhciB0LHI9bSh0aGlzLCJ0eXBlTWFwcyIp
        LG49RW1iZXIuZ3VpZEZvcihlKTtyZXR1cm4odD1yW25dKT90Oih0PXtpZFRv
        UmVjb3JkOnt9LHJlY29yZHM6W10sbWV0YWRhdGE6e319LHJbbl09dCx0KX0s
        X2xvYWQ6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPVQodC5pZCksaT10aGlzLnJl
        Y29yZEZvcklkKGUsbik7cmV0dXJuIGkuc2V0dXBEYXRhKHQsciksdGhpcy5y
        ZWNvcmRBcnJheU1hbmFnZXIucmVjb3JkRGlkQ2hhbmdlKGkpLGl9LG1vZGVs
        Rm9yOmZ1bmN0aW9uKGUpe2lmKCJzdHJpbmciIT10eXBlb2YgZSlyZXR1cm4g
        ZTt2YXIgdD10aGlzLmNvbnRhaW5lci5sb29rdXBGYWN0b3J5KCJtb2RlbDoi
        K2UpO3JldHVybiB0LnN0b3JlPXRoaXMsdC50eXBlS2V5PWUsdH0scHVzaDpm
        dW5jdGlvbih0LHIsbil7cmV0dXJuIHQ9dGhpcy5tb2RlbEZvcih0KSxyPWUo
        dGhpcyx0LHIpLHRoaXMuX2xvYWQodCxyLG4pLHRoaXMucmVjb3JkRm9ySWQo
        dCxyLmlkKX0scHVzaFBheWxvYWQ6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlz
        LnNlcmlhbGl6ZXJGb3IoZSk7ci5wdXNoUGF5bG9hZCh0aGlzLHQpfSx1cGRh
        dGU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5wdXNoKGUsdCwhMCl9LHB1
        c2hNYW55OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIEUodCxmdW5jdGlvbih0KXty
        ZXR1cm4gdGhpcy5wdXNoKGUsdCl9LHRoaXMpfSxtZXRhRm9yVHlwZTpmdW5j
        dGlvbihlLHQpe2U9dGhpcy5tb2RlbEZvcihlKSxFbWJlci5tZXJnZSh0aGlz
        LnR5cGVNYXBGb3IoZSkubWV0YWRhdGEsdCl9LGJ1aWxkUmVjb3JkOmZ1bmN0
        aW9uKGUsdCxyKXt2YXIgbj10aGlzLnR5cGVNYXBGb3IoZSksaT1uLmlkVG9S
        ZWNvcmQsYT1lLl9jcmVhdGUoe2lkOnQsc3RvcmU6dGhpcyxjb250YWluZXI6
        dGhpcy5jb250YWluZXJ9KTtyZXR1cm4gciYmYS5zZXR1cERhdGEociksdCYm
        KGlbdF09YSksbi5yZWNvcmRzLnB1c2goYSksYX0sZGVtYXRlcmlhbGl6ZVJl
        Y29yZDpmdW5jdGlvbihlKXt2YXIgdD1lLmNvbnN0cnVjdG9yLHI9dGhpcy50
        eXBlTWFwRm9yKHQpLG49bShlLCJpZCIpO2UudXBkYXRlUmVjb3JkQXJyYXlz
        KCksbiYmZGVsZXRlIHIuaWRUb1JlY29yZFtuXTt2YXIgaT1SKHIucmVjb3Jk
        cyxlKTtyLnJlY29yZHMuc3BsaWNlKGksMSl9LGFkZFJlbGF0aW9uc2hpcENo
        YW5nZUZvcjpmdW5jdGlvbihlLHQscixuLGkpe3ZhciBhPWUuY2xpZW50SWQs
        bz1yP3I6cixzPXQrbixjPXRoaXMuX3JlbGF0aW9uc2hpcENoYW5nZXM7YSBp
        biBjfHwoY1thXT17fSksbyBpbiBjW2FdfHwoY1thXVtvXT17fSkscyBpbiBj
        W2FdW29dfHwoY1thXVtvXVtzXT17fSksY1thXVtvXVtzXVtpLmNoYW5nZVR5
        cGVdPWl9LHJlbW92ZVJlbGF0aW9uc2hpcENoYW5nZUZvcjpmdW5jdGlvbihl
        LHQscixuLGkpe3ZhciBhPWUuY2xpZW50SWQsbz1yP3IuY2xpZW50SWQ6cixz
        PXRoaXMuX3JlbGF0aW9uc2hpcENoYW5nZXMsYz10K247YSBpbiBzJiZvIGlu
        IHNbYV0mJmMgaW4gc1thXVtvXSYmZGVsZXRlIHNbYV1bb11bY11baV19LHJl
        bGF0aW9uc2hpcENoYW5nZVBhaXJzRm9yOmZ1bmN0aW9uKGUpe3ZhciB0PVtd
        O2lmKCFlKXJldHVybiB0O3ZhciByPXRoaXMuX3JlbGF0aW9uc2hpcENoYW5n
        ZXNbZS5jbGllbnRJZF07Zm9yKHZhciBuIGluIHIpaWYoci5oYXNPd25Qcm9w
        ZXJ0eShuKSlmb3IodmFyIGkgaW4gcltuXSlyW25dLmhhc093blByb3BlcnR5
        KGkpJiZ0LnB1c2gocltuXVtpXSk7cmV0dXJuIHR9LGFkYXB0ZXJGb3I6ZnVu
        Y3Rpb24oZSl7dmFyIHQscj10aGlzLmNvbnRhaW5lcjtyZXR1cm4gciYmKHQ9
        ci5sb29rdXAoImFkYXB0ZXI6IitlLnR5cGVLZXkpfHxyLmxvb2t1cCgiYWRh
        cHRlcjphcHBsaWNhdGlvbiIpKSx0fHxtKHRoaXMsImRlZmF1bHRBZGFwdGVy
        Iil9LHNlcmlhbGl6ZXJGb3I6ZnVuY3Rpb24oZSl7ZT10aGlzLm1vZGVsRm9y
        KGUpO3ZhciB0PXRoaXMuYWRhcHRlckZvcihlKTtyZXR1cm4gbyh0aGlzLmNv
        bnRhaW5lcixlLnR5cGVLZXksdCYmdC5kZWZhdWx0U2VyaWFsaXplcil9fSks
        RFMuUHJvbWlzZUFycmF5PUVtYmVyLkFycmF5UHJveHkuZXh0ZW5kKEVtYmVy
        LlByb21pc2VQcm94eU1peGluKSxEUy5Qcm9taXNlT2JqZWN0PUVtYmVyLk9i
        amVjdFByb3h5LmV4dGVuZChFbWJlci5Qcm9taXNlUHJveHlNaXhpbil9KCks
        ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ZhciByLG49e307Zm9yKHZhciBp
        IGluIHQpcj10W2ldLG5baV09ciYmIm9iamVjdCI9PXR5cGVvZiByP2Uocik6
        cjtyZXR1cm4gbn1mdW5jdGlvbiB0KGUsdCl7Zm9yKHZhciByIGluIHQpZVty
        XT10W3JdO3JldHVybiBlfWZ1bmN0aW9uIHIocil7dmFyIG49ZShjKTtyZXR1
        cm4gdChuLHIpfWZ1bmN0aW9uIG4oZSxyLGkpe2U9dChyP0VtYmVyLmNyZWF0
        ZShyKTp7fSxlKSxlLnBhcmVudFN0YXRlPXIsZS5zdGF0ZU5hbWU9aTtmb3Io
        dmFyIGEgaW4gZSllLmhhc093blByb3BlcnR5KGEpJiYicGFyZW50U3RhdGUi
        IT09YSYmInN0YXRlTmFtZSIhPT1hJiYib2JqZWN0Ij09dHlwZW9mIGVbYV0m
        JihlW2FdPW4oZVthXSxlLGkrIi4iK2EpKTtyZXR1cm4gZX12YXIgaT1FbWJl
        ci5nZXQsYT1FbWJlci5zZXQsbz1mdW5jdGlvbihlKXt2YXIgdCxyLG4saT1F
        bWJlci5rZXlzKGUpO2Zvcih0PTAscj1pLmxlbmd0aDtyPnQ7dCsrKWlmKG49
        aVt0XSxlLmhhc093blByb3BlcnR5KG4pJiZlW25dKXJldHVybiEwO3JldHVy
        biExfSxzPWZ1bmN0aW9uKGUsdCl7dC52YWx1ZT09PXQub3JpZ2luYWxWYWx1
        ZT8oZGVsZXRlIGUuX2F0dHJpYnV0ZXNbdC5uYW1lXSxlLnNlbmQoInByb3Bl
        cnR5V2FzUmVzZXQiLHQubmFtZSkpOnQudmFsdWUhPT10Lm9sZFZhbHVlJiZl
        LnNlbmQoImJlY29tZURpcnR5IiksZS51cGRhdGVSZWNvcmRBcnJheXNMYXRl
        cigpfSxjPXtpbml0aWFsU3RhdGU6InVuY29tbWl0dGVkIixpc0RpcnR5OiEw
        LHVuY29tbWl0dGVkOntkaWRTZXRQcm9wZXJ0eTpzLHByb3BlcnR5V2FzUmVz
        ZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ITE7Zm9yKHZhciByIGluIGUuX2F0dHJp
        YnV0ZXMpe3Q9ITA7YnJlYWt9dHx8ZS5zZW5kKCJyb2xsZWRCYWNrIil9LHB1
        c2hlZERhdGE6RW1iZXIuSyxiZWNvbWVEaXJ0eTpFbWJlci5LLHdpbGxDb21t
        aXQ6ZnVuY3Rpb24oZSl7ZS50cmFuc2l0aW9uVG8oImluRmxpZ2h0Iil9LHJl
        bG9hZFJlY29yZDpmdW5jdGlvbihlLHQpe2koZSwic3RvcmUiKS5yZWxvYWRS
        ZWNvcmQoZSx0KX0scm9sbGVkQmFjazpmdW5jdGlvbihlKXtlLnRyYW5zaXRp
        b25UbygibG9hZGVkLnNhdmVkIil9LGJlY2FtZUludmFsaWQ6ZnVuY3Rpb24o
        ZSl7ZS50cmFuc2l0aW9uVG8oImludmFsaWQiKX0scm9sbGJhY2s6ZnVuY3Rp
        b24oZSl7ZS5yb2xsYmFjaygpfX0saW5GbGlnaHQ6e2lzU2F2aW5nOiEwLGRp
        ZFNldFByb3BlcnR5OnMsYmVjb21lRGlydHk6RW1iZXIuSyxwdXNoZWREYXRh
        OkVtYmVyLkssd2lsbENvbW1pdDpFbWJlci5LLGRpZENvbW1pdDpmdW5jdGlv
        bihlKXt2YXIgdD1pKHRoaXMsImRpcnR5VHlwZSIpO2UudHJhbnNpdGlvblRv
        KCJzYXZlZCIpLGUuc2VuZCgiaW52b2tlTGlmZWN5Y2xlQ2FsbGJhY2tzIix0
        KX0sYmVjYW1lSW52YWxpZDpmdW5jdGlvbihlLHQpe2EoZSwiZXJyb3JzIix0
        KSxlLnRyYW5zaXRpb25UbygiaW52YWxpZCIpLGUuc2VuZCgiaW52b2tlTGlm
        ZWN5Y2xlQ2FsbGJhY2tzIil9LGJlY2FtZUVycm9yOmZ1bmN0aW9uKGUpe2Uu
        dHJhbnNpdGlvblRvKCJ1bmNvbW1pdHRlZCIpLGUudHJpZ2dlckxhdGVyKCJi
        ZWNhbWVFcnJvciIsZSl9fSxpbnZhbGlkOntpc1ZhbGlkOiExLGRlbGV0ZVJl
        Y29yZDpmdW5jdGlvbihlKXtlLnRyYW5zaXRpb25UbygiZGVsZXRlZC51bmNv
        bW1pdHRlZCIpLGUuY2xlYXJSZWxhdGlvbnNoaXBzKCl9LGRpZFNldFByb3Bl
        cnR5OmZ1bmN0aW9uKGUsdCl7dmFyIHI9aShlLCJlcnJvcnMiKSxuPXQubmFt
        ZTthKHIsbixudWxsKSxvKHIpfHxlLnNlbmQoImJlY2FtZVZhbGlkIikscyhl
        LHQpfSxiZWNvbWVEaXJ0eTpFbWJlci5LLHJvbGxiYWNrOmZ1bmN0aW9uKGUp
        e2Uuc2VuZCgiYmVjYW1lVmFsaWQiKSxlLnNlbmQoInJvbGxiYWNrIil9LGJl
        Y2FtZVZhbGlkOmZ1bmN0aW9uKGUpe2UudHJhbnNpdGlvblRvKCJ1bmNvbW1p
        dHRlZCIpfSxpbnZva2VMaWZlY3ljbGVDYWxsYmFja3M6ZnVuY3Rpb24oZSl7
        ZS50cmlnZ2VyTGF0ZXIoImJlY2FtZUludmFsaWQiLGUpfX19LHU9cih7ZGly
        dHlUeXBlOiJjcmVhdGVkIixpc05ldzohMH0pO3UudW5jb21taXR0ZWQucm9s
        bGVkQmFjaz1mdW5jdGlvbihlKXtlLnRyYW5zaXRpb25UbygiZGVsZXRlZC5z
        YXZlZCIpfTt2YXIgZD1yKHtkaXJ0eVR5cGU6InVwZGF0ZWQifSk7dS51bmNv
        bW1pdHRlZC5kZWxldGVSZWNvcmQ9ZnVuY3Rpb24oZSl7ZS5jbGVhclJlbGF0
        aW9uc2hpcHMoKSxlLnRyYW5zaXRpb25UbygiZGVsZXRlZC5zYXZlZCIpfSx1
        LnVuY29tbWl0dGVkLnJvbGxiYWNrPWZ1bmN0aW9uKGUpe2MudW5jb21taXR0
        ZWQucm9sbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpLGUudHJhbnNpdGlv
        blRvKCJkZWxldGVkLnNhdmVkIil9LGQudW5jb21taXR0ZWQuZGVsZXRlUmVj
        b3JkPWZ1bmN0aW9uKGUpe2UudHJhbnNpdGlvblRvKCJkZWxldGVkLnVuY29t
        bWl0dGVkIiksZS5jbGVhclJlbGF0aW9uc2hpcHMoKX07dmFyIGw9e2lzRW1w
        dHk6ITEsaXNMb2FkaW5nOiExLGlzTG9hZGVkOiExLGlzRGlydHk6ITEsaXNT
        YXZpbmc6ITEsaXNEZWxldGVkOiExLGlzTmV3OiExLGlzVmFsaWQ6ITAscm9s
        bGVkQmFjazpFbWJlci5LLHByb3BlcnR5V2FzUmVzZXQ6RW1iZXIuSyxlbXB0
        eTp7aXNFbXB0eTohMCxsb2FkaW5nRGF0YTpmdW5jdGlvbihlLHQpe2UuX2xv
        YWRpbmdQcm9taXNlPXQsZS50cmFuc2l0aW9uVG8oImxvYWRpbmciKX0sbG9h
        ZGVkRGF0YTpmdW5jdGlvbihlKXtlLnRyYW5zaXRpb25UbygibG9hZGVkLmNy
        ZWF0ZWQudW5jb21taXR0ZWQiKSxlLnN1c3BlbmRSZWxhdGlvbnNoaXBPYnNl
        cnZlcnMoZnVuY3Rpb24oKXtlLm5vdGlmeVByb3BlcnR5Q2hhbmdlKCJkYXRh
        Iil9KX0scHVzaGVkRGF0YTpmdW5jdGlvbihlKXtlLnRyYW5zaXRpb25Ubygi
        bG9hZGVkLnNhdmVkIiksZS50cmlnZ2VyTGF0ZXIoImRpZExvYWQiKX19LGxv
        YWRpbmc6e2lzTG9hZGluZzohMCxleGl0OmZ1bmN0aW9uKGUpe2UuX2xvYWRp
        bmdQcm9taXNlPW51bGx9LHB1c2hlZERhdGE6ZnVuY3Rpb24oZSl7ZS50cmFu
        c2l0aW9uVG8oImxvYWRlZC5zYXZlZCIpLGUudHJpZ2dlckxhdGVyKCJkaWRM
        b2FkIiksYShlLCJpc0Vycm9yIiwhMSl9LGJlY2FtZUVycm9yOmZ1bmN0aW9u
        KGUpe2UudHJpZ2dlckxhdGVyKCJiZWNhbWVFcnJvciIsZSl9LG5vdEZvdW5k
        OmZ1bmN0aW9uKGUpe2UudHJhbnNpdGlvblRvKCJlbXB0eSIpfX0sbG9hZGVk
        Ontpbml0aWFsU3RhdGU6InNhdmVkIixpc0xvYWRlZDohMCxzYXZlZDp7c2V0
        dXA6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5fYXR0cmlidXRlcyxyPSExO2Zvcih2
        YXIgbiBpbiB0KWlmKHQuaGFzT3duUHJvcGVydHkobikpe3I9ITA7YnJlYWt9
        ciYmZS5hZGFwdGVyRGlkRGlydHkoKX0sZGlkU2V0UHJvcGVydHk6cyxwdXNo
        ZWREYXRhOkVtYmVyLkssYmVjb21lRGlydHk6ZnVuY3Rpb24oZSl7ZS50cmFu
        c2l0aW9uVG8oInVwZGF0ZWQudW5jb21taXR0ZWQiKX0sd2lsbENvbW1pdDpm
        dW5jdGlvbihlKXtlLnRyYW5zaXRpb25UbygidXBkYXRlZC5pbkZsaWdodCIp
        fSxyZWxvYWRSZWNvcmQ6ZnVuY3Rpb24oZSx0KXtpKGUsInN0b3JlIikucmVs
        b2FkUmVjb3JkKGUsdCl9LGRlbGV0ZVJlY29yZDpmdW5jdGlvbihlKXtlLnRy
        YW5zaXRpb25UbygiZGVsZXRlZC51bmNvbW1pdHRlZCIpLGUuY2xlYXJSZWxh
        dGlvbnNoaXBzKCl9LHVubG9hZFJlY29yZDpmdW5jdGlvbihlKXtlLmNsZWFy
        UmVsYXRpb25zaGlwcygpLGUudHJhbnNpdGlvblRvKCJkZWxldGVkLnNhdmVk
        Iil9LGRpZENvbW1pdDpmdW5jdGlvbihlKXtlLnNlbmQoImludm9rZUxpZmVj
        eWNsZUNhbGxiYWNrcyIsaShlLCJsYXN0RGlydHlUeXBlIikpfX0sY3JlYXRl
        ZDp1LHVwZGF0ZWQ6ZH0sZGVsZXRlZDp7aW5pdGlhbFN0YXRlOiJ1bmNvbW1p
        dHRlZCIsZGlydHlUeXBlOiJkZWxldGVkIixpc0RlbGV0ZWQ6ITAsaXNMb2Fk
        ZWQ6ITAsaXNEaXJ0eTohMCxzZXR1cDpmdW5jdGlvbihlKXt2YXIgdD1pKGUs
        InN0b3JlIik7dC5yZWNvcmRBcnJheU1hbmFnZXIucmVtb3ZlKGUpfSx1bmNv
        bW1pdHRlZDp7d2lsbENvbW1pdDpmdW5jdGlvbihlKXtlLnRyYW5zaXRpb25U
        bygiaW5GbGlnaHQiKX0scm9sbGJhY2s6ZnVuY3Rpb24oZSl7ZS5yb2xsYmFj
        aygpfSxiZWNvbWVEaXJ0eTpFbWJlci5LLGRlbGV0ZVJlY29yZDpFbWJlci5L
        LHJvbGxlZEJhY2s6ZnVuY3Rpb24oZSl7ZS50cmFuc2l0aW9uVG8oImxvYWRl
        ZC5zYXZlZCIpfX0saW5GbGlnaHQ6e2lzU2F2aW5nOiEwLHdpbGxDb21taXQ6
        RW1iZXIuSyxkaWRDb21taXQ6ZnVuY3Rpb24oZSl7ZS50cmFuc2l0aW9uVG8o
        InNhdmVkIiksZS5zZW5kKCJpbnZva2VMaWZlY3ljbGVDYWxsYmFja3MiKX0s
        YmVjYW1lRXJyb3I6ZnVuY3Rpb24oZSl7ZS50cmFuc2l0aW9uVG8oInVuY29t
        bWl0dGVkIiksZS50cmlnZ2VyTGF0ZXIoImJlY2FtZUVycm9yIixlKX19LHNh
        dmVkOntpc0RpcnR5OiExLHNldHVwOmZ1bmN0aW9uKGUpe3ZhciB0PWkoZSwi
        c3RvcmUiKTt0LmRlbWF0ZXJpYWxpemVSZWNvcmQoZSl9LGludm9rZUxpZmVj
        eWNsZUNhbGxiYWNrczpmdW5jdGlvbihlKXtlLnRyaWdnZXJMYXRlcigiZGlk
        RGVsZXRlIixlKSxlLnRyaWdnZXJMYXRlcigiZGlkQ29tbWl0IixlKX19fSxp
        bnZva2VMaWZlY3ljbGVDYWxsYmFja3M6ZnVuY3Rpb24oZSx0KXsiY3JlYXRl
        ZCI9PT10P2UudHJpZ2dlckxhdGVyKCJkaWRDcmVhdGUiLGUpOmUudHJpZ2dl
        ckxhdGVyKCJkaWRVcGRhdGUiLGUpLGUudHJpZ2dlckxhdGVyKCJkaWRDb21t
        aXQiLGUpfX07bD1uKGwsbnVsbCwicm9vdCIpLERTLlJvb3RTdGF0ZT1sfSgp
        LGZ1bmN0aW9uKCl7dmFyIGU9RW1iZXIuZ2V0LHQ9RW1iZXIuc2V0LHI9RW1i
        ZXIubWVyZ2Usbj1FbWJlci5ydW4ub25jZSxpPUVtYmVyLmNvbXB1dGVkKGZ1
        bmN0aW9uKHQpe3JldHVybiBlKGUodGhpcywiY3VycmVudFN0YXRlIiksdCl9
        KS5wcm9wZXJ0eSgiY3VycmVudFN0YXRlIikucmVhZE9ubHkoKTtEUy5Nb2Rl
        bD1FbWJlci5PYmplY3QuZXh0ZW5kKEVtYmVyLkV2ZW50ZWQse2lzRW1wdHk6
        aSxpc0xvYWRpbmc6aSxpc0xvYWRlZDppLGlzRGlydHk6aSxpc1NhdmluZzpp
        LGlzRGVsZXRlZDppLGlzTmV3OmksaXNWYWxpZDppLGRpcnR5VHlwZTppLGlz
        RXJyb3I6ITEsaXNSZWxvYWRpbmc6ITEsY2xpZW50SWQ6bnVsbCxpZDpudWxs
        LHRyYW5zYWN0aW9uOm51bGwsY3VycmVudFN0YXRlOm51bGwsZXJyb3JzOm51
        bGwsc2VyaWFsaXplOmZ1bmN0aW9uKHQpe3ZhciByPWUodGhpcywic3RvcmUi
        KTtyZXR1cm4gci5zZXJpYWxpemUodGhpcyx0KX0sdG9KU09OOmZ1bmN0aW9u
        KGUpe3ZhciB0PURTLkpTT05TZXJpYWxpemVyLmNyZWF0ZSh7Y29udGFpbmVy
        OnRoaXMuY29udGFpbmVyfSk7cmV0dXJuIHQuc2VyaWFsaXplKHRoaXMsZSl9
        LGRpZExvYWQ6RW1iZXIuSyxkaWRSZWxvYWQ6RW1iZXIuSyxkaWRVcGRhdGU6
        RW1iZXIuSyxkaWRDcmVhdGU6RW1iZXIuSyxkaWREZWxldGU6RW1iZXIuSyxi
        ZWNhbWVJbnZhbGlkOkVtYmVyLkssYmVjYW1lRXJyb3I6RW1iZXIuSyxkYXRh
        OkVtYmVyLmNvbXB1dGVkKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGE9
        dGhpcy5fZGF0YXx8e30sdGhpcy5fZGF0YX0pLnByb3BlcnR5KCksX2RhdGE6
        bnVsbCxpbml0OmZ1bmN0aW9uKCl7dCh0aGlzLCJjdXJyZW50U3RhdGUiLERT
        LlJvb3RTdGF0ZS5lbXB0eSksdGhpcy5fc3VwZXIoKSx0aGlzLl9zZXR1cCgp
        fSxfc2V0dXA6ZnVuY3Rpb24oKXt0aGlzLl9jaGFuZ2VzVG9TeW5jPXt9LHRo
        aXMuX2RlZmVycmVkVHJpZ2dlcnM9W10sdGhpcy5fZGF0YT17fSx0aGlzLl9h
        dHRyaWJ1dGVzPXt9LHRoaXMuX2luRmxpZ2h0QXR0cmlidXRlcz17fSx0aGlz
        Ll9yZWxhdGlvbnNoaXBzPXt9fSxzZW5kOmZ1bmN0aW9uKHQscil7dmFyIG49
        ZSh0aGlzLCJjdXJyZW50U3RhdGUiKTtyZXR1cm4gblt0XXx8dGhpcy5fdW5o
        YW5kbGVkRXZlbnQobix0LHIpLG5bdF0odGhpcyxyKX0sdHJhbnNpdGlvblRv
        OmZ1bmN0aW9uKHIpe3ZhciBuPXIuc3BsaXQoIi4iLDEpLGk9ZSh0aGlzLCJj
        dXJyZW50U3RhdGUiKSxhPWk7ZG8gYS5leGl0JiZhLmV4aXQodGhpcyksYT1h
        LnBhcmVudFN0YXRlO3doaWxlKCFhLmhhc093blByb3BlcnR5KG4pKTt2YXIg
        byxzLGM9ci5zcGxpdCgiLiIpLHU9W10sZD1bXTtmb3Iobz0wLHM9Yy5sZW5n
        dGg7cz5vO28rKylhPWFbY1tvXV0sYS5lbnRlciYmZC5wdXNoKGEpLGEuc2V0
        dXAmJnUucHVzaChhKTtmb3Iobz0wLHM9ZC5sZW5ndGg7cz5vO28rKylkW29d
        LmVudGVyKHRoaXMpO2Zvcih0KHRoaXMsImN1cnJlbnRTdGF0ZSIsYSksbz0w
        LHM9dS5sZW5ndGg7cz5vO28rKyl1W29dLnNldHVwKHRoaXMpfSxfdW5oYW5k
        bGVkRXZlbnQ6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPSJBdHRlbXB0ZWQgdG8g
        aGFuZGxlIGV2ZW50IGAiK3QrImAgIjt0aHJvdyBuKz0ib24gIitTdHJpbmco
        dGhpcykrIiB3aGlsZSBpbiBzdGF0ZSAiLG4rPWUuc3RhdGVOYW1lKyIuICIs
        dm9pZCAwIT09ciYmKG4rPSJDYWxsZWQgd2l0aCAiK0VtYmVyLmluc3BlY3Qo
        cikrIi4iKSxuZXcgRW1iZXIuRXJyb3Iobil9LHdpdGhUcmFuc2FjdGlvbjpm
        dW5jdGlvbih0KXt2YXIgcj1lKHRoaXMsInRyYW5zYWN0aW9uIik7ciYmdChy
        KX0sbG9hZGluZ0RhdGE6ZnVuY3Rpb24oZSl7dGhpcy5zZW5kKCJsb2FkaW5n
        RGF0YSIsZSl9LGxvYWRlZERhdGE6ZnVuY3Rpb24oKXt0aGlzLnNlbmQoImxv
        YWRlZERhdGEiKX0sbm90Rm91bmQ6ZnVuY3Rpb24oKXt0aGlzLnNlbmQoIm5v
        dEZvdW5kIil9LHB1c2hlZERhdGE6ZnVuY3Rpb24oKXt0aGlzLnNlbmQoInB1
        c2hlZERhdGEiKX0sZGVsZXRlUmVjb3JkOmZ1bmN0aW9uKCl7dGhpcy5zZW5k
        KCJkZWxldGVSZWNvcmQiKX0sdW5sb2FkUmVjb3JkOmZ1bmN0aW9uKCl7dGhp
        cy5zZW5kKCJ1bmxvYWRSZWNvcmQiKX0sY2xlYXJSZWxhdGlvbnNoaXBzOmZ1
        bmN0aW9uKCl7dGhpcy5lYWNoUmVsYXRpb25zaGlwKGZ1bmN0aW9uKGUscil7
        aWYoImJlbG9uZ3NUbyI9PT1yLmtpbmQpdCh0aGlzLGUsbnVsbCk7ZWxzZSBp
        ZigiaGFzTWFueSI9PT1yLmtpbmQpe3ZhciBuPXRoaXMuX3JlbGF0aW9uc2hp
        cHNbci5uYW1lXTtuJiZuLmNsZWFyKCl9fSx0aGlzKX0sdXBkYXRlUmVjb3Jk
        QXJyYXlzOmZ1bmN0aW9uKCl7dmFyIHQ9ZSh0aGlzLCJzdG9yZSIpO3QmJnQu
        ZGF0YVdhc1VwZGF0ZWQodGhpcy5jb25zdHJ1Y3Rvcix0aGlzKX0sY2hhbmdl
        ZEF0dHJpYnV0ZXM6ZnVuY3Rpb24oKXt2YXIgdCxyPWUodGhpcywiX2RhdGEi
        KSxuPWUodGhpcywiX2F0dHJpYnV0ZXMiKSxpPXt9O2Zvcih0IGluIG4paVt0
        XT1bclt0XSxuW3RdXTtyZXR1cm4gaX0sYWRhcHRlcldpbGxDb21taXQ6ZnVu
        Y3Rpb24oKXt0aGlzLnNlbmQoIndpbGxDb21taXQiKX0sYWRhcHRlckRpZENv
        bW1pdDpmdW5jdGlvbihlKXt0KHRoaXMsImlzRXJyb3IiLCExKSxlP3RoaXMu
        X2RhdGE9ZTpFbWJlci5taXhpbih0aGlzLl9kYXRhLHRoaXMuX2luRmxpZ2h0
        QXR0cmlidXRlcyksdGhpcy5faW5GbGlnaHRBdHRyaWJ1dGVzPXt9LHRoaXMu
        c2VuZCgiZGlkQ29tbWl0IiksdGhpcy51cGRhdGVSZWNvcmRBcnJheXNMYXRl
        cigpLGUmJnRoaXMuc3VzcGVuZFJlbGF0aW9uc2hpcE9ic2VydmVycyhmdW5j
        dGlvbigpe3RoaXMubm90aWZ5UHJvcGVydHlDaGFuZ2UoImRhdGEiKX0pfSxh
        ZGFwdGVyRGlkRGlydHk6ZnVuY3Rpb24oKXt0aGlzLnNlbmQoImJlY29tZURp
        cnR5IiksdGhpcy51cGRhdGVSZWNvcmRBcnJheXNMYXRlcigpfSxkYXRhRGlk
        Q2hhbmdlOkVtYmVyLm9ic2VydmVyKGZ1bmN0aW9uKCl7dGhpcy5yZWxvYWRI
        YXNNYW55cygpfSwiZGF0YSIpLHJlbG9hZEhhc01hbnlzOmZ1bmN0aW9uKCl7
        dmFyIHQ9ZSh0aGlzLmNvbnN0cnVjdG9yLCJyZWxhdGlvbnNoaXBzQnlOYW1l
        Iik7dGhpcy51cGRhdGVSZWNvcmRBcnJheXNMYXRlcigpLHQuZm9yRWFjaChm
        dW5jdGlvbihlLHQpe3RoaXMuX2RhdGEubGlua3MmJnRoaXMuX2RhdGEubGlu
        a3NbZV18fCJoYXNNYW55Ij09PXQua2luZCYmdGhpcy5oYXNNYW55RGlkQ2hh
        bmdlKHQua2V5KX0sdGhpcyl9LGhhc01hbnlEaWRDaGFuZ2U6ZnVuY3Rpb24o
        ZSl7dmFyIHI9dGhpcy5fcmVsYXRpb25zaGlwc1tlXTtpZihyKXt2YXIgbj10
        aGlzLl9kYXRhW2VdfHxbXTt0KHIsImNvbnRlbnQiLEVtYmVyLkEobikpLHQo
        ciwiaXNMb2FkZWQiLCEwKSxyLnRyaWdnZXIoImRpZExvYWQiKX19LHVwZGF0
        ZVJlY29yZEFycmF5c0xhdGVyOmZ1bmN0aW9uKCl7RW1iZXIucnVuLm9uY2Uo
        dGhpcyx0aGlzLnVwZGF0ZVJlY29yZEFycmF5cyl9LHNldHVwRGF0YTpmdW5j
        dGlvbihlLHQpe3Q/RW1iZXIubWVyZ2UodGhpcy5fZGF0YSxlKTp0aGlzLl9k
        YXRhPWU7dmFyIHI9dGhpcy5fcmVsYXRpb25zaGlwczt0aGlzLmVhY2hSZWxh
        dGlvbnNoaXAoZnVuY3Rpb24odCxuKXtlLmxpbmtzJiZlLmxpbmtzW3RdfHxu
        Lm9wdGlvbnMuYXN5bmMmJihyW3RdPW51bGwpfSksZSYmdGhpcy5wdXNoZWRE
        YXRhKCksdGhpcy5zdXNwZW5kUmVsYXRpb25zaGlwT2JzZXJ2ZXJzKGZ1bmN0
        aW9uKCl7dGhpcy5ub3RpZnlQcm9wZXJ0eUNoYW5nZSgiZGF0YSIpfSl9LG1h
        dGVyaWFsaXplSWQ6ZnVuY3Rpb24oZSl7dCh0aGlzLCJpZCIsZSl9LG1hdGVy
        aWFsaXplQXR0cmlidXRlczpmdW5jdGlvbihlKXtyKHRoaXMuX2RhdGEsZSl9
        LG1hdGVyaWFsaXplQXR0cmlidXRlOmZ1bmN0aW9uKGUsdCl7dGhpcy5fZGF0
        YVtlXT10fSx1cGRhdGVIYXNNYW55OmZ1bmN0aW9uKGUsdCl7dGhpcy5fZGF0
        YVtlXT10LHRoaXMuaGFzTWFueURpZENoYW5nZShlKX0sdXBkYXRlQmVsb25n
        c1RvOmZ1bmN0aW9uKGUsdCl7dGhpcy5fZGF0YVtlXT10fSxyb2xsYmFjazpm
        dW5jdGlvbigpe3RoaXMuX2F0dHJpYnV0ZXM9e30sZSh0aGlzLCJpc0Vycm9y
        IikmJih0aGlzLl9pbkZsaWdodEF0dHJpYnV0ZXM9e30sdCh0aGlzLCJpc0Vy
        cm9yIiwhMSkpLHRoaXMuc2VuZCgicm9sbGVkQmFjayIpLHRoaXMuc3VzcGVu
        ZFJlbGF0aW9uc2hpcE9ic2VydmVycyhmdW5jdGlvbigpe3RoaXMubm90aWZ5
        UHJvcGVydHlDaGFuZ2UoImRhdGEiKX0pfSx0b1N0cmluZ0V4dGVuc2lvbjpm
        dW5jdGlvbigpe3JldHVybiBlKHRoaXMsImlkIil9LHN1c3BlbmRSZWxhdGlv
        bnNoaXBPYnNlcnZlcnM6ZnVuY3Rpb24odCxyKXt2YXIgbj1lKHRoaXMuY29u
        c3RydWN0b3IsInJlbGF0aW9uc2hpcE5hbWVzIikuYmVsb25nc1RvLGk9dGhp
        czt0cnl7dGhpcy5fc3VzcGVuZGVkUmVsYXRpb25zaGlwcz0hMCxFbWJlci5f
        c3VzcGVuZE9ic2VydmVycyhpLG4sbnVsbCwiYmVsb25nc1RvRGlkQ2hhbmdl
        IixmdW5jdGlvbigpe0VtYmVyLl9zdXNwZW5kQmVmb3JlT2JzZXJ2ZXJzKGks
        bixudWxsLCJiZWxvbmdzVG9XaWxsQ2hhbmdlIixmdW5jdGlvbigpe3QuY2Fs
        bChyfHxpKX0pfSl9ZmluYWxseXt0aGlzLl9zdXNwZW5kZWRSZWxhdGlvbnNo
        aXBzPSExfX0sc2F2ZTpmdW5jdGlvbigpe3ZhciBlPUVtYmVyLlJTVlAuZGVm
        ZXIoKTtyZXR1cm4gdGhpcy5nZXQoInN0b3JlIikuc2NoZWR1bGVTYXZlKHRo
        aXMsZSksdGhpcy5faW5GbGlnaHRBdHRyaWJ1dGVzPXRoaXMuX2F0dHJpYnV0
        ZXMsdGhpcy5fYXR0cmlidXRlcz17fSxEUy5Qcm9taXNlT2JqZWN0LmNyZWF0
        ZSh7cHJvbWlzZTplLnByb21pc2V9KX0scmVsb2FkOmZ1bmN0aW9uKCl7dCh0
        aGlzLCJpc1JlbG9hZGluZyIsITApO3ZhciBlPUVtYmVyLlJTVlAuZGVmZXIo
        KSxyPXRoaXM7cmV0dXJuIGUucHJvbWlzZT1lLnByb21pc2UudGhlbihmdW5j
        dGlvbigpe3JldHVybiByLnNldCgiaXNSZWxvYWRpbmciLCExKSxyLnNldCgi
        aXNFcnJvciIsITEpLHJ9LGZ1bmN0aW9uKGUpe3Rocm93IHIuc2V0KCJpc0Vy
        cm9yIiwhMCksZX0pLHRoaXMuc2VuZCgicmVsb2FkUmVjb3JkIixlKSxEUy5Q
        cm9taXNlT2JqZWN0LmNyZWF0ZSh7cHJvbWlzZTplLnByb21pc2V9KX0sYWRh
        cHRlckRpZFVwZGF0ZUF0dHJpYnV0ZTpmdW5jdGlvbihlLHQpe3ZvaWQgMCE9
        PXQ/KHRoaXMuX2RhdGFbZV09dCx0aGlzLm5vdGlmeVByb3BlcnR5Q2hhbmdl
        KGUpKTp0aGlzLl9kYXRhW2VdPXRoaXMuX2luRmxpZ2h0QXR0cmlidXRlc1tl
        XSx0aGlzLnVwZGF0ZVJlY29yZEFycmF5c0xhdGVyKCl9LGFkYXB0ZXJEaWRJ
        bnZhbGlkYXRlOmZ1bmN0aW9uKGUpe3RoaXMuc2VuZCgiYmVjYW1lSW52YWxp
        ZCIsZSl9LGFkYXB0ZXJEaWRFcnJvcjpmdW5jdGlvbigpe3RoaXMuc2VuZCgi
        YmVjYW1lRXJyb3IiKSx0KHRoaXMsImlzRXJyb3IiLCEwKX0sdHJpZ2dlcjpm
        dW5jdGlvbihlKXtFbWJlci50cnlJbnZva2UodGhpcyxlLFtdLnNsaWNlLmNh
        bGwoYXJndW1lbnRzLDEpKSx0aGlzLl9zdXBlci5hcHBseSh0aGlzLGFyZ3Vt
        ZW50cyl9LHRyaWdnZXJMYXRlcjpmdW5jdGlvbigpe3RoaXMuX2RlZmVycmVk
        VHJpZ2dlcnMucHVzaChhcmd1bWVudHMpLG4odGhpcywiX3RyaWdnZXJEZWZl
        cnJlZFRyaWdnZXJzIil9LF90cmlnZ2VyRGVmZXJyZWRUcmlnZ2VyczpmdW5j
        dGlvbigpe2Zvcih2YXIgZT0wLHQ9dGhpcy5fZGVmZXJyZWRUcmlnZ2Vycy5s
        ZW5ndGg7dD5lO2UrKyl0aGlzLnRyaWdnZXIuYXBwbHkodGhpcyx0aGlzLl9k
        ZWZlcnJlZFRyaWdnZXJzW2VdKTt0aGlzLl9kZWZlcnJlZFRyaWdnZXJzPVtd
        fX0pLERTLk1vZGVsLnJlb3BlbkNsYXNzKHtfY3JlYXRlOkRTLk1vZGVsLmNy
        ZWF0ZSxjcmVhdGU6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRW1iZXIuRXJyb3Io
        IllvdSBzaG91bGQgbm90IGNhbGwgYGNyZWF0ZWAgb24gYSBtb2RlbC4gSW5z
        dGVhZCwgY2FsbCBgc3RvcmUuY3JlYXRlUmVjb3JkYCB3aXRoIHRoZSBhdHRy
        aWJ1dGVzIHlvdSB3b3VsZCBsaWtlIHRvIHNldC4iKX19KX0oKSxmdW5jdGlv
        bigpe2Z1bmN0aW9uIGUoZSx0KXtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2Yg
        dC5kZWZhdWx0VmFsdWU/dC5kZWZhdWx0VmFsdWUoKTp0LmRlZmF1bHRWYWx1
        ZX1mdW5jdGlvbiB0KGUsdCl7cmV0dXJuIGUuX2F0dHJpYnV0ZXMuaGFzT3du
        UHJvcGVydHkodCl8fGUuX2luRmxpZ2h0QXR0cmlidXRlcy5oYXNPd25Qcm9w
        ZXJ0eSh0KXx8ZS5fZGF0YS5oYXNPd25Qcm9wZXJ0eSh0KX1mdW5jdGlvbiBy
        KGUsdCl7cmV0dXJuIGUuX2F0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkodCk/
        ZS5fYXR0cmlidXRlc1t0XTplLl9pbkZsaWdodEF0dHJpYnV0ZXMuaGFzT3du
        UHJvcGVydHkodCk/ZS5faW5GbGlnaHRBdHRyaWJ1dGVzW3RdOmUuX2RhdGFb
        dF19dmFyIG49RW1iZXIuZ2V0O0RTLk1vZGVsLnJlb3BlbkNsYXNzKHthdHRy
        aWJ1dGVzOkVtYmVyLmNvbXB1dGVkKGZ1bmN0aW9uKCl7dmFyIGU9RW1iZXIu
        TWFwLmNyZWF0ZSgpO3JldHVybiB0aGlzLmVhY2hDb21wdXRlZFByb3BlcnR5
        KGZ1bmN0aW9uKHQscil7ci5pc0F0dHJpYnV0ZSYmKHIubmFtZT10LGUuc2V0
        KHQscikpfSksZX0pLHRyYW5zZm9ybWVkQXR0cmlidXRlczpFbWJlci5jb21w
        dXRlZChmdW5jdGlvbigpe3ZhciBlPUVtYmVyLk1hcC5jcmVhdGUoKTtyZXR1
        cm4gdGhpcy5lYWNoQXR0cmlidXRlKGZ1bmN0aW9uKHQscil7ci50eXBlJiZl
        LnNldCh0LHIudHlwZSl9KSxlfSksZWFjaEF0dHJpYnV0ZTpmdW5jdGlvbihl
        LHQpe24odGhpcywiYXR0cmlidXRlcyIpLmZvckVhY2goZnVuY3Rpb24ocixu
        KXtlLmNhbGwodCxyLG4pfSx0KX0sZWFjaFRyYW5zZm9ybWVkQXR0cmlidXRl
        OmZ1bmN0aW9uKGUsdCl7bih0aGlzLCJ0cmFuc2Zvcm1lZEF0dHJpYnV0ZXMi
        KS5mb3JFYWNoKGZ1bmN0aW9uKHIsbil7ZS5jYWxsKHQscixuKX0pfX0pLERT
        Lk1vZGVsLnJlb3Blbih7ZWFjaEF0dHJpYnV0ZTpmdW5jdGlvbihlLHQpe3Ro
        aXMuY29uc3RydWN0b3IuZWFjaEF0dHJpYnV0ZShlLHQpfX0pLERTLmF0dHI9
        ZnVuY3Rpb24obixpKXtpPWl8fHt9O3ZhciBhPXt0eXBlOm4saXNBdHRyaWJ1
        dGU6ITAsb3B0aW9uczppfTtyZXR1cm4gRW1iZXIuY29tcHV0ZWQoZnVuY3Rp
        b24obixhKXtpZihhcmd1bWVudHMubGVuZ3RoPjEpe3ZhciBvPXRoaXMuX2F0
        dHJpYnV0ZXNbbl18fHRoaXMuX2luRmxpZ2h0QXR0cmlidXRlc1tuXXx8dGhp
        cy5fZGF0YVtuXTsKcmV0dXJuIHRoaXMuc2VuZCgiZGlkU2V0UHJvcGVydHki
        LHtuYW1lOm4sb2xkVmFsdWU6byxvcmlnaW5hbFZhbHVlOnRoaXMuX2RhdGFb
        bl0sdmFsdWU6YX0pLHRoaXMuX2F0dHJpYnV0ZXNbbl09YSxhfXJldHVybiB0
        KHRoaXMsbik/cih0aGlzLG4pOmUodGhpcyxpLG4pfSkucHJvcGVydHkoImRh
        dGEiKS5tZXRhKGEpfX0oKSxmdW5jdGlvbigpe3ZhciBlPURTLkF0dHJpYnV0
        ZUNoYW5nZT1mdW5jdGlvbihlKXt0aGlzLnJlY29yZD1lLnJlY29yZCx0aGlz
        LnN0b3JlPWUuc3RvcmUsdGhpcy5uYW1lPWUubmFtZSx0aGlzLnZhbHVlPWUu
        dmFsdWUsdGhpcy5vbGRWYWx1ZT1lLm9sZFZhbHVlfTtlLmNyZWF0ZUNoYW5n
        ZT1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IGUodCl9LGUucHJvdG90eXBlPXtz
        eW5jOmZ1bmN0aW9uKCl7dGhpcy52YWx1ZSE9PXRoaXMub2xkVmFsdWUmJih0
        aGlzLnJlY29yZC5zZW5kKCJiZWNvbWVEaXJ0eSIpLHRoaXMucmVjb3JkLnVw
        ZGF0ZVJlY29yZEFycmF5c0xhdGVyKCkpLHRoaXMuZGVzdHJveSgpfSxkZXN0
        cm95OmZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXMucmVjb3JkLl9jaGFuZ2VzVG9T
        eW5jW3RoaXMubmFtZV19fX0oKSxmdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7
        cmV0dXJuIm9iamVjdCI9PXR5cGVvZiBlJiYoIWUudGhlbnx8ImZ1bmN0aW9u
        IiE9dHlwZW9mIGUudGhlbil9dmFyIHQ9RW1iZXIuZ2V0LHI9RW1iZXIuc2V0
        LG49RW1iZXIuRW51bWVyYWJsZVV0aWxzLmZvckVhY2g7RFMuUmVsYXRpb25z
        aGlwQ2hhbmdlPWZ1bmN0aW9uKGUpe3RoaXMucGFyZW50UmVjb3JkPWUucGFy
        ZW50UmVjb3JkLHRoaXMuY2hpbGRSZWNvcmQ9ZS5jaGlsZFJlY29yZCx0aGlz
        LmZpcnN0UmVjb3JkPWUuZmlyc3RSZWNvcmQsdGhpcy5maXJzdFJlY29yZEtp
        bmQ9ZS5maXJzdFJlY29yZEtpbmQsdGhpcy5maXJzdFJlY29yZE5hbWU9ZS5m
        aXJzdFJlY29yZE5hbWUsdGhpcy5zZWNvbmRSZWNvcmQ9ZS5zZWNvbmRSZWNv
        cmQsdGhpcy5zZWNvbmRSZWNvcmRLaW5kPWUuc2Vjb25kUmVjb3JkS2luZCx0
        aGlzLnNlY29uZFJlY29yZE5hbWU9ZS5zZWNvbmRSZWNvcmROYW1lLHRoaXMu
        Y2hhbmdlVHlwZT1lLmNoYW5nZVR5cGUsdGhpcy5zdG9yZT1lLnN0b3JlLHRo
        aXMuY29tbWl0dGVkPXt9fSxEUy5SZWxhdGlvbnNoaXBDaGFuZ2VBZGQ9ZnVu
        Y3Rpb24oZSl7RFMuUmVsYXRpb25zaGlwQ2hhbmdlLmNhbGwodGhpcyxlKX0s
        RFMuUmVsYXRpb25zaGlwQ2hhbmdlUmVtb3ZlPWZ1bmN0aW9uKGUpe0RTLlJl
        bGF0aW9uc2hpcENoYW5nZS5jYWxsKHRoaXMsZSl9LERTLlJlbGF0aW9uc2hp
        cENoYW5nZS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBEUy5SZWxh
        dGlvbnNoaXBDaGFuZ2UoZSl9LERTLlJlbGF0aW9uc2hpcENoYW5nZUFkZC5j
        cmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBEUy5SZWxhdGlvbnNoaXBD
        aGFuZ2VBZGQoZSl9LERTLlJlbGF0aW9uc2hpcENoYW5nZVJlbW92ZS5jcmVh
        dGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBEUy5SZWxhdGlvbnNoaXBDaGFu
        Z2VSZW1vdmUoZSl9LERTLk9uZVRvTWFueUNoYW5nZT17fSxEUy5PbmVUb05v
        bmVDaGFuZ2U9e30sRFMuTWFueVRvTm9uZUNoYW5nZT17fSxEUy5PbmVUb09u
        ZUNoYW5nZT17fSxEUy5NYW55VG9NYW55Q2hhbmdlPXt9LERTLlJlbGF0aW9u
        c2hpcENoYW5nZS5fY3JlYXRlQ2hhbmdlPWZ1bmN0aW9uKGUpe3JldHVybiJh
        ZGQiPT09ZS5jaGFuZ2VUeXBlP0RTLlJlbGF0aW9uc2hpcENoYW5nZUFkZC5j
        cmVhdGUoZSk6InJlbW92ZSI9PT1lLmNoYW5nZVR5cGU/RFMuUmVsYXRpb25z
        aGlwQ2hhbmdlUmVtb3ZlLmNyZWF0ZShlKTp2b2lkIDB9LERTLlJlbGF0aW9u
        c2hpcENoYW5nZS5kZXRlcm1pbmVSZWxhdGlvbnNoaXBUeXBlPWZ1bmN0aW9u
        KGUsdCl7dmFyIHIsbixpPXQua2V5LGE9dC5raW5kLG89ZS5pbnZlcnNlRm9y
        KGkpO3JldHVybiBvJiYocj1vLm5hbWUsbj1vLmtpbmQpLG8/ImJlbG9uZ3NU
        byI9PT1uPyJiZWxvbmdzVG8iPT09YT8ib25lVG9PbmUiOiJtYW55VG9PbmUi
        OiJiZWxvbmdzVG8iPT09YT8ib25lVG9NYW55IjoibWFueVRvTWFueSI6ImJl
        bG9uZ3NUbyI9PT1hPyJvbmVUb05vbmUiOiJtYW55VG9Ob25lIn0sRFMuUmVs
        YXRpb25zaGlwQ2hhbmdlLmNyZWF0ZUNoYW5nZT1mdW5jdGlvbihlLHQscixu
        KXt2YXIgaSxhPWUuY29uc3RydWN0b3I7cmV0dXJuIGk9RFMuUmVsYXRpb25z
        aGlwQ2hhbmdlLmRldGVybWluZVJlbGF0aW9uc2hpcFR5cGUoYSxuKSwib25l
        VG9NYW55Ij09PWk/RFMuT25lVG9NYW55Q2hhbmdlLmNyZWF0ZUNoYW5nZShl
        LHQscixuKToibWFueVRvT25lIj09PWk/RFMuT25lVG9NYW55Q2hhbmdlLmNy
        ZWF0ZUNoYW5nZSh0LGUscixuKToib25lVG9Ob25lIj09PWk/RFMuT25lVG9O
        b25lQ2hhbmdlLmNyZWF0ZUNoYW5nZShlLHQscixuKToibWFueVRvTm9uZSI9
        PT1pP0RTLk1hbnlUb05vbmVDaGFuZ2UuY3JlYXRlQ2hhbmdlKGUsdCxyLG4p
        OiJvbmVUb09uZSI9PT1pP0RTLk9uZVRvT25lQ2hhbmdlLmNyZWF0ZUNoYW5n
        ZShlLHQscixuKToibWFueVRvTWFueSI9PT1pP0RTLk1hbnlUb01hbnlDaGFu
        Z2UuY3JlYXRlQ2hhbmdlKGUsdCxyLG4pOnZvaWQgMH0sRFMuT25lVG9Ob25l
        Q2hhbmdlLmNyZWF0ZUNoYW5nZT1mdW5jdGlvbihlLHQscixuKXt2YXIgaT1u
        LmtleSxhPURTLlJlbGF0aW9uc2hpcENoYW5nZS5fY3JlYXRlQ2hhbmdlKHtw
        YXJlbnRSZWNvcmQ6dCxjaGlsZFJlY29yZDplLGZpcnN0UmVjb3JkOmUsc3Rv
        cmU6cixjaGFuZ2VUeXBlOm4uY2hhbmdlVHlwZSxmaXJzdFJlY29yZE5hbWU6
        aSxmaXJzdFJlY29yZEtpbmQ6ImJlbG9uZ3NUbyJ9KTtyZXR1cm4gci5hZGRS
        ZWxhdGlvbnNoaXBDaGFuZ2VGb3IoZSxpLHQsbnVsbCxhKSxhfSxEUy5NYW55
        VG9Ob25lQ2hhbmdlLmNyZWF0ZUNoYW5nZT1mdW5jdGlvbihlLHQscixuKXt2
        YXIgaT1uLmtleSxhPURTLlJlbGF0aW9uc2hpcENoYW5nZS5fY3JlYXRlQ2hh
        bmdlKHtwYXJlbnRSZWNvcmQ6ZSxjaGlsZFJlY29yZDp0LHNlY29uZFJlY29y
        ZDplLHN0b3JlOnIsY2hhbmdlVHlwZTpuLmNoYW5nZVR5cGUsc2Vjb25kUmVj
        b3JkTmFtZTpuLmtleSxzZWNvbmRSZWNvcmRLaW5kOiJoYXNNYW55In0pO3Jl
        dHVybiByLmFkZFJlbGF0aW9uc2hpcENoYW5nZUZvcihlLGksdCxudWxsLGEp
        LGF9LERTLk1hbnlUb01hbnlDaGFuZ2UuY3JlYXRlQ2hhbmdlPWZ1bmN0aW9u
        KGUsdCxyLG4pe3ZhciBpPW4ua2V5LGE9RFMuUmVsYXRpb25zaGlwQ2hhbmdl
        Ll9jcmVhdGVDaGFuZ2Uoe3BhcmVudFJlY29yZDp0LGNoaWxkUmVjb3JkOmUs
        Zmlyc3RSZWNvcmQ6ZSxzZWNvbmRSZWNvcmQ6dCxmaXJzdFJlY29yZEtpbmQ6
        Imhhc01hbnkiLHNlY29uZFJlY29yZEtpbmQ6Imhhc01hbnkiLHN0b3JlOnIs
        Y2hhbmdlVHlwZTpuLmNoYW5nZVR5cGUsZmlyc3RSZWNvcmROYW1lOml9KTty
        ZXR1cm4gci5hZGRSZWxhdGlvbnNoaXBDaGFuZ2VGb3IoZSxpLHQsbnVsbCxh
        KSxhfSxEUy5PbmVUb09uZUNoYW5nZS5jcmVhdGVDaGFuZ2U9ZnVuY3Rpb24o
        ZSx0LHIsbil7dmFyIGk7bi5wYXJlbnRUeXBlP2k9bi5wYXJlbnRUeXBlLmlu
        dmVyc2VGb3Iobi5rZXkpLm5hbWU6bi5rZXkmJihpPW4ua2V5KTt2YXIgYT1E
        Uy5SZWxhdGlvbnNoaXBDaGFuZ2UuX2NyZWF0ZUNoYW5nZSh7cGFyZW50UmVj
        b3JkOnQsY2hpbGRSZWNvcmQ6ZSxmaXJzdFJlY29yZDplLHNlY29uZFJlY29y
        ZDp0LGZpcnN0UmVjb3JkS2luZDoiYmVsb25nc1RvIixzZWNvbmRSZWNvcmRL
        aW5kOiJiZWxvbmdzVG8iLHN0b3JlOnIsY2hhbmdlVHlwZTpuLmNoYW5nZVR5
        cGUsZmlyc3RSZWNvcmROYW1lOml9KTtyZXR1cm4gci5hZGRSZWxhdGlvbnNo
        aXBDaGFuZ2VGb3IoZSxpLHQsbnVsbCxhKSxhfSxEUy5PbmVUb09uZUNoYW5n
        ZS5tYWludGFpbkludmFyaWFudD1mdW5jdGlvbihlLHIsbixpKXtpZigiYWRk
        Ij09PWUuY2hhbmdlVHlwZSYmci5yZWNvcmRJc01hdGVyaWFsaXplZChuKSl7
        dmFyIGE9dChuLGkpO2lmKGEpe3ZhciBvPURTLk9uZVRvT25lQ2hhbmdlLmNy
        ZWF0ZUNoYW5nZShuLGEscix7cGFyZW50VHlwZTplLnBhcmVudFR5cGUsaGFz
        TWFueU5hbWU6ZS5oYXNNYW55TmFtZSxjaGFuZ2VUeXBlOiJyZW1vdmUiLGtl
        eTplLmtleX0pO3IuYWRkUmVsYXRpb25zaGlwQ2hhbmdlRm9yKG4saSxlLnBh
        cmVudFJlY29yZCxudWxsLG8pLG8uc3luYygpfX19LERTLk9uZVRvTWFueUNo
        YW5nZS5jcmVhdGVDaGFuZ2U9ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk7bi5w
        YXJlbnRUeXBlPyhpPW4ucGFyZW50VHlwZS5pbnZlcnNlRm9yKG4ua2V5KS5u
        YW1lLERTLk9uZVRvTWFueUNoYW5nZS5tYWludGFpbkludmFyaWFudChuLHIs
        ZSxpKSk6bi5rZXkmJihpPW4ua2V5KTt2YXIgYT1EUy5SZWxhdGlvbnNoaXBD
        aGFuZ2UuX2NyZWF0ZUNoYW5nZSh7cGFyZW50UmVjb3JkOnQsY2hpbGRSZWNv
        cmQ6ZSxmaXJzdFJlY29yZDplLHNlY29uZFJlY29yZDp0LGZpcnN0UmVjb3Jk
        S2luZDoiYmVsb25nc1RvIixzZWNvbmRSZWNvcmRLaW5kOiJoYXNNYW55Iixz
        dG9yZTpyLGNoYW5nZVR5cGU6bi5jaGFuZ2VUeXBlLGZpcnN0UmVjb3JkTmFt
        ZTppfSk7cmV0dXJuIHIuYWRkUmVsYXRpb25zaGlwQ2hhbmdlRm9yKGUsaSx0
        LGEuZ2V0U2Vjb25kUmVjb3JkTmFtZSgpLGEpLGF9LERTLk9uZVRvTWFueUNo
        YW5nZS5tYWludGFpbkludmFyaWFudD1mdW5jdGlvbihlLHIsbixpKXtpZigi
        YWRkIj09PWUuY2hhbmdlVHlwZSYmbil7dmFyIGE9dChuLGkpO2lmKGEpe3Zh
        ciBvPURTLk9uZVRvTWFueUNoYW5nZS5jcmVhdGVDaGFuZ2UobixhLHIse3Bh
        cmVudFR5cGU6ZS5wYXJlbnRUeXBlLGhhc01hbnlOYW1lOmUuaGFzTWFueU5h
        bWUsY2hhbmdlVHlwZToicmVtb3ZlIixrZXk6ZS5rZXl9KTtyLmFkZFJlbGF0
        aW9uc2hpcENoYW5nZUZvcihuLGksZS5wYXJlbnRSZWNvcmQsby5nZXRTZWNv
        bmRSZWNvcmROYW1lKCksbyksby5zeW5jKCl9fX0sRFMuUmVsYXRpb25zaGlw
        Q2hhbmdlLnByb3RvdHlwZT17Z2V0U2Vjb25kUmVjb3JkTmFtZTpmdW5jdGlv
        bigpe3ZhciBlLHQ9dGhpcy5zZWNvbmRSZWNvcmROYW1lO2lmKCF0KXtpZihl
        PXRoaXMuc2Vjb25kUmVjb3JkLCFlKXJldHVybjt2YXIgcj10aGlzLmZpcnN0
        UmVjb3JkLmNvbnN0cnVjdG9yLG49ci5pbnZlcnNlRm9yKHRoaXMuZmlyc3RS
        ZWNvcmROYW1lKTt0aGlzLnNlY29uZFJlY29yZE5hbWU9bi5uYW1lfXJldHVy
        biB0aGlzLnNlY29uZFJlY29yZE5hbWV9LGdldEZpcnN0UmVjb3JkTmFtZTpm
        dW5jdGlvbigpe3ZhciBlPXRoaXMuZmlyc3RSZWNvcmROYW1lO3JldHVybiBl
        fSxkZXN0cm95OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jaGlsZFJlY29yZCx0
        PXRoaXMuZ2V0Rmlyc3RSZWNvcmROYW1lKCkscj10aGlzLmdldFNlY29uZFJl
        Y29yZE5hbWUoKSxuPXRoaXMuc3RvcmU7bi5yZW1vdmVSZWxhdGlvbnNoaXBD
        aGFuZ2VGb3IoZSx0LHRoaXMucGFyZW50UmVjb3JkLHIsdGhpcy5jaGFuZ2VU
        eXBlKX0sZ2V0U2Vjb25kUmVjb3JkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMu
        c2Vjb25kUmVjb3JkfSxnZXRGaXJzdFJlY29yZDpmdW5jdGlvbigpe3JldHVy
        biB0aGlzLmZpcnN0UmVjb3JkfSxjb2FsZXNjZTpmdW5jdGlvbigpe3ZhciBl
        PXRoaXMuc3RvcmUucmVsYXRpb25zaGlwQ2hhbmdlUGFpcnNGb3IodGhpcy5m
        aXJzdFJlY29yZCk7bihlLGZ1bmN0aW9uKGUpe3ZhciB0PWUuYWRkLHI9ZS5y
        ZW1vdmU7dCYmciYmKHQuZGVzdHJveSgpLHIuZGVzdHJveSgpKX0pfX0sRFMu
        UmVsYXRpb25zaGlwQ2hhbmdlQWRkLnByb3RvdHlwZT1FbWJlci5jcmVhdGUo
        RFMuUmVsYXRpb25zaGlwQ2hhbmdlLmNyZWF0ZSh7fSkpLERTLlJlbGF0aW9u
        c2hpcENoYW5nZVJlbW92ZS5wcm90b3R5cGU9RW1iZXIuY3JlYXRlKERTLlJl
        bGF0aW9uc2hpcENoYW5nZS5jcmVhdGUoe30pKSxEUy5SZWxhdGlvbnNoaXBD
        aGFuZ2VBZGQucHJvdG90eXBlLmNoYW5nZVR5cGU9ImFkZCIsRFMuUmVsYXRp
        b25zaGlwQ2hhbmdlQWRkLnByb3RvdHlwZS5zeW5jPWZ1bmN0aW9uKCl7dmFy
        IG49dGhpcy5nZXRTZWNvbmRSZWNvcmROYW1lKCksaT10aGlzLmdldEZpcnN0
        UmVjb3JkTmFtZSgpLGE9dGhpcy5nZXRGaXJzdFJlY29yZCgpLG89dGhpcy5n
        ZXRTZWNvbmRSZWNvcmQoKTtvIGluc3RhbmNlb2YgRFMuTW9kZWwmJmEgaW5z
        dGFuY2VvZiBEUy5Nb2RlbCYmKCJiZWxvbmdzVG8iPT09dGhpcy5zZWNvbmRS
        ZWNvcmRLaW5kP28uc3VzcGVuZFJlbGF0aW9uc2hpcE9ic2VydmVycyhmdW5j
        dGlvbigpe3IobyxuLGEpfSk6Imhhc01hbnkiPT09dGhpcy5zZWNvbmRSZWNv
        cmRLaW5kJiZvLnN1c3BlbmRSZWxhdGlvbnNoaXBPYnNlcnZlcnMoZnVuY3Rp
        b24oKXt2YXIgcj10KG8sbik7ZShyKSYmci5hZGRPYmplY3QoYSl9KSksYSBp
        bnN0YW5jZW9mIERTLk1vZGVsJiZvIGluc3RhbmNlb2YgRFMuTW9kZWwmJnQo
        YSxpKSE9PW8mJigiYmVsb25nc1RvIj09PXRoaXMuZmlyc3RSZWNvcmRLaW5k
        P2Euc3VzcGVuZFJlbGF0aW9uc2hpcE9ic2VydmVycyhmdW5jdGlvbigpe3Io
        YSxpLG8pfSk6Imhhc01hbnkiPT09dGhpcy5maXJzdFJlY29yZEtpbmQmJmEu
        c3VzcGVuZFJlbGF0aW9uc2hpcE9ic2VydmVycyhmdW5jdGlvbigpe3ZhciBy
        PXQoYSxpKTtlKHIpJiZyLmFkZE9iamVjdChvKX0pKSx0aGlzLmNvYWxlc2Nl
        KCl9LERTLlJlbGF0aW9uc2hpcENoYW5nZVJlbW92ZS5wcm90b3R5cGUuY2hh
        bmdlVHlwZT0icmVtb3ZlIixEUy5SZWxhdGlvbnNoaXBDaGFuZ2VSZW1vdmUu
        cHJvdG90eXBlLnN5bmM9ZnVuY3Rpb24oKXt2YXIgbj10aGlzLmdldFNlY29u
        ZFJlY29yZE5hbWUoKSxpPXRoaXMuZ2V0Rmlyc3RSZWNvcmROYW1lKCksYT10
        aGlzLmdldEZpcnN0UmVjb3JkKCksbz10aGlzLmdldFNlY29uZFJlY29yZCgp
        O28gaW5zdGFuY2VvZiBEUy5Nb2RlbCYmYSBpbnN0YW5jZW9mIERTLk1vZGVs
        JiYoImJlbG9uZ3NUbyI9PT10aGlzLnNlY29uZFJlY29yZEtpbmQ/by5zdXNw
        ZW5kUmVsYXRpb25zaGlwT2JzZXJ2ZXJzKGZ1bmN0aW9uKCl7cihvLG4sbnVs
        bCl9KToiaGFzTWFueSI9PT10aGlzLnNlY29uZFJlY29yZEtpbmQmJm8uc3Vz
        cGVuZFJlbGF0aW9uc2hpcE9ic2VydmVycyhmdW5jdGlvbigpe3ZhciByPXQo
        byxuKTtlKHIpJiZyLnJlbW92ZU9iamVjdChhKX0pKSxhIGluc3RhbmNlb2Yg
        RFMuTW9kZWwmJnQoYSxpKSYmKCJiZWxvbmdzVG8iPT09dGhpcy5maXJzdFJl
        Y29yZEtpbmQ/YS5zdXNwZW5kUmVsYXRpb25zaGlwT2JzZXJ2ZXJzKGZ1bmN0
        aW9uKCl7cihhLGksbnVsbCl9KToiaGFzTWFueSI9PT10aGlzLmZpcnN0UmVj
        b3JkS2luZCYmYS5zdXNwZW5kUmVsYXRpb25zaGlwT2JzZXJ2ZXJzKGZ1bmN0
        aW9uKCl7dmFyIHI9dChhLGkpO2UocikmJnIucmVtb3ZlT2JqZWN0KG8pfSkp
        LHRoaXMuY29hbGVzY2UoKX19KCksZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUs
        bixpKXtyZXR1cm4gRW1iZXIuY29tcHV0ZWQoZnVuY3Rpb24oZSxuKXt2YXIg
        YT10KHRoaXMsImRhdGEiKSxvPXQodGhpcywic3RvcmUiKTtpZigyPT09YXJn
        dW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09bj9udWxsOm47dmFyIHM9
        YS5saW5rcyYmYS5saW5rc1tlXSxjPWFbZV07aWYocihjKSl7aWYocyl7dmFy
        IHU9RW1iZXIuUlNWUC5kZWZlcigpO3JldHVybiBvLmZpbmRCZWxvbmdzVG8o
        dGhpcyxzLGksdSksRFMuUHJvbWlzZU9iamVjdC5jcmVhdGUoe3Byb21pc2U6
        dS5wcm9taXNlfSl9cmV0dXJuIG51bGx9dmFyIGQ9by5mZXRjaFJlY29yZChj
        KXx8RW1iZXIuUlNWUC5yZXNvbHZlKGMpO3JldHVybiBEUy5Qcm9taXNlT2Jq
        ZWN0LmNyZWF0ZSh7cHJvbWlzZTpkfSl9KS5wcm9wZXJ0eSgiZGF0YSIpLm1l
        dGEoaSl9dmFyIHQ9RW1iZXIuZ2V0LHI9KEVtYmVyLnNldCxFbWJlci5pc05v
        bmUpO0RTLmJlbG9uZ3NUbz1mdW5jdGlvbihuLGkpeyJvYmplY3QiPT10eXBl
        b2YgbiYmKGk9bixuPXZvaWQgMCksaT1pfHx7fTt2YXIgYT17dHlwZTpuLGlz
        UmVsYXRpb25zaGlwOiEwLG9wdGlvbnM6aSxraW5kOiJiZWxvbmdzVG8ifTty
        ZXR1cm4gaS5hc3luYz9lKG4saSxhKTpFbWJlci5jb21wdXRlZChmdW5jdGlv
        bihlLGkpe3ZhciBhLG8scz10KHRoaXMsImRhdGEiKSxjPXQodGhpcywic3Rv
        cmUiKTtyZXR1cm4gbz0ic3RyaW5nIj09dHlwZW9mIG4/Yy5tb2RlbEZvcihu
        KTpuLDI9PT1hcmd1bWVudHMubGVuZ3RoP3ZvaWQgMD09PWk/bnVsbDppOihh
        PXNbZV0scihhKT9udWxsOihjLmZldGNoUmVjb3JkKGEpLGEpKX0pLnByb3Bl
        cnR5KCJkYXRhIikubWV0YShhKX0sRFMuTW9kZWwucmVvcGVuKHtiZWxvbmdz
        VG9XaWxsQ2hhbmdlOkVtYmVyLmJlZm9yZU9ic2VydmVyKGZ1bmN0aW9uKGUs
        cil7aWYodChlLCJpc0xvYWRlZCIpKXt2YXIgbj10KGUscik7aWYobil7dmFy
        IGk9dChlLCJzdG9yZSIpLGE9RFMuUmVsYXRpb25zaGlwQ2hhbmdlLmNyZWF0
        ZUNoYW5nZShlLG4saSx7a2V5OnIsa2luZDoiYmVsb25nc1RvIixjaGFuZ2VU
        eXBlOiJyZW1vdmUifSk7YS5zeW5jKCksdGhpcy5fY2hhbmdlc1RvU3luY1ty
        XT1hfX19KSxiZWxvbmdzVG9EaWRDaGFuZ2U6RW1iZXIuaW1tZWRpYXRlT2Jz
        ZXJ2ZXIoZnVuY3Rpb24oZSxyKXtpZih0KGUsImlzTG9hZGVkIikpe3ZhciBu
        PXQoZSxyKTtpZihuKXt2YXIgaT10KGUsInN0b3JlIiksYT1EUy5SZWxhdGlv
        bnNoaXBDaGFuZ2UuY3JlYXRlQ2hhbmdlKGUsbixpLHtrZXk6cixraW5kOiJi
        ZWxvbmdzVG8iLGNoYW5nZVR5cGU6ImFkZCJ9KTthLnN5bmMoKX19ZGVsZXRl
        IHRoaXMuX2NoYW5nZXNUb1N5bmNbcl19KX0pfSgpLGZ1bmN0aW9uKCl7ZnVu
        Y3Rpb24gZShlLHIsbil7cmV0dXJuIEVtYmVyLmNvbXB1dGVkKGZ1bmN0aW9u
        KGUpe2lmKHRoaXMuX3JlbGF0aW9uc2hpcHNbZV0pcmV0dXJuIHRoaXMuX3Jl
        bGF0aW9uc2hpcHNbZV07dmFyIGk9RW1iZXIuUlNWUC5kZWZlcigpLGE9dCh0
        aGlzLGUscixmdW5jdGlvbih0LHIpe3ZhciBhPXIubGlua3MmJnIubGlua3Nb
        ZV07cmV0dXJuIGE/dC5maW5kSGFzTWFueSh0aGlzLGEsbixpKTp0LmZpbmRN
        YW55KHRoaXMscltlXSxuLnR5cGUsaSl9KSxvPWkucHJvbWlzZS50aGVuKGZ1
        bmN0aW9uKCl7cmV0dXJuIGF9KTtyZXR1cm4gRFMuUHJvbWlzZUFycmF5LmNy
        ZWF0ZSh7cHJvbWlzZTpvfSl9KS5wcm9wZXJ0eSgiZGF0YSIpLm1ldGEobil9
        ZnVuY3Rpb24gdChlLHQscixhKXt2YXIgbz1lLl9yZWxhdGlvbnNoaXBzO2lm
        KG9bdF0pcmV0dXJuIG9bdF07dmFyIHM9bihlLCJkYXRhIiksYz1uKGUsInN0
        b3JlIiksdT1vW3RdPWEuY2FsbChlLGMscyk7cmV0dXJuIGkodSx7b3duZXI6
        ZSxuYW1lOnQsaXNQb2x5bW9ycGhpYzpyLnBvbHltb3JwaGljfSl9ZnVuY3Rp
        b24gcihyLG4pe249bnx8e307dmFyIGk9e3R5cGU6cixpc1JlbGF0aW9uc2hp
        cDohMCxvcHRpb25zOm4sa2luZDoiaGFzTWFueSJ9O3JldHVybiBuLmFzeW5j
        P2UocixuLGkpOkVtYmVyLmNvbXB1dGVkKGZ1bmN0aW9uKGUpe3JldHVybiB0
        KHRoaXMsZSxuLGZ1bmN0aW9uKHQscil7cmV0dXJuIHJbZV0sdC5maW5kTWFu
        eSh0aGlzLHJbZV0saS50eXBlKX0pfSkucHJvcGVydHkoImRhdGEiKS5tZXRh
        KGkpfXZhciBuPUVtYmVyLmdldCxpPShFbWJlci5zZXQsRW1iZXIuc2V0UHJv
        cGVydGllcyk7RFMuaGFzTWFueT1mdW5jdGlvbihlLHQpe3JldHVybiJvYmpl
        Y3QiPT10eXBlb2YgZSYmKHQ9ZSxlPXZvaWQgMCkscihlLHQpfX0oKSxmdW5j
        dGlvbigpe3ZhciBlPUVtYmVyLmdldDtFbWJlci5zZXQsRFMuTW9kZWwucmVv
        cGVuKHtkaWREZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihlLHQscil7aWYociBp
        bnN0YW5jZW9mIEVtYmVyLkRlc2NyaXB0b3Ipe3ZhciBuPXIubWV0YSgpO24u
        aXNSZWxhdGlvbnNoaXAmJiJiZWxvbmdzVG8iPT09bi5raW5kJiYoRW1iZXIu
        YWRkT2JzZXJ2ZXIoZSx0LG51bGwsImJlbG9uZ3NUb0RpZENoYW5nZSIpLEVt
        YmVyLmFkZEJlZm9yZU9ic2VydmVyKGUsdCxudWxsLCJiZWxvbmdzVG9XaWxs
        Q2hhbmdlIikpLG4ucGFyZW50VHlwZT1lLmNvbnN0cnVjdG9yfX19KSxEUy5N
        b2RlbC5yZW9wZW5DbGFzcyh7dHlwZUZvclJlbGF0aW9uc2hpcDpmdW5jdGlv
        bih0KXt2YXIgcj1lKHRoaXMsInJlbGF0aW9uc2hpcHNCeU5hbWUiKS5nZXQo
        dCk7cmV0dXJuIHImJnIudHlwZX0saW52ZXJzZUZvcjpmdW5jdGlvbih0KXtm
        dW5jdGlvbiByKHQsbixpKXtpPWl8fFtdO3ZhciBhPWUobiwicmVsYXRpb25z
        aGlwcyIpO2lmKGEpe3ZhciBvPWEuZ2V0KHQpO3JldHVybiBvJiZpLnB1c2gu
        YXBwbHkoaSxhLmdldCh0KSksdC5zdXBlcmNsYXNzJiZyKHQuc3VwZXJjbGFz
        cyxuLGkpLGl9fXZhciBuPXRoaXMudHlwZUZvclJlbGF0aW9uc2hpcCh0KTtp
        ZighbilyZXR1cm4gbnVsbDt2YXIgaT10aGlzLm1ldGFGb3JQcm9wZXJ0eSh0
        KS5vcHRpb25zO2lmKG51bGw9PT1pLmludmVyc2UpcmV0dXJuIG51bGw7dmFy
        IGEsbztpZihpLmludmVyc2UpYT1pLmludmVyc2Usbz1FbWJlci5nZXQobiwi
        cmVsYXRpb25zaGlwc0J5TmFtZSIpLmdldChhKS5raW5kO2Vsc2V7dmFyIHM9
        cih0aGlzLG4pO2lmKDA9PT1zLmxlbmd0aClyZXR1cm4gbnVsbDthPXNbMF0u
        bmFtZSxvPXNbMF0ua2luZH1yZXR1cm57dHlwZTpuLG5hbWU6YSxraW5kOm99
        fSxyZWxhdGlvbnNoaXBzOkVtYmVyLmNvbXB1dGVkKGZ1bmN0aW9uKCl7dmFy
        IGU9bmV3IEVtYmVyLk1hcFdpdGhEZWZhdWx0KHtkZWZhdWx0VmFsdWU6ZnVu
        Y3Rpb24oKXtyZXR1cm5bXX19KTtyZXR1cm4gdGhpcy5lYWNoQ29tcHV0ZWRQ
        cm9wZXJ0eShmdW5jdGlvbih0LHIpe2lmKHIuaXNSZWxhdGlvbnNoaXApeyJz
        dHJpbmciPT10eXBlb2Ygci50eXBlJiYoci50eXBlPXRoaXMuc3RvcmUubW9k
        ZWxGb3Ioci50eXBlKSk7dmFyIG49ZS5nZXQoci50eXBlKTtuLnB1c2goe25h
        bWU6dCxraW5kOnIua2luZH0pfX0pLGV9KSxyZWxhdGlvbnNoaXBOYW1lczpF
        bWJlci5jb21wdXRlZChmdW5jdGlvbigpe3ZhciBlPXtoYXNNYW55OltdLGJl
        bG9uZ3NUbzpbXX07cmV0dXJuIHRoaXMuZWFjaENvbXB1dGVkUHJvcGVydHko
        ZnVuY3Rpb24odCxyKXtyLmlzUmVsYXRpb25zaGlwJiZlW3Iua2luZF0ucHVz
        aCh0KX0pLGV9KSxyZWxhdGVkVHlwZXM6RW1iZXIuY29tcHV0ZWQoZnVuY3Rp
        b24oKXt2YXIgdCxyPUVtYmVyLkEoKTtyZXR1cm4gdGhpcy5lYWNoQ29tcHV0
        ZWRQcm9wZXJ0eShmdW5jdGlvbihuLGkpe2kuaXNSZWxhdGlvbnNoaXAmJih0
        PWkudHlwZSwic3RyaW5nIj09dHlwZW9mIHQmJih0PWUodGhpcyx0LCExKXx8
        dGhpcy5zdG9yZS5tb2RlbEZvcih0KSksci5jb250YWlucyh0KXx8ci5wdXNo
        KHQpKX0pLHJ9KSxyZWxhdGlvbnNoaXBzQnlOYW1lOkVtYmVyLmNvbXB1dGVk
        KGZ1bmN0aW9uKCl7dmFyIGUsdD1FbWJlci5NYXAuY3JlYXRlKCk7cmV0dXJu
        IHRoaXMuZWFjaENvbXB1dGVkUHJvcGVydHkoZnVuY3Rpb24ocixuKXtuLmlz
        UmVsYXRpb25zaGlwJiYobi5rZXk9cixlPW4udHlwZSxlfHwiaGFzTWFueSIh
        PT1uLmtpbmQ/ZXx8KGU9cik6ZT1FbWJlci5TdHJpbmcuc2luZ3VsYXJpemUo
        ciksInN0cmluZyI9PXR5cGVvZiBlJiYobi50eXBlPXRoaXMuc3RvcmUubW9k
        ZWxGb3IoZSkpLHQuc2V0KHIsbikpfSksdH0pLGZpZWxkczpFbWJlci5jb21w
        dXRlZChmdW5jdGlvbigpe3ZhciBlPUVtYmVyLk1hcC5jcmVhdGUoKTtyZXR1
        cm4gdGhpcy5lYWNoQ29tcHV0ZWRQcm9wZXJ0eShmdW5jdGlvbih0LHIpe3Iu
        aXNSZWxhdGlvbnNoaXA/ZS5zZXQodCxyLmtpbmQpOnIuaXNBdHRyaWJ1dGUm
        JmUuc2V0KHQsImF0dHJpYnV0ZSIpfSksZX0pLGVhY2hSZWxhdGlvbnNoaXA6
        ZnVuY3Rpb24odCxyKXtlKHRoaXMsInJlbGF0aW9uc2hpcHNCeU5hbWUiKS5m
        b3JFYWNoKGZ1bmN0aW9uKGUsbil7dC5jYWxsKHIsZSxuKX0pfSxlYWNoUmVs
        YXRlZFR5cGU6ZnVuY3Rpb24odCxyKXtlKHRoaXMsInJlbGF0ZWRUeXBlcyIp
        LmZvckVhY2goZnVuY3Rpb24oZSl7dC5jYWxsKHIsZSl9KX19KSxEUy5Nb2Rl
        bC5yZW9wZW4oe2VhY2hSZWxhdGlvbnNoaXA6ZnVuY3Rpb24oZSx0KXt0aGlz
        LmNvbnN0cnVjdG9yLmVhY2hSZWxhdGlvbnNoaXAoZSx0KX19KX0oKSxmdW5j
        dGlvbigpe3ZhciBlPUVtYmVyLmdldDtFbWJlci5zZXQ7dmFyIHQ9RW1iZXIu
        cnVuLm9uY2Uscj1FbWJlci5FbnVtZXJhYmxlVXRpbHMuZm9yRWFjaDtEUy5S
        ZWNvcmRBcnJheU1hbmFnZXI9RW1iZXIuT2JqZWN0LmV4dGVuZCh7aW5pdDpm
        dW5jdGlvbigpe3RoaXMuZmlsdGVyZWRSZWNvcmRBcnJheXM9RW1iZXIuTWFw
        V2l0aERlZmF1bHQuY3JlYXRlKHtkZWZhdWx0VmFsdWU6ZnVuY3Rpb24oKXty
        ZXR1cm5bXX19KSx0aGlzLmNoYW5nZWRSZWNvcmRzPVtdfSxyZWNvcmREaWRD
        aGFuZ2U6ZnVuY3Rpb24oZSl7dGhpcy5jaGFuZ2VkUmVjb3Jkcy5wdXNoKGUp
        LHQodGhpcyx0aGlzLnVwZGF0ZVJlY29yZEFycmF5cyl9LHJlY29yZEFycmF5
        c0ZvclJlY29yZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5fcmVjb3JkQXJyYXlz
        PWUuX3JlY29yZEFycmF5c3x8RW1iZXIuT3JkZXJlZFNldC5jcmVhdGUoKSxl
        Ll9yZWNvcmRBcnJheXN9LHVwZGF0ZVJlY29yZEFycmF5czpmdW5jdGlvbigp
        e3IodGhpcy5jaGFuZ2VkUmVjb3JkcyxmdW5jdGlvbih0KXt2YXIgbixpPXQu
        Y29uc3RydWN0b3IsYT10aGlzLmZpbHRlcmVkUmVjb3JkQXJyYXlzLmdldChp
        KTtyKGEsZnVuY3Rpb24ocil7bj1lKHIsImZpbHRlckZ1bmN0aW9uIiksdGhp
        cy51cGRhdGVSZWNvcmRBcnJheShyLG4saSx0KX0sdGhpcyk7dmFyIG89dC5f
        bG9hZGluZ1JlY29yZEFycmF5cztpZihvKXtmb3IodmFyIHM9MCxjPW8ubGVu
        Z3RoO2M+cztzKyspb1tzXS5sb2FkZWRSZWNvcmQoKTt0Ll9sb2FkaW5nUmVj
        b3JkQXJyYXlzPVtdfX0sdGhpcyksdGhpcy5jaGFuZ2VkUmVjb3Jkcz1bXX0s
        dXBkYXRlUmVjb3JkQXJyYXk6ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk7aT10
        P3Qobik6ITA7dmFyIGE9dGhpcy5yZWNvcmRBcnJheXNGb3JSZWNvcmQobik7
        aT8oYS5hZGQoZSksZS5hZGRSZWNvcmQobikpOml8fChhLnJlbW92ZShlKSxl
        LnJlbW92ZVJlY29yZChuKSl9LHJlbW92ZTpmdW5jdGlvbihlKXt2YXIgdD1l
        Ll9yZWNvcmRBcnJheXM7dCYmcih0LGZ1bmN0aW9uKHQpe3QucmVtb3ZlUmVj
        b3JkKGUpfSl9LHVwZGF0ZUZpbHRlcjpmdW5jdGlvbih0LHIsbil7Zm9yKHZh
        ciBpLGE9dGhpcy5zdG9yZS50eXBlTWFwRm9yKHIpLG89YS5yZWNvcmRzLHM9
        MCxjPW8ubGVuZ3RoO2M+cztzKyspaT1vW3NdLGUoaSwiaXNEZWxldGVkIil8
        fGUoaSwiaXNFbXB0eSIpfHx0aGlzLnVwZGF0ZVJlY29yZEFycmF5KHQsbixy
        LGkpfSxjcmVhdGVNYW55QXJyYXk6ZnVuY3Rpb24oZSx0KXt2YXIgbj1EUy5N
        YW55QXJyYXkuY3JlYXRlKHt0eXBlOmUsY29udGVudDp0LHN0b3JlOnRoaXMu
        c3RvcmV9KTtyZXR1cm4gcih0LGZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMucmVj
        b3JkQXJyYXlzRm9yUmVjb3JkKGUpO3QuYWRkKG4pfSx0aGlzKSxufSxyZWdp
        c3RlckZpbHRlcmVkUmVjb3JkQXJyYXk6ZnVuY3Rpb24oZSx0LHIpe3ZhciBu
        PXRoaXMuZmlsdGVyZWRSZWNvcmRBcnJheXMuZ2V0KHQpO24ucHVzaChlKSx0
        aGlzLnVwZGF0ZUZpbHRlcihlLHQscil9LHJlZ2lzdGVyV2FpdGluZ1JlY29y
        ZEFycmF5OmZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5fbG9hZGluZ1JlY29yZEFy
        cmF5c3x8W107ci5wdXNoKHQpLGUuX2xvYWRpbmdSZWNvcmRBcnJheXM9cn19
        KX0oKSxmdW5jdGlvbigpe3ZhciBlPUVtYmVyLmdldDtFbWJlci5zZXQ7dmFy
        IHQ9RW1iZXIuQXJyYXlQb2x5ZmlsbHMubWFwLHI9WyJkZXNjcmlwdGlvbiIs
        ImZpbGVOYW1lIiwibGluZU51bWJlciIsIm1lc3NhZ2UiLCJuYW1lIiwibnVt
        YmVyIiwic3RhY2siXTtEUy5JbnZhbGlkRXJyb3I9ZnVuY3Rpb24oZSl7dmFy
        IHQ9RXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywiVGhl
        IGJhY2tlbmQgcmVqZWN0ZWQgdGhlIGNvbW1pdCBiZWNhdXNlIGl0IHdhcyBp
        bnZhbGlkOiAiK0VtYmVyLmluc3BlY3QoZSkpO3RoaXMuZXJyb3JzPWU7Zm9y
        KHZhciBuPTAsaT1yLmxlbmd0aDtpPm47bisrKXRoaXNbcltuXV09dFtyW25d
        XX0sRFMuSW52YWxpZEVycm9yLnByb3RvdHlwZT1FbWJlci5jcmVhdGUoRXJy
        b3IucHJvdG90eXBlKSxEUy5BZGFwdGVyPUVtYmVyLk9iamVjdC5leHRlbmQo
        RFMuX01hcHBhYmxlLHtmaW5kOkVtYmVyLnJlcXVpcmVkKEZ1bmN0aW9uKSxm
        aW5kQWxsOm51bGwsZmluZFF1ZXJ5Om51bGwsZ2VuZXJhdGVJZEZvclJlY29y
        ZDpudWxsLHNlcmlhbGl6ZTpmdW5jdGlvbih0LHIpe3JldHVybiBlKHQsInN0
        b3JlIikuc2VyaWFsaXplckZvcih0LmNvbnN0cnVjdG9yLnR5cGVLZXkpLnNl
        cmlhbGl6ZSh0LHIpfSxjcmVhdGVSZWNvcmQ6RW1iZXIucmVxdWlyZWQoRnVu
        Y3Rpb24pLHVwZGF0ZVJlY29yZDpFbWJlci5yZXF1aXJlZChGdW5jdGlvbiks
        ZGVsZXRlUmVjb3JkOkVtYmVyLnJlcXVpcmVkKEZ1bmN0aW9uKSxmaW5kTWFu
        eTpmdW5jdGlvbihlLHIsbil7dmFyIGk9dC5jYWxsKG4sZnVuY3Rpb24odCl7
        cmV0dXJuIHRoaXMuZmluZChlLHIsdCl9LHRoaXMpO3JldHVybiBFbWJlci5S
        U1ZQLmFsbChpKX19KX0oKSxmdW5jdGlvbigpe3ZhciBlPUVtYmVyLmdldCx0
        PUVtYmVyLlN0cmluZy5mbXQscj1FbWJlci5FbnVtZXJhYmxlVXRpbHMuaW5k
        ZXhPZixuPTA7RFMuRml4dHVyZUFkYXB0ZXI9RFMuQWRhcHRlci5leHRlbmQo
        e3NlcmlhbGl6ZXI6bnVsbCxzaW11bGF0ZVJlbW90ZVJlc3BvbnNlOiEwLGxh
        dGVuY3k6NTAsZml4dHVyZXNGb3JUeXBlOmZ1bmN0aW9uKGUpe2lmKGUuRklY
        VFVSRVMpe3ZhciByPUVtYmVyLkEoZS5GSVhUVVJFUyk7cmV0dXJuIHIubWFw
        KGZ1bmN0aW9uKGUpe3ZhciByPXR5cGVvZiBlLmlkO2lmKCJudW1iZXIiIT09
        ciYmInN0cmluZyIhPT1yKXRocm93IG5ldyBFcnJvcih0KCJ0aGUgaWQgcHJv
        cGVydHkgbXVzdCBiZSBkZWZpbmVkIGFzIGEgbnVtYmVyIG9yIHN0cmluZyBm
        b3IgZml4dHVyZSAlQCIsW2VdKSk7cmV0dXJuIGUuaWQ9ZS5pZCsiIixlfSl9
        cmV0dXJuIG51bGx9LHF1ZXJ5Rml4dHVyZXM6ZnVuY3Rpb24oKXt9LHVwZGF0
        ZUZpeHR1cmVzOmZ1bmN0aW9uKGUsdCl7ZS5GSVhUVVJFU3x8KGUuRklYVFVS
        RVM9W10pO3ZhciByPWUuRklYVFVSRVM7dGhpcy5kZWxldGVMb2FkZWRGaXh0
        dXJlKGUsdCksci5wdXNoKHQpfSxtb2NrSlNPTjpmdW5jdGlvbihlLHQscil7
        cmV0dXJuIGUuc2VyaWFsaXplckZvcih0KS5zZXJpYWxpemUocix7aW5jbHVk
        ZUlkOiEwfSl9LGdlbmVyYXRlSWRGb3JSZWNvcmQ6ZnVuY3Rpb24oKXtyZXR1
        cm4iZml4dHVyZS0iK24rK30sZmluZDpmdW5jdGlvbihlLHQscil7dmFyIG4s
        aT10aGlzLmZpeHR1cmVzRm9yVHlwZSh0KTtyZXR1cm4gaSYmKG49RW1iZXIu
        QShpKS5maW5kUHJvcGVydHkoImlkIixyKSksbj90aGlzLnNpbXVsYXRlUmVt
        b3RlQ2FsbChmdW5jdGlvbigpe3JldHVybiBufSx0aGlzKTp2b2lkIDB9LGZp
        bmRNYW55OmZ1bmN0aW9uKGUsdCxuKXt2YXIgaT10aGlzLmZpeHR1cmVzRm9y
        VHlwZSh0KTtyZXR1cm4gaSYmKGk9aS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0
        dXJuLTEhPT1yKG4sZS5pZCl9KSksaT90aGlzLnNpbXVsYXRlUmVtb3RlQ2Fs
        bChmdW5jdGlvbigpe3JldHVybiBpfSx0aGlzKTp2b2lkIDB9LGZpbmRBbGw6
        ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLmZpeHR1cmVzRm9yVHlwZSh0KTty
        ZXR1cm4gdGhpcy5zaW11bGF0ZVJlbW90ZUNhbGwoZnVuY3Rpb24oKXtyZXR1
        cm4gcn0sdGhpcyl9LGZpbmRRdWVyeTpmdW5jdGlvbihlLHQscil7dmFyIG49
        dGhpcy5maXh0dXJlc0ZvclR5cGUodCk7cmV0dXJuIG49dGhpcy5xdWVyeUZp
        eHR1cmVzKG4scix0KSxuP3RoaXMuc2ltdWxhdGVSZW1vdGVDYWxsKGZ1bmN0
        aW9uKCl7cmV0dXJuIG59LHRoaXMpOnZvaWQgMH0sY3JlYXRlUmVjb3JkOmZ1
        bmN0aW9uKGUsdCxyKXt2YXIgbj10aGlzLm1vY2tKU09OKGUsdCxyKTtyZXR1
        cm4gdGhpcy51cGRhdGVGaXh0dXJlcyh0LG4pLHRoaXMuc2ltdWxhdGVSZW1v
        dGVDYWxsKGZ1bmN0aW9uKCl7cmV0dXJuIG59LHRoaXMpfSx1cGRhdGVSZWNv
        cmQ6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXRoaXMubW9ja0pTT04oZSx0LHIp
        O3JldHVybiB0aGlzLnVwZGF0ZUZpeHR1cmVzKHQsbiksdGhpcy5zaW11bGF0
        ZVJlbW90ZUNhbGwoZnVuY3Rpb24oKXtyZXR1cm4gbn0sdGhpcyl9LGRlbGV0
        ZVJlY29yZDpmdW5jdGlvbihlLHQscil7dmFyIG49dGhpcy5tb2NrSlNPTihl
        LHQscik7cmV0dXJuIHRoaXMuZGVsZXRlTG9hZGVkRml4dHVyZSh0LG4pLHRo
        aXMuc2ltdWxhdGVSZW1vdGVDYWxsKGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9
        KX0sZGVsZXRlTG9hZGVkRml4dHVyZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRo
        aXMuZmluZEV4aXN0aW5nRml4dHVyZShlLHQpO2lmKG4pe3ZhciBpPXIoZS5G
        SVhUVVJFUyxuKTtyZXR1cm4gZS5GSVhUVVJFUy5zcGxpY2UoaSwxKSwhMH19
        LGZpbmRFeGlzdGluZ0ZpeHR1cmU6ZnVuY3Rpb24odCxyKXt2YXIgbj10aGlz
        LmZpeHR1cmVzRm9yVHlwZSh0KSxpPWUociwiaWQiKTtyZXR1cm4gdGhpcy5m
        aW5kRml4dHVyZUJ5SWQobixpKX0sZmluZEZpeHR1cmVCeUlkOmZ1bmN0aW9u
        KHQscil7cmV0dXJuIEVtYmVyLkEodCkuZmluZChmdW5jdGlvbih0KXtyZXR1
        cm4iIitlKHQsImlkIik9PSIiK3I/ITA6ITF9KX0sc2ltdWxhdGVSZW1vdGVD
        YWxsOmZ1bmN0aW9uKHQscil7dmFyIG49dGhpcztyZXR1cm4gbmV3IEVtYmVy
        LlJTVlAuUHJvbWlzZShmdW5jdGlvbihpKXtlKG4sInNpbXVsYXRlUmVtb3Rl
        UmVzcG9uc2UiKT9FbWJlci5ydW4ubGF0ZXIoZnVuY3Rpb24oKXtpKHQuY2Fs
        bChyKSl9LGUobiwibGF0ZW5jeSIpKTpFbWJlci5ydW4ub25jZShmdW5jdGlv
        bigpe2kodC5jYWxsKHIpKX0pfSl9fSl9KCksZnVuY3Rpb24oKXtmdW5jdGlv
        biBlKGUpe3JldHVybiBudWxsPT1lP251bGw6ZSsiIn12YXIgdD1FbWJlci5n
        ZXQ7RW1iZXIuc2V0O3ZhciByPUVtYmVyLkFycmF5UG9seWZpbGxzLmZvckVh
        Y2gsbj1FbWJlci5BcnJheVBvbHlmaWxscy5tYXA7RFMuUkVTVFNlcmlhbGl6
        ZXI9RFMuSlNPTlNlcmlhbGl6ZXIuZXh0ZW5kKHtub3JtYWxpemU6ZnVuY3Rp
        b24oZSx0LHIpe3JldHVybiB0aGlzLm5vcm1hbGl6ZUlkKHQpLHRoaXMubm9y
        bWFsaXplVXNpbmdEZWNsYXJlZE1hcHBpbmcoZSx0KSx0aGlzLm5vcm1hbGl6
        ZUF0dHJpYnV0ZXMoZSx0KSx0aGlzLm5vcm1hbGl6ZVJlbGF0aW9uc2hpcHMo
        ZSx0KSx0aGlzLm5vcm1hbGl6ZUhhc2gmJnRoaXMubm9ybWFsaXplSGFzaFty
        XT90aGlzLm5vcm1hbGl6ZUhhc2hbcl0odCk6dGhpcy5fc3VwZXIoZSx0LHIp
        fSxub3JtYWxpemVQYXlsb2FkOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR9LG5v
        cm1hbGl6ZUlkOmZ1bmN0aW9uKGUpe3ZhciByPXQodGhpcywicHJpbWFyeUtl
        eSIpOyJpZCIhPT1yJiYoZS5pZD1lW3JdLGRlbGV0ZSBlW3JdKX0sbm9ybWFs
        aXplVXNpbmdEZWNsYXJlZE1hcHBpbmc6ZnVuY3Rpb24oZSxyKXt2YXIgbixp
        LGE9dCh0aGlzLCJhdHRycyIpO2lmKGEpZm9yKGkgaW4gYSluPWFbaV0scltp
        XT1yW25dLGRlbGV0ZSByW25dfSxub3JtYWxpemVBdHRyaWJ1dGVzOmZ1bmN0
        aW9uKGUsdCl7dmFyIHI7dGhpcy5rZXlGb3JBdHRyaWJ1dGUmJmUuZWFjaEF0
        dHJpYnV0ZShmdW5jdGlvbihlKXtyPXRoaXMua2V5Rm9yQXR0cmlidXRlKGUp
        LGUhPT1yJiYodFtlXT10W3JdLGRlbGV0ZSB0W3JdKX0sdGhpcyl9LG5vcm1h
        bGl6ZVJlbGF0aW9uc2hpcHM6ZnVuY3Rpb24oZSx0KXt2YXIgcjt0aGlzLmtl
        eUZvclJlbGF0aW9uc2hpcCYmZS5lYWNoUmVsYXRpb25zaGlwKGZ1bmN0aW9u
        KGUsbil7cj10aGlzLmtleUZvclJlbGF0aW9uc2hpcChlLG4ua2luZCksZSE9
        PXImJih0W2VdPXRbcl0sZGVsZXRlIHRbcl0pfSx0aGlzKX0sZXh0cmFjdFNp
        bmdsZTpmdW5jdGlvbih0LG4saSxhKXtpPXRoaXMubm9ybWFsaXplUGF5bG9h
        ZChuLGkpO3ZhciBvLHM9bi50eXBlS2V5O2Zvcih2YXIgYyBpbiBpKXt2YXIg
        dT10aGlzLnR5cGVGb3JSb290KGMpLGQ9dT09PXM7ZCYmImFycmF5IiE9PUVt
        YmVyLnR5cGVPZihpW2NdKT9vPXRoaXMubm9ybWFsaXplKG4saVtjXSxjKToo
        dC5tb2RlbEZvcih1KSxyLmNhbGwoaVtjXSxmdW5jdGlvbihyKXt2YXIgbj10
        aGlzLnR5cGVGb3JSb290KGMpLGk9dC5tb2RlbEZvcihuKSxzPXQuc2VyaWFs
        aXplckZvcihpKTtyPXMubm9ybWFsaXplKGkscixjKTt2YXIgdT1kJiYhYSYm
        IW8sbD1kJiZlKHIuaWQpPT09YTt1fHxsP289cjp0LnB1c2gobixyKX0sdGhp
        cykpfXJldHVybiBvfSxleHRyYWN0QXJyYXk6ZnVuY3Rpb24oZSx0LHIpe3I9
        dGhpcy5ub3JtYWxpemVQYXlsb2FkKHQscik7dmFyIGksYT10LnR5cGVLZXk7
        Zm9yKHZhciBvIGluIHIpe3ZhciBzPW8sYz0hMTsiXyI9PT1vLmNoYXJBdCgw
        KSYmKGM9ITAscz1vLnN1YnN0cigxKSk7dmFyIHU9dGhpcy50eXBlRm9yUm9v
        dChzKSxkPWUubW9kZWxGb3IodSksbD1lLnNlcmlhbGl6ZXJGb3IoZCksaD0h
        YyYmdT09PWEsZj1uLmNhbGwocltvXSxmdW5jdGlvbihlKXtyZXR1cm4gbC5u
        b3JtYWxpemUoZCxlLG8pfSx0aGlzKTtoP2k9ZjplLnB1c2hNYW55KHUsZil9
        cmV0dXJuIGl9LHB1c2hQYXlsb2FkOmZ1bmN0aW9uKGUsdCl7dD10aGlzLm5v
        cm1hbGl6ZVBheWxvYWQobnVsbCx0KTtmb3IodmFyIHIgaW4gdCl7dmFyIGk9
        dGhpcy50eXBlRm9yUm9vdChyKSxhPWUubW9kZWxGb3IoaSksbz1uLmNhbGwo
        dFtyXSxmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5ub3JtYWxpemUoYSxlLHIp
        fSx0aGlzKTtlLnB1c2hNYW55KGksbyl9fSx0eXBlRm9yUm9vdDpmdW5jdGlv
        bihlKXtyZXR1cm4gRW1iZXIuU3RyaW5nLnNpbmd1bGFyaXplKGUpfSxzZXJp
        YWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3VwZXIuYXBwbHkodGhp
        cyxhcmd1bWVudHMpfSxzZXJpYWxpemVJbnRvSGFzaDpmdW5jdGlvbihlLHQs
        cixuKXtlW3QudHlwZUtleV09dGhpcy5zZXJpYWxpemUocixuKX0sc2VyaWFs
        aXplUG9seW1vcnBoaWNUeXBlOmZ1bmN0aW9uKGUscixuKXt2YXIgaT1uLmtl
        eSxhPXQoZSxpKTtpPXRoaXMua2V5Rm9yQXR0cmlidXRlP3RoaXMua2V5Rm9y
        QXR0cmlidXRlKGkpOmkscltpKyJUeXBlIl09YS5jb25zdHJ1Y3Rvci50eXBl
        S2V5fX0pfSgpLGZ1bmN0aW9uKCl7dmFyIGU9RW1iZXIuZ2V0O0VtYmVyLnNl
        dDt2YXIgdD1FbWJlci5BcnJheVBvbHlmaWxscy5mb3JFYWNoO0RTLlJFU1RB
        ZGFwdGVyPURTLkFkYXB0ZXIuZXh0ZW5kKHtkZWZhdWx0U2VyaWFsaXplcjoi
        X3Jlc3QiLGZpbmQ6ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLmFqYXgo
        dGhpcy5idWlsZFVSTCh0LnR5cGVLZXksciksIkdFVCIpfSxmaW5kQWxsOmZ1
        bmN0aW9uKGUsdCxyKXt2YXIgbjtyZXR1cm4gciYmKG49e3NpbmNlOnJ9KSx0
        aGlzLmFqYXgodGhpcy5idWlsZFVSTCh0LnR5cGVLZXkpLCJHRVQiLHtkYXRh
        Om59KX0sZmluZFF1ZXJ5OmZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy5h
        amF4KHRoaXMuYnVpbGRVUkwodC50eXBlS2V5KSwiR0VUIix7ZGF0YTpyfSl9
        LGZpbmRNYW55OmZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy5hamF4KHRo
        aXMuYnVpbGRVUkwodC50eXBlS2V5KSwiR0VUIix7ZGF0YTp7aWRzOnJ9fSl9
        LGZpbmRIYXNNYW55OmZ1bmN0aW9uKHQscixuKXt2YXIgaT1lKHIsImlkIiks
        YT1yLmNvbnN0cnVjdG9yLnR5cGVLZXk7cmV0dXJuIHRoaXMuYWpheCh0aGlz
        LnVybFByZWZpeChuLHRoaXMuYnVpbGRVUkwoYSxpKSksIkdFVCIpfSxmaW5k
        QmVsb25nc1RvOmZ1bmN0aW9uKHQscixuKXt2YXIgaT1lKHIsImlkIiksYT1y
        LmNvbnN0cnVjdG9yLnR5cGVLZXk7cmV0dXJuIHRoaXMuYWpheCh0aGlzLnVy
        bFByZWZpeChuLHRoaXMuYnVpbGRVUkwoYSxpKSksIkdFVCIpfSxjcmVhdGVS
        ZWNvcmQ6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXt9LGk9ZS5zZXJpYWxpemVy
        Rm9yKHQudHlwZUtleSk7cmV0dXJuIGkuc2VyaWFsaXplSW50b0hhc2gobix0
        LHIse2luY2x1ZGVJZDohMH0pLHRoaXMuYWpheCh0aGlzLmJ1aWxkVVJMKHQu
        dHlwZUtleSksIlBPU1QiLHtkYXRhOm59KX0sdXBkYXRlUmVjb3JkOmZ1bmN0
        aW9uKHQscixuKXt2YXIgaT17fSxhPXQuc2VyaWFsaXplckZvcihyLnR5cGVL
        ZXkpO2Euc2VyaWFsaXplSW50b0hhc2goaSxyLG4pO3ZhciBvPWUobiwiaWQi
        KTtyZXR1cm4gdGhpcy5hamF4KHRoaXMuYnVpbGRVUkwoci50eXBlS2V5LG8p
        LCJQVVQiLHtkYXRhOml9KX0sZGVsZXRlUmVjb3JkOmZ1bmN0aW9uKHQscixu
        KXt2YXIgaT1lKG4sImlkIik7cmV0dXJuIHRoaXMuYWpheCh0aGlzLmJ1aWxk
        VVJMKHIudHlwZUtleSxpKSwiREVMRVRFIil9LGJ1aWxkVVJMOmZ1bmN0aW9u
        KHQscil7dmFyIG49W10saT1lKHRoaXMsImhvc3QiKSxhPXRoaXMudXJsUHJl
        Zml4KCk7cmV0dXJuIHQmJm4ucHVzaCh0aGlzLnBhdGhGb3JUeXBlKHQpKSxy
        JiZuLnB1c2gociksYSYmbi51bnNoaWZ0KGEpLG49bi5qb2luKCIvIiksIWkm
        Jm4mJihuPSIvIituKSxufSx1cmxQcmVmaXg6ZnVuY3Rpb24odCxyKXt2YXIg
        bj1lKHRoaXMsImhvc3QiKSxpPWUodGhpcywibmFtZXNwYWNlIiksYT1bXTty
        ZXR1cm4gdD8iLyI9PT10LmNoYXJBdCgwKT9uJiYodD10LnNsaWNlKDEpLGEu
        cHVzaChuKSk6L15odHRwKHMpPzpcL1wvLy50ZXN0KHQpfHxhLnB1c2gocik6
        KG4mJmEucHVzaChuKSxpJiZhLnB1c2goaSkpLHQmJmEucHVzaCh0KSxhLmpv
        aW4oIi8iKX0scGF0aEZvclR5cGU6ZnVuY3Rpb24oZSl7cmV0dXJuIEVtYmVy
        LlN0cmluZy5wbHVyYWxpemUoZSl9LGFqYXhFcnJvcjpmdW5jdGlvbihlKXty
        ZXR1cm4gZSYmKGUudGhlbj1udWxsKSxlfSxhamF4OmZ1bmN0aW9uKGUscixu
        KXt2YXIgaT10aGlzO3JldHVybiBuZXcgRW1iZXIuUlNWUC5Qcm9taXNlKGZ1
        bmN0aW9uKGEsbyl7aWYobj1ufHx7fSxuLnVybD1lLG4udHlwZT1yLG4uZGF0
        YVR5cGU9Impzb24iLG4uY29udGV4dD1pLG4uZGF0YSYmIkdFVCIhPT1yJiYo
        bi5jb250ZW50VHlwZT0iYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYt
        OCIsbi5kYXRhPUpTT04uc3RyaW5naWZ5KG4uZGF0YSkpLHZvaWQgMCE9PWku
        aGVhZGVycyl7dmFyIHM9aS5oZWFkZXJzO24uYmVmb3JlU2VuZD1mdW5jdGlv
        bihlKXt0LmNhbGwoRW1iZXIua2V5cyhzKSxmdW5jdGlvbih0KXtlLnNldFJl
        cXVlc3RIZWFkZXIodCxzW3RdKX0pfX1uLnN1Y2Nlc3M9ZnVuY3Rpb24oZSl7
        RW1iZXIucnVuKG51bGwsYSxlKX0sbi5lcnJvcj1mdW5jdGlvbihlKXtFbWJl
        ci5ydW4obnVsbCxvLGkuYWpheEVycm9yKGUpKX0sRW1iZXIuJC5hamF4KG4p
        fSl9fSl9KCksZnVuY3Rpb24oKXtEUy5Nb2RlbC5yZW9wZW4oe19kZWJ1Z0lu
        Zm86ZnVuY3Rpb24oKXt2YXIgZT1bImlkIl0sdD17YmVsb25nc1RvOltdLGhh
        c01hbnk6W119LHI9W107dGhpcy5lYWNoQXR0cmlidXRlKGZ1bmN0aW9uKHQp
        e2UucHVzaCh0KX0sdGhpcyksdGhpcy5lYWNoUmVsYXRpb25zaGlwKGZ1bmN0
        aW9uKGUsbil7dFtuLmtpbmRdLnB1c2goZSksci5wdXNoKGUpfSk7dmFyIG49
        W3tuYW1lOiJBdHRyaWJ1dGVzIixwcm9wZXJ0aWVzOmUsZXhwYW5kOiEwfSx7
        bmFtZToiQmVsb25ncyBUbyIscHJvcGVydGllczp0LmJlbG9uZ3NUbyxleHBh
        bmQ6ITB9LHtuYW1lOiJIYXMgTWFueSIscHJvcGVydGllczp0Lmhhc01hbnks
        ZXhwYW5kOiEwfSx7bmFtZToiRmxhZ3MiLHByb3BlcnRpZXM6WyJpc0xvYWRl
        ZCIsImlzRGlydHkiLCJpc1NhdmluZyIsImlzRGVsZXRlZCIsImlzRXJyb3Ii
        LCJpc05ldyIsImlzVmFsaWQiXX1dO3JldHVybntwcm9wZXJ0eUluZm86e2lu
        Y2x1ZGVPdGhlclByb3BlcnRpZXM6ITAsZ3JvdXBzOm4sZXhwZW5zaXZlUHJv
        cGVydGllczpyfX19fSl9KCksZnVuY3Rpb24oKXtFbWJlci5TdHJpbmcucGx1
        cmFsaXplPWZ1bmN0aW9uKGUpe3JldHVybiBFbWJlci5JbmZsZWN0b3IuaW5m
        bGVjdG9yLnBsdXJhbGl6ZShlKX0sRW1iZXIuU3RyaW5nLnNpbmd1bGFyaXpl
        PWZ1bmN0aW9uKGUpe3JldHVybiBFbWJlci5JbmZsZWN0b3IuaW5mbGVjdG9y
        LnNpbmd1bGFyaXplKGUpfX0oKSxmdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0
        KXtmb3IodmFyIHI9MCxuPXQubGVuZ3RoO24+cjtyKyspZS51bmNvdW50YWJs
        ZVt0W3JdXT0hMH1mdW5jdGlvbiB0KGUsdCl7Zm9yKHZhciByLG49MCxpPXQu
        bGVuZ3RoO2k+bjtuKyspcj10W25dLGUuaXJyZWd1bGFyW3JbMF1dPXJbMV0s
        ZS5pcnJlZ3VsYXJJbnZlcnNlW3JbMV1dPXJbMF19ZnVuY3Rpb24gcihyKXty
        PXJ8fHt9LHIudW5jb3VudGFibGU9ci51bmNvdW50YWJsZXx8e30sci5pcnJl
        Z3VsYXJQYWlycz1yLmlycmVndWxhclBhaXJzfHx7fTt2YXIgbj10aGlzLnJ1
        bGVzPXtwbHVyYWxzOnIucGx1cmFsc3x8W10sc2luZ3VsYXI6ci5zaW5ndWxh
        cnx8W10saXJyZWd1bGFyOnt9LGlycmVndWxhckludmVyc2U6e30sdW5jb3Vu
        dGFibGU6e319O2UobixyLnVuY291bnRhYmxlKSx0KG4sci5pcnJlZ3VsYXJQ
        YWlycyl9dmFyIG49L15ccyokLztyLnByb3RvdHlwZT17cGx1cmFsOmZ1bmN0
        aW9uKGUsdCl7dGhpcy5ydWxlcy5wbHVyYWxzLnB1c2goW2UsdF0pfSxzaW5n
        dWxhcjpmdW5jdGlvbihlLHQpe3RoaXMucnVsZXMuc2luZ3VsYXIucHVzaChb
        ZSx0XSl9LHVuY291bnRhYmxlOmZ1bmN0aW9uKHQpe2UodGhpcy5ydWxlcyxb
        dF0pfSxpcnJlZ3VsYXI6ZnVuY3Rpb24oZSxyKXt0KHRoaXMucnVsZXMsW1tl
        LHJdXSl9LHBsdXJhbGl6ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5pbmZs
        ZWN0KGUsdGhpcy5ydWxlcy5wbHVyYWxzLHRoaXMucnVsZXMuaXJyZWd1bGFy
        KX0sc2luZ3VsYXJpemU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuaW5mbGVj
        dChlLHRoaXMucnVsZXMuc2luZ3VsYXIsdGhpcy5ydWxlcy5pcnJlZ3VsYXJJ
        bnZlcnNlKX0saW5mbGVjdDpmdW5jdGlvbihlLHQscil7dmFyIGksYSxvLHMs
        Yyx1LGQsbDtpZihjPW4udGVzdChlKSlyZXR1cm4gZTtpZihzPWUudG9Mb3dl
        ckNhc2UoKSx1PXRoaXMucnVsZXMudW5jb3VudGFibGVbc10pcmV0dXJuIGU7
        aWYoZD1yJiZyW3NdKXJldHVybiBkO2Zvcih2YXIgaD10Lmxlbmd0aCxmPTA7
        aD5mJiYoaT10W2gtMV0sbD1pWzBdLCFsLnRlc3QoZSkpO2gtLSk7cmV0dXJu
        IGk9aXx8W10sbD1pWzBdLGE9aVsxXSxvPWUucmVwbGFjZShsLGEpfX0sRW1i
        ZXIuSW5mbGVjdG9yPXJ9KCksZnVuY3Rpb24oKXtFbWJlci5JbmZsZWN0b3Iu
        ZGVmYXVsdFJ1bGVzPXtwbHVyYWxzOltbLyQvLCJzIl0sWy9zJC9pLCJzIl0s
        Wy9eKGF4fHRlc3QpaXMkL2ksIiQxZXMiXSxbLyhvY3RvcHx2aXIpdXMkL2ks
        IiQxaSJdLFsvKG9jdG9wfHZpcilpJC9pLCIkMWkiXSxbLyhhbGlhc3xzdGF0
        dXMpJC9pLCIkMWVzIl0sWy8oYnUpcyQvaSwiJDFzZXMiXSxbLyhidWZmYWx8
        dG9tYXQpbyQvaSwiJDFvZXMiXSxbLyhbdGldKXVtJC9pLCIkMWEiXSxbLyhb
        dGldKWEkL2ksIiQxYSJdLFsvc2lzJC9pLCJzZXMiXSxbLyg/OihbXmZdKWZl
        fChbbHJdKWYpJC9pLCIkMSQydmVzIl0sWy8oaGl2ZSkkL2ksIiQxcyJdLFsv
        KFteYWVpb3V5XXxxdSl5JC9pLCIkMWllcyJdLFsvKHh8Y2h8c3N8c2gpJC9p
        LCIkMWVzIl0sWy8obWF0cnx2ZXJ0fGluZCkoPzppeHxleCkkL2ksIiQxaWNl
        cyJdLFsvXihtfGwpb3VzZSQvaSwiJDFpY2UiXSxbL14obXxsKWljZSQvaSwi
        JDFpY2UiXSxbL14ob3gpJC9pLCIkMWVuIl0sWy9eKG94ZW4pJC9pLCIkMSJd
        LFsvKHF1aXopJC9pLCIkMXplcyJdXSxzaW5ndWxhcjpbWy9zJC9pLCIiXSxb
        LyhzcykkL2ksIiQxIl0sWy8obilld3MkL2ksIiQxZXdzIl0sWy8oW3RpXSlh
        JC9pLCIkMXVtIl0sWy8oKGEpbmFseXwoYilhfChkKWlhZ25vfChwKWFyZW50
        aGV8KHApcm9nbm98KHMpeW5vcHwodCloZSkoc2lzfHNlcykkL2ksIiQxc2lz
        Il0sWy8oXmFuYWx5KShzaXN8c2VzKSQvaSwiJDFzaXMiXSxbLyhbXmZdKXZl
        cyQvaSwiJDFmZSJdLFsvKGhpdmUpcyQvaSwiJDEiXSxbLyh0aXZlKXMkL2ks
        IiQxIl0sWy8oW2xyXSl2ZXMkL2ksIiQxZiJdLFsvKFteYWVpb3V5XXxxdSlp
        ZXMkL2ksIiQxeSJdLFsvKHMpZXJpZXMkL2ksIiQxZXJpZXMiXSxbLyhtKW92
        aWVzJC9pLCIkMW92aWUiXSxbLyh4fGNofHNzfHNoKWVzJC9pLCIkMSJdLFsv
        XihtfGwpaWNlJC9pLCIkMW91c2UiXSxbLyhidXMpKGVzKT8kL2ksIiQxIl0s
        Wy8obyllcyQvaSwiJDEiXSxbLyhzaG9lKXMkL2ksIiQxIl0sWy8oY3Jpc3x0
        ZXN0KShpc3xlcykkL2ksIiQxaXMiXSxbL14oYSl4W2llXXMkL2ksIiQxeGlz
        Il0sWy8ob2N0b3B8dmlyKSh1c3xpKSQvaSwiJDF1cyJdLFsvKGFsaWFzfHN0
        YXR1cykoZXMpPyQvaSwiJDEiXSxbL14ob3gpZW4vaSwiJDEiXSxbLyh2ZXJ0
        fGluZClpY2VzJC9pLCIkMWV4Il0sWy8obWF0cilpY2VzJC9pLCIkMWl4Il0s
        Wy8ocXVpeil6ZXMkL2ksIiQxIl0sWy8oZGF0YWJhc2UpcyQvaSwiJDEiXV0s
        aXJyZWd1bGFyUGFpcnM6W1sicGVyc29uIiwicGVvcGxlIl0sWyJtYW4iLCJt
        ZW4iXSxbImNoaWxkIiwiY2hpbGRyZW4iXSxbInNleCIsInNleGVzIl0sWyJt
        b3ZlIiwibW92ZXMiXSxbImNvdyIsImtpbmUiXSxbInpvbWJpZSIsInpvbWJp
        ZXMiXV0sdW5jb3VudGFibGU6WyJlcXVpcG1lbnQiLCJpbmZvcm1hdGlvbiIs
        InJpY2UiLCJtb25leSIsInNwZWNpZXMiLCJzZXJpZXMiLCJmaXNoIiwic2hl
        ZXAiLCJqZWFucyIsInBvbGljZSJdfX0oKSxmdW5jdGlvbigpeyhFbWJlci5F
        WFRFTkRfUFJPVE9UWVBFUz09PSEwfHxFbWJlci5FWFRFTkRfUFJPVE9UWVBF
        Uy5TdHJpbmcpJiYoU3RyaW5nLnByb3RvdHlwZS5wbHVyYWxpemU9ZnVuY3Rp
        b24oKXtyZXR1cm4gRW1iZXIuU3RyaW5nLnBsdXJhbGl6ZSh0aGlzKX0sU3Ry
        aW5nLnByb3RvdHlwZS5zaW5ndWxhcml6ZT1mdW5jdGlvbigpe3JldHVybiBF
        bWJlci5TdHJpbmcuc2luZ3VsYXJpemUodGhpcyl9KX0oKSxmdW5jdGlvbigp
        e0VtYmVyLkluZmxlY3Rvci5pbmZsZWN0b3I9bmV3IEVtYmVyLkluZmxlY3Rv
        cihFbWJlci5JbmZsZWN0b3IuZGVmYXVsdFJ1bGVzKX0oKSxmdW5jdGlvbigp
        e2Z1bmN0aW9uIGUoZSxuLGksYSxvKXt2YXIgcz10KG4sImF0dHJzIik7cyYm
        aS5lYWNoUmVsYXRpb25zaGlwKGZ1bmN0aW9uKG4saSl7dmFyIGMsdSxkLGws
        aD1zW25dLGY9ZS5zZXJpYWxpemVyRm9yKGkudHlwZS50eXBlS2V5KSxwPXQo
        ZiwicHJpbWFyeUtleSIpO2lmKCJoYXNNYW55Ij09PWkua2luZCYmaCYmKCJh
        bHdheXMiPT09aC5lbWJlZGRlZHx8ImxvYWQiPT09aC5lbWJlZGRlZCkpe2lm
        KHU9Il8iK0VtYmVyLlN0cmluZy5wbHVyYWxpemUoaS50eXBlLnR5cGVLZXkp
        LGM9dGhpcy5rZXlGb3JSZWxhdGlvbnNoaXAobixpLmtpbmQpLGQ9dGhpcy5r
        ZXlGb3JBdHRyaWJ1dGUobiksbD1bXSwhYVtkXSlyZXR1cm47b1t1XT1vW3Vd
        fHxbXSxyKGFbZF0sZnVuY3Rpb24oZSl7bC5wdXNoKGVbcF0pLG9bdV0ucHVz
        aChlKX0pLGFbY109bCxkZWxldGUgYVtkXX19LG4pfXZhciB0PUVtYmVyLmdl
        dCxyPUVtYmVyLkVudW1lcmFibGVVdGlscy5mb3JFYWNoO0RTLkFjdGl2ZU1v
        ZGVsU2VyaWFsaXplcj1EUy5SRVNUU2VyaWFsaXplci5leHRlbmQoe2tleUZv
        ckF0dHJpYnV0ZTpmdW5jdGlvbihlKXtyZXR1cm4gRW1iZXIuU3RyaW5nLmRl
        Y2FtZWxpemUoZSl9LGtleUZvclJlbGF0aW9uc2hpcDpmdW5jdGlvbihlLHQp
        e3JldHVybiBlPUVtYmVyLlN0cmluZy5kZWNhbWVsaXplKGUpLCJiZWxvbmdz
        VG8iPT09dD9lKyJfaWQiOiJoYXNNYW55Ij09PXQ/RW1iZXIuU3RyaW5nLnNp
        bmd1bGFyaXplKGUpKyJfaWRzIjplfSxzZXJpYWxpemVIYXNNYW55OmZ1bmN0
        aW9uKGUscixuKXt2YXIgaT1uLmtleSxhPXQodGhpcywiYXR0cnMiKSxvPWEm
        JmFbaV0mJiJhbHdheXMiPT09YVtpXS5lbWJlZGRlZDtvJiYoclt0aGlzLmtl
        eUZvckF0dHJpYnV0ZShpKV09dChlLGkpLm1hcChmdW5jdGlvbihlKXt2YXIg
        cj1lLnNlcmlhbGl6ZSgpLG49dCh0aGlzLCJwcmltYXJ5S2V5Iik7cmV0dXJu
        IHJbbl09dChlLG4pLHJ9LHRoaXMpKX0sc2VyaWFsaXplSW50b0hhc2g6ZnVu
        Y3Rpb24oZSx0LHIsbil7dmFyIGk9RW1iZXIuU3RyaW5nLmRlY2FtZWxpemUo
        dC50eXBlS2V5KTtlW2ldPXRoaXMuc2VyaWFsaXplKHIsbil9LHNlcmlhbGl6
        ZVBvbHltb3JwaGljVHlwZTpmdW5jdGlvbihlLHIsbil7dmFyIGk9bi5rZXks
        YT10KGUsaSk7aT10aGlzLmtleUZvckF0dHJpYnV0ZShpKSxyW2krIl90eXBl
        Il09RW1iZXIuU3RyaW5nLmNhcGl0YWxpemUoYS5jb25zdHJ1Y3Rvci50eXBl
        S2V5KX0sdHlwZUZvclJvb3Q6ZnVuY3Rpb24oZSl7dmFyIHQ9RW1iZXIuU3Ry
        aW5nLmNhbWVsaXplKGUpO3JldHVybiBFbWJlci5TdHJpbmcuc2luZ3VsYXJp
        emUodCl9LG5vcm1hbGl6ZVJlbGF0aW9uc2hpcHM6ZnVuY3Rpb24oZSx0KXt2
        YXIgcixuO3RoaXMua2V5Rm9yUmVsYXRpb25zaGlwJiZlLmVhY2hSZWxhdGlv
        bnNoaXAoZnVuY3Rpb24oZSxpKXtpLm9wdGlvbnMucG9seW1vcnBoaWM/KHI9
        dGhpcy5rZXlGb3JBdHRyaWJ1dGUoZSksbj10W3JdLG4mJm4udHlwZSYmKG4u
        dHlwZT10aGlzLnR5cGVGb3JSb290KG4udHlwZSkpKToocj10aGlzLmtleUZv
        clJlbGF0aW9uc2hpcChlLGkua2luZCksbj10W3JdKSx0W2VdPW4sZSE9PXIm
        JmRlbGV0ZSB0W3JdfSx0aGlzKX0sZXh0cmFjdFNpbmdsZTpmdW5jdGlvbih0
        LHIsbixpLGEpe3ZhciBvPXRoaXMua2V5Rm9yQXR0cmlidXRlKHIudHlwZUtl
        eSkscz1uW29dO3JldHVybiBlKHQsdGhpcyxyLHMsbiksdGhpcy5fc3VwZXIo
        dCxyLG4saSxhKX0sZXh0cmFjdEFycmF5OmZ1bmN0aW9uKHQsbixpKXt2YXIg
        YT10aGlzLmtleUZvckF0dHJpYnV0ZShuLnR5cGVLZXkpLG89aVtFbWJlci5T
        dHJpbmcucGx1cmFsaXplKGEpXTtyZXR1cm4gcihvLGZ1bmN0aW9uKHIpe2Uo
        dCx0aGlzLG4scixpKX0sdGhpcyksdGhpcy5fc3VwZXIodCxuLGkpfX0pfSgp
        LGZ1bmN0aW9uKCl7dmFyIGU9RW1iZXIuRW51bWVyYWJsZVV0aWxzLmZvckVh
        Y2g7RFMuQWN0aXZlTW9kZWxBZGFwdGVyPURTLlJFU1RBZGFwdGVyLmV4dGVu
        ZCh7ZGVmYXVsdFNlcmlhbGl6ZXI6Il9hbXMiLHBhdGhGb3JUeXBlOmZ1bmN0
        aW9uKGUpe3ZhciB0PUVtYmVyLlN0cmluZy5kZWNhbWVsaXplKGUpO3JldHVy
        biBFbWJlci5TdHJpbmcucGx1cmFsaXplKHQpfSxhamF4RXJyb3I6ZnVuY3Rp
        b24odCl7dmFyIHI9dGhpcy5fc3VwZXIodCk7aWYodCYmNDIyPT09dC5zdGF0
        dXMpe3ZhciBuPUVtYmVyLiQucGFyc2VKU09OKHQucmVzcG9uc2VUZXh0KS5l
        cnJvcnMsaT17fTtyZXR1cm4gZShFbWJlci5rZXlzKG4pLGZ1bmN0aW9uKGUp
        e2lbRW1iZXIuU3RyaW5nLmNhbWVsaXplKGUpXT1uW2VdfSksbmV3IERTLklu
        dmFsaWRFcnJvcihpKX1yZXR1cm4gcn19KX0oKSxmdW5jdGlvbigpe0VtYmVy
        Lm9uTG9hZCgiRW1iZXIuQXBwbGljYXRpb24iLGZ1bmN0aW9uKGUpe2UuaW5p
        dGlhbGl6ZXIoe25hbWU6ImFjdGl2ZU1vZGVsQWRhcHRlciIsaW5pdGlhbGl6
        ZTpmdW5jdGlvbihlLHQpe3QucmVnaXN0ZXIoInNlcmlhbGl6ZXI6X2FtcyIs
        RFMuQWN0aXZlTW9kZWxTZXJpYWxpemVyKSx0LnJlZ2lzdGVyKCJhZGFwdGVy
        Ol9hbXMiLERTLkFjdGl2ZU1vZGVsQWRhcHRlcil9fSl9KX0oKX0oKSwidW5k
        ZWZpbmVkIj09dHlwZW9mIGxvY2F0aW9ufHwibG9jYWxob3N0IiE9PWxvY2F0
        aW9uLmhvc3RuYW1lJiYiMTI3LjAuMC4xIiE9PWxvY2F0aW9uLmhvc3RuYW1l
        fHxFbWJlci5Mb2dnZXIud2FybigiWW91IGFyZSBydW5uaW5nIGEgcHJvZHVj
        dGlvbiBidWlsZCBvZiBFbWJlciBvbiBsb2NhbGhvc3QgYW5kIHdvbid0IHJl
        Y2VpdmUgZGV0YWlsZWQgZXJyb3IgbWVzc2FnZXMuIElmIHlvdSB3YW50IGZ1
        bGwgZXJyb3IgbWVzc2FnZXMgcGxlYXNlIHVzZSB0aGUgbm9uLW1pbmlmaWVk
        IGJ1aWxkIHByb3ZpZGVkIG9uIHRoZSBFbWJlciB3ZWJzaXRlLiIpOw==
    http_version: 
  recorded_at: Wed, 27 Nov 2013 19:23:00 GMT
recorded_with: VCR 2.8.0
